/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.WebhookLogResponse;
import com.ultracart.admin.v2.models.WebhookLogSummariesResponse;
import com.ultracart.admin.v2.models.WebhooksResponse;
import com.ultracart.admin.v2.models.WebhookResponse;
import com.ultracart.admin.v2.models.Webhook;
import com.ultracart.admin.v2.models.WebhookSampleRequestResponse;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookApi
 */
public class WebhookApiTest {

    private final WebhookApi api = new WebhookApi();

    
    /**
     * Delete a webhook
     *
     * Delete a webhook on the UltraCart account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        Integer webhookOid = null;
        // api.deleteWebhook(webhookOid);

        // TODO: test validations
    }
    
    /**
     * Retrieve an individual log
     *
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogTest() throws ApiException {
        Integer webhookOid = null;
        String requestId = null;
        // WebhookLogResponse response = api.getWebhookLog(webhookOid, requestId);

        // TODO: test validations
    }
    
    /**
     * Retrieve the log summaries
     *
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookLogSummariesTest() throws ApiException {
        Integer webhookOid = null;
        Integer limit = null;
        Integer offset = null;
        String since = null;
        // WebhookLogSummariesResponse response = api.getWebhookLogSummaries(webhookOid, limit, offset, since);

        // TODO: test validations
    }
    
    /**
     * Retrieve webhooks
     *
     * Retrieves the webhooks associated with this application. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        Boolean placeholders = null;
        // WebhooksResponse response = api.getWebhooks(limit, offset, sort, placeholders);

        // TODO: test validations
    }
    
    /**
     * Add a webhook
     *
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertWebhookTest() throws ApiException {
        Webhook webhook = null;
        Boolean placeholders = null;
        // WebhookResponse response = api.insertWebhook(webhook, placeholders);

        // TODO: test validations
    }
    
    /**
     * Resend events to the webhook endpoint.
     *
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendEventTest() throws ApiException {
        Integer webhookOid = null;
        String eventName = null;
        // WebhookSampleRequestResponse response = api.resendEvent(webhookOid, eventName);

        // TODO: test validations
    }
    
    /**
     * Update a webhook
     *
     * Update a webhook on the account 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        Webhook webhook = null;
        Integer webhookOid = null;
        Boolean placeholders = null;
        // WebhookResponse response = api.updateWebhook(webhook, webhookOid, placeholders);

        // TODO: test validations
    }
    
}

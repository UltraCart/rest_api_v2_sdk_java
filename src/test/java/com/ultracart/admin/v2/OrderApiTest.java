/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.OrderResponse;
import com.ultracart.admin.v2.models.OrdersResponse;
import java.math.BigDecimal;
import com.ultracart.admin.v2.models.Order;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    
    /**
     * Cancel an order
     *
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws ApiException {
        String orderId = null;
        // BaseResponse response = api.cancelOrder(orderId);

        // TODO: test validations
    }
    
    /**
     * Delete an order
     *
     * Delete an order on the UltraCart account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOrderTest() throws ApiException {
        String orderId = null;
        // api.deleteOrder(orderId);

        // TODO: test validations
    }
    
    /**
     * Retrieve an order
     *
     * Retrieves a single order using the specified order id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String orderId = null;
        String expand = null;
        // OrderResponse response = api.getOrder(orderId, expand);

        // TODO: test validations
    }
    
    /**
     * Retrieve orders
     *
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrdersTest() throws ApiException {
        String orderId = null;
        String paymentMethod = null;
        String company = null;
        String firstName = null;
        String lastName = null;
        String city = null;
        String stateRegion = null;
        String postalCode = null;
        String countryCode = null;
        String phone = null;
        String email = null;
        String ccEmail = null;
        BigDecimal total = null;
        String screenBrandingThemeCode = null;
        String storefrontHostName = null;
        String creationDateBegin = null;
        String creationDateEnd = null;
        String paymentDateBegin = null;
        String paymentDateEnd = null;
        String shipmentDateBegin = null;
        String shipmentDateEnd = null;
        String rma = null;
        String purchaseOrderNumber = null;
        String itemId = null;
        String currentStage = null;
        String channelPartnerCode = null;
        String channelPartnerOrderId = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String expand = null;
        // OrdersResponse response = api.getOrders(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand);

        // TODO: test validations
    }
    
    /**
     * Resend receipt
     *
     * Resend the receipt for an order on the UltraCart account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendReceiptTest() throws ApiException {
        String orderId = null;
        // BaseResponse response = api.resendReceipt(orderId);

        // TODO: test validations
    }
    
    /**
     * Resend shipment confirmation
     *
     * Resend shipment confirmation for an order on the UltraCart account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendShipmentConfirmationTest() throws ApiException {
        String orderId = null;
        // BaseResponse response = api.resendShipmentConfirmation(orderId);

        // TODO: test validations
    }
    
    /**
     * Update an order
     *
     * Update a new order on the UltraCart account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        Order order = null;
        String orderId = null;
        String expand = null;
        // OrderResponse response = api.updateOrder(order, orderId, expand);

        // TODO: test validations
    }
    
}

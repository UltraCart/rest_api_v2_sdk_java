/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.EmailBaseTemplateListResponse;
import com.ultracart.admin.v2.models.EmailCampaign;
import com.ultracart.admin.v2.models.EmailCampaignResponse;
import com.ultracart.admin.v2.models.EmailCampaignsResponse;
import com.ultracart.admin.v2.models.EmailCommseq;
import com.ultracart.admin.v2.models.EmailCommseqEmail;
import com.ultracart.admin.v2.models.EmailCommseqEmailResponse;
import com.ultracart.admin.v2.models.EmailCommseqEmailsResponse;
import com.ultracart.admin.v2.models.EmailCommseqResponse;
import com.ultracart.admin.v2.models.EmailCommseqsResponse;
import com.ultracart.admin.v2.models.EmailCustomer;
import com.ultracart.admin.v2.models.EmailCustomerEditorUrlResponse;
import com.ultracart.admin.v2.models.EmailDashboardActivityResponse;
import com.ultracart.admin.v2.models.EmailDashboardStatsResponse;
import com.ultracart.admin.v2.models.EmailFlow;
import com.ultracart.admin.v2.models.EmailFlowResponse;
import com.ultracart.admin.v2.models.EmailFlowsResponse;
import com.ultracart.admin.v2.models.EmailList;
import com.ultracart.admin.v2.models.EmailListArchiveResponse;
import com.ultracart.admin.v2.models.EmailListCustomersResponse;
import com.ultracart.admin.v2.models.EmailListResponse;
import com.ultracart.admin.v2.models.EmailListSubscribeResponse;
import com.ultracart.admin.v2.models.EmailListsResponse;
import com.ultracart.admin.v2.models.EmailSegment;
import com.ultracart.admin.v2.models.EmailSegmentArchiveResponse;
import com.ultracart.admin.v2.models.EmailSegmentCustomersResponse;
import com.ultracart.admin.v2.models.EmailSegmentResponse;
import com.ultracart.admin.v2.models.EmailSegmentsResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainsResponse;
import com.ultracart.admin.v2.models.EmailStatSummaryResponse;
import com.ultracart.admin.v2.models.EmailTemplate;
import com.ultracart.admin.v2.models.EmailTemplatesResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorefrontApi
 */
@Ignore
public class StorefrontApiTest {

    private final StorefrontApi api = new StorefrontApi();

    
    /**
     * Archive email list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveEmailListTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        EmailListArchiveResponse response = api.archiveEmailList(storefrontOid, emailListUuid);

        // TODO: test validations
    }
    
    /**
     * Archive email segment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveEmailSegmentTest() throws ApiException {
        String storefrontOid = null;
        String emailSegmentUuid = null;
        EmailSegmentArchiveResponse response = api.archiveEmailSegment(storefrontOid, emailSegmentUuid);

        // TODO: test validations
    }
    
    /**
     * Clone email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneEmailCampaignTest() throws ApiException {
        String storefrontOid = null;
        String emailCampaignUuid = null;
        EmailCampaignResponse response = api.cloneEmailCampaign(storefrontOid, emailCampaignUuid);

        // TODO: test validations
    }
    
    /**
     * Clone email flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloneEmailFlowTest() throws ApiException {
        String storefrontOid = null;
        String emailFlowUuid = null;
        EmailFlowResponse response = api.cloneEmailFlow(storefrontOid, emailFlowUuid);

        // TODO: test validations
    }
    
    /**
     * Create email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmailSendingDomainTest() throws ApiException {
        String domain = null;
        EmailSendingDomainResponse response = api.createEmailSendingDomain(domain);

        // TODO: test validations
    }
    
    /**
     * Delete email email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailEmailTest() throws ApiException {
        String storefrontOid = null;
        String commseqEmailUuid = null;
        BaseResponse response = api.deleteEmailEmail(storefrontOid, commseqEmailUuid);

        // TODO: test validations
    }
    
    /**
     * Delete email list customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailListCustomerTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        String emailCustomerUuid = null;
        BaseResponse response = api.deleteEmailListCustomer(storefrontOid, emailListUuid, emailCustomerUuid);

        // TODO: test validations
    }
    
    /**
     * delete email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailSendingDomainTest() throws ApiException {
        String domain = null;
        BaseResponse response = api.deleteEmailSendingDomain(domain);

        // TODO: test validations
    }
    
    /**
     * Get email communication base templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailBaseTemplatesTest() throws ApiException {
        String storefrontOid = null;
        EmailBaseTemplateListResponse response = api.getEmailBaseTemplates(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCampaignTest() throws ApiException {
        String storefrontOid = null;
        String emailCampaignUuid = null;
        EmailCampaignResponse response = api.getEmailCampaign(storefrontOid, emailCampaignUuid);

        // TODO: test validations
    }
    
    /**
     * Get email campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCampaignsTest() throws ApiException {
        String storefrontOid = null;
        EmailCampaignsResponse response = api.getEmailCampaigns(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email campaigns with stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCampaignsWithStatsTest() throws ApiException {
        String storefrontOid = null;
        String statDays = null;
        EmailCampaignsResponse response = api.getEmailCampaignsWithStats(storefrontOid, statDays);

        // TODO: test validations
    }
    
    /**
     * Get email commseq
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCommseqTest() throws ApiException {
        String storefrontOid = null;
        String commseqUuid = null;
        EmailCommseqResponse response = api.getEmailCommseq(storefrontOid, commseqUuid);

        // TODO: test validations
    }
    
    /**
     * Get email communication sequence emails stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCommseqEmailStatsTest() throws ApiException {
        String storefrontOid = null;
        String commseqUuid = null;
        String commseqEmailUuid = null;
        Integer days = null;
        EmailStatSummaryResponse response = api.getEmailCommseqEmailStats(storefrontOid, commseqUuid, commseqEmailUuid, days);

        // TODO: test validations
    }
    
    /**
     * Get email communication sequence stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCommseqStatsTest() throws ApiException {
        String storefrontOid = null;
        String commseqUuid = null;
        Integer days = null;
        EmailStatSummaryResponse response = api.getEmailCommseqStats(storefrontOid, commseqUuid, days);

        // TODO: test validations
    }
    
    /**
     * Get email commseqs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailCommseqsTest() throws ApiException {
        String storefrontOid = null;
        EmailCommseqsResponse response = api.getEmailCommseqs(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email dashboard activity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailDashboardActivityTest() throws ApiException {
        String storefrontOid = null;
        Integer lastRecords = null;
        EmailDashboardActivityResponse response = api.getEmailDashboardActivity(storefrontOid, lastRecords);

        // TODO: test validations
    }
    
    /**
     * Get dashboard stats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailDashboardStatsTest() throws ApiException {
        String storefrontOid = null;
        Integer days = null;
        EmailDashboardStatsResponse response = api.getEmailDashboardStats(storefrontOid, days);

        // TODO: test validations
    }
    
    /**
     * Get email email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailEmailTest() throws ApiException {
        String storefrontOid = null;
        String commseqEmailUuid = null;
        EmailCommseqEmailResponse response = api.getEmailEmail(storefrontOid, commseqEmailUuid);

        // TODO: test validations
    }
    
    /**
     * Get email emails
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailEmailsTest() throws ApiException {
        String storefrontOid = null;
        EmailCommseqEmailsResponse response = api.getEmailEmails(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailFlowTest() throws ApiException {
        String storefrontOid = null;
        String emailFlowUuid = null;
        EmailFlowResponse response = api.getEmailFlow(storefrontOid, emailFlowUuid);

        // TODO: test validations
    }
    
    /**
     * Get email flows
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailFlowsTest() throws ApiException {
        String storefrontOid = null;
        EmailFlowsResponse response = api.getEmailFlows(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailListTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        EmailListResponse response = api.getEmailList(storefrontOid, emailListUuid);

        // TODO: test validations
    }
    
    /**
     * Get email list customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailListCustomerEditorUrlTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        String emailCustomerUuid = null;
        EmailCustomerEditorUrlResponse response = api.getEmailListCustomerEditorUrl(storefrontOid, emailListUuid, emailCustomerUuid);

        // TODO: test validations
    }
    
    /**
     * Get email list customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailListCustomersTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        EmailListCustomersResponse response = api.getEmailListCustomers(storefrontOid, emailListUuid, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get email lists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailListsTest() throws ApiException {
        String storefrontOid = null;
        EmailListsResponse response = api.getEmailLists(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email segment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSegmentTest() throws ApiException {
        String storefrontOid = null;
        String emailSegmentUuid = null;
        EmailSegmentResponse response = api.getEmailSegment(storefrontOid, emailSegmentUuid);

        // TODO: test validations
    }
    
    /**
     * Get email segment customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSegmentCustomersTest() throws ApiException {
        String storefrontOid = null;
        String emailSegmentUuid = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        EmailSegmentCustomersResponse response = api.getEmailSegmentCustomers(storefrontOid, emailSegmentUuid, pageNumber, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get email segments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSegmentsTest() throws ApiException {
        String storefrontOid = null;
        EmailSegmentsResponse response = api.getEmailSegments(storefrontOid);

        // TODO: test validations
    }
    
    /**
     * Get email sending domain
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSendingDomainTest() throws ApiException {
        String domain = null;
        EmailSendingDomainResponse response = api.getEmailSendingDomain(domain);

        // TODO: test validations
    }
    
    /**
     * Get email sending domains
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailSendingDomainsTest() throws ApiException {
        EmailSendingDomainsResponse response = api.getEmailSendingDomains();

        // TODO: test validations
    }
    
    /**
     * Get email template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailTemplateTest() throws ApiException {
        String storefrontOid = null;
        Integer emailTemplateOid = null;
        EmailTemplate response = api.getEmailTemplate(storefrontOid, emailTemplateOid);

        // TODO: test validations
    }
    
    /**
     * Get email templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailTemplatesTest() throws ApiException {
        String storefrontOid = null;
        String triggerType = null;
        EmailTemplatesResponse response = api.getEmailTemplates(storefrontOid, triggerType);

        // TODO: test validations
    }
    
    /**
     * Insert email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailCampaignTest() throws ApiException {
        String storefrontOid = null;
        EmailCampaign emailCampaign = null;
        EmailCampaignResponse response = api.insertEmailCampaign(storefrontOid, emailCampaign);

        // TODO: test validations
    }
    
    /**
     * Insert email commseq
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailCommseqTest() throws ApiException {
        String storefrontOid = null;
        EmailCommseq emailCommseq = null;
        EmailCommseqResponse response = api.insertEmailCommseq(storefrontOid, emailCommseq);

        // TODO: test validations
    }
    
    /**
     * Insert email email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailEmailTest() throws ApiException {
        String storefrontOid = null;
        EmailCommseqEmail emailCommseqEmail = null;
        EmailCommseqEmailResponse response = api.insertEmailEmail(storefrontOid, emailCommseqEmail);

        // TODO: test validations
    }
    
    /**
     * Insert email flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailFlowTest() throws ApiException {
        String storefrontOid = null;
        EmailFlow emailFlow = null;
        EmailFlowResponse response = api.insertEmailFlow(storefrontOid, emailFlow);

        // TODO: test validations
    }
    
    /**
     * Insert email list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailListTest() throws ApiException {
        String storefrontOid = null;
        EmailList emailList = null;
        EmailListResponse response = api.insertEmailList(storefrontOid, emailList);

        // TODO: test validations
    }
    
    /**
     * Insert email segment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void insertEmailSegmentTest() throws ApiException {
        String storefrontOid = null;
        EmailSegment emailSegment = null;
        EmailSegmentResponse response = api.insertEmailSegment(storefrontOid, emailSegment);

        // TODO: test validations
    }
    
    /**
     * Search email list customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchEmailListCustomersTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        String startsWith = null;
        EmailListCustomersResponse response = api.searchEmailListCustomers(storefrontOid, emailListUuid, startsWith);

        // TODO: test validations
    }
    
    /**
     * Search email segment customers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchEmailSegmentCustomersTest() throws ApiException {
        String storefrontOid = null;
        String emailSegmentUuid = null;
        String startsWith = null;
        EmailSegmentCustomersResponse response = api.searchEmailSegmentCustomers(storefrontOid, emailSegmentUuid, startsWith);

        // TODO: test validations
    }
    
    /**
     * Start email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startEmailCampaignTest() throws ApiException {
        String storefrontOid = null;
        String emailCampaignUuid = null;
        BaseResponse response = api.startEmailCampaign(storefrontOid, emailCampaignUuid);

        // TODO: test validations
    }
    
    /**
     * Subscribe customers to email list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeToEmailListTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        List<EmailCustomer> customers = null;
        EmailListSubscribeResponse response = api.subscribeToEmailList(storefrontOid, emailListUuid, customers);

        // TODO: test validations
    }
    
    /**
     * Update email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailCampaignTest() throws ApiException {
        String storefrontOid = null;
        String emailCampaignUuid = null;
        EmailCampaign emailCampaign = null;
        EmailCampaignResponse response = api.updateEmailCampaign(storefrontOid, emailCampaignUuid, emailCampaign);

        // TODO: test validations
    }
    
    /**
     * Update email commseq
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailCommseqTest() throws ApiException {
        String storefrontOid = null;
        String commseqUuid = null;
        EmailCommseq emailCommseq = null;
        EmailCommseqResponse response = api.updateEmailCommseq(storefrontOid, commseqUuid, emailCommseq);

        // TODO: test validations
    }
    
    /**
     * Update email email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailEmailTest() throws ApiException {
        String storefrontOid = null;
        String commseqEmailUuid = null;
        EmailCommseqEmail emailCommseqEmail = null;
        EmailCommseqEmailResponse response = api.updateEmailEmail(storefrontOid, commseqEmailUuid, emailCommseqEmail);

        // TODO: test validations
    }
    
    /**
     * Update email flow
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailFlowTest() throws ApiException {
        String storefrontOid = null;
        String emailFlowUuid = null;
        EmailFlow emailFlow = null;
        EmailFlowResponse response = api.updateEmailFlow(storefrontOid, emailFlowUuid, emailFlow);

        // TODO: test validations
    }
    
    /**
     * Update email list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailListTest() throws ApiException {
        String storefrontOid = null;
        String emailListUuid = null;
        EmailList emailList = null;
        EmailListResponse response = api.updateEmailList(storefrontOid, emailListUuid, emailList);

        // TODO: test validations
    }
    
    /**
     * Update email segment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEmailSegmentTest() throws ApiException {
        String storefrontOid = null;
        String emailSegmentUuid = null;
        EmailSegment emailSegment = null;
        EmailSegmentResponse response = api.updateEmailSegment(storefrontOid, emailSegmentUuid, emailSegment);

        // TODO: test validations
    }
    
    /**
     * Verify email campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyEmailSendingDomainTest() throws ApiException {
        String domain = null;
        EmailSendingDomainResponse response = api.verifyEmailSendingDomain(domain);

        // TODO: test validations
    }
    
}

/*
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.DistributionCentersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.FulfillmentInventory;
import com.ultracart.admin.v2.models.FulfillmentShipment;
import com.ultracart.admin.v2.models.OrdersResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FulfillmentApi
 */
@Ignore
public class FulfillmentApiTest {

    private final FulfillmentApi api = new FulfillmentApi();

    
    /**
     * Acknowledge receipt of orders.
     *
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acknowledgeOrdersTest() throws ApiException {
        String distributionCenterCode = null;
        List<String> orderIds = null;
        api.acknowledgeOrders(distributionCenterCode, orderIds);

        // TODO: test validations
    }
    
    /**
     * Retrieve orders queued up for this distribution center.
     *
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You&#39;ll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistributionCenterOrdersTest() throws ApiException {
        String distributionCenterCode = null;
        OrdersResponse response = api.getDistributionCenterOrders(distributionCenterCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve distribution centers
     *
     * Retrieves the distribution centers that this user has access to. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistributionCentersTest() throws ApiException {
        DistributionCentersResponse response = api.getDistributionCenters();

        // TODO: test validations
    }
    
    /**
     * Mark orders as shipped
     *
     * Store the tracking information and mark the order shipped for this distribution center. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shipOrdersTest() throws ApiException {
        String distributionCenterCode = null;
        List<FulfillmentShipment> shipments = null;
        api.shipOrders(distributionCenterCode, shipments);

        // TODO: test validations
    }
    
    /**
     * Update inventory
     *
     * Update the inventory for items associated with this distribution center 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInventoryTest() throws ApiException {
        String distributionCenterCode = null;
        List<FulfillmentInventory> inventories = null;
        api.updateInventory(distributionCenterCode, inventories);

        // TODO: test validations
    }
    
}

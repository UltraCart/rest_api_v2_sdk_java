/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.TaxCity;
import com.ultracart.admin.v2.models.TaxCountry;
import com.ultracart.admin.v2.models.TaxCounty;
import com.ultracart.admin.v2.models.TaxPostalCode;
import com.ultracart.admin.v2.models.TaxProviderAvalara;
import com.ultracart.admin.v2.models.TaxProviderSelf;
import com.ultracart.admin.v2.models.TaxProviderSelfCountriesResponse;
import com.ultracart.admin.v2.models.TaxProviderSelfRegionsResponse;
import com.ultracart.admin.v2.models.TaxProviderTaxJar;
import com.ultracart.admin.v2.models.TaxProviderTestResult;
import com.ultracart.admin.v2.models.TaxProviderUltraCart;
import com.ultracart.admin.v2.models.TaxProvidersResponse;
import com.ultracart.admin.v2.models.TaxState;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaxApi
 */
@Ignore
public class TaxApiTest {

    private final TaxApi api = new TaxApi();

    
    /**
     * Deletes a Self tax provider city
     *
     * Deletes a Self tax provider city. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaxProviderSelfCityTest() throws ApiException {
        String city = null;
        TaxCity taxCity = null;
        api.deleteTaxProviderSelfCity(city, taxCity);

        // TODO: test validations
    }
    
    /**
     * Deletes a Self tax provider country
     *
     * Deletes a Self tax provider country. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaxProviderSelfCountryTest() throws ApiException {
        String countryCode = null;
        TaxCountry taxCountry = null;
        api.deleteTaxProviderSelfCountry(countryCode, taxCountry);

        // TODO: test validations
    }
    
    /**
     * Deletes a Self tax provider county
     *
     * Deletes a Self tax provider county. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaxProviderSelfCountyTest() throws ApiException {
        String county = null;
        TaxCounty taxCounty = null;
        api.deleteTaxProviderSelfCounty(county, taxCounty);

        // TODO: test validations
    }
    
    /**
     * Deletes a Self tax provider postalCode
     *
     * Deletes a Self tax provider postalCode. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaxProviderSelfPostalCodeTest() throws ApiException {
        String postalCode = null;
        TaxPostalCode taxPostalCode = null;
        api.deleteTaxProviderSelfPostalCode(postalCode, taxPostalCode);

        // TODO: test validations
    }
    
    /**
     * Deletes a Self tax provider state
     *
     * Deletes a Self tax provider state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaxProviderSelfStateTest() throws ApiException {
        String stateCode = null;
        TaxState taxState = null;
        api.deleteTaxProviderSelfState(stateCode, taxState);

        // TODO: test validations
    }
    
    /**
     * Retrieve the Avalara tax provider
     *
     * Retrieves the Avalara tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderAvalaraTest() throws ApiException {
        TaxProviderAvalara response = api.getTaxProviderAvalara();

        // TODO: test validations
    }
    
    /**
     * Attempts to connect to Avalara and returns back the response
     *
     * Attempts to connect to Avalara and returns back the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderAvalaraTestTest() throws ApiException {
        TaxProviderTestResult response = api.getTaxProviderAvalaraTest();

        // TODO: test validations
    }
    
    /**
     * Retrieve the Self tax provider
     *
     * Retrieves the Self tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderSelfTest() throws ApiException {
        TaxProviderSelf response = api.getTaxProviderSelf();

        // TODO: test validations
    }
    
    /**
     * Retrieve the Self tax provider countries
     *
     * Retrieves the Self tax provider countries. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderSelfCountriesTest() throws ApiException {
        TaxProviderSelfCountriesResponse response = api.getTaxProviderSelfCountries();

        // TODO: test validations
    }
    
    /**
     * Retrieve the Self tax provider regions for a given country code
     *
     * Retrieves the Self tax provider regions for a given country code. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderSelfRegionsByCountryCodeTest() throws ApiException {
        String countryCode = null;
        TaxProviderSelfRegionsResponse response = api.getTaxProviderSelfRegionsByCountryCode(countryCode);

        // TODO: test validations
    }
    
    /**
     * Retrieve the TaxJar tax provider
     *
     * Retrieves the TaxJar tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderTaxJarTest() throws ApiException {
        TaxProviderTaxJar response = api.getTaxProviderTaxJar();

        // TODO: test validations
    }
    
    /**
     * Attempts to connect to TaxJar and returns back the response
     *
     * Attempts to connect to TaxJar and returns back the response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderTaxJarTestTest() throws ApiException {
        TaxProviderTestResult response = api.getTaxProviderTaxJarTest();

        // TODO: test validations
    }
    
    /**
     * Retrieve the UltraCart tax provider
     *
     * Retrieves the UltraCart tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProviderUltraCartTest() throws ApiException {
        TaxProviderUltraCart response = api.getTaxProviderUltraCart();

        // TODO: test validations
    }
    
    /**
     * Retrieve tax methods
     *
     * Retrieves tax methods for this account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaxProvidersTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String expand = null;
        TaxProvidersResponse response = api.getTaxProviders(limit, offset, expand);

        // TODO: test validations
    }
    
    /**
     * Toggle a tax provider to active
     *
     * Toggle a tax provider to active. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setActiveTaxProviderTest() throws ApiException {
        String providerName = null;
        api.setActiveTaxProvider(providerName);

        // TODO: test validations
    }
    
    /**
     * Update the Avalara tax provider
     *
     * Update the Avalara tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderAvalaraTest() throws ApiException {
        TaxProviderAvalara taxProviderAvalara = null;
        TaxProviderAvalara response = api.updateTaxProviderAvalara(taxProviderAvalara);

        // TODO: test validations
    }
    
    /**
     * Update the Self tax provider
     *
     * Update the Self tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfTest() throws ApiException {
        TaxProviderSelf taxProviderSelf = null;
        TaxProviderSelf response = api.updateTaxProviderSelf(taxProviderSelf);

        // TODO: test validations
    }
    
    /**
     * Updates a Self tax provider city
     *
     * Updates a Self tax provider city. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfCityTest() throws ApiException {
        String city = null;
        TaxCity taxCity = null;
        TaxCity response = api.updateTaxProviderSelfCity(city, taxCity);

        // TODO: test validations
    }
    
    /**
     * Updates a Self tax provider country
     *
     * Updates a Self tax provider country. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfCountryTest() throws ApiException {
        String countryCode = null;
        TaxCountry taxCountry = null;
        TaxCountry response = api.updateTaxProviderSelfCountry(countryCode, taxCountry);

        // TODO: test validations
    }
    
    /**
     * Updates a Self tax provider county
     *
     * Updates a Self tax provider county. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfCountyTest() throws ApiException {
        String county = null;
        TaxCounty taxCounty = null;
        TaxCounty response = api.updateTaxProviderSelfCounty(county, taxCounty);

        // TODO: test validations
    }
    
    /**
     * Updates a Self tax provider postalCode
     *
     * Updates a Self tax provider postalCode. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfPostalCodeTest() throws ApiException {
        String postalCode = null;
        TaxPostalCode taxPostalCode = null;
        TaxPostalCode response = api.updateTaxProviderSelfPostalCode(postalCode, taxPostalCode);

        // TODO: test validations
    }
    
    /**
     * Updates a Self tax provider state
     *
     * Updates a Self tax provider state. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderSelfStateTest() throws ApiException {
        String stateCode = null;
        TaxState taxState = null;
        TaxState response = api.updateTaxProviderSelfState(stateCode, taxState);

        // TODO: test validations
    }
    
    /**
     * Update the TaxJar tax provider
     *
     * Update the TaxJar tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderTaxJarTest() throws ApiException {
        TaxProviderTaxJar taxProviderTaxJar = null;
        TaxProviderTaxJar response = api.updateTaxProviderTaxJar(taxProviderTaxJar);

        // TODO: test validations
    }
    
    /**
     * Update the UltraCart tax provider
     *
     * Update the UltraCart tax provider. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaxProviderUltraCartTest() throws ApiException {
        TaxProviderUltraCart taxProviderUltracart = null;
        TaxProviderUltraCart response = api.updateTaxProviderUltraCart(taxProviderUltracart);

        // TODO: test validations
    }
    
}

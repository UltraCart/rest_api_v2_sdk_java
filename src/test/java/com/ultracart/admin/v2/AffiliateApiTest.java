/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.models.AffiliateClickQuery;
import com.ultracart.admin.v2.models.AffiliateClicksResponse;
import com.ultracart.admin.v2.models.AffiliateLedgerQuery;
import com.ultracart.admin.v2.models.AffiliateLedgersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AffiliateApi
 */
@Ignore
public class AffiliateApiTest {

    private final AffiliateApi api = new AffiliateApi();

    
    /**
     * Retrieve clicks
     *
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClicksByQueryTest() throws ApiException {
        AffiliateClickQuery clickQuery = null;
        Integer limit = null;
        Integer offset = null;
        String expand = null;
        AffiliateClicksResponse response = api.getClicksByQuery(clickQuery, limit, offset, expand);

        // TODO: test validations
    }
    
    /**
     * Retrieve ledger entries
     *
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLedgersByQueryTest() throws ApiException {
        AffiliateLedgerQuery ledgerQuery = null;
        Integer limit = null;
        Integer offset = null;
        String expand = null;
        AffiliateLedgersResponse response = api.getLedgersByQuery(ledgerQuery, limit, offset, expand);

        // TODO: test validations
    }
    
}

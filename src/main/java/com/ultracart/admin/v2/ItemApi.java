/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.ItemsResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.ItemResponse;
import com.ultracart.admin.v2.models.Item;
import com.ultracart.admin.v2.models.TempMultimediaResponse;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemApi {
    private ApiClient apiClient;

    public ItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for itemItemsGet */
    private com.squareup.okhttp.Call itemItemsGetCall(Integer parentCategoryId, String parentCategoryPath, Integer limit, Integer offset, String since, String sort, String expand, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/item/items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parentCategoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parent_category_id", parentCategoryId));
        if (parentCategoryPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parent_category_path", parentCategoryPath));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve items
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param parentCategoryId The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)
     * @param parentCategoryPath The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch items that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsResponse itemItemsGet(Integer parentCategoryId, String parentCategoryPath, Integer limit, Integer offset, String since, String sort, String expand, Boolean placeholders) throws ApiException {
        ApiResponse<ItemsResponse> resp = itemItemsGetWithHttpInfo(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders);
        return resp.getData();
    }

    /**
     * Retrieve items
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param parentCategoryId The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)
     * @param parentCategoryPath The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch items that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;ItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsResponse> itemItemsGetWithHttpInfo(Integer parentCategoryId, String parentCategoryPath, Integer limit, Integer offset, String since, String sort, String expand, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = itemItemsGetCall(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, null, null);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve items (asynchronously)
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param parentCategoryId The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root (optional)
     * @param parentCategoryPath The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root (optional)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 2000) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch items that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemItemsGetAsync(Integer parentCategoryId, String parentCategoryPath, Integer limit, Integer offset, String since, String sort, String expand, Boolean placeholders, final ApiCallback<ItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemItemsGetCall(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for itemItemsMerchantItemOidDelete */
    private com.squareup.okhttp.Call itemItemsMerchantItemOidDeleteCall(Integer merchantItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'merchantItemOid' is set
        if (merchantItemOid == null) {
            throw new ApiException("Missing the required parameter 'merchantItemOid' when calling itemItemsMerchantItemOidDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/item/items/{merchant_item_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "merchant_item_oid" + "\\}", apiClient.escapeString(merchantItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an item
     * Delete an item on the UltraCart account. 
     * @param merchantItemOid The item oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void itemItemsMerchantItemOidDelete(Integer merchantItemOid) throws ApiException {
        itemItemsMerchantItemOidDeleteWithHttpInfo(merchantItemOid);
    }

    /**
     * Delete an item
     * Delete an item on the UltraCart account. 
     * @param merchantItemOid The item oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> itemItemsMerchantItemOidDeleteWithHttpInfo(Integer merchantItemOid) throws ApiException {
        com.squareup.okhttp.Call call = itemItemsMerchantItemOidDeleteCall(merchantItemOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an item (asynchronously)
     * Delete an item on the UltraCart account. 
     * @param merchantItemOid The item oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemItemsMerchantItemOidDeleteAsync(Integer merchantItemOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemItemsMerchantItemOidDeleteCall(merchantItemOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for itemItemsMerchantItemOidGet */
    private com.squareup.okhttp.Call itemItemsMerchantItemOidGetCall(Integer merchantItemOid, String expand, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'merchantItemOid' is set
        if (merchantItemOid == null) {
            throw new ApiException("Missing the required parameter 'merchantItemOid' when calling itemItemsMerchantItemOidGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/item/items/{merchant_item_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "merchant_item_oid" + "\\}", apiClient.escapeString(merchantItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve an item
     * Retrieves a single item using the specified item oid. 
     * @param merchantItemOid The item oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemResponse itemItemsMerchantItemOidGet(Integer merchantItemOid, String expand, Boolean placeholders) throws ApiException {
        ApiResponse<ItemResponse> resp = itemItemsMerchantItemOidGetWithHttpInfo(merchantItemOid, expand, placeholders);
        return resp.getData();
    }

    /**
     * Retrieve an item
     * Retrieves a single item using the specified item oid. 
     * @param merchantItemOid The item oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;ItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemResponse> itemItemsMerchantItemOidGetWithHttpInfo(Integer merchantItemOid, String expand, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = itemItemsMerchantItemOidGetCall(merchantItemOid, expand, placeholders, null, null);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an item (asynchronously)
     * Retrieves a single item using the specified item oid. 
     * @param merchantItemOid The item oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemItemsMerchantItemOidGetAsync(Integer merchantItemOid, String expand, Boolean placeholders, final ApiCallback<ItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemItemsMerchantItemOidGetCall(merchantItemOid, expand, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for itemItemsMerchantItemOidPut */
    private com.squareup.okhttp.Call itemItemsMerchantItemOidPutCall(Item item, Integer merchantItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = item;
        
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling itemItemsMerchantItemOidPut(Async)");
        }
        
        // verify the required parameter 'merchantItemOid' is set
        if (merchantItemOid == null) {
            throw new ApiException("Missing the required parameter 'merchantItemOid' when calling itemItemsMerchantItemOidPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/item/items/{merchant_item_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "merchant_item_oid" + "\\}", apiClient.escapeString(merchantItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an item
     * Update a new item on the UltraCart account. 
     * @param item Item to update (required)
     * @param merchantItemOid The item oid to update. (required)
     * @return ItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemResponse itemItemsMerchantItemOidPut(Item item, Integer merchantItemOid) throws ApiException {
        ApiResponse<ItemResponse> resp = itemItemsMerchantItemOidPutWithHttpInfo(item, merchantItemOid);
        return resp.getData();
    }

    /**
     * Update an item
     * Update a new item on the UltraCart account. 
     * @param item Item to update (required)
     * @param merchantItemOid The item oid to update. (required)
     * @return ApiResponse&lt;ItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemResponse> itemItemsMerchantItemOidPutWithHttpInfo(Item item, Integer merchantItemOid) throws ApiException {
        com.squareup.okhttp.Call call = itemItemsMerchantItemOidPutCall(item, merchantItemOid, null, null);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an item (asynchronously)
     * Update a new item on the UltraCart account. 
     * @param item Item to update (required)
     * @param merchantItemOid The item oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemItemsMerchantItemOidPutAsync(Item item, Integer merchantItemOid, final ApiCallback<ItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemItemsMerchantItemOidPutCall(item, merchantItemOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for itemItemsPost */
    private com.squareup.okhttp.Call itemItemsPostCall(Item item, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = item;
        
        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling itemItemsPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/item/items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create an item
     * Create a new item on the UltraCart account. 
     * @param item Item to create (required)
     * @return ItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemResponse itemItemsPost(Item item) throws ApiException {
        ApiResponse<ItemResponse> resp = itemItemsPostWithHttpInfo(item);
        return resp.getData();
    }

    /**
     * Create an item
     * Create a new item on the UltraCart account. 
     * @param item Item to create (required)
     * @return ApiResponse&lt;ItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemResponse> itemItemsPostWithHttpInfo(Item item) throws ApiException {
        com.squareup.okhttp.Call call = itemItemsPostCall(item, null, null);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an item (asynchronously)
     * Create a new item on the UltraCart account. 
     * @param item Item to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemItemsPostAsync(Item item, final ApiCallback<ItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemItemsPostCall(item, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for itemTempMultimediaPost */
    private com.squareup.okhttp.Call itemTempMultimediaPostCall(File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling itemTempMultimediaPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/item/temp_multimedia".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Upload an image to the temporary multimedia.
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * @param file File to upload (required)
     * @return TempMultimediaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TempMultimediaResponse itemTempMultimediaPost(File file) throws ApiException {
        ApiResponse<TempMultimediaResponse> resp = itemTempMultimediaPostWithHttpInfo(file);
        return resp.getData();
    }

    /**
     * Upload an image to the temporary multimedia.
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * @param file File to upload (required)
     * @return ApiResponse&lt;TempMultimediaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TempMultimediaResponse> itemTempMultimediaPostWithHttpInfo(File file) throws ApiException {
        com.squareup.okhttp.Call call = itemTempMultimediaPostCall(file, null, null);
        Type localVarReturnType = new TypeToken<TempMultimediaResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload an image to the temporary multimedia. (asynchronously)
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * @param file File to upload (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itemTempMultimediaPostAsync(File file, final ApiCallback<TempMultimediaResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itemTempMultimediaPostCall(file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TempMultimediaResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

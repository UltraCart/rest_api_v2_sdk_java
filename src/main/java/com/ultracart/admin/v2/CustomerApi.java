/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.CustomerResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Customer;
import com.ultracart.admin.v2.models.CustomersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient apiClient;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for customerCustomersCustomerProfileOidDelete */
    private com.squareup.okhttp.Call customerCustomersCustomerProfileOidDeleteCall(Integer customerProfileOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling customerCustomersCustomerProfileOidDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a customer
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse customerCustomersCustomerProfileOidDelete(Integer customerProfileOid) throws ApiException {
        ApiResponse<CustomerResponse> resp = customerCustomersCustomerProfileOidDeleteWithHttpInfo(customerProfileOid);
        return resp.getData();
    }

    /**
     * Delete a customer
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> customerCustomersCustomerProfileOidDeleteWithHttpInfo(Integer customerProfileOid) throws ApiException {
        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidDeleteCall(customerProfileOid, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a customer (asynchronously)
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCustomersCustomerProfileOidDeleteAsync(Integer customerProfileOid, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidDeleteCall(customerProfileOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerCustomersCustomerProfileOidGet */
    private com.squareup.okhttp.Call customerCustomersCustomerProfileOidGetCall(Integer customerProfileOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling customerCustomersCustomerProfileOidGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a customer
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse customerCustomersCustomerProfileOidGet(Integer customerProfileOid, String expand) throws ApiException {
        ApiResponse<CustomerResponse> resp = customerCustomersCustomerProfileOidGetWithHttpInfo(customerProfileOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve a customer
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> customerCustomersCustomerProfileOidGetWithHttpInfo(Integer customerProfileOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidGetCall(customerProfileOid, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a customer (asynchronously)
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCustomersCustomerProfileOidGetAsync(Integer customerProfileOid, String expand, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidGetCall(customerProfileOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerCustomersCustomerProfileOidPut */
    private com.squareup.okhttp.Call customerCustomersCustomerProfileOidPutCall(Customer customer, Integer customerProfileOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customer;
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerCustomersCustomerProfileOidPut(Async)");
        }
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling customerCustomersCustomerProfileOidPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a customer
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse customerCustomersCustomerProfileOidPut(Customer customer, Integer customerProfileOid) throws ApiException {
        ApiResponse<CustomerResponse> resp = customerCustomersCustomerProfileOidPutWithHttpInfo(customer, customerProfileOid);
        return resp.getData();
    }

    /**
     * Update a customer
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> customerCustomersCustomerProfileOidPutWithHttpInfo(Customer customer, Integer customerProfileOid) throws ApiException {
        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidPutCall(customer, customerProfileOid, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a customer (asynchronously)
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCustomersCustomerProfileOidPutAsync(Customer customer, Integer customerProfileOid, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCustomersCustomerProfileOidPutCall(customer, customerProfileOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerCustomersGet */
    private com.squareup.okhttp.Call customerCustomersGetCall(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/customer/customers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "email", email));
        if (qbClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "qb_class", qbClass));
        if (quickbooksCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "quickbooks_code", quickbooksCode));
        if (lastModifiedDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_modified_dts_start", lastModifiedDtsStart));
        if (lastModifiedDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_modified_dts_end", lastModifiedDtsEnd));
        if (signupDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "signup_dts_start", signupDtsStart));
        if (signupDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "signup_dts_end", signupDtsEnd));
        if (billingFirstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_first_name", billingFirstName));
        if (billingLastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_last_name", billingLastName));
        if (billingCompany != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_company", billingCompany));
        if (billingCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_city", billingCity));
        if (billingState != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_state", billingState));
        if (billingPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_postal_code", billingPostalCode));
        if (billingCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_country_code", billingCountryCode));
        if (billingDayPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_day_phone", billingDayPhone));
        if (billingEveningPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "billing_evening_phone", billingEveningPhone));
        if (shippingFirstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_first_name", shippingFirstName));
        if (shippingLastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_last_name", shippingLastName));
        if (shippingCompany != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_company", shippingCompany));
        if (shippingCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_city", shippingCity));
        if (shippingState != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_state", shippingState));
        if (shippingPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_postal_code", shippingPostalCode));
        if (shippingCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_country_code", shippingCountryCode));
        if (shippingDayPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_day_phone", shippingDayPhone));
        if (shippingEveningPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipping_evening_phone", shippingEveningPhone));
        if (pricingTierOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pricing_tier_oid", pricingTierOid));
        if (pricingTierName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pricing_tier_name", pricingTierName));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve customers
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomersResponse customerCustomersGet(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<CustomersResponse> resp = customerCustomersGetWithHttpInfo(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve customers
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomersResponse> customerCustomersGetWithHttpInfo(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = customerCustomersGetCall(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve customers (asynchronously)
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCustomersGetAsync(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<CustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCustomersGetCall(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for customerCustomersPost */
    private com.squareup.okhttp.Call customerCustomersPostCall(Customer customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customer;
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerCustomersPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/customer/customers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Insert a customer
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse customerCustomersPost(Customer customer) throws ApiException {
        ApiResponse<CustomerResponse> resp = customerCustomersPostWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Insert a customer
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> customerCustomersPostWithHttpInfo(Customer customer) throws ApiException {
        com.squareup.okhttp.Call call = customerCustomersPostCall(customer, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a customer (asynchronously)
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCustomersPostAsync(Customer customer, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCustomersPostCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

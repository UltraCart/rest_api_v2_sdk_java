/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.Customer;
import com.ultracart.admin.v2.models.CustomerEditorValues;
import com.ultracart.admin.v2.models.CustomerEmailListChanges;
import com.ultracart.admin.v2.models.CustomerQuery;
import com.ultracart.admin.v2.models.CustomerResponse;
import com.ultracart.admin.v2.models.CustomersResponse;
import com.ultracart.admin.v2.models.DataTablesServerSideResponse;
import com.ultracart.admin.v2.models.EmailListsResponse;
import com.ultracart.admin.v2.models.EmailVerifyTokenRequest;
import com.ultracart.admin.v2.models.EmailVerifyTokenResponse;
import com.ultracart.admin.v2.models.EmailVerifyTokenValidateRequest;
import com.ultracart.admin.v2.models.EmailVerifyTokenValidateResponse;
import com.ultracart.admin.v2.models.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient apiClient;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public CustomerApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public CustomerApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCustomer
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerCall(Integer customerProfileOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}"
            .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomerValidateBeforeCall(Integer customerProfileOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling deleteCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomerCall(customerProfileOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a customer
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse deleteCustomer(Integer customerProfileOid) throws ApiException {
        ApiResponse<CustomerResponse> resp = deleteCustomerWithHttpInfo(customerProfileOid);
        return resp.getData();
    }

    /**
     * Delete a customer
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> deleteCustomerWithHttpInfo(Integer customerProfileOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomerValidateBeforeCall(customerProfileOid, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a customer (asynchronously)
     * Delete a customer on the UltraCart account. 
     * @param customerProfileOid The customer_profile_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomerAsync(Integer customerProfileOid, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomerValidateBeforeCall(customerProfileOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomer
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerCall(Integer customerProfileOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}"
            .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerValidateBeforeCall(Integer customerProfileOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling getCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerCall(customerProfileOid, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a customer
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse getCustomer(Integer customerProfileOid, String expand) throws ApiException {
        ApiResponse<CustomerResponse> resp = getCustomerWithHttpInfo(customerProfileOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve a customer
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> getCustomerWithHttpInfo(Integer customerProfileOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerValidateBeforeCall(customerProfileOid, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a customer (asynchronously)
     * Retrieves a single customer using the specified customer profile oid. 
     * @param customerProfileOid The customer oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerAsync(Integer customerProfileOid, String expand, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerValidateBeforeCall(customerProfileOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerByEmail
     * @param email The email address of the customer to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerByEmailCall(String email, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/customers/by_email/{email}"
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerByEmailValidateBeforeCall(String email, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getCustomerByEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomerByEmailCall(email, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a customer by Email
     * Retrieves a single customer using the specified customer email address. 
     * @param email The email address of the customer to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse getCustomerByEmail(String email, String expand) throws ApiException {
        ApiResponse<CustomerResponse> resp = getCustomerByEmailWithHttpInfo(email, expand);
        return resp.getData();
    }

    /**
     * Retrieve a customer by Email
     * Retrieves a single customer using the specified customer email address. 
     * @param email The email address of the customer to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> getCustomerByEmailWithHttpInfo(String email, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCustomerByEmailValidateBeforeCall(email, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a customer by Email (asynchronously)
     * Retrieves a single customer using the specified customer email address. 
     * @param email The email address of the customer to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerByEmailAsync(String email, String expand, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerByEmailValidateBeforeCall(email, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerEditorValues
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerEditorValuesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/editor_values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerEditorValuesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomerEditorValuesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve values needed for a customer profile editor
     * Retrieve values needed for a customer profile editor. 
     * @return CustomerEditorValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerEditorValues getCustomerEditorValues() throws ApiException {
        ApiResponse<CustomerEditorValues> resp = getCustomerEditorValuesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve values needed for a customer profile editor
     * Retrieve values needed for a customer profile editor. 
     * @return ApiResponse&lt;CustomerEditorValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerEditorValues> getCustomerEditorValuesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomerEditorValuesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CustomerEditorValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve values needed for a customer profile editor (asynchronously)
     * Retrieve values needed for a customer profile editor. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerEditorValuesAsync(final ApiCallback<CustomerEditorValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerEditorValuesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerEditorValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomerEmailLists
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomerEmailListsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/email_lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomerEmailListsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomerEmailListsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve all email lists across all storefronts
     * Retrieve all email lists across all storefronts 
     * @return EmailListsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListsResponse getCustomerEmailLists() throws ApiException {
        ApiResponse<EmailListsResponse> resp = getCustomerEmailListsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all email lists across all storefronts
     * Retrieve all email lists across all storefronts 
     * @return ApiResponse&lt;EmailListsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListsResponse> getCustomerEmailListsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomerEmailListsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all email lists across all storefronts (asynchronously)
     * Retrieve all email lists across all storefronts 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomerEmailListsAsync(final ApiCallback<EmailListsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomerEmailListsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomers
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomersCall(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (qbClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qb_class", qbClass));
        if (quickbooksCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quickbooks_code", quickbooksCode));
        if (lastModifiedDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_modified_dts_start", lastModifiedDtsStart));
        if (lastModifiedDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_modified_dts_end", lastModifiedDtsEnd));
        if (signupDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signup_dts_start", signupDtsStart));
        if (signupDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signup_dts_end", signupDtsEnd));
        if (billingFirstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_first_name", billingFirstName));
        if (billingLastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_last_name", billingLastName));
        if (billingCompany != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_company", billingCompany));
        if (billingCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_city", billingCity));
        if (billingState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_state", billingState));
        if (billingPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_postal_code", billingPostalCode));
        if (billingCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_country_code", billingCountryCode));
        if (billingDayPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_day_phone", billingDayPhone));
        if (billingEveningPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("billing_evening_phone", billingEveningPhone));
        if (shippingFirstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_first_name", shippingFirstName));
        if (shippingLastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_last_name", shippingLastName));
        if (shippingCompany != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_company", shippingCompany));
        if (shippingCity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_city", shippingCity));
        if (shippingState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_state", shippingState));
        if (shippingPostalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_postal_code", shippingPostalCode));
        if (shippingCountryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_country_code", shippingCountryCode));
        if (shippingDayPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_day_phone", shippingDayPhone));
        if (shippingEveningPhone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shipping_evening_phone", shippingEveningPhone));
        if (pricingTierOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pricing_tier_oid", pricingTierOid));
        if (pricingTierName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pricing_tier_name", pricingTierName));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomersValidateBeforeCall(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomersCall(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve customers
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomersResponse getCustomers(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<CustomersResponse> resp = getCustomersWithHttpInfo(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve customers
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomersResponse> getCustomersWithHttpInfo(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCustomersValidateBeforeCall(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve customers (asynchronously)
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param email Email (optional)
     * @param qbClass Quickbooks class (optional)
     * @param quickbooksCode Quickbooks code (optional)
     * @param lastModifiedDtsStart Last modified date start (optional)
     * @param lastModifiedDtsEnd Last modified date end (optional)
     * @param signupDtsStart Signup date start (optional)
     * @param signupDtsEnd Signup date end (optional)
     * @param billingFirstName Billing first name (optional)
     * @param billingLastName Billing last name (optional)
     * @param billingCompany Billing company (optional)
     * @param billingCity Billing city (optional)
     * @param billingState Billing state (optional)
     * @param billingPostalCode Billing postal code (optional)
     * @param billingCountryCode Billing country code (optional)
     * @param billingDayPhone Billing day phone (optional)
     * @param billingEveningPhone Billing evening phone (optional)
     * @param shippingFirstName Shipping first name (optional)
     * @param shippingLastName Shipping last name (optional)
     * @param shippingCompany Shipping company (optional)
     * @param shippingCity Shipping city (optional)
     * @param shippingState Shipping state (optional)
     * @param shippingPostalCode Shipping postal code (optional)
     * @param shippingCountryCode Shipping country code (optional)
     * @param shippingDayPhone Shipping day phone (optional)
     * @param shippingEveningPhone Shipping evening phone (optional)
     * @param pricingTierOid Pricing tier oid (optional)
     * @param pricingTierName Pricing tier name (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomersAsync(String email, String qbClass, String quickbooksCode, String lastModifiedDtsStart, String lastModifiedDtsEnd, String signupDtsStart, String signupDtsEnd, String billingFirstName, String billingLastName, String billingCompany, String billingCity, String billingState, String billingPostalCode, String billingCountryCode, String billingDayPhone, String billingEveningPhone, String shippingFirstName, String shippingLastName, String shippingCompany, String shippingCity, String shippingState, String shippingPostalCode, String shippingCountryCode, String shippingDayPhone, String shippingEveningPhone, Integer pricingTierOid, String pricingTierName, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<CustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomersValidateBeforeCall(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomersByQuery
     * @param customerQuery Customer query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomersByQueryCall(CustomerQuery customerQuery, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customerQuery;

        // create path and map variables
        String localVarPath = "/customer/customers/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomersByQueryValidateBeforeCall(CustomerQuery customerQuery, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerQuery' is set
        if (customerQuery == null) {
            throw new ApiException("Missing the required parameter 'customerQuery' when calling getCustomersByQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomersByQueryCall(customerQuery, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve customers by query
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param customerQuery Customer query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomersResponse getCustomersByQuery(CustomerQuery customerQuery, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<CustomersResponse> resp = getCustomersByQueryWithHttpInfo(customerQuery, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve customers by query
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param customerQuery Customer query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomersResponse> getCustomersByQueryWithHttpInfo(CustomerQuery customerQuery, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCustomersByQueryValidateBeforeCall(customerQuery, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve customers by query (asynchronously)
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param customerQuery Customer query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomersByQueryAsync(CustomerQuery customerQuery, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<CustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomersByQueryValidateBeforeCall(customerQuery, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomersForDataTables
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomersForDataTablesCall(String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer/customers/dataTables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomersForDataTablesValidateBeforeCall(String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomersForDataTablesCall(expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve customers for DataTables plugin
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return DataTablesServerSideResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataTablesServerSideResponse getCustomersForDataTables(String expand) throws ApiException {
        ApiResponse<DataTablesServerSideResponse> resp = getCustomersForDataTablesWithHttpInfo(expand);
        return resp.getData();
    }

    /**
     * Retrieve customers for DataTables plugin
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;DataTablesServerSideResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataTablesServerSideResponse> getCustomersForDataTablesWithHttpInfo(String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCustomersForDataTablesValidateBeforeCall(expand, null, null);
        Type localVarReturnType = new TypeToken<DataTablesServerSideResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve customers for DataTables plugin (asynchronously)
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomersForDataTablesAsync(String expand, final ApiCallback<DataTablesServerSideResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomersForDataTablesValidateBeforeCall(expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataTablesServerSideResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailVerificationToken
     * @param tokenRequest Token request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailVerificationTokenCall(EmailVerifyTokenRequest tokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tokenRequest;

        // create path and map variables
        String localVarPath = "/customer/customers/email_verify/get_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailVerificationTokenValidateBeforeCall(EmailVerifyTokenRequest tokenRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenRequest' is set
        if (tokenRequest == null) {
            throw new ApiException("Missing the required parameter 'tokenRequest' when calling getEmailVerificationToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailVerificationTokenCall(tokenRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a token that can be used to verify a customer email address
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param tokenRequest Token request (required)
     * @return EmailVerifyTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailVerifyTokenResponse getEmailVerificationToken(EmailVerifyTokenRequest tokenRequest) throws ApiException {
        ApiResponse<EmailVerifyTokenResponse> resp = getEmailVerificationTokenWithHttpInfo(tokenRequest);
        return resp.getData();
    }

    /**
     * Create a token that can be used to verify a customer email address
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param tokenRequest Token request (required)
     * @return ApiResponse&lt;EmailVerifyTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailVerifyTokenResponse> getEmailVerificationTokenWithHttpInfo(EmailVerifyTokenRequest tokenRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailVerificationTokenValidateBeforeCall(tokenRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailVerifyTokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a token that can be used to verify a customer email address (asynchronously)
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param tokenRequest Token request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailVerificationTokenAsync(EmailVerifyTokenRequest tokenRequest, final ApiCallback<EmailVerifyTokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailVerificationTokenValidateBeforeCall(tokenRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailVerifyTokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCustomer
     * @param customer Customer to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCustomerCall(Customer customer, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customer;

        // create path and map variables
        String localVarPath = "/customer/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCustomerValidateBeforeCall(Customer customer, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling insertCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCustomerCall(customer, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a customer
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse insertCustomer(Customer customer, String expand) throws ApiException {
        ApiResponse<CustomerResponse> resp = insertCustomerWithHttpInfo(customer, expand);
        return resp.getData();
    }

    /**
     * Insert a customer
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> insertCustomerWithHttpInfo(Customer customer, String expand) throws ApiException {
        com.squareup.okhttp.Call call = insertCustomerValidateBeforeCall(customer, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a customer (asynchronously)
     * Insert a customer on the UltraCart account. 
     * @param customer Customer to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCustomerAsync(Customer customer, String expand, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCustomerValidateBeforeCall(customer, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomer
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomerCall(Customer customer, Integer customerProfileOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customer;

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}"
            .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomerValidateBeforeCall(Customer customer, Integer customerProfileOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling updateCustomer(Async)");
        }
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling updateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomerCall(customer, customerProfileOid, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a customer
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CustomerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerResponse updateCustomer(Customer customer, Integer customerProfileOid, String expand) throws ApiException {
        ApiResponse<CustomerResponse> resp = updateCustomerWithHttpInfo(customer, customerProfileOid, expand);
        return resp.getData();
    }

    /**
     * Update a customer
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CustomerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerResponse> updateCustomerWithHttpInfo(Customer customer, Integer customerProfileOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomerValidateBeforeCall(customer, customerProfileOid, expand, null, null);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a customer (asynchronously)
     * Update a customer on the UltraCart account. 
     * @param customer Customer to update (required)
     * @param customerProfileOid The customer_profile_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomerAsync(Customer customer, Integer customerProfileOid, String expand, final ApiCallback<CustomerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomerValidateBeforeCall(customer, customerProfileOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomerEmailLists
     * @param customerProfileOid The customer profile oid (required)
     * @param listChanges List changes (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomerEmailListsCall(Integer customerProfileOid, CustomerEmailListChanges listChanges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = listChanges;

        // create path and map variables
        String localVarPath = "/customer/customers/{customer_profile_oid}/email_lists"
            .replaceAll("\\{" + "customer_profile_oid" + "\\}", apiClient.escapeString(customerProfileOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomerEmailListsValidateBeforeCall(Integer customerProfileOid, CustomerEmailListChanges listChanges, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customerProfileOid' is set
        if (customerProfileOid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileOid' when calling updateCustomerEmailLists(Async)");
        }
        
        // verify the required parameter 'listChanges' is set
        if (listChanges == null) {
            throw new ApiException("Missing the required parameter 'listChanges' when calling updateCustomerEmailLists(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomerEmailListsCall(customerProfileOid, listChanges, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email list subscriptions for a customer
     * Update email list subscriptions for a customer 
     * @param customerProfileOid The customer profile oid (required)
     * @param listChanges List changes (required)
     * @return CustomerEmailListChanges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerEmailListChanges updateCustomerEmailLists(Integer customerProfileOid, CustomerEmailListChanges listChanges) throws ApiException {
        ApiResponse<CustomerEmailListChanges> resp = updateCustomerEmailListsWithHttpInfo(customerProfileOid, listChanges);
        return resp.getData();
    }

    /**
     * Update email list subscriptions for a customer
     * Update email list subscriptions for a customer 
     * @param customerProfileOid The customer profile oid (required)
     * @param listChanges List changes (required)
     * @return ApiResponse&lt;CustomerEmailListChanges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerEmailListChanges> updateCustomerEmailListsWithHttpInfo(Integer customerProfileOid, CustomerEmailListChanges listChanges) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomerEmailListsValidateBeforeCall(customerProfileOid, listChanges, null, null);
        Type localVarReturnType = new TypeToken<CustomerEmailListChanges>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email list subscriptions for a customer (asynchronously)
     * Update email list subscriptions for a customer 
     * @param customerProfileOid The customer profile oid (required)
     * @param listChanges List changes (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomerEmailListsAsync(Integer customerProfileOid, CustomerEmailListChanges listChanges, final ApiCallback<CustomerEmailListChanges> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomerEmailListsValidateBeforeCall(customerProfileOid, listChanges, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerEmailListChanges>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for validateEmailVerificationToken
     * @param validationRequest Token validation request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call validateEmailVerificationTokenCall(EmailVerifyTokenValidateRequest validationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validationRequest;

        // create path and map variables
        String localVarPath = "/customer/customers/email_verify/validate_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call validateEmailVerificationTokenValidateBeforeCall(EmailVerifyTokenValidateRequest validationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'validationRequest' is set
        if (validationRequest == null) {
            throw new ApiException("Missing the required parameter 'validationRequest' when calling validateEmailVerificationToken(Async)");
        }
        

        com.squareup.okhttp.Call call = validateEmailVerificationTokenCall(validationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Validate a token that can be used to verify a customer email address
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param validationRequest Token validation request (required)
     * @return EmailVerifyTokenValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailVerifyTokenValidateResponse validateEmailVerificationToken(EmailVerifyTokenValidateRequest validationRequest) throws ApiException {
        ApiResponse<EmailVerifyTokenValidateResponse> resp = validateEmailVerificationTokenWithHttpInfo(validationRequest);
        return resp.getData();
    }

    /**
     * Validate a token that can be used to verify a customer email address
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param validationRequest Token validation request (required)
     * @return ApiResponse&lt;EmailVerifyTokenValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailVerifyTokenValidateResponse> validateEmailVerificationTokenWithHttpInfo(EmailVerifyTokenValidateRequest validationRequest) throws ApiException {
        com.squareup.okhttp.Call call = validateEmailVerificationTokenValidateBeforeCall(validationRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailVerifyTokenValidateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate a token that can be used to verify a customer email address (asynchronously)
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @param validationRequest Token validation request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateEmailVerificationTokenAsync(EmailVerifyTokenValidateRequest validationRequest, final ApiCallback<EmailVerifyTokenValidateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateEmailVerificationTokenValidateBeforeCall(validationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailVerifyTokenValidateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ChargebackDispute;
import com.ultracart.admin.v2.models.ChargebackDisputeResponse;
import com.ultracart.admin.v2.models.ChargebackDisputesResponse;
import com.ultracart.admin.v2.models.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChargebackApi {
    private ApiClient apiClient;

    public ChargebackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChargebackApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteChargeback
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChargebackCall(Integer chargebackDisputeOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
            .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChargebackValidateBeforeCall(Integer chargebackDisputeOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling deleteChargeback(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteChargebackCall(chargebackDisputeOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a chargeback
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse deleteChargeback(Integer chargebackDisputeOid) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = deleteChargebackWithHttpInfo(chargebackDisputeOid);
        return resp.getData();
    }

    /**
     * Delete a chargeback
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> deleteChargebackWithHttpInfo(Integer chargebackDisputeOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteChargebackValidateBeforeCall(chargebackDisputeOid, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a chargeback (asynchronously)
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChargebackAsync(Integer chargebackDisputeOid, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChargebackValidateBeforeCall(chargebackDisputeOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChargebackDispute
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChargebackDisputeCall(Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
            .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChargebackDisputeValidateBeforeCall(Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling getChargebackDispute(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChargebackDisputeCall(chargebackDisputeOid, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a chargeback
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse getChargebackDispute(Integer chargebackDisputeOid, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = getChargebackDisputeWithHttpInfo(chargebackDisputeOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve a chargeback
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> getChargebackDisputeWithHttpInfo(Integer chargebackDisputeOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getChargebackDisputeValidateBeforeCall(chargebackDisputeOid, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a chargeback (asynchronously)
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChargebackDisputeAsync(Integer chargebackDisputeOid, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChargebackDisputeValidateBeforeCall(chargebackDisputeOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChargebackDisputes
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChargebackDisputesCall(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/chargeback/chargebacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_id", orderId));
        if (caseNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("case_number", caseNumber));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (expirationDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiration_dts_start", expirationDtsStart));
        if (expirationDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiration_dts_end", expirationDtsEnd));
        if (chargebackDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("chargeback_dts_start", chargebackDtsStart));
        if (chargebackDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("chargeback_dts_end", chargebackDtsEnd));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChargebackDisputesValidateBeforeCall(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getChargebackDisputesCall(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve chargebacks
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputesResponse getChargebackDisputes(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<ChargebackDisputesResponse> resp = getChargebackDisputesWithHttpInfo(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve chargebacks
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputesResponse> getChargebackDisputesWithHttpInfo(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getChargebackDisputesValidateBeforeCall(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve chargebacks (asynchronously)
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChargebackDisputesAsync(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<ChargebackDisputesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChargebackDisputesValidateBeforeCall(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertChargeback
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertChargebackCall(ChargebackDispute chargeback, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chargeback;
        
        // create path and map variables
        String localVarPath = "/chargeback/chargebacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertChargebackValidateBeforeCall(ChargebackDispute chargeback, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chargeback' is set
        if (chargeback == null) {
            throw new ApiException("Missing the required parameter 'chargeback' when calling insertChargeback(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertChargebackCall(chargeback, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert a chargeback
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse insertChargeback(ChargebackDispute chargeback, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = insertChargebackWithHttpInfo(chargeback, expand);
        return resp.getData();
    }

    /**
     * Insert a chargeback
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> insertChargebackWithHttpInfo(ChargebackDispute chargeback, String expand) throws ApiException {
        com.squareup.okhttp.Call call = insertChargebackValidateBeforeCall(chargeback, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a chargeback (asynchronously)
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertChargebackAsync(ChargebackDispute chargeback, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertChargebackValidateBeforeCall(chargeback, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateChargeback
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChargebackCall(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chargeback;
        
        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
            .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateChargebackValidateBeforeCall(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chargeback' is set
        if (chargeback == null) {
            throw new ApiException("Missing the required parameter 'chargeback' when calling updateChargeback(Async)");
        }
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling updateChargeback(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateChargebackCall(chargeback, chargebackDisputeOid, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a chargeback
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse updateChargeback(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = updateChargebackWithHttpInfo(chargeback, chargebackDisputeOid, expand);
        return resp.getData();
    }

    /**
     * Update a chargeback
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> updateChargebackWithHttpInfo(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateChargebackValidateBeforeCall(chargeback, chargebackDisputeOid, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a chargeback (asynchronously)
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChargebackAsync(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChargebackValidateBeforeCall(chargeback, chargebackDisputeOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

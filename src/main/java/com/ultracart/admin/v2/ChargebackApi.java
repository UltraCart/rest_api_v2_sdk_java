/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.ChargebackDisputeResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.ChargebackDispute;
import com.ultracart.admin.v2.models.ChargebackDisputesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChargebackApi {
    private ApiClient apiClient;

    public ChargebackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChargebackApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for chargebackChargebacksChargebackDisputeOidDelete */
    private com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidDeleteCall(Integer chargebackDisputeOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling chargebackChargebacksChargebackDisputeOidDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a chargeback
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse chargebackChargebacksChargebackDisputeOidDelete(Integer chargebackDisputeOid) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = chargebackChargebacksChargebackDisputeOidDeleteWithHttpInfo(chargebackDisputeOid);
        return resp.getData();
    }

    /**
     * Delete a chargeback
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> chargebackChargebacksChargebackDisputeOidDeleteWithHttpInfo(Integer chargebackDisputeOid) throws ApiException {
        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidDeleteCall(chargebackDisputeOid, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a chargeback (asynchronously)
     * Delete a chargeback on the UltraCart account. 
     * @param chargebackDisputeOid The chargeback_dispute_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidDeleteAsync(Integer chargebackDisputeOid, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidDeleteCall(chargebackDisputeOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for chargebackChargebacksChargebackDisputeOidGet */
    private com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidGetCall(Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling chargebackChargebacksChargebackDisputeOidGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a chargeback
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse chargebackChargebacksChargebackDisputeOidGet(Integer chargebackDisputeOid, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = chargebackChargebacksChargebackDisputeOidGetWithHttpInfo(chargebackDisputeOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve a chargeback
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> chargebackChargebacksChargebackDisputeOidGetWithHttpInfo(Integer chargebackDisputeOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidGetCall(chargebackDisputeOid, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a chargeback (asynchronously)
     * Retrieves a single chargeback using the specified chargeback dispute oid. 
     * @param chargebackDisputeOid The chargeback dispute oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidGetAsync(Integer chargebackDisputeOid, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidGetCall(chargebackDisputeOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for chargebackChargebacksChargebackDisputeOidPut */
    private com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidPutCall(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chargeback;
        
        // verify the required parameter 'chargeback' is set
        if (chargeback == null) {
            throw new ApiException("Missing the required parameter 'chargeback' when calling chargebackChargebacksChargebackDisputeOidPut(Async)");
        }
        
        // verify the required parameter 'chargebackDisputeOid' is set
        if (chargebackDisputeOid == null) {
            throw new ApiException("Missing the required parameter 'chargebackDisputeOid' when calling chargebackChargebacksChargebackDisputeOidPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "chargeback_dispute_oid" + "\\}", apiClient.escapeString(chargebackDisputeOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a chargeback
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse chargebackChargebacksChargebackDisputeOidPut(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = chargebackChargebacksChargebackDisputeOidPutWithHttpInfo(chargeback, chargebackDisputeOid, expand);
        return resp.getData();
    }

    /**
     * Update a chargeback
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> chargebackChargebacksChargebackDisputeOidPutWithHttpInfo(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidPutCall(chargeback, chargebackDisputeOid, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a chargeback (asynchronously)
     * Update a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to update (required)
     * @param chargebackDisputeOid The chargeback_dispute_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargebackChargebacksChargebackDisputeOidPutAsync(ChargebackDispute chargeback, Integer chargebackDisputeOid, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargebackChargebacksChargebackDisputeOidPutCall(chargeback, chargebackDisputeOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for chargebackChargebacksGet */
    private com.squareup.okhttp.Call chargebackChargebacksGetCall(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/chargeback/chargebacks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_id", orderId));
        if (caseNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "case_number", caseNumber));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (expirationDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expiration_dts_start", expirationDtsStart));
        if (expirationDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "expiration_dts_end", expirationDtsEnd));
        if (chargebackDtsStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "chargeback_dts_start", chargebackDtsStart));
        if (chargebackDtsEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "chargeback_dts_end", chargebackDtsEnd));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve chargebacks
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputesResponse chargebackChargebacksGet(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<ChargebackDisputesResponse> resp = chargebackChargebacksGetWithHttpInfo(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve chargebacks
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputesResponse> chargebackChargebacksGetWithHttpInfo(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = chargebackChargebacksGetCall(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve chargebacks (asynchronously)
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param caseNumber Case number (optional)
     * @param status Status (optional)
     * @param expirationDtsStart Expiration dts start (optional)
     * @param expirationDtsEnd Expiration dts end (optional)
     * @param chargebackDtsStart Chargeback dts start (optional)
     * @param chargebackDtsEnd Chargeback dts end (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch chargebacks that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargebackChargebacksGetAsync(String orderId, String caseNumber, String status, String expirationDtsStart, String expirationDtsEnd, String chargebackDtsStart, String chargebackDtsEnd, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<ChargebackDisputesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargebackChargebacksGetCall(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for chargebackChargebacksPost */
    private com.squareup.okhttp.Call chargebackChargebacksPostCall(ChargebackDispute chargeback, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chargeback;
        
        // verify the required parameter 'chargeback' is set
        if (chargeback == null) {
            throw new ApiException("Missing the required parameter 'chargeback' when calling chargebackChargebacksPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/chargeback/chargebacks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Insert a chargeback
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ChargebackDisputeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChargebackDisputeResponse chargebackChargebacksPost(ChargebackDispute chargeback, String expand) throws ApiException {
        ApiResponse<ChargebackDisputeResponse> resp = chargebackChargebacksPostWithHttpInfo(chargeback, expand);
        return resp.getData();
    }

    /**
     * Insert a chargeback
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;ChargebackDisputeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChargebackDisputeResponse> chargebackChargebacksPostWithHttpInfo(ChargebackDispute chargeback, String expand) throws ApiException {
        com.squareup.okhttp.Call call = chargebackChargebacksPostCall(chargeback, expand, null, null);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a chargeback (asynchronously)
     * Insert a chargeback on the UltraCart account. 
     * @param chargeback Chargeback to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chargebackChargebacksPostAsync(ChargebackDispute chargeback, String expand, final ApiCallback<ChargebackDisputeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chargebackChargebacksPostCall(chargeback, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChargebackDisputeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

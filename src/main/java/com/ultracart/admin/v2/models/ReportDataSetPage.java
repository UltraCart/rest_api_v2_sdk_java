/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetRow;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSetPage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:19:33.697-04:00[America/Indianapolis]")
public class ReportDataSetPage {
  public static final String SERIALIZED_NAME_DATA_SET_UUID = "data_set_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_SET_UUID)
  private String dataSetUuid;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "next_page_token";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_NEXT_START_INDEX = "next_start_index";
  @SerializedName(SERIALIZED_NAME_NEXT_START_INDEX)
  private Integer nextStartIndex;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "page_number";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_ROW_COUNT = "row_count";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<ReportDataSetRow> rows = null;

  public static final String SERIALIZED_NAME_ROWS_S3_URL = "rows_s3_url";
  @SerializedName(SERIALIZED_NAME_ROWS_S3_URL)
  private String rowsS3Url;

  public static final String SERIALIZED_NAME_START_INDEX = "start_index";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public static final String SERIALIZED_NAME_TABLE_ID = "table_id";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public ReportDataSetPage() { 
  }

  public ReportDataSetPage dataSetUuid(String dataSetUuid) {
    
    this.dataSetUuid = dataSetUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set that is returned.
   * @return dataSetUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier assigned to the data set that is returned.")

  public String getDataSetUuid() {
    return dataSetUuid;
  }


  public void setDataSetUuid(String dataSetUuid) {
    this.dataSetUuid = dataSetUuid;
  }


  public ReportDataSetPage merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant that owns this data set
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant that owns this data set")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ReportDataSetPage nextPageToken(String nextPageToken) {
    
    this.nextPageToken = nextPageToken;
    return this;
  }

   /**
   * Get nextPageToken
   * @return nextPageToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNextPageToken() {
    return nextPageToken;
  }


  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ReportDataSetPage nextStartIndex(Integer nextStartIndex) {
    
    this.nextStartIndex = nextStartIndex;
    return this;
  }

   /**
   * Get nextStartIndex
   * @return nextStartIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNextStartIndex() {
    return nextStartIndex;
  }


  public void setNextStartIndex(Integer nextStartIndex) {
    this.nextStartIndex = nextStartIndex;
  }


  public ReportDataSetPage pageNumber(Integer pageNumber) {
    
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Get pageNumber
   * @return pageNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPageNumber() {
    return pageNumber;
  }


  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public ReportDataSetPage rowCount(Integer rowCount) {
    
    this.rowCount = rowCount;
    return this;
  }

   /**
   * Get rowCount
   * @return rowCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRowCount() {
    return rowCount;
  }


  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }


  public ReportDataSetPage rows(List<ReportDataSetRow> rows) {
    
    this.rows = rows;
    return this;
  }

  public ReportDataSetPage addRowsItem(ReportDataSetRow rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Rows returned for the data set
   * @return rows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rows returned for the data set")

  public List<ReportDataSetRow> getRows() {
    return rows;
  }


  public void setRows(List<ReportDataSetRow> rows) {
    this.rows = rows;
  }


  public ReportDataSetPage rowsS3Url(String rowsS3Url) {
    
    this.rowsS3Url = rowsS3Url;
    return this;
  }

   /**
   * Signed S3 URL where the page rows can be downloaded from
   * @return rowsS3Url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signed S3 URL where the page rows can be downloaded from")

  public String getRowsS3Url() {
    return rowsS3Url;
  }


  public void setRowsS3Url(String rowsS3Url) {
    this.rowsS3Url = rowsS3Url;
  }


  public ReportDataSetPage startIndex(Integer startIndex) {
    
    this.startIndex = startIndex;
    return this;
  }

   /**
   * Zero based index of the starting row
   * @return startIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Zero based index of the starting row")

  public Integer getStartIndex() {
    return startIndex;
  }


  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }


  public ReportDataSetPage tableId(String tableId) {
    
    this.tableId = tableId;
    return this;
  }

   /**
   * The BigQuery destination table id that contains the result.
   * @return tableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The BigQuery destination table id that contains the result.")

  public String getTableId() {
    return tableId;
  }


  public void setTableId(String tableId) {
    this.tableId = tableId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSetPage reportDataSetPage = (ReportDataSetPage) o;
    return Objects.equals(this.dataSetUuid, reportDataSetPage.dataSetUuid) &&
        Objects.equals(this.merchantId, reportDataSetPage.merchantId) &&
        Objects.equals(this.nextPageToken, reportDataSetPage.nextPageToken) &&
        Objects.equals(this.nextStartIndex, reportDataSetPage.nextStartIndex) &&
        Objects.equals(this.pageNumber, reportDataSetPage.pageNumber) &&
        Objects.equals(this.rowCount, reportDataSetPage.rowCount) &&
        Objects.equals(this.rows, reportDataSetPage.rows) &&
        Objects.equals(this.rowsS3Url, reportDataSetPage.rowsS3Url) &&
        Objects.equals(this.startIndex, reportDataSetPage.startIndex) &&
        Objects.equals(this.tableId, reportDataSetPage.tableId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetUuid, merchantId, nextPageToken, nextStartIndex, pageNumber, rowCount, rows, rowsS3Url, startIndex, tableId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSetPage {\n");
    sb.append("    dataSetUuid: ").append(toIndentedString(dataSetUuid)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    nextStartIndex: ").append(toIndentedString(nextStartIndex)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    rowsS3Url: ").append(toIndentedString(rowsS3Url)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_set_uuid");
    openapiFields.add("merchant_id");
    openapiFields.add("next_page_token");
    openapiFields.add("next_start_index");
    openapiFields.add("page_number");
    openapiFields.add("row_count");
    openapiFields.add("rows");
    openapiFields.add("rows_s3_url");
    openapiFields.add("start_index");
    openapiFields.add("table_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSetPage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSetPage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSetPage is not found in the empty JSON string", ReportDataSetPage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSetPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSetPage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("data_set_uuid") != null && !jsonObj.get("data_set_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_set_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_set_uuid").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("next_page_token") != null && !jsonObj.get("next_page_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_page_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_page_token").toString()));
      }
      JsonArray jsonArrayrows = jsonObj.getAsJsonArray("rows");
      if (jsonArrayrows != null) {
        // ensure the json data is an array
        if (!jsonObj.get("rows").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
        }

        // validate the optional field `rows` (array)
        for (int i = 0; i < jsonArrayrows.size(); i++) {
          ReportDataSetRow.validateJsonObject(jsonArrayrows.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("rows_s3_url") != null && !jsonObj.get("rows_s3_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows_s3_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rows_s3_url").toString()));
      }
      if (jsonObj.get("table_id") != null && !jsonObj.get("table_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSetPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSetPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSetPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSetPage.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSetPage>() {
           @Override
           public void write(JsonWriter out, ReportDataSetPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSetPage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSetPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSetPage
  * @throws IOException if the JSON string is invalid with respect to ReportDataSetPage
  */
  public static ReportDataSetPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSetPage.class);
  }

 /**
  * Convert an instance of ReportDataSetPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationEventRRWeb
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T07:52:49.477-05:00[America/Indianapolis]")
public class ConversationEventRRWeb {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DATA_PART = "data_part";
  @SerializedName(SERIALIZED_NAME_DATA_PART)
  private Integer dataPart;

  public static final String SERIALIZED_NAME_DATA_SHA256 = "data_sha256";
  @SerializedName(SERIALIZED_NAME_DATA_SHA256)
  private String dataSha256;

  public static final String SERIALIZED_NAME_DATA_TOTAL_PARTS = "data_total_parts";
  @SerializedName(SERIALIZED_NAME_DATA_TOTAL_PARTS)
  private Integer dataTotalParts;

  public static final String SERIALIZED_NAME_DATA_TOTAL_SHA256 = "data_total_sha256";
  @SerializedName(SERIALIZED_NAME_DATA_TOTAL_SHA256)
  private String dataTotalSha256;

  public static final String SERIALIZED_NAME_EVENT_INDEX = "event_index";
  @SerializedName(SERIALIZED_NAME_EVENT_INDEX)
  private Integer eventIndex;

  /**
   * Type of event
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INIT("init"),
    
    EVENTS("events");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ConversationEventRRWeb() { 
  }

  public ConversationEventRRWeb data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public ConversationEventRRWeb dataPart(Integer dataPart) {
    
    this.dataPart = dataPart;
    return this;
  }

   /**
   * Get dataPart
   * @return dataPart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDataPart() {
    return dataPart;
  }


  public void setDataPart(Integer dataPart) {
    this.dataPart = dataPart;
  }


  public ConversationEventRRWeb dataSha256(String dataSha256) {
    
    this.dataSha256 = dataSha256;
    return this;
  }

   /**
   * Get dataSha256
   * @return dataSha256
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataSha256() {
    return dataSha256;
  }


  public void setDataSha256(String dataSha256) {
    this.dataSha256 = dataSha256;
  }


  public ConversationEventRRWeb dataTotalParts(Integer dataTotalParts) {
    
    this.dataTotalParts = dataTotalParts;
    return this;
  }

   /**
   * Get dataTotalParts
   * @return dataTotalParts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDataTotalParts() {
    return dataTotalParts;
  }


  public void setDataTotalParts(Integer dataTotalParts) {
    this.dataTotalParts = dataTotalParts;
  }


  public ConversationEventRRWeb dataTotalSha256(String dataTotalSha256) {
    
    this.dataTotalSha256 = dataTotalSha256;
    return this;
  }

   /**
   * Get dataTotalSha256
   * @return dataTotalSha256
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDataTotalSha256() {
    return dataTotalSha256;
  }


  public void setDataTotalSha256(String dataTotalSha256) {
    this.dataTotalSha256 = dataTotalSha256;
  }


  public ConversationEventRRWeb eventIndex(Integer eventIndex) {
    
    this.eventIndex = eventIndex;
    return this;
  }

   /**
   * Get eventIndex
   * @return eventIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEventIndex() {
    return eventIndex;
  }


  public void setEventIndex(Integer eventIndex) {
    this.eventIndex = eventIndex;
  }


  public ConversationEventRRWeb type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of event
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of event")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationEventRRWeb conversationEventRRWeb = (ConversationEventRRWeb) o;
    return Objects.equals(this.data, conversationEventRRWeb.data) &&
        Objects.equals(this.dataPart, conversationEventRRWeb.dataPart) &&
        Objects.equals(this.dataSha256, conversationEventRRWeb.dataSha256) &&
        Objects.equals(this.dataTotalParts, conversationEventRRWeb.dataTotalParts) &&
        Objects.equals(this.dataTotalSha256, conversationEventRRWeb.dataTotalSha256) &&
        Objects.equals(this.eventIndex, conversationEventRRWeb.eventIndex) &&
        Objects.equals(this.type, conversationEventRRWeb.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, dataPart, dataSha256, dataTotalParts, dataTotalSha256, eventIndex, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationEventRRWeb {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataPart: ").append(toIndentedString(dataPart)).append("\n");
    sb.append("    dataSha256: ").append(toIndentedString(dataSha256)).append("\n");
    sb.append("    dataTotalParts: ").append(toIndentedString(dataTotalParts)).append("\n");
    sb.append("    dataTotalSha256: ").append(toIndentedString(dataTotalSha256)).append("\n");
    sb.append("    eventIndex: ").append(toIndentedString(eventIndex)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("data_part");
    openapiFields.add("data_sha256");
    openapiFields.add("data_total_parts");
    openapiFields.add("data_total_sha256");
    openapiFields.add("event_index");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationEventRRWeb
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationEventRRWeb.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationEventRRWeb is not found in the empty JSON string", ConversationEventRRWeb.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationEventRRWeb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationEventRRWeb` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if (jsonObj.get("data_sha256") != null && !jsonObj.get("data_sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_sha256").toString()));
      }
      if (jsonObj.get("data_total_sha256") != null && !jsonObj.get("data_total_sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_total_sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_total_sha256").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationEventRRWeb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationEventRRWeb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationEventRRWeb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationEventRRWeb.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationEventRRWeb>() {
           @Override
           public void write(JsonWriter out, ConversationEventRRWeb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationEventRRWeb read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationEventRRWeb given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationEventRRWeb
  * @throws IOException if the JSON string is invalid with respect to ConversationEventRRWeb
  */
  public static ConversationEventRRWeb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationEventRRWeb.class);
  }

 /**
  * Convert an instance of ConversationEventRRWeb to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


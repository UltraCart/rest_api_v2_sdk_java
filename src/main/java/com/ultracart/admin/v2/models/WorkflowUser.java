/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WorkflowUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-20T07:35:27.732-05:00[America/Indianapolis]")
public class WorkflowUser {
  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_ICON_URL = "user_icon_url";
  @SerializedName(SERIALIZED_NAME_USER_ICON_URL)
  private String userIconUrl;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public WorkflowUser() { 
  }

  public WorkflowUser user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * The user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }


  public WorkflowUser userIconUrl(String userIconUrl) {
    
    this.userIconUrl = userIconUrl;
    return this;
  }

   /**
   * The user icon URL if available
   * @return userIconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user icon URL if available")

  public String getUserIconUrl() {
    return userIconUrl;
  }


  public void setUserIconUrl(String userIconUrl) {
    this.userIconUrl = userIconUrl;
  }


  public WorkflowUser userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User ID")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowUser workflowUser = (WorkflowUser) o;
    return Objects.equals(this.user, workflowUser.user) &&
        Objects.equals(this.userIconUrl, workflowUser.userIconUrl) &&
        Objects.equals(this.userId, workflowUser.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, userIconUrl, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowUser {\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userIconUrl: ").append(toIndentedString(userIconUrl)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("user");
    openapiFields.add("user_icon_url");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WorkflowUser.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowUser is not found in the empty JSON string", WorkflowUser.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WorkflowUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowUser` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if (jsonObj.get("user_icon_url") != null && !jsonObj.get("user_icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_icon_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowUser.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowUser>() {
           @Override
           public void write(JsonWriter out, WorkflowUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowUser
  * @throws IOException if the JSON string is invalid with respect to WorkflowUser
  */
  public static WorkflowUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowUser.class);
  }

 /**
  * Convert an instance of WorkflowUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


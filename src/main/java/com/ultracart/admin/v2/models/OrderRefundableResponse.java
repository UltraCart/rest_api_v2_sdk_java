/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Error;
import com.ultracart.admin.v2.models.OrderReason;
import com.ultracart.admin.v2.models.ResponseMetadata;
import com.ultracart.admin.v2.models.Warning;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * OrderRefundableResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:06:05.635-04:00")



public class OrderRefundableResponse {
  @SerializedName("error")
  private Error error = null;

  @SerializedName("item_level_refund_reason_required")
  private Boolean itemLevelRefundReasonRequired = null;

  @SerializedName("item_level_refund_reasons")
  private List<OrderReason> itemLevelRefundReasons = null;

  @SerializedName("item_level_return_reasons")
  private List<OrderReason> itemLevelReturnReasons = null;

  @SerializedName("manual_because_multiple_charges")
  private Boolean manualBecauseMultipleCharges = null;

  @SerializedName("metadata")
  private ResponseMetadata metadata = null;

  @SerializedName("order_level_refund_reason_required")
  private Boolean orderLevelRefundReasonRequired = null;

  @SerializedName("order_level_refund_reasons")
  private List<OrderReason> orderLevelRefundReasons = null;

  @SerializedName("order_level_reject_reason_required")
  private Boolean orderLevelRejectReasonRequired = null;

  @SerializedName("order_level_reject_reasons")
  private List<OrderReason> orderLevelRejectReasons = null;

  @SerializedName("refundable")
  private Boolean refundable = null;

  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("warning")
  private Warning warning = null;

  public OrderRefundableResponse error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }

  public OrderRefundableResponse itemLevelRefundReasonRequired(Boolean itemLevelRefundReasonRequired) {
    this.itemLevelRefundReasonRequired = itemLevelRefundReasonRequired;
    return this;
  }

   /**
   * True if the item level refund reason is required
   * @return itemLevelRefundReasonRequired
  **/
  @ApiModelProperty(value = "True if the item level refund reason is required")
  public Boolean isItemLevelRefundReasonRequired() {
    return itemLevelRefundReasonRequired;
  }

  public void setItemLevelRefundReasonRequired(Boolean itemLevelRefundReasonRequired) {
    this.itemLevelRefundReasonRequired = itemLevelRefundReasonRequired;
  }

  public OrderRefundableResponse itemLevelRefundReasons(List<OrderReason> itemLevelRefundReasons) {
    this.itemLevelRefundReasons = itemLevelRefundReasons;
    return this;
  }

  public OrderRefundableResponse addItemLevelRefundReasonsItem(OrderReason itemLevelRefundReasonsItem) {
    if (this.itemLevelRefundReasons == null) {
      this.itemLevelRefundReasons = new ArrayList<OrderReason>();
    }
    this.itemLevelRefundReasons.add(itemLevelRefundReasonsItem);
    return this;
  }

   /**
   * Reason codes available at the item level.
   * @return itemLevelRefundReasons
  **/
  @ApiModelProperty(value = "Reason codes available at the item level.")
  public List<OrderReason> getItemLevelRefundReasons() {
    return itemLevelRefundReasons;
  }

  public void setItemLevelRefundReasons(List<OrderReason> itemLevelRefundReasons) {
    this.itemLevelRefundReasons = itemLevelRefundReasons;
  }

  public OrderRefundableResponse itemLevelReturnReasons(List<OrderReason> itemLevelReturnReasons) {
    this.itemLevelReturnReasons = itemLevelReturnReasons;
    return this;
  }

  public OrderRefundableResponse addItemLevelReturnReasonsItem(OrderReason itemLevelReturnReasonsItem) {
    if (this.itemLevelReturnReasons == null) {
      this.itemLevelReturnReasons = new ArrayList<OrderReason>();
    }
    this.itemLevelReturnReasons.add(itemLevelReturnReasonsItem);
    return this;
  }

   /**
   * Return codes available at the item level.
   * @return itemLevelReturnReasons
  **/
  @ApiModelProperty(value = "Return codes available at the item level.")
  public List<OrderReason> getItemLevelReturnReasons() {
    return itemLevelReturnReasons;
  }

  public void setItemLevelReturnReasons(List<OrderReason> itemLevelReturnReasons) {
    this.itemLevelReturnReasons = itemLevelReturnReasons;
  }

  public OrderRefundableResponse manualBecauseMultipleCharges(Boolean manualBecauseMultipleCharges) {
    this.manualBecauseMultipleCharges = manualBecauseMultipleCharges;
    return this;
  }

   /**
   * If true, this refund will have to be manually done because of additional charges with the virtual terminal were made
   * @return manualBecauseMultipleCharges
  **/
  @ApiModelProperty(value = "If true, this refund will have to be manually done because of additional charges with the virtual terminal were made")
  public Boolean isManualBecauseMultipleCharges() {
    return manualBecauseMultipleCharges;
  }

  public void setManualBecauseMultipleCharges(Boolean manualBecauseMultipleCharges) {
    this.manualBecauseMultipleCharges = manualBecauseMultipleCharges;
  }

  public OrderRefundableResponse metadata(ResponseMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public ResponseMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ResponseMetadata metadata) {
    this.metadata = metadata;
  }

  public OrderRefundableResponse orderLevelRefundReasonRequired(Boolean orderLevelRefundReasonRequired) {
    this.orderLevelRefundReasonRequired = orderLevelRefundReasonRequired;
    return this;
  }

   /**
   * True if the order level refund reason is required
   * @return orderLevelRefundReasonRequired
  **/
  @ApiModelProperty(value = "True if the order level refund reason is required")
  public Boolean isOrderLevelRefundReasonRequired() {
    return orderLevelRefundReasonRequired;
  }

  public void setOrderLevelRefundReasonRequired(Boolean orderLevelRefundReasonRequired) {
    this.orderLevelRefundReasonRequired = orderLevelRefundReasonRequired;
  }

  public OrderRefundableResponse orderLevelRefundReasons(List<OrderReason> orderLevelRefundReasons) {
    this.orderLevelRefundReasons = orderLevelRefundReasons;
    return this;
  }

  public OrderRefundableResponse addOrderLevelRefundReasonsItem(OrderReason orderLevelRefundReasonsItem) {
    if (this.orderLevelRefundReasons == null) {
      this.orderLevelRefundReasons = new ArrayList<OrderReason>();
    }
    this.orderLevelRefundReasons.add(orderLevelRefundReasonsItem);
    return this;
  }

   /**
   * Reason codes available at the order level.
   * @return orderLevelRefundReasons
  **/
  @ApiModelProperty(value = "Reason codes available at the order level.")
  public List<OrderReason> getOrderLevelRefundReasons() {
    return orderLevelRefundReasons;
  }

  public void setOrderLevelRefundReasons(List<OrderReason> orderLevelRefundReasons) {
    this.orderLevelRefundReasons = orderLevelRefundReasons;
  }

  public OrderRefundableResponse orderLevelRejectReasonRequired(Boolean orderLevelRejectReasonRequired) {
    this.orderLevelRejectReasonRequired = orderLevelRejectReasonRequired;
    return this;
  }

   /**
   * True if the order level reject reason is required
   * @return orderLevelRejectReasonRequired
  **/
  @ApiModelProperty(value = "True if the order level reject reason is required")
  public Boolean isOrderLevelRejectReasonRequired() {
    return orderLevelRejectReasonRequired;
  }

  public void setOrderLevelRejectReasonRequired(Boolean orderLevelRejectReasonRequired) {
    this.orderLevelRejectReasonRequired = orderLevelRejectReasonRequired;
  }

  public OrderRefundableResponse orderLevelRejectReasons(List<OrderReason> orderLevelRejectReasons) {
    this.orderLevelRejectReasons = orderLevelRejectReasons;
    return this;
  }

  public OrderRefundableResponse addOrderLevelRejectReasonsItem(OrderReason orderLevelRejectReasonsItem) {
    if (this.orderLevelRejectReasons == null) {
      this.orderLevelRejectReasons = new ArrayList<OrderReason>();
    }
    this.orderLevelRejectReasons.add(orderLevelRejectReasonsItem);
    return this;
  }

   /**
   * Reject codes available at the order level.
   * @return orderLevelRejectReasons
  **/
  @ApiModelProperty(value = "Reject codes available at the order level.")
  public List<OrderReason> getOrderLevelRejectReasons() {
    return orderLevelRejectReasons;
  }

  public void setOrderLevelRejectReasons(List<OrderReason> orderLevelRejectReasons) {
    this.orderLevelRejectReasons = orderLevelRejectReasons;
  }

  public OrderRefundableResponse refundable(Boolean refundable) {
    this.refundable = refundable;
    return this;
  }

   /**
   * Whether the order is refundable or not.  Null should be interpreted as false.
   * @return refundable
  **/
  @ApiModelProperty(value = "Whether the order is refundable or not.  Null should be interpreted as false.")
  public Boolean isRefundable() {
    return refundable;
  }

  public void setRefundable(Boolean refundable) {
    this.refundable = refundable;
  }

  public OrderRefundableResponse success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Indicates if API call was successful
   * @return success
  **/
  @ApiModelProperty(value = "Indicates if API call was successful")
  public Boolean isSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public OrderRefundableResponse warning(Warning warning) {
    this.warning = warning;
    return this;
  }

   /**
   * Get warning
   * @return warning
  **/
  @ApiModelProperty(value = "")
  public Warning getWarning() {
    return warning;
  }

  public void setWarning(Warning warning) {
    this.warning = warning;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderRefundableResponse orderRefundableResponse = (OrderRefundableResponse) o;
    return Objects.equals(this.error, orderRefundableResponse.error) &&
        Objects.equals(this.itemLevelRefundReasonRequired, orderRefundableResponse.itemLevelRefundReasonRequired) &&
        Objects.equals(this.itemLevelRefundReasons, orderRefundableResponse.itemLevelRefundReasons) &&
        Objects.equals(this.itemLevelReturnReasons, orderRefundableResponse.itemLevelReturnReasons) &&
        Objects.equals(this.manualBecauseMultipleCharges, orderRefundableResponse.manualBecauseMultipleCharges) &&
        Objects.equals(this.metadata, orderRefundableResponse.metadata) &&
        Objects.equals(this.orderLevelRefundReasonRequired, orderRefundableResponse.orderLevelRefundReasonRequired) &&
        Objects.equals(this.orderLevelRefundReasons, orderRefundableResponse.orderLevelRefundReasons) &&
        Objects.equals(this.orderLevelRejectReasonRequired, orderRefundableResponse.orderLevelRejectReasonRequired) &&
        Objects.equals(this.orderLevelRejectReasons, orderRefundableResponse.orderLevelRejectReasons) &&
        Objects.equals(this.refundable, orderRefundableResponse.refundable) &&
        Objects.equals(this.success, orderRefundableResponse.success) &&
        Objects.equals(this.warning, orderRefundableResponse.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, itemLevelRefundReasonRequired, itemLevelRefundReasons, itemLevelReturnReasons, manualBecauseMultipleCharges, metadata, orderLevelRefundReasonRequired, orderLevelRefundReasons, orderLevelRejectReasonRequired, orderLevelRejectReasons, refundable, success, warning);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderRefundableResponse {\n");
    
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    itemLevelRefundReasonRequired: ").append(toIndentedString(itemLevelRefundReasonRequired)).append("\n");
    sb.append("    itemLevelRefundReasons: ").append(toIndentedString(itemLevelRefundReasons)).append("\n");
    sb.append("    itemLevelReturnReasons: ").append(toIndentedString(itemLevelReturnReasons)).append("\n");
    sb.append("    manualBecauseMultipleCharges: ").append(toIndentedString(manualBecauseMultipleCharges)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    orderLevelRefundReasonRequired: ").append(toIndentedString(orderLevelRefundReasonRequired)).append("\n");
    sb.append("    orderLevelRefundReasons: ").append(toIndentedString(orderLevelRefundReasons)).append("\n");
    sb.append("    orderLevelRejectReasonRequired: ").append(toIndentedString(orderLevelRejectReasonRequired)).append("\n");
    sb.append("    orderLevelRejectReasons: ").append(toIndentedString(orderLevelRejectReasons)).append("\n");
    sb.append("    refundable: ").append(toIndentedString(refundable)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


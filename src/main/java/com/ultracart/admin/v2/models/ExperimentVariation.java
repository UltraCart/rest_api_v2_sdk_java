/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ExperimentVariationStat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ExperimentVariation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-25T15:35:19.757-05:00[America/Indianapolis]")
public class ExperimentVariation {
  public static final String SERIALIZED_NAME_ADD_TO_CART_COUNT = "add_to_cart_count";
  @SerializedName(SERIALIZED_NAME_ADD_TO_CART_COUNT)
  private Integer addToCartCount;

  public static final String SERIALIZED_NAME_AVERAGE_DURATION_SECONDS = "average_duration_seconds";
  @SerializedName(SERIALIZED_NAME_AVERAGE_DURATION_SECONDS)
  private Integer averageDurationSeconds;

  public static final String SERIALIZED_NAME_AVERAGE_OBJECTIVE_PER_SESSION = "average_objective_per_session";
  @SerializedName(SERIALIZED_NAME_AVERAGE_OBJECTIVE_PER_SESSION)
  private BigDecimal averageObjectivePerSession;

  public static final String SERIALIZED_NAME_AVERAGE_ORDER_VALUE = "average_order_value";
  @SerializedName(SERIALIZED_NAME_AVERAGE_ORDER_VALUE)
  private BigDecimal averageOrderValue;

  public static final String SERIALIZED_NAME_BOUNCE_COUNT = "bounce_count";
  @SerializedName(SERIALIZED_NAME_BOUNCE_COUNT)
  private Integer bounceCount;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversion_rate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private BigDecimal conversionRate;

  public static final String SERIALIZED_NAME_DAILY_STATISTICS = "daily_statistics";
  @SerializedName(SERIALIZED_NAME_DAILY_STATISTICS)
  private List<ExperimentVariationStat> dailyStatistics = null;

  public static final String SERIALIZED_NAME_DURATION_SECONDS_SUM = "duration_seconds_sum";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS_SUM)
  private Long durationSecondsSum;

  public static final String SERIALIZED_NAME_EVENT_COUNT = "event_count";
  @SerializedName(SERIALIZED_NAME_EVENT_COUNT)
  private Integer eventCount;

  public static final String SERIALIZED_NAME_INITIATE_CHECKOUT_COUNT = "initiate_checkout_count";
  @SerializedName(SERIALIZED_NAME_INITIATE_CHECKOUT_COUNT)
  private Integer initiateCheckoutCount;

  public static final String SERIALIZED_NAME_ORDER_COUNT = "order_count";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
  private Integer orderCount;

  public static final String SERIALIZED_NAME_ORDER_ITEM_COUNT = "order_item_count";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM_COUNT)
  private Integer orderItemCount;

  public static final String SERIALIZED_NAME_ORIGINAL_TRAFFIC_PERCENTAGE = "original_traffic_percentage";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRAFFIC_PERCENTAGE)
  private BigDecimal originalTrafficPercentage;

  public static final String SERIALIZED_NAME_PAGE_VIEW_COUNT = "page_view_count";
  @SerializedName(SERIALIZED_NAME_PAGE_VIEW_COUNT)
  private Integer pageViewCount;

  public static final String SERIALIZED_NAME_PAUSED = "paused";
  @SerializedName(SERIALIZED_NAME_PAUSED)
  private Boolean paused;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_SESSION_COUNT = "session_count";
  @SerializedName(SERIALIZED_NAME_SESSION_COUNT)
  private Integer sessionCount;

  public static final String SERIALIZED_NAME_SMS_OPT_INS = "sms_opt_ins";
  @SerializedName(SERIALIZED_NAME_SMS_OPT_INS)
  private Integer smsOptIns;

  public static final String SERIALIZED_NAME_TRAFFIC_PERCENTAGE = "traffic_percentage";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_PERCENTAGE)
  private BigDecimal trafficPercentage;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VARIATION_NAME = "variation_name";
  @SerializedName(SERIALIZED_NAME_VARIATION_NAME)
  private String variationName;

  public static final String SERIALIZED_NAME_VARIATION_NUMBER = "variation_number";
  @SerializedName(SERIALIZED_NAME_VARIATION_NUMBER)
  private Integer variationNumber;

  public static final String SERIALIZED_NAME_WINNER = "winner";
  @SerializedName(SERIALIZED_NAME_WINNER)
  private Boolean winner;

  public ExperimentVariation() { 
  }

  public ExperimentVariation addToCartCount(Integer addToCartCount) {
    
    this.addToCartCount = addToCartCount;
    return this;
  }

   /**
   * Total add to cart count for this variation
   * @return addToCartCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total add to cart count for this variation")

  public Integer getAddToCartCount() {
    return addToCartCount;
  }


  public void setAddToCartCount(Integer addToCartCount) {
    this.addToCartCount = addToCartCount;
  }


  public ExperimentVariation averageDurationSeconds(Integer averageDurationSeconds) {
    
    this.averageDurationSeconds = averageDurationSeconds;
    return this;
  }

   /**
   * Average duration seconds per session for this variation
   * @return averageDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average duration seconds per session for this variation")

  public Integer getAverageDurationSeconds() {
    return averageDurationSeconds;
  }


  public void setAverageDurationSeconds(Integer averageDurationSeconds) {
    this.averageDurationSeconds = averageDurationSeconds;
  }


  public ExperimentVariation averageObjectivePerSession(BigDecimal averageObjectivePerSession) {
    
    this.averageObjectivePerSession = averageObjectivePerSession;
    return this;
  }

   /**
   * Average objective value per session for this variation
   * @return averageObjectivePerSession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average objective value per session for this variation")

  public BigDecimal getAverageObjectivePerSession() {
    return averageObjectivePerSession;
  }


  public void setAverageObjectivePerSession(BigDecimal averageObjectivePerSession) {
    this.averageObjectivePerSession = averageObjectivePerSession;
  }


  public ExperimentVariation averageOrderValue(BigDecimal averageOrderValue) {
    
    this.averageOrderValue = averageOrderValue;
    return this;
  }

   /**
   * Average order value for this variation
   * @return averageOrderValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average order value for this variation")

  public BigDecimal getAverageOrderValue() {
    return averageOrderValue;
  }


  public void setAverageOrderValue(BigDecimal averageOrderValue) {
    this.averageOrderValue = averageOrderValue;
  }


  public ExperimentVariation bounceCount(Integer bounceCount) {
    
    this.bounceCount = bounceCount;
    return this;
  }

   /**
   * Total bounce count for this variation
   * @return bounceCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total bounce count for this variation")

  public Integer getBounceCount() {
    return bounceCount;
  }


  public void setBounceCount(Integer bounceCount) {
    this.bounceCount = bounceCount;
  }


  public ExperimentVariation conversionRate(BigDecimal conversionRate) {
    
    this.conversionRate = conversionRate;
    return this;
  }

   /**
   * Conversion rate for this variation
   * @return conversionRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversion rate for this variation")

  public BigDecimal getConversionRate() {
    return conversionRate;
  }


  public void setConversionRate(BigDecimal conversionRate) {
    this.conversionRate = conversionRate;
  }


  public ExperimentVariation dailyStatistics(List<ExperimentVariationStat> dailyStatistics) {
    
    this.dailyStatistics = dailyStatistics;
    return this;
  }

  public ExperimentVariation addDailyStatisticsItem(ExperimentVariationStat dailyStatisticsItem) {
    if (this.dailyStatistics == null) {
      this.dailyStatistics = new ArrayList<>();
    }
    this.dailyStatistics.add(dailyStatisticsItem);
    return this;
  }

   /**
   * Array of daily statistics for this variation
   * @return dailyStatistics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of daily statistics for this variation")

  public List<ExperimentVariationStat> getDailyStatistics() {
    return dailyStatistics;
  }


  public void setDailyStatistics(List<ExperimentVariationStat> dailyStatistics) {
    this.dailyStatistics = dailyStatistics;
  }


  public ExperimentVariation durationSecondsSum(Long durationSecondsSum) {
    
    this.durationSecondsSum = durationSecondsSum;
    return this;
  }

   /**
   * Total number of seconds spent on the site for this variation
   * @return durationSecondsSum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of seconds spent on the site for this variation")

  public Long getDurationSecondsSum() {
    return durationSecondsSum;
  }


  public void setDurationSecondsSum(Long durationSecondsSum) {
    this.durationSecondsSum = durationSecondsSum;
  }


  public ExperimentVariation eventCount(Integer eventCount) {
    
    this.eventCount = eventCount;
    return this;
  }

   /**
   * Total event ocunt for this variation
   * @return eventCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total event ocunt for this variation")

  public Integer getEventCount() {
    return eventCount;
  }


  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }


  public ExperimentVariation initiateCheckoutCount(Integer initiateCheckoutCount) {
    
    this.initiateCheckoutCount = initiateCheckoutCount;
    return this;
  }

   /**
   * Total initiate checkout count for this variation
   * @return initiateCheckoutCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total initiate checkout count for this variation")

  public Integer getInitiateCheckoutCount() {
    return initiateCheckoutCount;
  }


  public void setInitiateCheckoutCount(Integer initiateCheckoutCount) {
    this.initiateCheckoutCount = initiateCheckoutCount;
  }


  public ExperimentVariation orderCount(Integer orderCount) {
    
    this.orderCount = orderCount;
    return this;
  }

   /**
   * Total order count for this variation
   * @return orderCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total order count for this variation")

  public Integer getOrderCount() {
    return orderCount;
  }


  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }


  public ExperimentVariation orderItemCount(Integer orderItemCount) {
    
    this.orderItemCount = orderItemCount;
    return this;
  }

   /**
   * Total order item count for this variation
   * @return orderItemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total order item count for this variation")

  public Integer getOrderItemCount() {
    return orderItemCount;
  }


  public void setOrderItemCount(Integer orderItemCount) {
    this.orderItemCount = orderItemCount;
  }


  public ExperimentVariation originalTrafficPercentage(BigDecimal originalTrafficPercentage) {
    
    this.originalTrafficPercentage = originalTrafficPercentage;
    return this;
  }

   /**
   * Percentage of the traffic the variation originally started out with
   * @return originalTrafficPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Percentage of the traffic the variation originally started out with")

  public BigDecimal getOriginalTrafficPercentage() {
    return originalTrafficPercentage;
  }


  public void setOriginalTrafficPercentage(BigDecimal originalTrafficPercentage) {
    this.originalTrafficPercentage = originalTrafficPercentage;
  }


  public ExperimentVariation pageViewCount(Integer pageViewCount) {
    
    this.pageViewCount = pageViewCount;
    return this;
  }

   /**
   * Total page view count for this variation
   * @return pageViewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total page view count for this variation")

  public Integer getPageViewCount() {
    return pageViewCount;
  }


  public void setPageViewCount(Integer pageViewCount) {
    this.pageViewCount = pageViewCount;
  }


  public ExperimentVariation paused(Boolean paused) {
    
    this.paused = paused;
    return this;
  }

   /**
   * True if traffic should be paused to this variation
   * @return paused
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if traffic should be paused to this variation")

  public Boolean getPaused() {
    return paused;
  }


  public void setPaused(Boolean paused) {
    this.paused = paused;
  }


  public ExperimentVariation revenue(BigDecimal revenue) {
    
    this.revenue = revenue;
    return this;
  }

   /**
   * Total revenue for this variation
   * @return revenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total revenue for this variation")

  public BigDecimal getRevenue() {
    return revenue;
  }


  public void setRevenue(BigDecimal revenue) {
    this.revenue = revenue;
  }


  public ExperimentVariation sessionCount(Integer sessionCount) {
    
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Total sessions for this variation
   * @return sessionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total sessions for this variation")

  public Integer getSessionCount() {
    return sessionCount;
  }


  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }


  public ExperimentVariation smsOptIns(Integer smsOptIns) {
    
    this.smsOptIns = smsOptIns;
    return this;
  }

   /**
   * SMS Opt Ins for this variation
   * @return smsOptIns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SMS Opt Ins for this variation")

  public Integer getSmsOptIns() {
    return smsOptIns;
  }


  public void setSmsOptIns(Integer smsOptIns) {
    this.smsOptIns = smsOptIns;
  }


  public ExperimentVariation trafficPercentage(BigDecimal trafficPercentage) {
    
    this.trafficPercentage = trafficPercentage;
    return this;
  }

   /**
   * Percentage of the traffic this variation is currently receiving
   * @return trafficPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Percentage of the traffic this variation is currently receiving")

  public BigDecimal getTrafficPercentage() {
    return trafficPercentage;
  }


  public void setTrafficPercentage(BigDecimal trafficPercentage) {
    this.trafficPercentage = trafficPercentage;
  }


  public ExperimentVariation url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Url of the variation if this experiment is a url experiment.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Url of the variation if this experiment is a url experiment.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public ExperimentVariation variationName(String variationName) {
    
    this.variationName = variationName;
    return this;
  }

   /**
   * Name of the variation
   * @return variationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the variation")

  public String getVariationName() {
    return variationName;
  }


  public void setVariationName(String variationName) {
    this.variationName = variationName;
  }


  public ExperimentVariation variationNumber(Integer variationNumber) {
    
    this.variationNumber = variationNumber;
    return this;
  }

   /**
   * Variation number
   * @return variationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variation number")

  public Integer getVariationNumber() {
    return variationNumber;
  }


  public void setVariationNumber(Integer variationNumber) {
    this.variationNumber = variationNumber;
  }


  public ExperimentVariation winner(Boolean winner) {
    
    this.winner = winner;
    return this;
  }

   /**
   * True if this variation has been declared the winner
   * @return winner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this variation has been declared the winner")

  public Boolean getWinner() {
    return winner;
  }


  public void setWinner(Boolean winner) {
    this.winner = winner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentVariation experimentVariation = (ExperimentVariation) o;
    return Objects.equals(this.addToCartCount, experimentVariation.addToCartCount) &&
        Objects.equals(this.averageDurationSeconds, experimentVariation.averageDurationSeconds) &&
        Objects.equals(this.averageObjectivePerSession, experimentVariation.averageObjectivePerSession) &&
        Objects.equals(this.averageOrderValue, experimentVariation.averageOrderValue) &&
        Objects.equals(this.bounceCount, experimentVariation.bounceCount) &&
        Objects.equals(this.conversionRate, experimentVariation.conversionRate) &&
        Objects.equals(this.dailyStatistics, experimentVariation.dailyStatistics) &&
        Objects.equals(this.durationSecondsSum, experimentVariation.durationSecondsSum) &&
        Objects.equals(this.eventCount, experimentVariation.eventCount) &&
        Objects.equals(this.initiateCheckoutCount, experimentVariation.initiateCheckoutCount) &&
        Objects.equals(this.orderCount, experimentVariation.orderCount) &&
        Objects.equals(this.orderItemCount, experimentVariation.orderItemCount) &&
        Objects.equals(this.originalTrafficPercentage, experimentVariation.originalTrafficPercentage) &&
        Objects.equals(this.pageViewCount, experimentVariation.pageViewCount) &&
        Objects.equals(this.paused, experimentVariation.paused) &&
        Objects.equals(this.revenue, experimentVariation.revenue) &&
        Objects.equals(this.sessionCount, experimentVariation.sessionCount) &&
        Objects.equals(this.smsOptIns, experimentVariation.smsOptIns) &&
        Objects.equals(this.trafficPercentage, experimentVariation.trafficPercentage) &&
        Objects.equals(this.url, experimentVariation.url) &&
        Objects.equals(this.variationName, experimentVariation.variationName) &&
        Objects.equals(this.variationNumber, experimentVariation.variationNumber) &&
        Objects.equals(this.winner, experimentVariation.winner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addToCartCount, averageDurationSeconds, averageObjectivePerSession, averageOrderValue, bounceCount, conversionRate, dailyStatistics, durationSecondsSum, eventCount, initiateCheckoutCount, orderCount, orderItemCount, originalTrafficPercentage, pageViewCount, paused, revenue, sessionCount, smsOptIns, trafficPercentage, url, variationName, variationNumber, winner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentVariation {\n");
    sb.append("    addToCartCount: ").append(toIndentedString(addToCartCount)).append("\n");
    sb.append("    averageDurationSeconds: ").append(toIndentedString(averageDurationSeconds)).append("\n");
    sb.append("    averageObjectivePerSession: ").append(toIndentedString(averageObjectivePerSession)).append("\n");
    sb.append("    averageOrderValue: ").append(toIndentedString(averageOrderValue)).append("\n");
    sb.append("    bounceCount: ").append(toIndentedString(bounceCount)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    dailyStatistics: ").append(toIndentedString(dailyStatistics)).append("\n");
    sb.append("    durationSecondsSum: ").append(toIndentedString(durationSecondsSum)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    initiateCheckoutCount: ").append(toIndentedString(initiateCheckoutCount)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    orderItemCount: ").append(toIndentedString(orderItemCount)).append("\n");
    sb.append("    originalTrafficPercentage: ").append(toIndentedString(originalTrafficPercentage)).append("\n");
    sb.append("    pageViewCount: ").append(toIndentedString(pageViewCount)).append("\n");
    sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    smsOptIns: ").append(toIndentedString(smsOptIns)).append("\n");
    sb.append("    trafficPercentage: ").append(toIndentedString(trafficPercentage)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    variationName: ").append(toIndentedString(variationName)).append("\n");
    sb.append("    variationNumber: ").append(toIndentedString(variationNumber)).append("\n");
    sb.append("    winner: ").append(toIndentedString(winner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_to_cart_count");
    openapiFields.add("average_duration_seconds");
    openapiFields.add("average_objective_per_session");
    openapiFields.add("average_order_value");
    openapiFields.add("bounce_count");
    openapiFields.add("conversion_rate");
    openapiFields.add("daily_statistics");
    openapiFields.add("duration_seconds_sum");
    openapiFields.add("event_count");
    openapiFields.add("initiate_checkout_count");
    openapiFields.add("order_count");
    openapiFields.add("order_item_count");
    openapiFields.add("original_traffic_percentage");
    openapiFields.add("page_view_count");
    openapiFields.add("paused");
    openapiFields.add("revenue");
    openapiFields.add("session_count");
    openapiFields.add("sms_opt_ins");
    openapiFields.add("traffic_percentage");
    openapiFields.add("url");
    openapiFields.add("variation_name");
    openapiFields.add("variation_number");
    openapiFields.add("winner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExperimentVariation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ExperimentVariation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperimentVariation is not found in the empty JSON string", ExperimentVariation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExperimentVariation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExperimentVariation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydailyStatistics = jsonObj.getAsJsonArray("daily_statistics");
      if (jsonArraydailyStatistics != null) {
        // ensure the json data is an array
        if (!jsonObj.get("daily_statistics").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `daily_statistics` to be an array in the JSON string but got `%s`", jsonObj.get("daily_statistics").toString()));
        }

        // validate the optional field `daily_statistics` (array)
        for (int i = 0; i < jsonArraydailyStatistics.size(); i++) {
          ExperimentVariationStat.validateJsonObject(jsonArraydailyStatistics.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("variation_name") != null && !jsonObj.get("variation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperimentVariation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperimentVariation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperimentVariation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperimentVariation.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperimentVariation>() {
           @Override
           public void write(JsonWriter out, ExperimentVariation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperimentVariation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExperimentVariation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExperimentVariation
  * @throws IOException if the JSON string is invalid with respect to ExperimentVariation
  */
  public static ExperimentVariation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperimentVariation.class);
  }

 /**
  * Convert an instance of ExperimentVariation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


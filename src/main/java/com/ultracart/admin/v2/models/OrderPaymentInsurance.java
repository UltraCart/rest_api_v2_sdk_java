/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPaymentInsurance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-02T10:25:50.319-04:00[America/Indianapolis]")
public class OrderPaymentInsurance {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "application_id";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_CLAIM_ID = "claim_id";
  @SerializedName(SERIALIZED_NAME_CLAIM_ID)
  private String claimId;

  public static final String SERIALIZED_NAME_INSURANCE_TYPE = "insurance_type";
  @SerializedName(SERIALIZED_NAME_INSURANCE_TYPE)
  private String insuranceType;

  public static final String SERIALIZED_NAME_REFUND_CLAIM_ID = "refund_claim_id";
  @SerializedName(SERIALIZED_NAME_REFUND_CLAIM_ID)
  private String refundClaimId;

  public OrderPaymentInsurance() { 
  }

  public OrderPaymentInsurance applicationId(String applicationId) {
    
    this.applicationId = applicationId;
    return this;
  }

   /**
   * application id
   * @return applicationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "application id")

  public String getApplicationId() {
    return applicationId;
  }


  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public OrderPaymentInsurance claimId(String claimId) {
    
    this.claimId = claimId;
    return this;
  }

   /**
   * claim id
   * @return claimId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "claim id")

  public String getClaimId() {
    return claimId;
  }


  public void setClaimId(String claimId) {
    this.claimId = claimId;
  }


  public OrderPaymentInsurance insuranceType(String insuranceType) {
    
    this.insuranceType = insuranceType;
    return this;
  }

   /**
   * insurance type
   * @return insuranceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "insurance type")

  public String getInsuranceType() {
    return insuranceType;
  }


  public void setInsuranceType(String insuranceType) {
    this.insuranceType = insuranceType;
  }


  public OrderPaymentInsurance refundClaimId(String refundClaimId) {
    
    this.refundClaimId = refundClaimId;
    return this;
  }

   /**
   * refund claim id
   * @return refundClaimId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "refund claim id")

  public String getRefundClaimId() {
    return refundClaimId;
  }


  public void setRefundClaimId(String refundClaimId) {
    this.refundClaimId = refundClaimId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentInsurance orderPaymentInsurance = (OrderPaymentInsurance) o;
    return Objects.equals(this.applicationId, orderPaymentInsurance.applicationId) &&
        Objects.equals(this.claimId, orderPaymentInsurance.claimId) &&
        Objects.equals(this.insuranceType, orderPaymentInsurance.insuranceType) &&
        Objects.equals(this.refundClaimId, orderPaymentInsurance.refundClaimId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, claimId, insuranceType, refundClaimId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentInsurance {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    claimId: ").append(toIndentedString(claimId)).append("\n");
    sb.append("    insuranceType: ").append(toIndentedString(insuranceType)).append("\n");
    sb.append("    refundClaimId: ").append(toIndentedString(refundClaimId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_id");
    openapiFields.add("claim_id");
    openapiFields.add("insurance_type");
    openapiFields.add("refund_claim_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPaymentInsurance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPaymentInsurance.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPaymentInsurance is not found in the empty JSON string", OrderPaymentInsurance.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPaymentInsurance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPaymentInsurance` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("application_id") != null && !jsonObj.get("application_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_id").toString()));
      }
      if (jsonObj.get("claim_id") != null && !jsonObj.get("claim_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claim_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claim_id").toString()));
      }
      if (jsonObj.get("insurance_type") != null && !jsonObj.get("insurance_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insurance_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insurance_type").toString()));
      }
      if (jsonObj.get("refund_claim_id") != null && !jsonObj.get("refund_claim_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_claim_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_claim_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPaymentInsurance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPaymentInsurance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPaymentInsurance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPaymentInsurance.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPaymentInsurance>() {
           @Override
           public void write(JsonWriter out, OrderPaymentInsurance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPaymentInsurance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPaymentInsurance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPaymentInsurance
  * @throws IOException if the JSON string is invalid with respect to OrderPaymentInsurance
  */
  public static OrderPaymentInsurance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPaymentInsurance.class);
  }

 /**
  * Convert an instance of OrderPaymentInsurance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


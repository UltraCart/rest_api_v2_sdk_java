/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingFilterGeoDistance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-23T09:20:07.999-04:00[America/Indianapolis]")
public class ScreenRecordingFilterGeoDistance {
  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Integer distance;

  public static final String SERIALIZED_NAME_DISTANCE_UOM = "distance_uom";
  @SerializedName(SERIALIZED_NAME_DISTANCE_UOM)
  private String distanceUom;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "from_address";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private BigDecimal lat;

  public static final String SERIALIZED_NAME_LON = "lon";
  @SerializedName(SERIALIZED_NAME_LON)
  private BigDecimal lon;

  public ScreenRecordingFilterGeoDistance() { 
  }

  public ScreenRecordingFilterGeoDistance distance(Integer distance) {
    
    this.distance = distance;
    return this;
  }

   /**
   * Get distance
   * @return distance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getDistance() {
    return distance;
  }


  public void setDistance(Integer distance) {
    this.distance = distance;
  }


  public ScreenRecordingFilterGeoDistance distanceUom(String distanceUom) {
    
    this.distanceUom = distanceUom;
    return this;
  }

   /**
   * Get distanceUom
   * @return distanceUom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDistanceUom() {
    return distanceUom;
  }


  public void setDistanceUom(String distanceUom) {
    this.distanceUom = distanceUom;
  }


  public ScreenRecordingFilterGeoDistance fromAddress(String fromAddress) {
    
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * Get fromAddress
   * @return fromAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFromAddress() {
    return fromAddress;
  }


  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public ScreenRecordingFilterGeoDistance lat(BigDecimal lat) {
    
    this.lat = lat;
    return this;
  }

   /**
   * Get lat
   * @return lat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getLat() {
    return lat;
  }


  public void setLat(BigDecimal lat) {
    this.lat = lat;
  }


  public ScreenRecordingFilterGeoDistance lon(BigDecimal lon) {
    
    this.lon = lon;
    return this;
  }

   /**
   * Get lon
   * @return lon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getLon() {
    return lon;
  }


  public void setLon(BigDecimal lon) {
    this.lon = lon;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterGeoDistance screenRecordingFilterGeoDistance = (ScreenRecordingFilterGeoDistance) o;
    return Objects.equals(this.distance, screenRecordingFilterGeoDistance.distance) &&
        Objects.equals(this.distanceUom, screenRecordingFilterGeoDistance.distanceUom) &&
        Objects.equals(this.fromAddress, screenRecordingFilterGeoDistance.fromAddress) &&
        Objects.equals(this.lat, screenRecordingFilterGeoDistance.lat) &&
        Objects.equals(this.lon, screenRecordingFilterGeoDistance.lon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distance, distanceUom, fromAddress, lat, lon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterGeoDistance {\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    distanceUom: ").append(toIndentedString(distanceUom)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distance");
    openapiFields.add("distance_uom");
    openapiFields.add("from_address");
    openapiFields.add("lat");
    openapiFields.add("lon");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingFilterGeoDistance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingFilterGeoDistance.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingFilterGeoDistance is not found in the empty JSON string", ScreenRecordingFilterGeoDistance.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingFilterGeoDistance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingFilterGeoDistance` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("distance_uom") != null && !jsonObj.get("distance_uom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distance_uom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distance_uom").toString()));
      }
      if (jsonObj.get("from_address") != null && !jsonObj.get("from_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingFilterGeoDistance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingFilterGeoDistance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingFilterGeoDistance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingFilterGeoDistance.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingFilterGeoDistance>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingFilterGeoDistance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingFilterGeoDistance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingFilterGeoDistance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingFilterGeoDistance
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingFilterGeoDistance
  */
  public static ScreenRecordingFilterGeoDistance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingFilterGeoDistance.class);
  }

 /**
  * Convert an instance of ScreenRecordingFilterGeoDistance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


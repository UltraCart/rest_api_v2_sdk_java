/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ReportDataSetSchema
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-05-06T15:04:13.591-04:00")



public class ReportDataSetSchema {
  @SerializedName("config")
  private String config = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Type of the column.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BIGNUMERIC("BIGNUMERIC"),
    
    BOOL("BOOL"),
    
    DATE("DATE"),
    
    DATETIME("DATETIME"),
    
    FLOAT64("FLOAT64"),
    
    INT64("INT64"),
    
    JSON("JSON"),
    
    NUMERIC("NUMERIC"),
    
    STRING("STRING"),
    
    TIME("TIME"),
    
    TIMESTAMP("TIMESTAMP");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public ReportDataSetSchema config(String config) {
    this.config = config;
    return this;
  }

   /**
   * A JSON representation of the configuration for this visualization
   * @return config
  **/
  @ApiModelProperty(value = "A JSON representation of the configuration for this visualization")
  public String getConfig() {
    return config;
  }

  public void setConfig(String config) {
    this.config = config;
  }

  public ReportDataSetSchema name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportDataSetSchema type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the column.
   * @return type
  **/
  @ApiModelProperty(value = "Type of the column.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSetSchema reportDataSetSchema = (ReportDataSetSchema) o;
    return Objects.equals(this.config, reportDataSetSchema.config) &&
        Objects.equals(this.name, reportDataSetSchema.name) &&
        Objects.equals(this.type, reportDataSetSchema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, name, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSetSchema {\n");
    
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


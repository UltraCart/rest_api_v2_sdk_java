/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxProviderUltraCartState;
import com.ultracart.admin.v2.models.UltraCartConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxProviderUltraCart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T16:39:13.797-04:00[America/Indianapolis]")
public class TaxProviderUltraCart {
  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private UltraCartConfig _configuration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<TaxProviderUltraCartState> states = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public TaxProviderUltraCart() { 
  }

  public TaxProviderUltraCart _configuration(UltraCartConfig _configuration) {
    
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UltraCartConfig getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(UltraCartConfig _configuration) {
    this._configuration = _configuration;
  }


  public TaxProviderUltraCart description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TaxProviderUltraCart selected(Boolean selected) {
    
    this.selected = selected;
    return this;
  }

   /**
   * Selected
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Selected")

  public Boolean getSelected() {
    return selected;
  }


  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public TaxProviderUltraCart states(List<TaxProviderUltraCartState> states) {
    
    this.states = states;
    return this;
  }

  public TaxProviderUltraCart addStatesItem(TaxProviderUltraCartState statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * States in the union showing their management status
   * @return states
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "States in the union showing their management status")

  public List<TaxProviderUltraCartState> getStates() {
    return states;
  }


  public void setStates(List<TaxProviderUltraCartState> states) {
    this.states = states;
  }


  public TaxProviderUltraCart title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxProviderUltraCart taxProviderUltraCart = (TaxProviderUltraCart) o;
    return Objects.equals(this._configuration, taxProviderUltraCart._configuration) &&
        Objects.equals(this.description, taxProviderUltraCart.description) &&
        Objects.equals(this.selected, taxProviderUltraCart.selected) &&
        Objects.equals(this.states, taxProviderUltraCart.states) &&
        Objects.equals(this.title, taxProviderUltraCart.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, description, selected, states, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxProviderUltraCart {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration");
    openapiFields.add("description");
    openapiFields.add("selected");
    openapiFields.add("states");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxProviderUltraCart
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxProviderUltraCart.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxProviderUltraCart is not found in the empty JSON string", TaxProviderUltraCart.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxProviderUltraCart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxProviderUltraCart` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `configuration`
      if (jsonObj.getAsJsonObject("configuration") != null) {
        UltraCartConfig.validateJsonObject(jsonObj.getAsJsonObject("configuration"));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
      if (jsonArraystates != null) {
        // ensure the json data is an array
        if (!jsonObj.get("states").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
        }

        // validate the optional field `states` (array)
        for (int i = 0; i < jsonArraystates.size(); i++) {
          TaxProviderUltraCartState.validateJsonObject(jsonArraystates.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxProviderUltraCart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxProviderUltraCart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxProviderUltraCart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxProviderUltraCart.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxProviderUltraCart>() {
           @Override
           public void write(JsonWriter out, TaxProviderUltraCart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxProviderUltraCart read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxProviderUltraCart given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxProviderUltraCart
  * @throws IOException if the JSON string is invalid with respect to TaxProviderUltraCart
  */
  public static TaxProviderUltraCart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxProviderUltraCart.class);
  }

 /**
  * Convert an instance of TaxProviderUltraCart to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


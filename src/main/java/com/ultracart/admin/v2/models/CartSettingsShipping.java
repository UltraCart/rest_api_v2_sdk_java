/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartSettingsProvince;
import com.ultracart.admin.v2.models.CartSettingsShippingCalendar;
import com.ultracart.admin.v2.models.CartSettingsShippingEstimate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartSettingsShipping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-29T14:56:15.183-04:00[America/Indianapolis]")
public class CartSettingsShipping {
  public static final String SERIALIZED_NAME_DELIVER_ON_DATE = "deliver_on_date";
  @SerializedName(SERIALIZED_NAME_DELIVER_ON_DATE)
  private CartSettingsShippingCalendar deliverOnDate;

  public static final String SERIALIZED_NAME_ESTIMATES = "estimates";
  @SerializedName(SERIALIZED_NAME_ESTIMATES)
  private List<CartSettingsShippingEstimate> estimates = null;

  public static final String SERIALIZED_NAME_NEED_SHIPPING = "need_shipping";
  @SerializedName(SERIALIZED_NAME_NEED_SHIPPING)
  private Boolean needShipping;

  public static final String SERIALIZED_NAME_PROVINCES = "provinces";
  @SerializedName(SERIALIZED_NAME_PROVINCES)
  private List<CartSettingsProvince> provinces = null;

  public static final String SERIALIZED_NAME_SHIP_ON_DATE = "ship_on_date";
  @SerializedName(SERIALIZED_NAME_SHIP_ON_DATE)
  private CartSettingsShippingCalendar shipOnDate;

  public CartSettingsShipping() { 
  }

  public CartSettingsShipping deliverOnDate(CartSettingsShippingCalendar deliverOnDate) {
    
    this.deliverOnDate = deliverOnDate;
    return this;
  }

   /**
   * Get deliverOnDate
   * @return deliverOnDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsShippingCalendar getDeliverOnDate() {
    return deliverOnDate;
  }


  public void setDeliverOnDate(CartSettingsShippingCalendar deliverOnDate) {
    this.deliverOnDate = deliverOnDate;
  }


  public CartSettingsShipping estimates(List<CartSettingsShippingEstimate> estimates) {
    
    this.estimates = estimates;
    return this;
  }

  public CartSettingsShipping addEstimatesItem(CartSettingsShippingEstimate estimatesItem) {
    if (this.estimates == null) {
      this.estimates = new ArrayList<>();
    }
    this.estimates.add(estimatesItem);
    return this;
  }

   /**
   * Estimates for this cart
   * @return estimates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Estimates for this cart")

  public List<CartSettingsShippingEstimate> getEstimates() {
    return estimates;
  }


  public void setEstimates(List<CartSettingsShippingEstimate> estimates) {
    this.estimates = estimates;
  }


  public CartSettingsShipping needShipping(Boolean needShipping) {
    
    this.needShipping = needShipping;
    return this;
  }

   /**
   * True if this order needs shipping
   * @return needShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this order needs shipping")

  public Boolean getNeedShipping() {
    return needShipping;
  }


  public void setNeedShipping(Boolean needShipping) {
    this.needShipping = needShipping;
  }


  public CartSettingsShipping provinces(List<CartSettingsProvince> provinces) {
    
    this.provinces = provinces;
    return this;
  }

  public CartSettingsShipping addProvincesItem(CartSettingsProvince provincesItem) {
    if (this.provinces == null) {
      this.provinces = new ArrayList<>();
    }
    this.provinces.add(provincesItem);
    return this;
  }

   /**
   * Provinces
   * @return provinces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provinces")

  public List<CartSettingsProvince> getProvinces() {
    return provinces;
  }


  public void setProvinces(List<CartSettingsProvince> provinces) {
    this.provinces = provinces;
  }


  public CartSettingsShipping shipOnDate(CartSettingsShippingCalendar shipOnDate) {
    
    this.shipOnDate = shipOnDate;
    return this;
  }

   /**
   * Get shipOnDate
   * @return shipOnDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsShippingCalendar getShipOnDate() {
    return shipOnDate;
  }


  public void setShipOnDate(CartSettingsShippingCalendar shipOnDate) {
    this.shipOnDate = shipOnDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSettingsShipping cartSettingsShipping = (CartSettingsShipping) o;
    return Objects.equals(this.deliverOnDate, cartSettingsShipping.deliverOnDate) &&
        Objects.equals(this.estimates, cartSettingsShipping.estimates) &&
        Objects.equals(this.needShipping, cartSettingsShipping.needShipping) &&
        Objects.equals(this.provinces, cartSettingsShipping.provinces) &&
        Objects.equals(this.shipOnDate, cartSettingsShipping.shipOnDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliverOnDate, estimates, needShipping, provinces, shipOnDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSettingsShipping {\n");
    sb.append("    deliverOnDate: ").append(toIndentedString(deliverOnDate)).append("\n");
    sb.append("    estimates: ").append(toIndentedString(estimates)).append("\n");
    sb.append("    needShipping: ").append(toIndentedString(needShipping)).append("\n");
    sb.append("    provinces: ").append(toIndentedString(provinces)).append("\n");
    sb.append("    shipOnDate: ").append(toIndentedString(shipOnDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliver_on_date");
    openapiFields.add("estimates");
    openapiFields.add("need_shipping");
    openapiFields.add("provinces");
    openapiFields.add("ship_on_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartSettingsShipping
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartSettingsShipping.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSettingsShipping is not found in the empty JSON string", CartSettingsShipping.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartSettingsShipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSettingsShipping` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `deliver_on_date`
      if (jsonObj.getAsJsonObject("deliver_on_date") != null) {
        CartSettingsShippingCalendar.validateJsonObject(jsonObj.getAsJsonObject("deliver_on_date"));
      }
      JsonArray jsonArrayestimates = jsonObj.getAsJsonArray("estimates");
      if (jsonArrayestimates != null) {
        // ensure the json data is an array
        if (!jsonObj.get("estimates").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `estimates` to be an array in the JSON string but got `%s`", jsonObj.get("estimates").toString()));
        }

        // validate the optional field `estimates` (array)
        for (int i = 0; i < jsonArrayestimates.size(); i++) {
          CartSettingsShippingEstimate.validateJsonObject(jsonArrayestimates.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayprovinces = jsonObj.getAsJsonArray("provinces");
      if (jsonArrayprovinces != null) {
        // ensure the json data is an array
        if (!jsonObj.get("provinces").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `provinces` to be an array in the JSON string but got `%s`", jsonObj.get("provinces").toString()));
        }

        // validate the optional field `provinces` (array)
        for (int i = 0; i < jsonArrayprovinces.size(); i++) {
          CartSettingsProvince.validateJsonObject(jsonArrayprovinces.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `ship_on_date`
      if (jsonObj.getAsJsonObject("ship_on_date") != null) {
        CartSettingsShippingCalendar.validateJsonObject(jsonObj.getAsJsonObject("ship_on_date"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSettingsShipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSettingsShipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSettingsShipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSettingsShipping.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSettingsShipping>() {
           @Override
           public void write(JsonWriter out, CartSettingsShipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSettingsShipping read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSettingsShipping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSettingsShipping
  * @throws IOException if the JSON string is invalid with respect to CartSettingsShipping
  */
  public static CartSettingsShipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSettingsShipping.class);
  }

 /**
  * Convert an instance of CartSettingsShipping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


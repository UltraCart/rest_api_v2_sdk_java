/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderChannelPartner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-23T14:56:24.133-05:00[America/Indianapolis]")
public class OrderChannelPartner {
  public static final String SERIALIZED_NAME_AUTO_APPROVE_PURCHASE_ORDER = "auto_approve_purchase_order";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVE_PURCHASE_ORDER)
  private Boolean autoApprovePurchaseOrder;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_CODE = "channel_partner_code";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_CODE)
  private String channelPartnerCode;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_DATA = "channel_partner_data";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_DATA)
  private String channelPartnerData;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_OID = "channel_partner_oid";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_OID)
  private Integer channelPartnerOid;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_ORDER_ID = "channel_partner_order_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_ORDER_ID)
  private String channelPartnerOrderId;

  public static final String SERIALIZED_NAME_IGNORE_INVALID_SHIPPING_METHOD = "ignore_invalid_shipping_method";
  @SerializedName(SERIALIZED_NAME_IGNORE_INVALID_SHIPPING_METHOD)
  private Boolean ignoreInvalidShippingMethod;

  public static final String SERIALIZED_NAME_NO_REALTIME_PAYMENT_PROCESSING = "no_realtime_payment_processing";
  @SerializedName(SERIALIZED_NAME_NO_REALTIME_PAYMENT_PROCESSING)
  private Boolean noRealtimePaymentProcessing;

  public static final String SERIALIZED_NAME_SKIP_PAYMENT_PROCESSING = "skip_payment_processing";
  @SerializedName(SERIALIZED_NAME_SKIP_PAYMENT_PROCESSING)
  private Boolean skipPaymentProcessing;

  public static final String SERIALIZED_NAME_STORE_COMPLETED = "store_completed";
  @SerializedName(SERIALIZED_NAME_STORE_COMPLETED)
  private Boolean storeCompleted;

  public static final String SERIALIZED_NAME_STORE_IF_PAYMENT_DECLINES = "store_if_payment_declines";
  @SerializedName(SERIALIZED_NAME_STORE_IF_PAYMENT_DECLINES)
  private Boolean storeIfPaymentDeclines;

  public static final String SERIALIZED_NAME_TREAT_WARNINGS_AS_ERRORS = "treat_warnings_as_errors";
  @SerializedName(SERIALIZED_NAME_TREAT_WARNINGS_AS_ERRORS)
  private Boolean treatWarningsAsErrors;

  public OrderChannelPartner() { 
  }

  public OrderChannelPartner autoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
    return this;
  }

   /**
   * If true, any purchase order submitted is automatically approved
   * @return autoApprovePurchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, any purchase order submitted is automatically approved")

  public Boolean getAutoApprovePurchaseOrder() {
    return autoApprovePurchaseOrder;
  }


  public void setAutoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
  }


  public OrderChannelPartner channelPartnerCode(String channelPartnerCode) {
    
    this.channelPartnerCode = channelPartnerCode;
    return this;
  }

   /**
   * The code of the channel partner
   * @return channelPartnerCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The code of the channel partner")

  public String getChannelPartnerCode() {
    return channelPartnerCode;
  }


  public void setChannelPartnerCode(String channelPartnerCode) {
    this.channelPartnerCode = channelPartnerCode;
  }


  public OrderChannelPartner channelPartnerData(String channelPartnerData) {
    
    this.channelPartnerData = channelPartnerData;
    return this;
  }

   /**
   * Additional data provided by the channel partner, read-only
   * @return channelPartnerData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional data provided by the channel partner, read-only")

  public String getChannelPartnerData() {
    return channelPartnerData;
  }


  public void setChannelPartnerData(String channelPartnerData) {
    this.channelPartnerData = channelPartnerData;
  }


  public OrderChannelPartner channelPartnerOid(Integer channelPartnerOid) {
    
    this.channelPartnerOid = channelPartnerOid;
    return this;
  }

   /**
   * Channel partner object identifier, read-only and available on existing channel orders only.
   * @return channelPartnerOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel partner object identifier, read-only and available on existing channel orders only.")

  public Integer getChannelPartnerOid() {
    return channelPartnerOid;
  }


  public void setChannelPartnerOid(Integer channelPartnerOid) {
    this.channelPartnerOid = channelPartnerOid;
  }


  public OrderChannelPartner channelPartnerOrderId(String channelPartnerOrderId) {
    
    this.channelPartnerOrderId = channelPartnerOrderId;
    return this;
  }

   /**
   * The order ID assigned by the channel partner for this order.
   * @return channelPartnerOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The order ID assigned by the channel partner for this order.")

  public String getChannelPartnerOrderId() {
    return channelPartnerOrderId;
  }


  public void setChannelPartnerOrderId(String channelPartnerOrderId) {
    this.channelPartnerOrderId = channelPartnerOrderId;
  }


  public OrderChannelPartner ignoreInvalidShippingMethod(Boolean ignoreInvalidShippingMethod) {
    
    this.ignoreInvalidShippingMethod = ignoreInvalidShippingMethod;
    return this;
  }

   /**
   * Set to true to ignore invalid shipping method being specified.  Only applicable on inserting orders.
   * @return ignoreInvalidShippingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set to true to ignore invalid shipping method being specified.  Only applicable on inserting orders.")

  public Boolean getIgnoreInvalidShippingMethod() {
    return ignoreInvalidShippingMethod;
  }


  public void setIgnoreInvalidShippingMethod(Boolean ignoreInvalidShippingMethod) {
    this.ignoreInvalidShippingMethod = ignoreInvalidShippingMethod;
  }


  public OrderChannelPartner noRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
    return this;
  }

   /**
   * Indicates this order should be placed in Account Receivable for later payment processing
   * @return noRealtimePaymentProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates this order should be placed in Account Receivable for later payment processing")

  public Boolean getNoRealtimePaymentProcessing() {
    return noRealtimePaymentProcessing;
  }


  public void setNoRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
  }


  public OrderChannelPartner skipPaymentProcessing(Boolean skipPaymentProcessing) {
    
    this.skipPaymentProcessing = skipPaymentProcessing;
    return this;
  }

   /**
   * Indicates this order was already paid for via a channel purchase and no payment collection should be attempted
   * @return skipPaymentProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates this order was already paid for via a channel purchase and no payment collection should be attempted")

  public Boolean getSkipPaymentProcessing() {
    return skipPaymentProcessing;
  }


  public void setSkipPaymentProcessing(Boolean skipPaymentProcessing) {
    this.skipPaymentProcessing = skipPaymentProcessing;
  }


  public OrderChannelPartner storeCompleted(Boolean storeCompleted) {
    
    this.storeCompleted = storeCompleted;
    return this;
  }

   /**
   * Instructs UltraCart to skip shipping department and mark this order as fully complete.  This flag defaults to true.  Set this flag to false to shipped product for this order.
   * @return storeCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Instructs UltraCart to skip shipping department and mark this order as fully complete.  This flag defaults to true.  Set this flag to false to shipped product for this order.")

  public Boolean getStoreCompleted() {
    return storeCompleted;
  }


  public void setStoreCompleted(Boolean storeCompleted) {
    this.storeCompleted = storeCompleted;
  }


  public OrderChannelPartner storeIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
    return this;
  }

   /**
   * If true, any failed payment will place the order in Accounts Receivable rather than rejecting it.
   * @return storeIfPaymentDeclines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, any failed payment will place the order in Accounts Receivable rather than rejecting it.")

  public Boolean getStoreIfPaymentDeclines() {
    return storeIfPaymentDeclines;
  }


  public void setStoreIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
  }


  public OrderChannelPartner treatWarningsAsErrors(Boolean treatWarningsAsErrors) {
    
    this.treatWarningsAsErrors = treatWarningsAsErrors;
    return this;
  }

   /**
   * Any warnings are raised as errors and halt the import of the order
   * @return treatWarningsAsErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any warnings are raised as errors and halt the import of the order")

  public Boolean getTreatWarningsAsErrors() {
    return treatWarningsAsErrors;
  }


  public void setTreatWarningsAsErrors(Boolean treatWarningsAsErrors) {
    this.treatWarningsAsErrors = treatWarningsAsErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderChannelPartner orderChannelPartner = (OrderChannelPartner) o;
    return Objects.equals(this.autoApprovePurchaseOrder, orderChannelPartner.autoApprovePurchaseOrder) &&
        Objects.equals(this.channelPartnerCode, orderChannelPartner.channelPartnerCode) &&
        Objects.equals(this.channelPartnerData, orderChannelPartner.channelPartnerData) &&
        Objects.equals(this.channelPartnerOid, orderChannelPartner.channelPartnerOid) &&
        Objects.equals(this.channelPartnerOrderId, orderChannelPartner.channelPartnerOrderId) &&
        Objects.equals(this.ignoreInvalidShippingMethod, orderChannelPartner.ignoreInvalidShippingMethod) &&
        Objects.equals(this.noRealtimePaymentProcessing, orderChannelPartner.noRealtimePaymentProcessing) &&
        Objects.equals(this.skipPaymentProcessing, orderChannelPartner.skipPaymentProcessing) &&
        Objects.equals(this.storeCompleted, orderChannelPartner.storeCompleted) &&
        Objects.equals(this.storeIfPaymentDeclines, orderChannelPartner.storeIfPaymentDeclines) &&
        Objects.equals(this.treatWarningsAsErrors, orderChannelPartner.treatWarningsAsErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoApprovePurchaseOrder, channelPartnerCode, channelPartnerData, channelPartnerOid, channelPartnerOrderId, ignoreInvalidShippingMethod, noRealtimePaymentProcessing, skipPaymentProcessing, storeCompleted, storeIfPaymentDeclines, treatWarningsAsErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderChannelPartner {\n");
    sb.append("    autoApprovePurchaseOrder: ").append(toIndentedString(autoApprovePurchaseOrder)).append("\n");
    sb.append("    channelPartnerCode: ").append(toIndentedString(channelPartnerCode)).append("\n");
    sb.append("    channelPartnerData: ").append(toIndentedString(channelPartnerData)).append("\n");
    sb.append("    channelPartnerOid: ").append(toIndentedString(channelPartnerOid)).append("\n");
    sb.append("    channelPartnerOrderId: ").append(toIndentedString(channelPartnerOrderId)).append("\n");
    sb.append("    ignoreInvalidShippingMethod: ").append(toIndentedString(ignoreInvalidShippingMethod)).append("\n");
    sb.append("    noRealtimePaymentProcessing: ").append(toIndentedString(noRealtimePaymentProcessing)).append("\n");
    sb.append("    skipPaymentProcessing: ").append(toIndentedString(skipPaymentProcessing)).append("\n");
    sb.append("    storeCompleted: ").append(toIndentedString(storeCompleted)).append("\n");
    sb.append("    storeIfPaymentDeclines: ").append(toIndentedString(storeIfPaymentDeclines)).append("\n");
    sb.append("    treatWarningsAsErrors: ").append(toIndentedString(treatWarningsAsErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_approve_purchase_order");
    openapiFields.add("channel_partner_code");
    openapiFields.add("channel_partner_data");
    openapiFields.add("channel_partner_oid");
    openapiFields.add("channel_partner_order_id");
    openapiFields.add("ignore_invalid_shipping_method");
    openapiFields.add("no_realtime_payment_processing");
    openapiFields.add("skip_payment_processing");
    openapiFields.add("store_completed");
    openapiFields.add("store_if_payment_declines");
    openapiFields.add("treat_warnings_as_errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderChannelPartner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderChannelPartner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderChannelPartner is not found in the empty JSON string", OrderChannelPartner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderChannelPartner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderChannelPartner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("channel_partner_code") != null && !jsonObj.get("channel_partner_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_partner_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_partner_code").toString()));
      }
      if (jsonObj.get("channel_partner_data") != null && !jsonObj.get("channel_partner_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_partner_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_partner_data").toString()));
      }
      if (jsonObj.get("channel_partner_order_id") != null && !jsonObj.get("channel_partner_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_partner_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_partner_order_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderChannelPartner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderChannelPartner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderChannelPartner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderChannelPartner.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderChannelPartner>() {
           @Override
           public void write(JsonWriter out, OrderChannelPartner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderChannelPartner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderChannelPartner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderChannelPartner
  * @throws IOException if the JSON string is invalid with respect to OrderChannelPartner
  */
  public static OrderChannelPartner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderChannelPartner.class);
  }

 /**
  * Convert an instance of OrderChannelPartner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


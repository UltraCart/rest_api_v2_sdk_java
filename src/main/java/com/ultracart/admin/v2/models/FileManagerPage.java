/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * FileManagerPage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-27T09:24:10.452-04:00[America/Indianapolis]")
public class FileManagerPage {
  public static final String SERIALIZED_NAME_CURRENT_STOREFRONT_FS_DIRECTORY_OID = "current_storefront_fs_directory_oid";
  @SerializedName(SERIALIZED_NAME_CURRENT_STOREFRONT_FS_DIRECTORY_OID)
  private Integer currentStorefrontFsDirectoryOid;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PARENT_STOREFRONT_FS_DIRECTORY_OID = "parent_storefront_fs_directory_oid";
  @SerializedName(SERIALIZED_NAME_PARENT_STOREFRONT_FS_DIRECTORY_OID)
  private Integer parentStorefrontFsDirectoryOid;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public FileManagerPage() { 
  }

  public FileManagerPage currentStorefrontFsDirectoryOid(Integer currentStorefrontFsDirectoryOid) {
    
    this.currentStorefrontFsDirectoryOid = currentStorefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get currentStorefrontFsDirectoryOid
   * @return currentStorefrontFsDirectoryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCurrentStorefrontFsDirectoryOid() {
    return currentStorefrontFsDirectoryOid;
  }


  public void setCurrentStorefrontFsDirectoryOid(Integer currentStorefrontFsDirectoryOid) {
    this.currentStorefrontFsDirectoryOid = currentStorefrontFsDirectoryOid;
  }


  public FileManagerPage hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public FileManagerPage parentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get parentStorefrontFsDirectoryOid
   * @return parentStorefrontFsDirectoryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getParentStorefrontFsDirectoryOid() {
    return parentStorefrontFsDirectoryOid;
  }


  public void setParentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
  }


  public FileManagerPage path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public FileManagerPage storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Get storefrontOid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileManagerPage fileManagerPage = (FileManagerPage) o;
    return Objects.equals(this.currentStorefrontFsDirectoryOid, fileManagerPage.currentStorefrontFsDirectoryOid) &&
        Objects.equals(this.hostname, fileManagerPage.hostname) &&
        Objects.equals(this.parentStorefrontFsDirectoryOid, fileManagerPage.parentStorefrontFsDirectoryOid) &&
        Objects.equals(this.path, fileManagerPage.path) &&
        Objects.equals(this.storefrontOid, fileManagerPage.storefrontOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStorefrontFsDirectoryOid, hostname, parentStorefrontFsDirectoryOid, path, storefrontOid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileManagerPage {\n");
    sb.append("    currentStorefrontFsDirectoryOid: ").append(toIndentedString(currentStorefrontFsDirectoryOid)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    parentStorefrontFsDirectoryOid: ").append(toIndentedString(parentStorefrontFsDirectoryOid)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current_storefront_fs_directory_oid");
    openapiFields.add("hostname");
    openapiFields.add("parent_storefront_fs_directory_oid");
    openapiFields.add("path");
    openapiFields.add("storefront_oid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileManagerPage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FileManagerPage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileManagerPage is not found in the empty JSON string", FileManagerPage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileManagerPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileManagerPage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileManagerPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileManagerPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileManagerPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileManagerPage.class));

       return (TypeAdapter<T>) new TypeAdapter<FileManagerPage>() {
           @Override
           public void write(JsonWriter out, FileManagerPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileManagerPage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileManagerPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileManagerPage
  * @throws IOException if the JSON string is invalid with respect to FileManagerPage
  */
  public static FileManagerPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileManagerPage.class);
  }

 /**
  * Convert an instance of FileManagerPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


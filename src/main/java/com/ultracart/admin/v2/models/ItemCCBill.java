/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemCCBill
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T10:08:44.056-05:00[America/Indianapolis]")
public class ItemCCBill {
  public static final String SERIALIZED_NAME_CCBILL_ALLOWED_CURRENCIES = "ccbill_allowed_currencies";
  @SerializedName(SERIALIZED_NAME_CCBILL_ALLOWED_CURRENCIES)
  private String ccbillAllowedCurrencies;

  public static final String SERIALIZED_NAME_CCBILL_ALLOWED_TYPES = "ccbill_allowed_types";
  @SerializedName(SERIALIZED_NAME_CCBILL_ALLOWED_TYPES)
  private String ccbillAllowedTypes;

  public static final String SERIALIZED_NAME_CCBILL_CURRENCY_CODE = "ccbill_currency_code";
  @SerializedName(SERIALIZED_NAME_CCBILL_CURRENCY_CODE)
  private String ccbillCurrencyCode;

  public static final String SERIALIZED_NAME_CCBILL_FORM_NAME = "ccbill_form_name";
  @SerializedName(SERIALIZED_NAME_CCBILL_FORM_NAME)
  private String ccbillFormName;

  public static final String SERIALIZED_NAME_CCBILL_SUBACCOUNT_ID = "ccbill_subaccount_id";
  @SerializedName(SERIALIZED_NAME_CCBILL_SUBACCOUNT_ID)
  private String ccbillSubaccountId;

  public static final String SERIALIZED_NAME_CCBILL_SUBSCRIPTION_TYPE_ID = "ccbill_subscription_type_id";
  @SerializedName(SERIALIZED_NAME_CCBILL_SUBSCRIPTION_TYPE_ID)
  private String ccbillSubscriptionTypeId;

  public ItemCCBill() { 
  }

  public ItemCCBill ccbillAllowedCurrencies(String ccbillAllowedCurrencies) {
    
    this.ccbillAllowedCurrencies = ccbillAllowedCurrencies;
    return this;
  }

   /**
   * Allowed currencies
   * @return ccbillAllowedCurrencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allowed currencies")

  public String getCcbillAllowedCurrencies() {
    return ccbillAllowedCurrencies;
  }


  public void setCcbillAllowedCurrencies(String ccbillAllowedCurrencies) {
    this.ccbillAllowedCurrencies = ccbillAllowedCurrencies;
  }


  public ItemCCBill ccbillAllowedTypes(String ccbillAllowedTypes) {
    
    this.ccbillAllowedTypes = ccbillAllowedTypes;
    return this;
  }

   /**
   * Allowed types
   * @return ccbillAllowedTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allowed types")

  public String getCcbillAllowedTypes() {
    return ccbillAllowedTypes;
  }


  public void setCcbillAllowedTypes(String ccbillAllowedTypes) {
    this.ccbillAllowedTypes = ccbillAllowedTypes;
  }


  public ItemCCBill ccbillCurrencyCode(String ccbillCurrencyCode) {
    
    this.ccbillCurrencyCode = ccbillCurrencyCode;
    return this;
  }

   /**
   * Currency code
   * @return ccbillCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency code")

  public String getCcbillCurrencyCode() {
    return ccbillCurrencyCode;
  }


  public void setCcbillCurrencyCode(String ccbillCurrencyCode) {
    this.ccbillCurrencyCode = ccbillCurrencyCode;
  }


  public ItemCCBill ccbillFormName(String ccbillFormName) {
    
    this.ccbillFormName = ccbillFormName;
    return this;
  }

   /**
   * Form name
   * @return ccbillFormName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Form name")

  public String getCcbillFormName() {
    return ccbillFormName;
  }


  public void setCcbillFormName(String ccbillFormName) {
    this.ccbillFormName = ccbillFormName;
  }


  public ItemCCBill ccbillSubaccountId(String ccbillSubaccountId) {
    
    this.ccbillSubaccountId = ccbillSubaccountId;
    return this;
  }

   /**
   * Sub-account id
   * @return ccbillSubaccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub-account id")

  public String getCcbillSubaccountId() {
    return ccbillSubaccountId;
  }


  public void setCcbillSubaccountId(String ccbillSubaccountId) {
    this.ccbillSubaccountId = ccbillSubaccountId;
  }


  public ItemCCBill ccbillSubscriptionTypeId(String ccbillSubscriptionTypeId) {
    
    this.ccbillSubscriptionTypeId = ccbillSubscriptionTypeId;
    return this;
  }

   /**
   * Subscription type id
   * @return ccbillSubscriptionTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscription type id")

  public String getCcbillSubscriptionTypeId() {
    return ccbillSubscriptionTypeId;
  }


  public void setCcbillSubscriptionTypeId(String ccbillSubscriptionTypeId) {
    this.ccbillSubscriptionTypeId = ccbillSubscriptionTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemCCBill itemCCBill = (ItemCCBill) o;
    return Objects.equals(this.ccbillAllowedCurrencies, itemCCBill.ccbillAllowedCurrencies) &&
        Objects.equals(this.ccbillAllowedTypes, itemCCBill.ccbillAllowedTypes) &&
        Objects.equals(this.ccbillCurrencyCode, itemCCBill.ccbillCurrencyCode) &&
        Objects.equals(this.ccbillFormName, itemCCBill.ccbillFormName) &&
        Objects.equals(this.ccbillSubaccountId, itemCCBill.ccbillSubaccountId) &&
        Objects.equals(this.ccbillSubscriptionTypeId, itemCCBill.ccbillSubscriptionTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ccbillAllowedCurrencies, ccbillAllowedTypes, ccbillCurrencyCode, ccbillFormName, ccbillSubaccountId, ccbillSubscriptionTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemCCBill {\n");
    sb.append("    ccbillAllowedCurrencies: ").append(toIndentedString(ccbillAllowedCurrencies)).append("\n");
    sb.append("    ccbillAllowedTypes: ").append(toIndentedString(ccbillAllowedTypes)).append("\n");
    sb.append("    ccbillCurrencyCode: ").append(toIndentedString(ccbillCurrencyCode)).append("\n");
    sb.append("    ccbillFormName: ").append(toIndentedString(ccbillFormName)).append("\n");
    sb.append("    ccbillSubaccountId: ").append(toIndentedString(ccbillSubaccountId)).append("\n");
    sb.append("    ccbillSubscriptionTypeId: ").append(toIndentedString(ccbillSubscriptionTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ccbill_allowed_currencies");
    openapiFields.add("ccbill_allowed_types");
    openapiFields.add("ccbill_currency_code");
    openapiFields.add("ccbill_form_name");
    openapiFields.add("ccbill_subaccount_id");
    openapiFields.add("ccbill_subscription_type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemCCBill
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemCCBill.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemCCBill is not found in the empty JSON string", ItemCCBill.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemCCBill.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemCCBill` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ccbill_allowed_currencies") != null && !jsonObj.get("ccbill_allowed_currencies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_allowed_currencies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_allowed_currencies").toString()));
      }
      if (jsonObj.get("ccbill_allowed_types") != null && !jsonObj.get("ccbill_allowed_types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_allowed_types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_allowed_types").toString()));
      }
      if (jsonObj.get("ccbill_currency_code") != null && !jsonObj.get("ccbill_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_currency_code").toString()));
      }
      if (jsonObj.get("ccbill_form_name") != null && !jsonObj.get("ccbill_form_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_form_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_form_name").toString()));
      }
      if (jsonObj.get("ccbill_subaccount_id") != null && !jsonObj.get("ccbill_subaccount_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_subaccount_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_subaccount_id").toString()));
      }
      if (jsonObj.get("ccbill_subscription_type_id") != null && !jsonObj.get("ccbill_subscription_type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccbill_subscription_type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccbill_subscription_type_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemCCBill.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemCCBill' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemCCBill> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemCCBill.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemCCBill>() {
           @Override
           public void write(JsonWriter out, ItemCCBill value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemCCBill read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemCCBill given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemCCBill
  * @throws IOException if the JSON string is invalid with respect to ItemCCBill
  */
  public static ItemCCBill fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemCCBill.class);
  }

 /**
  * Convert an instance of ItemCCBill to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


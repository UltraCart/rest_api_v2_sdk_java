/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationEngagementEquationFunction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-05T11:02:37.171-05:00[America/Indianapolis]")
public class ConversationEngagementEquationFunction {
  /**
   * Logic operation to perform on an any page url function type
   */
  @JsonAdapter(AnyPageUrlLogicEnum.Adapter.class)
  public enum AnyPageUrlLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    AnyPageUrlLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnyPageUrlLogicEnum fromValue(String value) {
      for (AnyPageUrlLogicEnum b : AnyPageUrlLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnyPageUrlLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnyPageUrlLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnyPageUrlLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnyPageUrlLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ANY_PAGE_URL_LOGIC = "any_page_url_logic";
  @SerializedName(SERIALIZED_NAME_ANY_PAGE_URL_LOGIC)
  private AnyPageUrlLogicEnum anyPageUrlLogic;

  public static final String SERIALIZED_NAME_ANY_PAGE_URL_VALUE = "any_page_url_value";
  @SerializedName(SERIALIZED_NAME_ANY_PAGE_URL_VALUE)
  private String anyPageUrlValue;

  /**
   * Logic operation to perform on a current page url function type
   */
  @JsonAdapter(CurrentPageUrlLogicEnum.Adapter.class)
  public enum CurrentPageUrlLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    CurrentPageUrlLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentPageUrlLogicEnum fromValue(String value) {
      for (CurrentPageUrlLogicEnum b : CurrentPageUrlLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentPageUrlLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentPageUrlLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentPageUrlLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentPageUrlLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_PAGE_URL_LOGIC = "current_page_url_logic";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE_URL_LOGIC)
  private CurrentPageUrlLogicEnum currentPageUrlLogic;

  public static final String SERIALIZED_NAME_CURRENT_PAGE_URL_VALUE = "current_page_url_value";
  @SerializedName(SERIALIZED_NAME_CURRENT_PAGE_URL_VALUE)
  private String currentPageUrlValue;

  /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   */
  @JsonAdapter(CustomersBrowsingTimeLogicEnum.Adapter.class)
  public enum CustomersBrowsingTimeLogicEnum {
    AT_LEAST("is at least"),
    
    MORE_THAN("is more than"),
    
    LESS_THAN("is less than"),
    
    AT_MOST("is at most");

    private String value;

    CustomersBrowsingTimeLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomersBrowsingTimeLogicEnum fromValue(String value) {
      for (CustomersBrowsingTimeLogicEnum b : CustomersBrowsingTimeLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomersBrowsingTimeLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomersBrowsingTimeLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomersBrowsingTimeLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomersBrowsingTimeLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMERS_BROWSING_TIME_LOGIC = "customers_browsing_time_logic";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_BROWSING_TIME_LOGIC)
  private CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic;

  public static final String SERIALIZED_NAME_CUSTOMERS_BROWSING_TIME_SECONDS = "customers_browsing_time_seconds";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_BROWSING_TIME_SECONDS)
  private Integer customersBrowsingTimeSeconds;

  public static final String SERIALIZED_NAME_CUSTOMERS_LOCATION_COUNTRY = "customers_location_country";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_LOCATION_COUNTRY)
  private String customersLocationCountry;

  /**
   * Logic operation to perform on a customer&#39;s location function type
   */
  @JsonAdapter(CustomersLocationLogicEnum.Adapter.class)
  public enum CustomersLocationLogicEnum {
    IS("is"),
    
    IS_NOT("is not");

    private String value;

    CustomersLocationLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomersLocationLogicEnum fromValue(String value) {
      for (CustomersLocationLogicEnum b : CustomersLocationLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomersLocationLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomersLocationLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomersLocationLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomersLocationLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMERS_LOCATION_LOGIC = "customers_location_logic";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_LOCATION_LOGIC)
  private CustomersLocationLogicEnum customersLocationLogic;

  public static final String SERIALIZED_NAME_CUSTOMERS_LOCATION_STATE = "customers_location_state";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_LOCATION_STATE)
  private String customersLocationState;

  /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   */
  @JsonAdapter(NumberOfViewedPagesLogicEnum.Adapter.class)
  public enum NumberOfViewedPagesLogicEnum {
    AT_LEAST("is at least"),
    
    MORE_THAN("is more than"),
    
    LESS_THAN("is less than"),
    
    AT_MOST("is at most");

    private String value;

    NumberOfViewedPagesLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberOfViewedPagesLogicEnum fromValue(String value) {
      for (NumberOfViewedPagesLogicEnum b : NumberOfViewedPagesLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberOfViewedPagesLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberOfViewedPagesLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberOfViewedPagesLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberOfViewedPagesLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_OF_VIEWED_PAGES_LOGIC = "number_of_viewed_pages_logic";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_VIEWED_PAGES_LOGIC)
  private NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic;

  public static final String SERIALIZED_NAME_NUMBER_OF_VIEWED_PAGES_VALUE = "number_of_viewed_pages_value";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_VIEWED_PAGES_VALUE)
  private Integer numberOfViewedPagesValue;

  /**
   * Logic operation to perform on a referring website function type
   */
  @JsonAdapter(ReferringWebsiteLogicEnum.Adapter.class)
  public enum ReferringWebsiteLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    ReferringWebsiteLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferringWebsiteLogicEnum fromValue(String value) {
      for (ReferringWebsiteLogicEnum b : ReferringWebsiteLogicEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReferringWebsiteLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferringWebsiteLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferringWebsiteLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReferringWebsiteLogicEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REFERRING_WEBSITE_LOGIC = "referring_website_logic";
  @SerializedName(SERIALIZED_NAME_REFERRING_WEBSITE_LOGIC)
  private ReferringWebsiteLogicEnum referringWebsiteLogic;

  public static final String SERIALIZED_NAME_REFERRING_WEBSITE_VALUE = "referring_website_value";
  @SerializedName(SERIALIZED_NAME_REFERRING_WEBSITE_VALUE)
  private String referringWebsiteValue;

  /**
   * Type of function
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CURRENT_PAGE_URL("current page url"),
    
    CUSTOMER_S_LOCATION("customer's location"),
    
    CUSTOMER_S_BROWSING_TIME("customer's browsing time"),
    
    NUMBER_OF_VIEWED_PAGES("number of viewed pages"),
    
    REFERRING_WEBSITE_ADDRESS("referring website address"),
    
    ANY_PAGE_FROM_SESSION("any page from session");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ConversationEngagementEquationFunction() { 
  }

  public ConversationEngagementEquationFunction anyPageUrlLogic(AnyPageUrlLogicEnum anyPageUrlLogic) {
    
    this.anyPageUrlLogic = anyPageUrlLogic;
    return this;
  }

   /**
   * Logic operation to perform on an any page url function type
   * @return anyPageUrlLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on an any page url function type")

  public AnyPageUrlLogicEnum getAnyPageUrlLogic() {
    return anyPageUrlLogic;
  }


  public void setAnyPageUrlLogic(AnyPageUrlLogicEnum anyPageUrlLogic) {
    this.anyPageUrlLogic = anyPageUrlLogic;
  }


  public ConversationEngagementEquationFunction anyPageUrlValue(String anyPageUrlValue) {
    
    this.anyPageUrlValue = anyPageUrlValue;
    return this;
  }

   /**
   * Get anyPageUrlValue
   * @return anyPageUrlValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAnyPageUrlValue() {
    return anyPageUrlValue;
  }


  public void setAnyPageUrlValue(String anyPageUrlValue) {
    this.anyPageUrlValue = anyPageUrlValue;
  }


  public ConversationEngagementEquationFunction currentPageUrlLogic(CurrentPageUrlLogicEnum currentPageUrlLogic) {
    
    this.currentPageUrlLogic = currentPageUrlLogic;
    return this;
  }

   /**
   * Logic operation to perform on a current page url function type
   * @return currentPageUrlLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on a current page url function type")

  public CurrentPageUrlLogicEnum getCurrentPageUrlLogic() {
    return currentPageUrlLogic;
  }


  public void setCurrentPageUrlLogic(CurrentPageUrlLogicEnum currentPageUrlLogic) {
    this.currentPageUrlLogic = currentPageUrlLogic;
  }


  public ConversationEngagementEquationFunction currentPageUrlValue(String currentPageUrlValue) {
    
    this.currentPageUrlValue = currentPageUrlValue;
    return this;
  }

   /**
   * Get currentPageUrlValue
   * @return currentPageUrlValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrentPageUrlValue() {
    return currentPageUrlValue;
  }


  public void setCurrentPageUrlValue(String currentPageUrlValue) {
    this.currentPageUrlValue = currentPageUrlValue;
  }


  public ConversationEngagementEquationFunction customersBrowsingTimeLogic(CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic) {
    
    this.customersBrowsingTimeLogic = customersBrowsingTimeLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   * @return customersBrowsingTimeLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on a customer's browsing time function type")

  public CustomersBrowsingTimeLogicEnum getCustomersBrowsingTimeLogic() {
    return customersBrowsingTimeLogic;
  }


  public void setCustomersBrowsingTimeLogic(CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic) {
    this.customersBrowsingTimeLogic = customersBrowsingTimeLogic;
  }


  public ConversationEngagementEquationFunction customersBrowsingTimeSeconds(Integer customersBrowsingTimeSeconds) {
    
    this.customersBrowsingTimeSeconds = customersBrowsingTimeSeconds;
    return this;
  }

   /**
   * Get customersBrowsingTimeSeconds
   * @return customersBrowsingTimeSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomersBrowsingTimeSeconds() {
    return customersBrowsingTimeSeconds;
  }


  public void setCustomersBrowsingTimeSeconds(Integer customersBrowsingTimeSeconds) {
    this.customersBrowsingTimeSeconds = customersBrowsingTimeSeconds;
  }


  public ConversationEngagementEquationFunction customersLocationCountry(String customersLocationCountry) {
    
    this.customersLocationCountry = customersLocationCountry;
    return this;
  }

   /**
   * Get customersLocationCountry
   * @return customersLocationCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomersLocationCountry() {
    return customersLocationCountry;
  }


  public void setCustomersLocationCountry(String customersLocationCountry) {
    this.customersLocationCountry = customersLocationCountry;
  }


  public ConversationEngagementEquationFunction customersLocationLogic(CustomersLocationLogicEnum customersLocationLogic) {
    
    this.customersLocationLogic = customersLocationLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s location function type
   * @return customersLocationLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on a customer's location function type")

  public CustomersLocationLogicEnum getCustomersLocationLogic() {
    return customersLocationLogic;
  }


  public void setCustomersLocationLogic(CustomersLocationLogicEnum customersLocationLogic) {
    this.customersLocationLogic = customersLocationLogic;
  }


  public ConversationEngagementEquationFunction customersLocationState(String customersLocationState) {
    
    this.customersLocationState = customersLocationState;
    return this;
  }

   /**
   * Get customersLocationState
   * @return customersLocationState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomersLocationState() {
    return customersLocationState;
  }


  public void setCustomersLocationState(String customersLocationState) {
    this.customersLocationState = customersLocationState;
  }


  public ConversationEngagementEquationFunction numberOfViewedPagesLogic(NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic) {
    
    this.numberOfViewedPagesLogic = numberOfViewedPagesLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   * @return numberOfViewedPagesLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on a customer's browsing time function type")

  public NumberOfViewedPagesLogicEnum getNumberOfViewedPagesLogic() {
    return numberOfViewedPagesLogic;
  }


  public void setNumberOfViewedPagesLogic(NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic) {
    this.numberOfViewedPagesLogic = numberOfViewedPagesLogic;
  }


  public ConversationEngagementEquationFunction numberOfViewedPagesValue(Integer numberOfViewedPagesValue) {
    
    this.numberOfViewedPagesValue = numberOfViewedPagesValue;
    return this;
  }

   /**
   * Get numberOfViewedPagesValue
   * @return numberOfViewedPagesValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getNumberOfViewedPagesValue() {
    return numberOfViewedPagesValue;
  }


  public void setNumberOfViewedPagesValue(Integer numberOfViewedPagesValue) {
    this.numberOfViewedPagesValue = numberOfViewedPagesValue;
  }


  public ConversationEngagementEquationFunction referringWebsiteLogic(ReferringWebsiteLogicEnum referringWebsiteLogic) {
    
    this.referringWebsiteLogic = referringWebsiteLogic;
    return this;
  }

   /**
   * Logic operation to perform on a referring website function type
   * @return referringWebsiteLogic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logic operation to perform on a referring website function type")

  public ReferringWebsiteLogicEnum getReferringWebsiteLogic() {
    return referringWebsiteLogic;
  }


  public void setReferringWebsiteLogic(ReferringWebsiteLogicEnum referringWebsiteLogic) {
    this.referringWebsiteLogic = referringWebsiteLogic;
  }


  public ConversationEngagementEquationFunction referringWebsiteValue(String referringWebsiteValue) {
    
    this.referringWebsiteValue = referringWebsiteValue;
    return this;
  }

   /**
   * Get referringWebsiteValue
   * @return referringWebsiteValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferringWebsiteValue() {
    return referringWebsiteValue;
  }


  public void setReferringWebsiteValue(String referringWebsiteValue) {
    this.referringWebsiteValue = referringWebsiteValue;
  }


  public ConversationEngagementEquationFunction type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of function
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of function")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationEngagementEquationFunction conversationEngagementEquationFunction = (ConversationEngagementEquationFunction) o;
    return Objects.equals(this.anyPageUrlLogic, conversationEngagementEquationFunction.anyPageUrlLogic) &&
        Objects.equals(this.anyPageUrlValue, conversationEngagementEquationFunction.anyPageUrlValue) &&
        Objects.equals(this.currentPageUrlLogic, conversationEngagementEquationFunction.currentPageUrlLogic) &&
        Objects.equals(this.currentPageUrlValue, conversationEngagementEquationFunction.currentPageUrlValue) &&
        Objects.equals(this.customersBrowsingTimeLogic, conversationEngagementEquationFunction.customersBrowsingTimeLogic) &&
        Objects.equals(this.customersBrowsingTimeSeconds, conversationEngagementEquationFunction.customersBrowsingTimeSeconds) &&
        Objects.equals(this.customersLocationCountry, conversationEngagementEquationFunction.customersLocationCountry) &&
        Objects.equals(this.customersLocationLogic, conversationEngagementEquationFunction.customersLocationLogic) &&
        Objects.equals(this.customersLocationState, conversationEngagementEquationFunction.customersLocationState) &&
        Objects.equals(this.numberOfViewedPagesLogic, conversationEngagementEquationFunction.numberOfViewedPagesLogic) &&
        Objects.equals(this.numberOfViewedPagesValue, conversationEngagementEquationFunction.numberOfViewedPagesValue) &&
        Objects.equals(this.referringWebsiteLogic, conversationEngagementEquationFunction.referringWebsiteLogic) &&
        Objects.equals(this.referringWebsiteValue, conversationEngagementEquationFunction.referringWebsiteValue) &&
        Objects.equals(this.type, conversationEngagementEquationFunction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anyPageUrlLogic, anyPageUrlValue, currentPageUrlLogic, currentPageUrlValue, customersBrowsingTimeLogic, customersBrowsingTimeSeconds, customersLocationCountry, customersLocationLogic, customersLocationState, numberOfViewedPagesLogic, numberOfViewedPagesValue, referringWebsiteLogic, referringWebsiteValue, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationEngagementEquationFunction {\n");
    sb.append("    anyPageUrlLogic: ").append(toIndentedString(anyPageUrlLogic)).append("\n");
    sb.append("    anyPageUrlValue: ").append(toIndentedString(anyPageUrlValue)).append("\n");
    sb.append("    currentPageUrlLogic: ").append(toIndentedString(currentPageUrlLogic)).append("\n");
    sb.append("    currentPageUrlValue: ").append(toIndentedString(currentPageUrlValue)).append("\n");
    sb.append("    customersBrowsingTimeLogic: ").append(toIndentedString(customersBrowsingTimeLogic)).append("\n");
    sb.append("    customersBrowsingTimeSeconds: ").append(toIndentedString(customersBrowsingTimeSeconds)).append("\n");
    sb.append("    customersLocationCountry: ").append(toIndentedString(customersLocationCountry)).append("\n");
    sb.append("    customersLocationLogic: ").append(toIndentedString(customersLocationLogic)).append("\n");
    sb.append("    customersLocationState: ").append(toIndentedString(customersLocationState)).append("\n");
    sb.append("    numberOfViewedPagesLogic: ").append(toIndentedString(numberOfViewedPagesLogic)).append("\n");
    sb.append("    numberOfViewedPagesValue: ").append(toIndentedString(numberOfViewedPagesValue)).append("\n");
    sb.append("    referringWebsiteLogic: ").append(toIndentedString(referringWebsiteLogic)).append("\n");
    sb.append("    referringWebsiteValue: ").append(toIndentedString(referringWebsiteValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("any_page_url_logic");
    openapiFields.add("any_page_url_value");
    openapiFields.add("current_page_url_logic");
    openapiFields.add("current_page_url_value");
    openapiFields.add("customers_browsing_time_logic");
    openapiFields.add("customers_browsing_time_seconds");
    openapiFields.add("customers_location_country");
    openapiFields.add("customers_location_logic");
    openapiFields.add("customers_location_state");
    openapiFields.add("number_of_viewed_pages_logic");
    openapiFields.add("number_of_viewed_pages_value");
    openapiFields.add("referring_website_logic");
    openapiFields.add("referring_website_value");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationEngagementEquationFunction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationEngagementEquationFunction.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationEngagementEquationFunction is not found in the empty JSON string", ConversationEngagementEquationFunction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationEngagementEquationFunction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationEngagementEquationFunction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("any_page_url_logic") != null && !jsonObj.get("any_page_url_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `any_page_url_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("any_page_url_logic").toString()));
      }
      if (jsonObj.get("any_page_url_value") != null && !jsonObj.get("any_page_url_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `any_page_url_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("any_page_url_value").toString()));
      }
      if (jsonObj.get("current_page_url_logic") != null && !jsonObj.get("current_page_url_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_page_url_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_page_url_logic").toString()));
      }
      if (jsonObj.get("current_page_url_value") != null && !jsonObj.get("current_page_url_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_page_url_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_page_url_value").toString()));
      }
      if (jsonObj.get("customers_browsing_time_logic") != null && !jsonObj.get("customers_browsing_time_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customers_browsing_time_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customers_browsing_time_logic").toString()));
      }
      if (jsonObj.get("customers_location_country") != null && !jsonObj.get("customers_location_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customers_location_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customers_location_country").toString()));
      }
      if (jsonObj.get("customers_location_logic") != null && !jsonObj.get("customers_location_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customers_location_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customers_location_logic").toString()));
      }
      if (jsonObj.get("customers_location_state") != null && !jsonObj.get("customers_location_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customers_location_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customers_location_state").toString()));
      }
      if (jsonObj.get("number_of_viewed_pages_logic") != null && !jsonObj.get("number_of_viewed_pages_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_of_viewed_pages_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_of_viewed_pages_logic").toString()));
      }
      if (jsonObj.get("referring_website_logic") != null && !jsonObj.get("referring_website_logic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referring_website_logic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referring_website_logic").toString()));
      }
      if (jsonObj.get("referring_website_value") != null && !jsonObj.get("referring_website_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referring_website_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referring_website_value").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationEngagementEquationFunction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationEngagementEquationFunction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationEngagementEquationFunction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationEngagementEquationFunction.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationEngagementEquationFunction>() {
           @Override
           public void write(JsonWriter out, ConversationEngagementEquationFunction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationEngagementEquationFunction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationEngagementEquationFunction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationEngagementEquationFunction
  * @throws IOException if the JSON string is invalid with respect to ConversationEngagementEquationFunction
  */
  public static ConversationEngagementEquationFunction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationEngagementEquationFunction.class);
  }

 /**
  * Convert an instance of ConversationEngagementEquationFunction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


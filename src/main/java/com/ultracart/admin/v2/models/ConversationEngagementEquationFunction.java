/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConversationEngagementEquationFunction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-22T12:11:36.362-04:00")



public class ConversationEngagementEquationFunction {
  /**
   * Logic operation to perform on an any page url function type
   */
  @JsonAdapter(AnyPageUrlLogicEnum.Adapter.class)
  public enum AnyPageUrlLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    AnyPageUrlLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnyPageUrlLogicEnum fromValue(String text) {
      for (AnyPageUrlLogicEnum b : AnyPageUrlLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnyPageUrlLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnyPageUrlLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnyPageUrlLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnyPageUrlLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("any_page_url_logic")
  private AnyPageUrlLogicEnum anyPageUrlLogic = null;

  @SerializedName("any_page_url_value")
  private String anyPageUrlValue = null;

  /**
   * Logic operation to perform on a current page url function type
   */
  @JsonAdapter(CurrentPageUrlLogicEnum.Adapter.class)
  public enum CurrentPageUrlLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    CurrentPageUrlLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentPageUrlLogicEnum fromValue(String text) {
      for (CurrentPageUrlLogicEnum b : CurrentPageUrlLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrentPageUrlLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentPageUrlLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentPageUrlLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentPageUrlLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("current_page_url_logic")
  private CurrentPageUrlLogicEnum currentPageUrlLogic = null;

  @SerializedName("current_page_url_value")
  private String currentPageUrlValue = null;

  /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   */
  @JsonAdapter(CustomersBrowsingTimeLogicEnum.Adapter.class)
  public enum CustomersBrowsingTimeLogicEnum {
    AT_LEAST("is at least"),
    
    MORE_THAN("is more than"),
    
    LESS_THAN("is less than"),
    
    AT_MOST("is at most");

    private String value;

    CustomersBrowsingTimeLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomersBrowsingTimeLogicEnum fromValue(String text) {
      for (CustomersBrowsingTimeLogicEnum b : CustomersBrowsingTimeLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomersBrowsingTimeLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomersBrowsingTimeLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomersBrowsingTimeLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomersBrowsingTimeLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("customers_browsing_time_logic")
  private CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic = null;

  @SerializedName("customers_browsing_time_seconds")
  private Integer customersBrowsingTimeSeconds = null;

  @SerializedName("customers_location_country")
  private String customersLocationCountry = null;

  /**
   * Logic operation to perform on a customer&#39;s location function type
   */
  @JsonAdapter(CustomersLocationLogicEnum.Adapter.class)
  public enum CustomersLocationLogicEnum {
    IS("is"),
    
    IS_NOT("is not");

    private String value;

    CustomersLocationLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomersLocationLogicEnum fromValue(String text) {
      for (CustomersLocationLogicEnum b : CustomersLocationLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomersLocationLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomersLocationLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomersLocationLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomersLocationLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("customers_location_logic")
  private CustomersLocationLogicEnum customersLocationLogic = null;

  @SerializedName("customers_location_state")
  private String customersLocationState = null;

  /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   */
  @JsonAdapter(NumberOfViewedPagesLogicEnum.Adapter.class)
  public enum NumberOfViewedPagesLogicEnum {
    AT_LEAST("is at least"),
    
    MORE_THAN("is more than"),
    
    LESS_THAN("is less than"),
    
    AT_MOST("is at most");

    private String value;

    NumberOfViewedPagesLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberOfViewedPagesLogicEnum fromValue(String text) {
      for (NumberOfViewedPagesLogicEnum b : NumberOfViewedPagesLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NumberOfViewedPagesLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberOfViewedPagesLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberOfViewedPagesLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NumberOfViewedPagesLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("number_of_viewed_pages_logic")
  private NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic = null;

  @SerializedName("number_of_viewed_pages_value")
  private Integer numberOfViewedPagesValue = null;

  /**
   * Logic operation to perform on a referring website function type
   */
  @JsonAdapter(ReferringWebsiteLogicEnum.Adapter.class)
  public enum ReferringWebsiteLogicEnum {
    CONTAINS("contains"),
    
    DOES_NOT_CONTAIN("does not contain"),
    
    IS_EXACTLY("is exactly"),
    
    IS_NOT("is not");

    private String value;

    ReferringWebsiteLogicEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferringWebsiteLogicEnum fromValue(String text) {
      for (ReferringWebsiteLogicEnum b : ReferringWebsiteLogicEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReferringWebsiteLogicEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferringWebsiteLogicEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferringWebsiteLogicEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReferringWebsiteLogicEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("referring_website_logic")
  private ReferringWebsiteLogicEnum referringWebsiteLogic = null;

  @SerializedName("referring_website_value")
  private String referringWebsiteValue = null;

  /**
   * Type of function
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CURRENT_PAGE_URL("current page url"),
    
    CUSTOMERS_LOCATION("customers location"),
    
    CUSTOMERS_BROWSING_TIME("customers browsing time"),
    
    NUMBER_OF_VIEWED_PAGES("number of viewed pages"),
    
    REFERRING_WEBSITE_ADDRESS("referring website address"),
    
    ANY_PAGE_FROM_SESSION("any page from session");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public ConversationEngagementEquationFunction anyPageUrlLogic(AnyPageUrlLogicEnum anyPageUrlLogic) {
    this.anyPageUrlLogic = anyPageUrlLogic;
    return this;
  }

   /**
   * Logic operation to perform on an any page url function type
   * @return anyPageUrlLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on an any page url function type")
  public AnyPageUrlLogicEnum getAnyPageUrlLogic() {
    return anyPageUrlLogic;
  }

  public void setAnyPageUrlLogic(AnyPageUrlLogicEnum anyPageUrlLogic) {
    this.anyPageUrlLogic = anyPageUrlLogic;
  }

  public ConversationEngagementEquationFunction anyPageUrlValue(String anyPageUrlValue) {
    this.anyPageUrlValue = anyPageUrlValue;
    return this;
  }

   /**
   * Get anyPageUrlValue
   * @return anyPageUrlValue
  **/
  @ApiModelProperty(value = "")
  public String getAnyPageUrlValue() {
    return anyPageUrlValue;
  }

  public void setAnyPageUrlValue(String anyPageUrlValue) {
    this.anyPageUrlValue = anyPageUrlValue;
  }

  public ConversationEngagementEquationFunction currentPageUrlLogic(CurrentPageUrlLogicEnum currentPageUrlLogic) {
    this.currentPageUrlLogic = currentPageUrlLogic;
    return this;
  }

   /**
   * Logic operation to perform on a current page url function type
   * @return currentPageUrlLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on a current page url function type")
  public CurrentPageUrlLogicEnum getCurrentPageUrlLogic() {
    return currentPageUrlLogic;
  }

  public void setCurrentPageUrlLogic(CurrentPageUrlLogicEnum currentPageUrlLogic) {
    this.currentPageUrlLogic = currentPageUrlLogic;
  }

  public ConversationEngagementEquationFunction currentPageUrlValue(String currentPageUrlValue) {
    this.currentPageUrlValue = currentPageUrlValue;
    return this;
  }

   /**
   * Get currentPageUrlValue
   * @return currentPageUrlValue
  **/
  @ApiModelProperty(value = "")
  public String getCurrentPageUrlValue() {
    return currentPageUrlValue;
  }

  public void setCurrentPageUrlValue(String currentPageUrlValue) {
    this.currentPageUrlValue = currentPageUrlValue;
  }

  public ConversationEngagementEquationFunction customersBrowsingTimeLogic(CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic) {
    this.customersBrowsingTimeLogic = customersBrowsingTimeLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   * @return customersBrowsingTimeLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on a customer's browsing time function type")
  public CustomersBrowsingTimeLogicEnum getCustomersBrowsingTimeLogic() {
    return customersBrowsingTimeLogic;
  }

  public void setCustomersBrowsingTimeLogic(CustomersBrowsingTimeLogicEnum customersBrowsingTimeLogic) {
    this.customersBrowsingTimeLogic = customersBrowsingTimeLogic;
  }

  public ConversationEngagementEquationFunction customersBrowsingTimeSeconds(Integer customersBrowsingTimeSeconds) {
    this.customersBrowsingTimeSeconds = customersBrowsingTimeSeconds;
    return this;
  }

   /**
   * Get customersBrowsingTimeSeconds
   * @return customersBrowsingTimeSeconds
  **/
  @ApiModelProperty(value = "")
  public Integer getCustomersBrowsingTimeSeconds() {
    return customersBrowsingTimeSeconds;
  }

  public void setCustomersBrowsingTimeSeconds(Integer customersBrowsingTimeSeconds) {
    this.customersBrowsingTimeSeconds = customersBrowsingTimeSeconds;
  }

  public ConversationEngagementEquationFunction customersLocationCountry(String customersLocationCountry) {
    this.customersLocationCountry = customersLocationCountry;
    return this;
  }

   /**
   * Get customersLocationCountry
   * @return customersLocationCountry
  **/
  @ApiModelProperty(value = "")
  public String getCustomersLocationCountry() {
    return customersLocationCountry;
  }

  public void setCustomersLocationCountry(String customersLocationCountry) {
    this.customersLocationCountry = customersLocationCountry;
  }

  public ConversationEngagementEquationFunction customersLocationLogic(CustomersLocationLogicEnum customersLocationLogic) {
    this.customersLocationLogic = customersLocationLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s location function type
   * @return customersLocationLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on a customer's location function type")
  public CustomersLocationLogicEnum getCustomersLocationLogic() {
    return customersLocationLogic;
  }

  public void setCustomersLocationLogic(CustomersLocationLogicEnum customersLocationLogic) {
    this.customersLocationLogic = customersLocationLogic;
  }

  public ConversationEngagementEquationFunction customersLocationState(String customersLocationState) {
    this.customersLocationState = customersLocationState;
    return this;
  }

   /**
   * Get customersLocationState
   * @return customersLocationState
  **/
  @ApiModelProperty(value = "")
  public String getCustomersLocationState() {
    return customersLocationState;
  }

  public void setCustomersLocationState(String customersLocationState) {
    this.customersLocationState = customersLocationState;
  }

  public ConversationEngagementEquationFunction numberOfViewedPagesLogic(NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic) {
    this.numberOfViewedPagesLogic = numberOfViewedPagesLogic;
    return this;
  }

   /**
   * Logic operation to perform on a customer&#39;s browsing time function type
   * @return numberOfViewedPagesLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on a customer's browsing time function type")
  public NumberOfViewedPagesLogicEnum getNumberOfViewedPagesLogic() {
    return numberOfViewedPagesLogic;
  }

  public void setNumberOfViewedPagesLogic(NumberOfViewedPagesLogicEnum numberOfViewedPagesLogic) {
    this.numberOfViewedPagesLogic = numberOfViewedPagesLogic;
  }

  public ConversationEngagementEquationFunction numberOfViewedPagesValue(Integer numberOfViewedPagesValue) {
    this.numberOfViewedPagesValue = numberOfViewedPagesValue;
    return this;
  }

   /**
   * Get numberOfViewedPagesValue
   * @return numberOfViewedPagesValue
  **/
  @ApiModelProperty(value = "")
  public Integer getNumberOfViewedPagesValue() {
    return numberOfViewedPagesValue;
  }

  public void setNumberOfViewedPagesValue(Integer numberOfViewedPagesValue) {
    this.numberOfViewedPagesValue = numberOfViewedPagesValue;
  }

  public ConversationEngagementEquationFunction referringWebsiteLogic(ReferringWebsiteLogicEnum referringWebsiteLogic) {
    this.referringWebsiteLogic = referringWebsiteLogic;
    return this;
  }

   /**
   * Logic operation to perform on a referring website function type
   * @return referringWebsiteLogic
  **/
  @ApiModelProperty(value = "Logic operation to perform on a referring website function type")
  public ReferringWebsiteLogicEnum getReferringWebsiteLogic() {
    return referringWebsiteLogic;
  }

  public void setReferringWebsiteLogic(ReferringWebsiteLogicEnum referringWebsiteLogic) {
    this.referringWebsiteLogic = referringWebsiteLogic;
  }

  public ConversationEngagementEquationFunction referringWebsiteValue(String referringWebsiteValue) {
    this.referringWebsiteValue = referringWebsiteValue;
    return this;
  }

   /**
   * Get referringWebsiteValue
   * @return referringWebsiteValue
  **/
  @ApiModelProperty(value = "")
  public String getReferringWebsiteValue() {
    return referringWebsiteValue;
  }

  public void setReferringWebsiteValue(String referringWebsiteValue) {
    this.referringWebsiteValue = referringWebsiteValue;
  }

  public ConversationEngagementEquationFunction type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of function
   * @return type
  **/
  @ApiModelProperty(value = "Type of function")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationEngagementEquationFunction conversationEngagementEquationFunction = (ConversationEngagementEquationFunction) o;
    return Objects.equals(this.anyPageUrlLogic, conversationEngagementEquationFunction.anyPageUrlLogic) &&
        Objects.equals(this.anyPageUrlValue, conversationEngagementEquationFunction.anyPageUrlValue) &&
        Objects.equals(this.currentPageUrlLogic, conversationEngagementEquationFunction.currentPageUrlLogic) &&
        Objects.equals(this.currentPageUrlValue, conversationEngagementEquationFunction.currentPageUrlValue) &&
        Objects.equals(this.customersBrowsingTimeLogic, conversationEngagementEquationFunction.customersBrowsingTimeLogic) &&
        Objects.equals(this.customersBrowsingTimeSeconds, conversationEngagementEquationFunction.customersBrowsingTimeSeconds) &&
        Objects.equals(this.customersLocationCountry, conversationEngagementEquationFunction.customersLocationCountry) &&
        Objects.equals(this.customersLocationLogic, conversationEngagementEquationFunction.customersLocationLogic) &&
        Objects.equals(this.customersLocationState, conversationEngagementEquationFunction.customersLocationState) &&
        Objects.equals(this.numberOfViewedPagesLogic, conversationEngagementEquationFunction.numberOfViewedPagesLogic) &&
        Objects.equals(this.numberOfViewedPagesValue, conversationEngagementEquationFunction.numberOfViewedPagesValue) &&
        Objects.equals(this.referringWebsiteLogic, conversationEngagementEquationFunction.referringWebsiteLogic) &&
        Objects.equals(this.referringWebsiteValue, conversationEngagementEquationFunction.referringWebsiteValue) &&
        Objects.equals(this.type, conversationEngagementEquationFunction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anyPageUrlLogic, anyPageUrlValue, currentPageUrlLogic, currentPageUrlValue, customersBrowsingTimeLogic, customersBrowsingTimeSeconds, customersLocationCountry, customersLocationLogic, customersLocationState, numberOfViewedPagesLogic, numberOfViewedPagesValue, referringWebsiteLogic, referringWebsiteValue, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationEngagementEquationFunction {\n");
    
    sb.append("    anyPageUrlLogic: ").append(toIndentedString(anyPageUrlLogic)).append("\n");
    sb.append("    anyPageUrlValue: ").append(toIndentedString(anyPageUrlValue)).append("\n");
    sb.append("    currentPageUrlLogic: ").append(toIndentedString(currentPageUrlLogic)).append("\n");
    sb.append("    currentPageUrlValue: ").append(toIndentedString(currentPageUrlValue)).append("\n");
    sb.append("    customersBrowsingTimeLogic: ").append(toIndentedString(customersBrowsingTimeLogic)).append("\n");
    sb.append("    customersBrowsingTimeSeconds: ").append(toIndentedString(customersBrowsingTimeSeconds)).append("\n");
    sb.append("    customersLocationCountry: ").append(toIndentedString(customersLocationCountry)).append("\n");
    sb.append("    customersLocationLogic: ").append(toIndentedString(customersLocationLogic)).append("\n");
    sb.append("    customersLocationState: ").append(toIndentedString(customersLocationState)).append("\n");
    sb.append("    numberOfViewedPagesLogic: ").append(toIndentedString(numberOfViewedPagesLogic)).append("\n");
    sb.append("    numberOfViewedPagesValue: ").append(toIndentedString(numberOfViewedPagesValue)).append("\n");
    sb.append("    referringWebsiteLogic: ").append(toIndentedString(referringWebsiteLogic)).append("\n");
    sb.append("    referringWebsiteValue: ").append(toIndentedString(referringWebsiteValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


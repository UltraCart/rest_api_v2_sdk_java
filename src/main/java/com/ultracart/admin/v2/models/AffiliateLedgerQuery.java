/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * AffiliateLedgerQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T11:40:07.280-04:00[America/Indianapolis]")
public class AffiliateLedgerQuery {
  public static final String SERIALIZED_NAME_AFFILIATE_OID = "affiliate_oid";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_OID)
  private Integer affiliateOid;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  public static final String SERIALIZED_NAME_TRANSACTION_DTS_BEGIN = "transaction_dts_begin";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DTS_BEGIN)
  private String transactionDtsBegin;

  public static final String SERIALIZED_NAME_TRANSACTION_DTS_END = "transaction_dts_end";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DTS_END)
  private String transactionDtsEnd;

  public AffiliateLedgerQuery() { 
  }

  public AffiliateLedgerQuery affiliateOid(Integer affiliateOid) {
    
    this.affiliateOid = affiliateOid;
    return this;
  }

   /**
   * Affiliate ID associated with the ledger
   * @return affiliateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate ID associated with the ledger")

  public Integer getAffiliateOid() {
    return affiliateOid;
  }


  public void setAffiliateOid(Integer affiliateOid) {
    this.affiliateOid = affiliateOid;
  }


  public AffiliateLedgerQuery itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Item id associated with the ledger entry
   * @return itemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Item id associated with the ledger entry")

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public AffiliateLedgerQuery orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Order ID associated with the ledger entries
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order ID associated with the ledger entries")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public AffiliateLedgerQuery subId(String subId) {
    
    this.subId = subId;
    return this;
  }

   /**
   * Sub ID value passed on the click that generated the ledger
   * @return subId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub ID value passed on the click that generated the ledger")

  public String getSubId() {
    return subId;
  }


  public void setSubId(String subId) {
    this.subId = subId;
  }


  public AffiliateLedgerQuery transactionDtsBegin(String transactionDtsBegin) {
    
    this.transactionDtsBegin = transactionDtsBegin;
    return this;
  }

   /**
   * Minimum transaction date/time to return
   * @return transactionDtsBegin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum transaction date/time to return")

  public String getTransactionDtsBegin() {
    return transactionDtsBegin;
  }


  public void setTransactionDtsBegin(String transactionDtsBegin) {
    this.transactionDtsBegin = transactionDtsBegin;
  }


  public AffiliateLedgerQuery transactionDtsEnd(String transactionDtsEnd) {
    
    this.transactionDtsEnd = transactionDtsEnd;
    return this;
  }

   /**
   * Maximum transaction date/time to return
   * @return transactionDtsEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum transaction date/time to return")

  public String getTransactionDtsEnd() {
    return transactionDtsEnd;
  }


  public void setTransactionDtsEnd(String transactionDtsEnd) {
    this.transactionDtsEnd = transactionDtsEnd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffiliateLedgerQuery affiliateLedgerQuery = (AffiliateLedgerQuery) o;
    return Objects.equals(this.affiliateOid, affiliateLedgerQuery.affiliateOid) &&
        Objects.equals(this.itemId, affiliateLedgerQuery.itemId) &&
        Objects.equals(this.orderId, affiliateLedgerQuery.orderId) &&
        Objects.equals(this.subId, affiliateLedgerQuery.subId) &&
        Objects.equals(this.transactionDtsBegin, affiliateLedgerQuery.transactionDtsBegin) &&
        Objects.equals(this.transactionDtsEnd, affiliateLedgerQuery.transactionDtsEnd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliateOid, itemId, orderId, subId, transactionDtsBegin, transactionDtsEnd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffiliateLedgerQuery {\n");
    sb.append("    affiliateOid: ").append(toIndentedString(affiliateOid)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("    transactionDtsBegin: ").append(toIndentedString(transactionDtsBegin)).append("\n");
    sb.append("    transactionDtsEnd: ").append(toIndentedString(transactionDtsEnd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliate_oid");
    openapiFields.add("item_id");
    openapiFields.add("order_id");
    openapiFields.add("sub_id");
    openapiFields.add("transaction_dts_begin");
    openapiFields.add("transaction_dts_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AffiliateLedgerQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AffiliateLedgerQuery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffiliateLedgerQuery is not found in the empty JSON string", AffiliateLedgerQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AffiliateLedgerQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffiliateLedgerQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if (jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if (jsonObj.get("sub_id") != null && !jsonObj.get("sub_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_id").toString()));
      }
      if (jsonObj.get("transaction_dts_begin") != null && !jsonObj.get("transaction_dts_begin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_dts_begin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_dts_begin").toString()));
      }
      if (jsonObj.get("transaction_dts_end") != null && !jsonObj.get("transaction_dts_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_dts_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_dts_end").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffiliateLedgerQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffiliateLedgerQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffiliateLedgerQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffiliateLedgerQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<AffiliateLedgerQuery>() {
           @Override
           public void write(JsonWriter out, AffiliateLedgerQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffiliateLedgerQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AffiliateLedgerQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AffiliateLedgerQuery
  * @throws IOException if the JSON string is invalid with respect to AffiliateLedgerQuery
  */
  public static AffiliateLedgerQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffiliateLedgerQuery.class);
  }

 /**
  * Convert an instance of AffiliateLedgerQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


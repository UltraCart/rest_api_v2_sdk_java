/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilterPageViewEvent;
import com.ultracart.admin.v2.models.ScreenRecordingFilterPageViewParam;
import com.ultracart.admin.v2.models.ScreenRecordingFilterPageViewReferrerParam;
import com.ultracart.admin.v2.models.ScreenRecordingFilterRangeInteger;
import com.ultracart.admin.v2.models.ScreenRecordingFilterStringSearch;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingFilterPageView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T12:05:11.750-05:00[America/Indianapolis]")
public class ScreenRecordingFilterPageView {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private ScreenRecordingFilterStringSearch domain;

  public static final String SERIALIZED_NAME_DOMAIN_FILTER = "domain_filter";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FILTER)
  private Boolean domainFilter;

  public static final String SERIALIZED_NAME_EVENT_NAME_FILTER = "event_name_filter";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME_FILTER)
  private Boolean eventNameFilter;

  public static final String SERIALIZED_NAME_EVENT_PARAM_NAME_FILTER = "event_param_name_filter";
  @SerializedName(SERIALIZED_NAME_EVENT_PARAM_NAME_FILTER)
  private Boolean eventParamNameFilter;

  public static final String SERIALIZED_NAME_EVENT_PARAM_VALUE_FILTER = "event_param_value_filter";
  @SerializedName(SERIALIZED_NAME_EVENT_PARAM_VALUE_FILTER)
  private Boolean eventParamValueFilter;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ScreenRecordingFilterPageViewEvent> events = null;

  public static final String SERIALIZED_NAME_PARAM_NAME_FILTER = "param_name_filter";
  @SerializedName(SERIALIZED_NAME_PARAM_NAME_FILTER)
  private Boolean paramNameFilter;

  public static final String SERIALIZED_NAME_PARAM_VALUE_FILTER = "param_value_filter";
  @SerializedName(SERIALIZED_NAME_PARAM_VALUE_FILTER)
  private Boolean paramValueFilter;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<ScreenRecordingFilterPageViewParam> params = null;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private ScreenRecordingFilterStringSearch referrer;

  public static final String SERIALIZED_NAME_REFERRER_PARAMS = "referrer_params";
  @SerializedName(SERIALIZED_NAME_REFERRER_PARAMS)
  private List<ScreenRecordingFilterPageViewReferrerParam> referrerParams = null;

  public static final String SERIALIZED_NAME_REFERRER_RAW = "referrer_raw";
  @SerializedName(SERIALIZED_NAME_REFERRER_RAW)
  private ScreenRecordingFilterStringSearch referrerRaw;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE = "time_on_page";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE)
  private ScreenRecordingFilterRangeInteger timeOnPage;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE_MAX_FILTER = "time_on_page_max_filter";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE_MAX_FILTER)
  private Boolean timeOnPageMaxFilter;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE_MIN_FILTER = "time_on_page_min_filter";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE_MIN_FILTER)
  private Boolean timeOnPageMinFilter;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private ScreenRecordingFilterStringSearch url;

  public static final String SERIALIZED_NAME_URL_FILTER = "url_filter";
  @SerializedName(SERIALIZED_NAME_URL_FILTER)
  private Boolean urlFilter;

  public ScreenRecordingFilterPageView() { 
  }

  public ScreenRecordingFilterPageView domain(ScreenRecordingFilterStringSearch domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterStringSearch getDomain() {
    return domain;
  }


  public void setDomain(ScreenRecordingFilterStringSearch domain) {
    this.domain = domain;
  }


  public ScreenRecordingFilterPageView domainFilter(Boolean domainFilter) {
    
    this.domainFilter = domainFilter;
    return this;
  }

   /**
   * Get domainFilter
   * @return domainFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDomainFilter() {
    return domainFilter;
  }


  public void setDomainFilter(Boolean domainFilter) {
    this.domainFilter = domainFilter;
  }


  public ScreenRecordingFilterPageView eventNameFilter(Boolean eventNameFilter) {
    
    this.eventNameFilter = eventNameFilter;
    return this;
  }

   /**
   * Get eventNameFilter
   * @return eventNameFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEventNameFilter() {
    return eventNameFilter;
  }


  public void setEventNameFilter(Boolean eventNameFilter) {
    this.eventNameFilter = eventNameFilter;
  }


  public ScreenRecordingFilterPageView eventParamNameFilter(Boolean eventParamNameFilter) {
    
    this.eventParamNameFilter = eventParamNameFilter;
    return this;
  }

   /**
   * Get eventParamNameFilter
   * @return eventParamNameFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEventParamNameFilter() {
    return eventParamNameFilter;
  }


  public void setEventParamNameFilter(Boolean eventParamNameFilter) {
    this.eventParamNameFilter = eventParamNameFilter;
  }


  public ScreenRecordingFilterPageView eventParamValueFilter(Boolean eventParamValueFilter) {
    
    this.eventParamValueFilter = eventParamValueFilter;
    return this;
  }

   /**
   * Get eventParamValueFilter
   * @return eventParamValueFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEventParamValueFilter() {
    return eventParamValueFilter;
  }


  public void setEventParamValueFilter(Boolean eventParamValueFilter) {
    this.eventParamValueFilter = eventParamValueFilter;
  }


  public ScreenRecordingFilterPageView events(List<ScreenRecordingFilterPageViewEvent> events) {
    
    this.events = events;
    return this;
  }

  public ScreenRecordingFilterPageView addEventsItem(ScreenRecordingFilterPageViewEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingFilterPageViewEvent> getEvents() {
    return events;
  }


  public void setEvents(List<ScreenRecordingFilterPageViewEvent> events) {
    this.events = events;
  }


  public ScreenRecordingFilterPageView paramNameFilter(Boolean paramNameFilter) {
    
    this.paramNameFilter = paramNameFilter;
    return this;
  }

   /**
   * Get paramNameFilter
   * @return paramNameFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getParamNameFilter() {
    return paramNameFilter;
  }


  public void setParamNameFilter(Boolean paramNameFilter) {
    this.paramNameFilter = paramNameFilter;
  }


  public ScreenRecordingFilterPageView paramValueFilter(Boolean paramValueFilter) {
    
    this.paramValueFilter = paramValueFilter;
    return this;
  }

   /**
   * Get paramValueFilter
   * @return paramValueFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getParamValueFilter() {
    return paramValueFilter;
  }


  public void setParamValueFilter(Boolean paramValueFilter) {
    this.paramValueFilter = paramValueFilter;
  }


  public ScreenRecordingFilterPageView params(List<ScreenRecordingFilterPageViewParam> params) {
    
    this.params = params;
    return this;
  }

  public ScreenRecordingFilterPageView addParamsItem(ScreenRecordingFilterPageViewParam paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingFilterPageViewParam> getParams() {
    return params;
  }


  public void setParams(List<ScreenRecordingFilterPageViewParam> params) {
    this.params = params;
  }


  public ScreenRecordingFilterPageView referrer(ScreenRecordingFilterStringSearch referrer) {
    
    this.referrer = referrer;
    return this;
  }

   /**
   * Get referrer
   * @return referrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterStringSearch getReferrer() {
    return referrer;
  }


  public void setReferrer(ScreenRecordingFilterStringSearch referrer) {
    this.referrer = referrer;
  }


  public ScreenRecordingFilterPageView referrerParams(List<ScreenRecordingFilterPageViewReferrerParam> referrerParams) {
    
    this.referrerParams = referrerParams;
    return this;
  }

  public ScreenRecordingFilterPageView addReferrerParamsItem(ScreenRecordingFilterPageViewReferrerParam referrerParamsItem) {
    if (this.referrerParams == null) {
      this.referrerParams = new ArrayList<>();
    }
    this.referrerParams.add(referrerParamsItem);
    return this;
  }

   /**
   * Get referrerParams
   * @return referrerParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingFilterPageViewReferrerParam> getReferrerParams() {
    return referrerParams;
  }


  public void setReferrerParams(List<ScreenRecordingFilterPageViewReferrerParam> referrerParams) {
    this.referrerParams = referrerParams;
  }


  public ScreenRecordingFilterPageView referrerRaw(ScreenRecordingFilterStringSearch referrerRaw) {
    
    this.referrerRaw = referrerRaw;
    return this;
  }

   /**
   * Get referrerRaw
   * @return referrerRaw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterStringSearch getReferrerRaw() {
    return referrerRaw;
  }


  public void setReferrerRaw(ScreenRecordingFilterStringSearch referrerRaw) {
    this.referrerRaw = referrerRaw;
  }


  public ScreenRecordingFilterPageView timeOnPage(ScreenRecordingFilterRangeInteger timeOnPage) {
    
    this.timeOnPage = timeOnPage;
    return this;
  }

   /**
   * Get timeOnPage
   * @return timeOnPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterRangeInteger getTimeOnPage() {
    return timeOnPage;
  }


  public void setTimeOnPage(ScreenRecordingFilterRangeInteger timeOnPage) {
    this.timeOnPage = timeOnPage;
  }


  public ScreenRecordingFilterPageView timeOnPageMaxFilter(Boolean timeOnPageMaxFilter) {
    
    this.timeOnPageMaxFilter = timeOnPageMaxFilter;
    return this;
  }

   /**
   * Get timeOnPageMaxFilter
   * @return timeOnPageMaxFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTimeOnPageMaxFilter() {
    return timeOnPageMaxFilter;
  }


  public void setTimeOnPageMaxFilter(Boolean timeOnPageMaxFilter) {
    this.timeOnPageMaxFilter = timeOnPageMaxFilter;
  }


  public ScreenRecordingFilterPageView timeOnPageMinFilter(Boolean timeOnPageMinFilter) {
    
    this.timeOnPageMinFilter = timeOnPageMinFilter;
    return this;
  }

   /**
   * Get timeOnPageMinFilter
   * @return timeOnPageMinFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTimeOnPageMinFilter() {
    return timeOnPageMinFilter;
  }


  public void setTimeOnPageMinFilter(Boolean timeOnPageMinFilter) {
    this.timeOnPageMinFilter = timeOnPageMinFilter;
  }


  public ScreenRecordingFilterPageView url(ScreenRecordingFilterStringSearch url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterStringSearch getUrl() {
    return url;
  }


  public void setUrl(ScreenRecordingFilterStringSearch url) {
    this.url = url;
  }


  public ScreenRecordingFilterPageView urlFilter(Boolean urlFilter) {
    
    this.urlFilter = urlFilter;
    return this;
  }

   /**
   * Get urlFilter
   * @return urlFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUrlFilter() {
    return urlFilter;
  }


  public void setUrlFilter(Boolean urlFilter) {
    this.urlFilter = urlFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterPageView screenRecordingFilterPageView = (ScreenRecordingFilterPageView) o;
    return Objects.equals(this.domain, screenRecordingFilterPageView.domain) &&
        Objects.equals(this.domainFilter, screenRecordingFilterPageView.domainFilter) &&
        Objects.equals(this.eventNameFilter, screenRecordingFilterPageView.eventNameFilter) &&
        Objects.equals(this.eventParamNameFilter, screenRecordingFilterPageView.eventParamNameFilter) &&
        Objects.equals(this.eventParamValueFilter, screenRecordingFilterPageView.eventParamValueFilter) &&
        Objects.equals(this.events, screenRecordingFilterPageView.events) &&
        Objects.equals(this.paramNameFilter, screenRecordingFilterPageView.paramNameFilter) &&
        Objects.equals(this.paramValueFilter, screenRecordingFilterPageView.paramValueFilter) &&
        Objects.equals(this.params, screenRecordingFilterPageView.params) &&
        Objects.equals(this.referrer, screenRecordingFilterPageView.referrer) &&
        Objects.equals(this.referrerParams, screenRecordingFilterPageView.referrerParams) &&
        Objects.equals(this.referrerRaw, screenRecordingFilterPageView.referrerRaw) &&
        Objects.equals(this.timeOnPage, screenRecordingFilterPageView.timeOnPage) &&
        Objects.equals(this.timeOnPageMaxFilter, screenRecordingFilterPageView.timeOnPageMaxFilter) &&
        Objects.equals(this.timeOnPageMinFilter, screenRecordingFilterPageView.timeOnPageMinFilter) &&
        Objects.equals(this.url, screenRecordingFilterPageView.url) &&
        Objects.equals(this.urlFilter, screenRecordingFilterPageView.urlFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, domainFilter, eventNameFilter, eventParamNameFilter, eventParamValueFilter, events, paramNameFilter, paramValueFilter, params, referrer, referrerParams, referrerRaw, timeOnPage, timeOnPageMaxFilter, timeOnPageMinFilter, url, urlFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterPageView {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainFilter: ").append(toIndentedString(domainFilter)).append("\n");
    sb.append("    eventNameFilter: ").append(toIndentedString(eventNameFilter)).append("\n");
    sb.append("    eventParamNameFilter: ").append(toIndentedString(eventParamNameFilter)).append("\n");
    sb.append("    eventParamValueFilter: ").append(toIndentedString(eventParamValueFilter)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    paramNameFilter: ").append(toIndentedString(paramNameFilter)).append("\n");
    sb.append("    paramValueFilter: ").append(toIndentedString(paramValueFilter)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    referrerParams: ").append(toIndentedString(referrerParams)).append("\n");
    sb.append("    referrerRaw: ").append(toIndentedString(referrerRaw)).append("\n");
    sb.append("    timeOnPage: ").append(toIndentedString(timeOnPage)).append("\n");
    sb.append("    timeOnPageMaxFilter: ").append(toIndentedString(timeOnPageMaxFilter)).append("\n");
    sb.append("    timeOnPageMinFilter: ").append(toIndentedString(timeOnPageMinFilter)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlFilter: ").append(toIndentedString(urlFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("domain_filter");
    openapiFields.add("event_name_filter");
    openapiFields.add("event_param_name_filter");
    openapiFields.add("event_param_value_filter");
    openapiFields.add("events");
    openapiFields.add("param_name_filter");
    openapiFields.add("param_value_filter");
    openapiFields.add("params");
    openapiFields.add("referrer");
    openapiFields.add("referrer_params");
    openapiFields.add("referrer_raw");
    openapiFields.add("time_on_page");
    openapiFields.add("time_on_page_max_filter");
    openapiFields.add("time_on_page_min_filter");
    openapiFields.add("url");
    openapiFields.add("url_filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingFilterPageView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingFilterPageView.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingFilterPageView is not found in the empty JSON string", ScreenRecordingFilterPageView.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingFilterPageView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingFilterPageView` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `domain`
      if (jsonObj.getAsJsonObject("domain") != null) {
        ScreenRecordingFilterStringSearch.validateJsonObject(jsonObj.getAsJsonObject("domain"));
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
        }

        // validate the optional field `events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          ScreenRecordingFilterPageViewEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayparams = jsonObj.getAsJsonArray("params");
      if (jsonArrayparams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("params").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
        }

        // validate the optional field `params` (array)
        for (int i = 0; i < jsonArrayparams.size(); i++) {
          ScreenRecordingFilterPageViewParam.validateJsonObject(jsonArrayparams.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `referrer`
      if (jsonObj.getAsJsonObject("referrer") != null) {
        ScreenRecordingFilterStringSearch.validateJsonObject(jsonObj.getAsJsonObject("referrer"));
      }
      JsonArray jsonArrayreferrerParams = jsonObj.getAsJsonArray("referrer_params");
      if (jsonArrayreferrerParams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("referrer_params").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `referrer_params` to be an array in the JSON string but got `%s`", jsonObj.get("referrer_params").toString()));
        }

        // validate the optional field `referrer_params` (array)
        for (int i = 0; i < jsonArrayreferrerParams.size(); i++) {
          ScreenRecordingFilterPageViewReferrerParam.validateJsonObject(jsonArrayreferrerParams.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `referrer_raw`
      if (jsonObj.getAsJsonObject("referrer_raw") != null) {
        ScreenRecordingFilterStringSearch.validateJsonObject(jsonObj.getAsJsonObject("referrer_raw"));
      }
      // validate the optional field `time_on_page`
      if (jsonObj.getAsJsonObject("time_on_page") != null) {
        ScreenRecordingFilterRangeInteger.validateJsonObject(jsonObj.getAsJsonObject("time_on_page"));
      }
      // validate the optional field `url`
      if (jsonObj.getAsJsonObject("url") != null) {
        ScreenRecordingFilterStringSearch.validateJsonObject(jsonObj.getAsJsonObject("url"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingFilterPageView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingFilterPageView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingFilterPageView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingFilterPageView.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingFilterPageView>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingFilterPageView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingFilterPageView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingFilterPageView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingFilterPageView
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingFilterPageView
  */
  public static ScreenRecordingFilterPageView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingFilterPageView.class);
  }

 /**
  * Convert an instance of ScreenRecordingFilterPageView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


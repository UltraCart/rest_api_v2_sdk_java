/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailStat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T09:21:23.610-04:00[America/Indianapolis]")
public class EmailStat {
  public static final String SERIALIZED_NAME_CLICK_COUNT = "click_count";
  @SerializedName(SERIALIZED_NAME_CLICK_COUNT)
  private Integer clickCount;

  public static final String SERIALIZED_NAME_CLICK_COUNT_FORMATTED = "click_count_formatted";
  @SerializedName(SERIALIZED_NAME_CLICK_COUNT_FORMATTED)
  private String clickCountFormatted;

  public static final String SERIALIZED_NAME_CONVERSION_COUNT = "conversion_count";
  @SerializedName(SERIALIZED_NAME_CONVERSION_COUNT)
  private Integer conversionCount;

  public static final String SERIALIZED_NAME_CONVERSION_COUNT_FORMATTED = "conversion_count_formatted";
  @SerializedName(SERIALIZED_NAME_CONVERSION_COUNT_FORMATTED)
  private String conversionCountFormatted;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DELIVERED_COUNT = "delivered_count";
  @SerializedName(SERIALIZED_NAME_DELIVERED_COUNT)
  private Integer deliveredCount;

  public static final String SERIALIZED_NAME_DELIVERED_COUNT_FORMATTED = "delivered_count_formatted";
  @SerializedName(SERIALIZED_NAME_DELIVERED_COUNT_FORMATTED)
  private String deliveredCountFormatted;

  public static final String SERIALIZED_NAME_KICKBOX_COUNT = "kickbox_count";
  @SerializedName(SERIALIZED_NAME_KICKBOX_COUNT)
  private Integer kickboxCount;

  public static final String SERIALIZED_NAME_KICKBOX_COUNT_FORMATTED = "kickbox_count_formatted";
  @SerializedName(SERIALIZED_NAME_KICKBOX_COUNT_FORMATTED)
  private String kickboxCountFormatted;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_COUNT = "open_count";
  @SerializedName(SERIALIZED_NAME_OPEN_COUNT)
  private Integer openCount;

  public static final String SERIALIZED_NAME_OPEN_COUNT_FORMATTED = "open_count_formatted";
  @SerializedName(SERIALIZED_NAME_OPEN_COUNT_FORMATTED)
  private String openCountFormatted;

  public static final String SERIALIZED_NAME_ORDER_COUNT = "order_count";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT)
  private Integer orderCount;

  public static final String SERIALIZED_NAME_ORDER_COUNT_FORMATTED = "order_count_formatted";
  @SerializedName(SERIALIZED_NAME_ORDER_COUNT_FORMATTED)
  private String orderCountFormatted;

  public static final String SERIALIZED_NAME_PERMANENT_BOUNCE_COUNT = "permanent_bounce_count";
  @SerializedName(SERIALIZED_NAME_PERMANENT_BOUNCE_COUNT)
  private Integer permanentBounceCount;

  public static final String SERIALIZED_NAME_PERMANENT_BOUNCE_COUNT_FORMATTED = "permanent_bounce_count_formatted";
  @SerializedName(SERIALIZED_NAME_PERMANENT_BOUNCE_COUNT_FORMATTED)
  private String permanentBounceCountFormatted;

  public static final String SERIALIZED_NAME_PROFIT = "profit";
  @SerializedName(SERIALIZED_NAME_PROFIT)
  private BigDecimal profit;

  public static final String SERIALIZED_NAME_PROFIT_FORMATTED = "profit_formatted";
  @SerializedName(SERIALIZED_NAME_PROFIT_FORMATTED)
  private String profitFormatted;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_REVENUE_FORMATTED = "revenue_formatted";
  @SerializedName(SERIALIZED_NAME_REVENUE_FORMATTED)
  private String revenueFormatted;

  public static final String SERIALIZED_NAME_SEND_COUNT = "send_count";
  @SerializedName(SERIALIZED_NAME_SEND_COUNT)
  private Integer sendCount;

  public static final String SERIALIZED_NAME_SEND_COUNT_FORMATTED = "send_count_formatted";
  @SerializedName(SERIALIZED_NAME_SEND_COUNT_FORMATTED)
  private String sendCountFormatted;

  public static final String SERIALIZED_NAME_SKIPPED_COUNT = "skipped_count";
  @SerializedName(SERIALIZED_NAME_SKIPPED_COUNT)
  private Integer skippedCount;

  public static final String SERIALIZED_NAME_SKIPPED_COUNT_FORMATTED = "skipped_count_formatted";
  @SerializedName(SERIALIZED_NAME_SKIPPED_COUNT_FORMATTED)
  private String skippedCountFormatted;

  public static final String SERIALIZED_NAME_SPAM_COUNT = "spam_count";
  @SerializedName(SERIALIZED_NAME_SPAM_COUNT)
  private Integer spamCount;

  public static final String SERIALIZED_NAME_SPAM_COUNT_FORMATTED = "spam_count_formatted";
  @SerializedName(SERIALIZED_NAME_SPAM_COUNT_FORMATTED)
  private String spamCountFormatted;

  public static final String SERIALIZED_NAME_STAT_TYPE = "stat_type";
  @SerializedName(SERIALIZED_NAME_STAT_TYPE)
  private String statType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DTS = "status_dts";
  @SerializedName(SERIALIZED_NAME_STATUS_DTS)
  private String statusDts;

  public static final String SERIALIZED_NAME_STEP_UUID = "step_uuid";
  @SerializedName(SERIALIZED_NAME_STEP_UUID)
  private String stepUuid;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<EmailStat> steps = null;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_COUNT = "unsubscribe_count";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_COUNT)
  private Integer unsubscribeCount;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_COUNT_FORMATTED = "unsubscribe_count_formatted";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_COUNT_FORMATTED)
  private String unsubscribeCountFormatted;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "view_count";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Integer viewCount;

  public static final String SERIALIZED_NAME_VIEW_COUNT_FORMATTED = "view_count_formatted";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT_FORMATTED)
  private String viewCountFormatted;

  public EmailStat() { 
  }

  public EmailStat clickCount(Integer clickCount) {
    
    this.clickCount = clickCount;
    return this;
  }

   /**
   * Count of clicked emails
   * @return clickCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of clicked emails")

  public Integer getClickCount() {
    return clickCount;
  }


  public void setClickCount(Integer clickCount) {
    this.clickCount = clickCount;
  }


  public EmailStat clickCountFormatted(String clickCountFormatted) {
    
    this.clickCountFormatted = clickCountFormatted;
    return this;
  }

   /**
   * Count of clicked emails, formatted
   * @return clickCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of clicked emails, formatted")

  public String getClickCountFormatted() {
    return clickCountFormatted;
  }


  public void setClickCountFormatted(String clickCountFormatted) {
    this.clickCountFormatted = clickCountFormatted;
  }


  public EmailStat conversionCount(Integer conversionCount) {
    
    this.conversionCount = conversionCount;
    return this;
  }

   /**
   * Count of conversions
   * @return conversionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of conversions")

  public Integer getConversionCount() {
    return conversionCount;
  }


  public void setConversionCount(Integer conversionCount) {
    this.conversionCount = conversionCount;
  }


  public EmailStat conversionCountFormatted(String conversionCountFormatted) {
    
    this.conversionCountFormatted = conversionCountFormatted;
    return this;
  }

   /**
   * Count of conversions, formatted
   * @return conversionCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of conversions, formatted")

  public String getConversionCountFormatted() {
    return conversionCountFormatted;
  }


  public void setConversionCountFormatted(String conversionCountFormatted) {
    this.conversionCountFormatted = conversionCountFormatted;
  }


  public EmailStat deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * True if campaign/flow has been archived
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if campaign/flow has been archived")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public EmailStat deliveredCount(Integer deliveredCount) {
    
    this.deliveredCount = deliveredCount;
    return this;
  }

   /**
   * Count of delivered emails
   * @return deliveredCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of delivered emails")

  public Integer getDeliveredCount() {
    return deliveredCount;
  }


  public void setDeliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
  }


  public EmailStat deliveredCountFormatted(String deliveredCountFormatted) {
    
    this.deliveredCountFormatted = deliveredCountFormatted;
    return this;
  }

   /**
   * Count of delivered emails, formatted
   * @return deliveredCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of delivered emails, formatted")

  public String getDeliveredCountFormatted() {
    return deliveredCountFormatted;
  }


  public void setDeliveredCountFormatted(String deliveredCountFormatted) {
    this.deliveredCountFormatted = deliveredCountFormatted;
  }


  public EmailStat kickboxCount(Integer kickboxCount) {
    
    this.kickboxCount = kickboxCount;
    return this;
  }

   /**
   * Count of emails kicked
   * @return kickboxCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails kicked")

  public Integer getKickboxCount() {
    return kickboxCount;
  }


  public void setKickboxCount(Integer kickboxCount) {
    this.kickboxCount = kickboxCount;
  }


  public EmailStat kickboxCountFormatted(String kickboxCountFormatted) {
    
    this.kickboxCountFormatted = kickboxCountFormatted;
    return this;
  }

   /**
   * Count of emails kicked, formatted
   * @return kickboxCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails kicked, formatted")

  public String getKickboxCountFormatted() {
    return kickboxCountFormatted;
  }


  public void setKickboxCountFormatted(String kickboxCountFormatted) {
    this.kickboxCountFormatted = kickboxCountFormatted;
  }


  public EmailStat merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public EmailStat name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * List or segment name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List or segment name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EmailStat openCount(Integer openCount) {
    
    this.openCount = openCount;
    return this;
  }

   /**
   * Count of opened emails
   * @return openCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of opened emails")

  public Integer getOpenCount() {
    return openCount;
  }


  public void setOpenCount(Integer openCount) {
    this.openCount = openCount;
  }


  public EmailStat openCountFormatted(String openCountFormatted) {
    
    this.openCountFormatted = openCountFormatted;
    return this;
  }

   /**
   * Count of opened emails, formatted
   * @return openCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of opened emails, formatted")

  public String getOpenCountFormatted() {
    return openCountFormatted;
  }


  public void setOpenCountFormatted(String openCountFormatted) {
    this.openCountFormatted = openCountFormatted;
  }


  public EmailStat orderCount(Integer orderCount) {
    
    this.orderCount = orderCount;
    return this;
  }

   /**
   * Count of orders
   * @return orderCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of orders")

  public Integer getOrderCount() {
    return orderCount;
  }


  public void setOrderCount(Integer orderCount) {
    this.orderCount = orderCount;
  }


  public EmailStat orderCountFormatted(String orderCountFormatted) {
    
    this.orderCountFormatted = orderCountFormatted;
    return this;
  }

   /**
   * Count of orders, formatted
   * @return orderCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of orders, formatted")

  public String getOrderCountFormatted() {
    return orderCountFormatted;
  }


  public void setOrderCountFormatted(String orderCountFormatted) {
    this.orderCountFormatted = orderCountFormatted;
  }


  public EmailStat permanentBounceCount(Integer permanentBounceCount) {
    
    this.permanentBounceCount = permanentBounceCount;
    return this;
  }

   /**
   * Count of emails permanently bounced
   * @return permanentBounceCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails permanently bounced")

  public Integer getPermanentBounceCount() {
    return permanentBounceCount;
  }


  public void setPermanentBounceCount(Integer permanentBounceCount) {
    this.permanentBounceCount = permanentBounceCount;
  }


  public EmailStat permanentBounceCountFormatted(String permanentBounceCountFormatted) {
    
    this.permanentBounceCountFormatted = permanentBounceCountFormatted;
    return this;
  }

   /**
   * Count of emails permanently bounced, formatted
   * @return permanentBounceCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails permanently bounced, formatted")

  public String getPermanentBounceCountFormatted() {
    return permanentBounceCountFormatted;
  }


  public void setPermanentBounceCountFormatted(String permanentBounceCountFormatted) {
    this.permanentBounceCountFormatted = permanentBounceCountFormatted;
  }


  public EmailStat profit(BigDecimal profit) {
    
    this.profit = profit;
    return this;
  }

   /**
   * Profit
   * @return profit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Profit")

  public BigDecimal getProfit() {
    return profit;
  }


  public void setProfit(BigDecimal profit) {
    this.profit = profit;
  }


  public EmailStat profitFormatted(String profitFormatted) {
    
    this.profitFormatted = profitFormatted;
    return this;
  }

   /**
   * Profit, formatted
   * @return profitFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Profit, formatted")

  public String getProfitFormatted() {
    return profitFormatted;
  }


  public void setProfitFormatted(String profitFormatted) {
    this.profitFormatted = profitFormatted;
  }


  public EmailStat revenue(BigDecimal revenue) {
    
    this.revenue = revenue;
    return this;
  }

   /**
   * Revenue
   * @return revenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revenue")

  public BigDecimal getRevenue() {
    return revenue;
  }


  public void setRevenue(BigDecimal revenue) {
    this.revenue = revenue;
  }


  public EmailStat revenueFormatted(String revenueFormatted) {
    
    this.revenueFormatted = revenueFormatted;
    return this;
  }

   /**
   * Revenue, formatted
   * @return revenueFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revenue, formatted")

  public String getRevenueFormatted() {
    return revenueFormatted;
  }


  public void setRevenueFormatted(String revenueFormatted) {
    this.revenueFormatted = revenueFormatted;
  }


  public EmailStat sendCount(Integer sendCount) {
    
    this.sendCount = sendCount;
    return this;
  }

   /**
   * Count of emails sent
   * @return sendCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails sent")

  public Integer getSendCount() {
    return sendCount;
  }


  public void setSendCount(Integer sendCount) {
    this.sendCount = sendCount;
  }


  public EmailStat sendCountFormatted(String sendCountFormatted) {
    
    this.sendCountFormatted = sendCountFormatted;
    return this;
  }

   /**
   * Count of emails sent, formatted
   * @return sendCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails sent, formatted")

  public String getSendCountFormatted() {
    return sendCountFormatted;
  }


  public void setSendCountFormatted(String sendCountFormatted) {
    this.sendCountFormatted = sendCountFormatted;
  }


  public EmailStat skippedCount(Integer skippedCount) {
    
    this.skippedCount = skippedCount;
    return this;
  }

   /**
   * Count of skipped emails
   * @return skippedCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of skipped emails")

  public Integer getSkippedCount() {
    return skippedCount;
  }


  public void setSkippedCount(Integer skippedCount) {
    this.skippedCount = skippedCount;
  }


  public EmailStat skippedCountFormatted(String skippedCountFormatted) {
    
    this.skippedCountFormatted = skippedCountFormatted;
    return this;
  }

   /**
   * Count of skipped emails, formatted
   * @return skippedCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of skipped emails, formatted")

  public String getSkippedCountFormatted() {
    return skippedCountFormatted;
  }


  public void setSkippedCountFormatted(String skippedCountFormatted) {
    this.skippedCountFormatted = skippedCountFormatted;
  }


  public EmailStat spamCount(Integer spamCount) {
    
    this.spamCount = spamCount;
    return this;
  }

   /**
   * Count of emails classified as spam
   * @return spamCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails classified as spam")

  public Integer getSpamCount() {
    return spamCount;
  }


  public void setSpamCount(Integer spamCount) {
    this.spamCount = spamCount;
  }


  public EmailStat spamCountFormatted(String spamCountFormatted) {
    
    this.spamCountFormatted = spamCountFormatted;
    return this;
  }

   /**
   * Count of emails classified as spam, formatted
   * @return spamCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails classified as spam, formatted")

  public String getSpamCountFormatted() {
    return spamCountFormatted;
  }


  public void setSpamCountFormatted(String spamCountFormatted) {
    this.spamCountFormatted = spamCountFormatted;
  }


  public EmailStat statType(String statType) {
    
    this.statType = statType;
    return this;
  }

   /**
   * Campaign, Flow or None (for anything else)
   * @return statType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Campaign, Flow or None (for anything else)")

  public String getStatType() {
    return statType;
  }


  public void setStatType(String statType) {
    this.statType = statType;
  }


  public EmailStat status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of campaign or flow
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of campaign or flow")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public EmailStat statusDts(String statusDts) {
    
    this.statusDts = statusDts;
    return this;
  }

   /**
   * Status dts of campaign or flow
   * @return statusDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status dts of campaign or flow")

  public String getStatusDts() {
    return statusDts;
  }


  public void setStatusDts(String statusDts) {
    this.statusDts = statusDts;
  }


  public EmailStat stepUuid(String stepUuid) {
    
    this.stepUuid = stepUuid;
    return this;
  }

   /**
   * Step UUID if the statistics are at the step/email level
   * @return stepUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Step UUID if the statistics are at the step/email level")

  public String getStepUuid() {
    return stepUuid;
  }


  public void setStepUuid(String stepUuid) {
    this.stepUuid = stepUuid;
  }


  public EmailStat steps(List<EmailStat> steps) {
    
    this.steps = steps;
    return this;
  }

  public EmailStat addStepsItem(EmailStat stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EmailStat> getSteps() {
    return steps;
  }


  public void setSteps(List<EmailStat> steps) {
    this.steps = steps;
  }


  public EmailStat storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Storefront oid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storefront oid")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public EmailStat unsubscribeCount(Integer unsubscribeCount) {
    
    this.unsubscribeCount = unsubscribeCount;
    return this;
  }

   /**
   * Count of emails classified as unsubscribe
   * @return unsubscribeCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails classified as unsubscribe")

  public Integer getUnsubscribeCount() {
    return unsubscribeCount;
  }


  public void setUnsubscribeCount(Integer unsubscribeCount) {
    this.unsubscribeCount = unsubscribeCount;
  }


  public EmailStat unsubscribeCountFormatted(String unsubscribeCountFormatted) {
    
    this.unsubscribeCountFormatted = unsubscribeCountFormatted;
    return this;
  }

   /**
   * Count of emails classified as unsubscribe, formatted
   * @return unsubscribeCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of emails classified as unsubscribe, formatted")

  public String getUnsubscribeCountFormatted() {
    return unsubscribeCountFormatted;
  }


  public void setUnsubscribeCountFormatted(String unsubscribeCountFormatted) {
    this.unsubscribeCountFormatted = unsubscribeCountFormatted;
  }


  public EmailStat uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * List/Segment uuid, or Flow/Campaign uuid depending on level of stat aggregation.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List/Segment uuid, or Flow/Campaign uuid depending on level of stat aggregation.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public EmailStat viewCount(Integer viewCount) {
    
    this.viewCount = viewCount;
    return this;
  }

   /**
   * Count of views
   * @return viewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of views")

  public Integer getViewCount() {
    return viewCount;
  }


  public void setViewCount(Integer viewCount) {
    this.viewCount = viewCount;
  }


  public EmailStat viewCountFormatted(String viewCountFormatted) {
    
    this.viewCountFormatted = viewCountFormatted;
    return this;
  }

   /**
   * Count of views, formatted
   * @return viewCountFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of views, formatted")

  public String getViewCountFormatted() {
    return viewCountFormatted;
  }


  public void setViewCountFormatted(String viewCountFormatted) {
    this.viewCountFormatted = viewCountFormatted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailStat emailStat = (EmailStat) o;
    return Objects.equals(this.clickCount, emailStat.clickCount) &&
        Objects.equals(this.clickCountFormatted, emailStat.clickCountFormatted) &&
        Objects.equals(this.conversionCount, emailStat.conversionCount) &&
        Objects.equals(this.conversionCountFormatted, emailStat.conversionCountFormatted) &&
        Objects.equals(this.deleted, emailStat.deleted) &&
        Objects.equals(this.deliveredCount, emailStat.deliveredCount) &&
        Objects.equals(this.deliveredCountFormatted, emailStat.deliveredCountFormatted) &&
        Objects.equals(this.kickboxCount, emailStat.kickboxCount) &&
        Objects.equals(this.kickboxCountFormatted, emailStat.kickboxCountFormatted) &&
        Objects.equals(this.merchantId, emailStat.merchantId) &&
        Objects.equals(this.name, emailStat.name) &&
        Objects.equals(this.openCount, emailStat.openCount) &&
        Objects.equals(this.openCountFormatted, emailStat.openCountFormatted) &&
        Objects.equals(this.orderCount, emailStat.orderCount) &&
        Objects.equals(this.orderCountFormatted, emailStat.orderCountFormatted) &&
        Objects.equals(this.permanentBounceCount, emailStat.permanentBounceCount) &&
        Objects.equals(this.permanentBounceCountFormatted, emailStat.permanentBounceCountFormatted) &&
        Objects.equals(this.profit, emailStat.profit) &&
        Objects.equals(this.profitFormatted, emailStat.profitFormatted) &&
        Objects.equals(this.revenue, emailStat.revenue) &&
        Objects.equals(this.revenueFormatted, emailStat.revenueFormatted) &&
        Objects.equals(this.sendCount, emailStat.sendCount) &&
        Objects.equals(this.sendCountFormatted, emailStat.sendCountFormatted) &&
        Objects.equals(this.skippedCount, emailStat.skippedCount) &&
        Objects.equals(this.skippedCountFormatted, emailStat.skippedCountFormatted) &&
        Objects.equals(this.spamCount, emailStat.spamCount) &&
        Objects.equals(this.spamCountFormatted, emailStat.spamCountFormatted) &&
        Objects.equals(this.statType, emailStat.statType) &&
        Objects.equals(this.status, emailStat.status) &&
        Objects.equals(this.statusDts, emailStat.statusDts) &&
        Objects.equals(this.stepUuid, emailStat.stepUuid) &&
        Objects.equals(this.steps, emailStat.steps) &&
        Objects.equals(this.storefrontOid, emailStat.storefrontOid) &&
        Objects.equals(this.unsubscribeCount, emailStat.unsubscribeCount) &&
        Objects.equals(this.unsubscribeCountFormatted, emailStat.unsubscribeCountFormatted) &&
        Objects.equals(this.uuid, emailStat.uuid) &&
        Objects.equals(this.viewCount, emailStat.viewCount) &&
        Objects.equals(this.viewCountFormatted, emailStat.viewCountFormatted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickCount, clickCountFormatted, conversionCount, conversionCountFormatted, deleted, deliveredCount, deliveredCountFormatted, kickboxCount, kickboxCountFormatted, merchantId, name, openCount, openCountFormatted, orderCount, orderCountFormatted, permanentBounceCount, permanentBounceCountFormatted, profit, profitFormatted, revenue, revenueFormatted, sendCount, sendCountFormatted, skippedCount, skippedCountFormatted, spamCount, spamCountFormatted, statType, status, statusDts, stepUuid, steps, storefrontOid, unsubscribeCount, unsubscribeCountFormatted, uuid, viewCount, viewCountFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailStat {\n");
    sb.append("    clickCount: ").append(toIndentedString(clickCount)).append("\n");
    sb.append("    clickCountFormatted: ").append(toIndentedString(clickCountFormatted)).append("\n");
    sb.append("    conversionCount: ").append(toIndentedString(conversionCount)).append("\n");
    sb.append("    conversionCountFormatted: ").append(toIndentedString(conversionCountFormatted)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    deliveredCount: ").append(toIndentedString(deliveredCount)).append("\n");
    sb.append("    deliveredCountFormatted: ").append(toIndentedString(deliveredCountFormatted)).append("\n");
    sb.append("    kickboxCount: ").append(toIndentedString(kickboxCount)).append("\n");
    sb.append("    kickboxCountFormatted: ").append(toIndentedString(kickboxCountFormatted)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openCount: ").append(toIndentedString(openCount)).append("\n");
    sb.append("    openCountFormatted: ").append(toIndentedString(openCountFormatted)).append("\n");
    sb.append("    orderCount: ").append(toIndentedString(orderCount)).append("\n");
    sb.append("    orderCountFormatted: ").append(toIndentedString(orderCountFormatted)).append("\n");
    sb.append("    permanentBounceCount: ").append(toIndentedString(permanentBounceCount)).append("\n");
    sb.append("    permanentBounceCountFormatted: ").append(toIndentedString(permanentBounceCountFormatted)).append("\n");
    sb.append("    profit: ").append(toIndentedString(profit)).append("\n");
    sb.append("    profitFormatted: ").append(toIndentedString(profitFormatted)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    revenueFormatted: ").append(toIndentedString(revenueFormatted)).append("\n");
    sb.append("    sendCount: ").append(toIndentedString(sendCount)).append("\n");
    sb.append("    sendCountFormatted: ").append(toIndentedString(sendCountFormatted)).append("\n");
    sb.append("    skippedCount: ").append(toIndentedString(skippedCount)).append("\n");
    sb.append("    skippedCountFormatted: ").append(toIndentedString(skippedCountFormatted)).append("\n");
    sb.append("    spamCount: ").append(toIndentedString(spamCount)).append("\n");
    sb.append("    spamCountFormatted: ").append(toIndentedString(spamCountFormatted)).append("\n");
    sb.append("    statType: ").append(toIndentedString(statType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDts: ").append(toIndentedString(statusDts)).append("\n");
    sb.append("    stepUuid: ").append(toIndentedString(stepUuid)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    unsubscribeCount: ").append(toIndentedString(unsubscribeCount)).append("\n");
    sb.append("    unsubscribeCountFormatted: ").append(toIndentedString(unsubscribeCountFormatted)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    viewCountFormatted: ").append(toIndentedString(viewCountFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("click_count");
    openapiFields.add("click_count_formatted");
    openapiFields.add("conversion_count");
    openapiFields.add("conversion_count_formatted");
    openapiFields.add("deleted");
    openapiFields.add("delivered_count");
    openapiFields.add("delivered_count_formatted");
    openapiFields.add("kickbox_count");
    openapiFields.add("kickbox_count_formatted");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("open_count");
    openapiFields.add("open_count_formatted");
    openapiFields.add("order_count");
    openapiFields.add("order_count_formatted");
    openapiFields.add("permanent_bounce_count");
    openapiFields.add("permanent_bounce_count_formatted");
    openapiFields.add("profit");
    openapiFields.add("profit_formatted");
    openapiFields.add("revenue");
    openapiFields.add("revenue_formatted");
    openapiFields.add("send_count");
    openapiFields.add("send_count_formatted");
    openapiFields.add("skipped_count");
    openapiFields.add("skipped_count_formatted");
    openapiFields.add("spam_count");
    openapiFields.add("spam_count_formatted");
    openapiFields.add("stat_type");
    openapiFields.add("status");
    openapiFields.add("status_dts");
    openapiFields.add("step_uuid");
    openapiFields.add("steps");
    openapiFields.add("storefront_oid");
    openapiFields.add("unsubscribe_count");
    openapiFields.add("unsubscribe_count_formatted");
    openapiFields.add("uuid");
    openapiFields.add("view_count");
    openapiFields.add("view_count_formatted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailStat
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailStat.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailStat is not found in the empty JSON string", EmailStat.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailStat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailStat` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("click_count_formatted") != null && !jsonObj.get("click_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `click_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("click_count_formatted").toString()));
      }
      if (jsonObj.get("conversion_count_formatted") != null && !jsonObj.get("conversion_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversion_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversion_count_formatted").toString()));
      }
      if (jsonObj.get("delivered_count_formatted") != null && !jsonObj.get("delivered_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivered_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivered_count_formatted").toString()));
      }
      if (jsonObj.get("kickbox_count_formatted") != null && !jsonObj.get("kickbox_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kickbox_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kickbox_count_formatted").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("open_count_formatted") != null && !jsonObj.get("open_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_count_formatted").toString()));
      }
      if (jsonObj.get("order_count_formatted") != null && !jsonObj.get("order_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_count_formatted").toString()));
      }
      if (jsonObj.get("permanent_bounce_count_formatted") != null && !jsonObj.get("permanent_bounce_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanent_bounce_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permanent_bounce_count_formatted").toString()));
      }
      if (jsonObj.get("profit_formatted") != null && !jsonObj.get("profit_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profit_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profit_formatted").toString()));
      }
      if (jsonObj.get("revenue_formatted") != null && !jsonObj.get("revenue_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenue_formatted").toString()));
      }
      if (jsonObj.get("send_count_formatted") != null && !jsonObj.get("send_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("send_count_formatted").toString()));
      }
      if (jsonObj.get("skipped_count_formatted") != null && !jsonObj.get("skipped_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipped_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipped_count_formatted").toString()));
      }
      if (jsonObj.get("spam_count_formatted") != null && !jsonObj.get("spam_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spam_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spam_count_formatted").toString()));
      }
      if (jsonObj.get("stat_type") != null && !jsonObj.get("stat_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stat_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stat_type").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("status_dts") != null && !jsonObj.get("status_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_dts").toString()));
      }
      if (jsonObj.get("step_uuid") != null && !jsonObj.get("step_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `step_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("step_uuid").toString()));
      }
      JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
      if (jsonArraysteps != null) {
        // ensure the json data is an array
        if (!jsonObj.get("steps").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
        }

        // validate the optional field `steps` (array)
        for (int i = 0; i < jsonArraysteps.size(); i++) {
          EmailStat.validateJsonObject(jsonArraysteps.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("unsubscribe_count_formatted") != null && !jsonObj.get("unsubscribe_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribe_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsubscribe_count_formatted").toString()));
      }
      if (jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (jsonObj.get("view_count_formatted") != null && !jsonObj.get("view_count_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_count_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_count_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailStat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailStat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailStat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailStat.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailStat>() {
           @Override
           public void write(JsonWriter out, EmailStat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailStat read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailStat given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailStat
  * @throws IOException if the JSON string is invalid with respect to EmailStat
  */
  public static EmailStat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailStat.class);
  }

 /**
  * Convert an instance of EmailStat to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CouponFreeItemsWithItemPurchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T09:21:23.610-04:00[America/Indianapolis]")
public class CouponFreeItemsWithItemPurchase {
  public static final String SERIALIZED_NAME_FREE_ITEM = "free_item";
  @SerializedName(SERIALIZED_NAME_FREE_ITEM)
  private String freeItem;

  public static final String SERIALIZED_NAME_FREE_QUANTITY = "free_quantity";
  @SerializedName(SERIALIZED_NAME_FREE_QUANTITY)
  private Integer freeQuantity;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_REQUIRED_PURCHASE_ITEM = "required_purchase_item";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PURCHASE_ITEM)
  private String requiredPurchaseItem;

  public static final String SERIALIZED_NAME_REQUIRED_PURCHASE_QUANTITY = "required_purchase_quantity";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PURCHASE_QUANTITY)
  private Integer requiredPurchaseQuantity;

  public CouponFreeItemsWithItemPurchase() { 
  }

  public CouponFreeItemsWithItemPurchase freeItem(String freeItem) {
    
    this.freeItem = freeItem;
    return this;
  }

   /**
   * The item id of the free item that will be received when the required mix and match group quantity is purchased.
   * @return freeItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item id of the free item that will be received when the required mix and match group quantity is purchased.")

  public String getFreeItem() {
    return freeItem;
  }


  public void setFreeItem(String freeItem) {
    this.freeItem = freeItem;
  }


  public CouponFreeItemsWithItemPurchase freeQuantity(Integer freeQuantity) {
    
    this.freeQuantity = freeQuantity;
    return this;
  }

   /**
   * The quantity of free item that will be received.
   * @return freeQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The quantity of free item that will be received.")

  public Integer getFreeQuantity() {
    return freeQuantity;
  }


  public void setFreeQuantity(Integer freeQuantity) {
    this.freeQuantity = freeQuantity;
  }


  public CouponFreeItemsWithItemPurchase limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * The limit of free items that may be received when purchasing multiple items
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The limit of free items that may be received when purchasing multiple items")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public CouponFreeItemsWithItemPurchase requiredPurchaseItem(String requiredPurchaseItem) {
    
    this.requiredPurchaseItem = requiredPurchaseItem;
    return this;
  }

   /**
   * Required item that must be purchased for coupon to be valid
   * @return requiredPurchaseItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required item that must be purchased for coupon to be valid")

  public String getRequiredPurchaseItem() {
    return requiredPurchaseItem;
  }


  public void setRequiredPurchaseItem(String requiredPurchaseItem) {
    this.requiredPurchaseItem = requiredPurchaseItem;
  }


  public CouponFreeItemsWithItemPurchase requiredPurchaseQuantity(Integer requiredPurchaseQuantity) {
    
    this.requiredPurchaseQuantity = requiredPurchaseQuantity;
    return this;
  }

   /**
   * Required quantity of mix and match group items that must be purchased for coupon to be valid
   * @return requiredPurchaseQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required quantity of mix and match group items that must be purchased for coupon to be valid")

  public Integer getRequiredPurchaseQuantity() {
    return requiredPurchaseQuantity;
  }


  public void setRequiredPurchaseQuantity(Integer requiredPurchaseQuantity) {
    this.requiredPurchaseQuantity = requiredPurchaseQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponFreeItemsWithItemPurchase couponFreeItemsWithItemPurchase = (CouponFreeItemsWithItemPurchase) o;
    return Objects.equals(this.freeItem, couponFreeItemsWithItemPurchase.freeItem) &&
        Objects.equals(this.freeQuantity, couponFreeItemsWithItemPurchase.freeQuantity) &&
        Objects.equals(this.limit, couponFreeItemsWithItemPurchase.limit) &&
        Objects.equals(this.requiredPurchaseItem, couponFreeItemsWithItemPurchase.requiredPurchaseItem) &&
        Objects.equals(this.requiredPurchaseQuantity, couponFreeItemsWithItemPurchase.requiredPurchaseQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(freeItem, freeQuantity, limit, requiredPurchaseItem, requiredPurchaseQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponFreeItemsWithItemPurchase {\n");
    sb.append("    freeItem: ").append(toIndentedString(freeItem)).append("\n");
    sb.append("    freeQuantity: ").append(toIndentedString(freeQuantity)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    requiredPurchaseItem: ").append(toIndentedString(requiredPurchaseItem)).append("\n");
    sb.append("    requiredPurchaseQuantity: ").append(toIndentedString(requiredPurchaseQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("free_item");
    openapiFields.add("free_quantity");
    openapiFields.add("limit");
    openapiFields.add("required_purchase_item");
    openapiFields.add("required_purchase_quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponFreeItemsWithItemPurchase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CouponFreeItemsWithItemPurchase.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponFreeItemsWithItemPurchase is not found in the empty JSON string", CouponFreeItemsWithItemPurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponFreeItemsWithItemPurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponFreeItemsWithItemPurchase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("free_item") != null && !jsonObj.get("free_item").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `free_item` to be a primitive type in the JSON string but got `%s`", jsonObj.get("free_item").toString()));
      }
      if (jsonObj.get("required_purchase_item") != null && !jsonObj.get("required_purchase_item").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_purchase_item` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_purchase_item").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponFreeItemsWithItemPurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponFreeItemsWithItemPurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponFreeItemsWithItemPurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponFreeItemsWithItemPurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponFreeItemsWithItemPurchase>() {
           @Override
           public void write(JsonWriter out, CouponFreeItemsWithItemPurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponFreeItemsWithItemPurchase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponFreeItemsWithItemPurchase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponFreeItemsWithItemPurchase
  * @throws IOException if the JSON string is invalid with respect to CouponFreeItemsWithItemPurchase
  */
  public static CouponFreeItemsWithItemPurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponFreeItemsWithItemPurchase.class);
  }

 /**
  * Convert an instance of CouponFreeItemsWithItemPurchase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CustomerReviewer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-13T14:58:56.471-05:00[America/Indianapolis]")
public class CustomerReviewer {
  public static final String SERIALIZED_NAME_AUTO_APPROVE = "auto_approve";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVE)
  private Boolean autoApprove;

  public static final String SERIALIZED_NAME_AVERAGE_OVERALL_RATING = "average_overall_rating";
  @SerializedName(SERIALIZED_NAME_AVERAGE_OVERALL_RATING)
  private BigDecimal averageOverallRating;

  public static final String SERIALIZED_NAME_EXPERT = "expert";
  @SerializedName(SERIALIZED_NAME_EXPERT)
  private Boolean expert;

  public static final String SERIALIZED_NAME_FIRST_REVIEW = "first_review";
  @SerializedName(SERIALIZED_NAME_FIRST_REVIEW)
  private String firstReview;

  public static final String SERIALIZED_NAME_LAST_REVIEW = "last_review";
  @SerializedName(SERIALIZED_NAME_LAST_REVIEW)
  private String lastReview;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_NUMBER_HELPFUL_REVIEW_VOTES = "number_helpful_review_votes";
  @SerializedName(SERIALIZED_NAME_NUMBER_HELPFUL_REVIEW_VOTES)
  private Integer numberHelpfulReviewVotes;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_REVIEWS_CONTRIBUTED = "reviews_contributed";
  @SerializedName(SERIALIZED_NAME_REVIEWS_CONTRIBUTED)
  private Integer reviewsContributed;

  public CustomerReviewer() { 
  }

  public CustomerReviewer autoApprove(Boolean autoApprove) {
    
    this.autoApprove = autoApprove;
    return this;
  }

   /**
   * True if reviewes from this customer profile should automatically be approved
   * @return autoApprove
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if reviewes from this customer profile should automatically be approved")

  public Boolean getAutoApprove() {
    return autoApprove;
  }


  public void setAutoApprove(Boolean autoApprove) {
    this.autoApprove = autoApprove;
  }


  public CustomerReviewer averageOverallRating(BigDecimal averageOverallRating) {
    
    this.averageOverallRating = averageOverallRating;
    return this;
  }

   /**
   * Average overall rating of items reviewed
   * @return averageOverallRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Average overall rating of items reviewed")

  public BigDecimal getAverageOverallRating() {
    return averageOverallRating;
  }


  public void setAverageOverallRating(BigDecimal averageOverallRating) {
    this.averageOverallRating = averageOverallRating;
  }


  public CustomerReviewer expert(Boolean expert) {
    
    this.expert = expert;
    return this;
  }

   /**
   * True if the customer is an expert
   * @return expert
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer is an expert")

  public Boolean getExpert() {
    return expert;
  }


  public void setExpert(Boolean expert) {
    this.expert = expert;
  }


  public CustomerReviewer firstReview(String firstReview) {
    
    this.firstReview = firstReview;
    return this;
  }

   /**
   * First review
   * @return firstReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First review")

  public String getFirstReview() {
    return firstReview;
  }


  public void setFirstReview(String firstReview) {
    this.firstReview = firstReview;
  }


  public CustomerReviewer lastReview(String lastReview) {
    
    this.lastReview = lastReview;
    return this;
  }

   /**
   * Last review
   * @return lastReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last review")

  public String getLastReview() {
    return lastReview;
  }


  public void setLastReview(String lastReview) {
    this.lastReview = lastReview;
  }


  public CustomerReviewer location(String location) {
    
    this.location = location;
    return this;
  }

   /**
   * Location of the reviewer
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location of the reviewer")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    this.location = location;
  }


  public CustomerReviewer nickname(String nickname) {
    
    this.nickname = nickname;
    return this;
  }

   /**
   * Nickname of the reviewer
   * @return nickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Nickname of the reviewer")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public CustomerReviewer numberHelpfulReviewVotes(Integer numberHelpfulReviewVotes) {
    
    this.numberHelpfulReviewVotes = numberHelpfulReviewVotes;
    return this;
  }

   /**
   * Number of helpful review votes
   * @return numberHelpfulReviewVotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of helpful review votes")

  public Integer getNumberHelpfulReviewVotes() {
    return numberHelpfulReviewVotes;
  }


  public void setNumberHelpfulReviewVotes(Integer numberHelpfulReviewVotes) {
    this.numberHelpfulReviewVotes = numberHelpfulReviewVotes;
  }


  public CustomerReviewer rank(Integer rank) {
    
    this.rank = rank;
    return this;
  }

   /**
   * Rank of this reviewer
   * @return rank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rank of this reviewer")

  public Integer getRank() {
    return rank;
  }


  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public CustomerReviewer reviewsContributed(Integer reviewsContributed) {
    
    this.reviewsContributed = reviewsContributed;
    return this;
  }

   /**
   * Number of reviews contributed
   * @return reviewsContributed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of reviews contributed")

  public Integer getReviewsContributed() {
    return reviewsContributed;
  }


  public void setReviewsContributed(Integer reviewsContributed) {
    this.reviewsContributed = reviewsContributed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerReviewer customerReviewer = (CustomerReviewer) o;
    return Objects.equals(this.autoApprove, customerReviewer.autoApprove) &&
        Objects.equals(this.averageOverallRating, customerReviewer.averageOverallRating) &&
        Objects.equals(this.expert, customerReviewer.expert) &&
        Objects.equals(this.firstReview, customerReviewer.firstReview) &&
        Objects.equals(this.lastReview, customerReviewer.lastReview) &&
        Objects.equals(this.location, customerReviewer.location) &&
        Objects.equals(this.nickname, customerReviewer.nickname) &&
        Objects.equals(this.numberHelpfulReviewVotes, customerReviewer.numberHelpfulReviewVotes) &&
        Objects.equals(this.rank, customerReviewer.rank) &&
        Objects.equals(this.reviewsContributed, customerReviewer.reviewsContributed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoApprove, averageOverallRating, expert, firstReview, lastReview, location, nickname, numberHelpfulReviewVotes, rank, reviewsContributed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerReviewer {\n");
    sb.append("    autoApprove: ").append(toIndentedString(autoApprove)).append("\n");
    sb.append("    averageOverallRating: ").append(toIndentedString(averageOverallRating)).append("\n");
    sb.append("    expert: ").append(toIndentedString(expert)).append("\n");
    sb.append("    firstReview: ").append(toIndentedString(firstReview)).append("\n");
    sb.append("    lastReview: ").append(toIndentedString(lastReview)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    numberHelpfulReviewVotes: ").append(toIndentedString(numberHelpfulReviewVotes)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    reviewsContributed: ").append(toIndentedString(reviewsContributed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_approve");
    openapiFields.add("average_overall_rating");
    openapiFields.add("expert");
    openapiFields.add("first_review");
    openapiFields.add("last_review");
    openapiFields.add("location");
    openapiFields.add("nickname");
    openapiFields.add("number_helpful_review_votes");
    openapiFields.add("rank");
    openapiFields.add("reviews_contributed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerReviewer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomerReviewer.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerReviewer is not found in the empty JSON string", CustomerReviewer.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerReviewer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerReviewer` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("first_review") != null && !jsonObj.get("first_review").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_review` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_review").toString()));
      }
      if (jsonObj.get("last_review") != null && !jsonObj.get("last_review").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_review` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_review").toString()));
      }
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerReviewer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerReviewer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerReviewer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerReviewer.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerReviewer>() {
           @Override
           public void write(JsonWriter out, CustomerReviewer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerReviewer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerReviewer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerReviewer
  * @throws IOException if the JSON string is invalid with respect to CustomerReviewer
  */
  public static CustomerReviewer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerReviewer.class);
  }

 /**
  * Convert an instance of CustomerReviewer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


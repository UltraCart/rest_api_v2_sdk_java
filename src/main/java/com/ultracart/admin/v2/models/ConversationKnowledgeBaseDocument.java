/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationKnowledgeBaseDocument
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T15:59:09.011-04:00[America/Indianapolis]")
public class ConversationKnowledgeBaseDocument {
  public static final String SERIALIZED_NAME_CHUNK_COUNT = "chunk_count";
  @SerializedName(SERIALIZED_NAME_CHUNK_COUNT)
  private Integer chunkCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_ID = "document_id";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ID)
  private String documentId;

  public static final String SERIALIZED_NAME_DOCUMENT_UUID = "document_uuid";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_UUID)
  private String documentUuid;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_S3_KEY = "s3_key";
  @SerializedName(SERIALIZED_NAME_S3_KEY)
  private String s3Key;

  public ConversationKnowledgeBaseDocument() { 
  }

  public ConversationKnowledgeBaseDocument chunkCount(Integer chunkCount) {
    
    this.chunkCount = chunkCount;
    return this;
  }

   /**
   * Get chunkCount
   * @return chunkCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getChunkCount() {
    return chunkCount;
  }


  public void setChunkCount(Integer chunkCount) {
    this.chunkCount = chunkCount;
  }


  public ConversationKnowledgeBaseDocument description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ConversationKnowledgeBaseDocument documentId(String documentId) {
    
    this.documentId = documentId;
    return this;
  }

   /**
   * Human readable identifier.  Filename is recommended.
   * @return documentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human readable identifier.  Filename is recommended.")

  public String getDocumentId() {
    return documentId;
  }


  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }


  public ConversationKnowledgeBaseDocument documentUuid(String documentUuid) {
    
    this.documentUuid = documentUuid;
    return this;
  }

   /**
   * Get documentUuid
   * @return documentUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocumentUuid() {
    return documentUuid;
  }


  public void setDocumentUuid(String documentUuid) {
    this.documentUuid = documentUuid;
  }


  public ConversationKnowledgeBaseDocument metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ConversationKnowledgeBaseDocument mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public ConversationKnowledgeBaseDocument s3Key(String s3Key) {
    
    this.s3Key = s3Key;
    return this;
  }

   /**
   * Get s3Key
   * @return s3Key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getS3Key() {
    return s3Key;
  }


  public void setS3Key(String s3Key) {
    this.s3Key = s3Key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationKnowledgeBaseDocument conversationKnowledgeBaseDocument = (ConversationKnowledgeBaseDocument) o;
    return Objects.equals(this.chunkCount, conversationKnowledgeBaseDocument.chunkCount) &&
        Objects.equals(this.description, conversationKnowledgeBaseDocument.description) &&
        Objects.equals(this.documentId, conversationKnowledgeBaseDocument.documentId) &&
        Objects.equals(this.documentUuid, conversationKnowledgeBaseDocument.documentUuid) &&
        Objects.equals(this.metadata, conversationKnowledgeBaseDocument.metadata) &&
        Objects.equals(this.mimeType, conversationKnowledgeBaseDocument.mimeType) &&
        Objects.equals(this.s3Key, conversationKnowledgeBaseDocument.s3Key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chunkCount, description, documentId, documentUuid, metadata, mimeType, s3Key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationKnowledgeBaseDocument {\n");
    sb.append("    chunkCount: ").append(toIndentedString(chunkCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    documentUuid: ").append(toIndentedString(documentUuid)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    s3Key: ").append(toIndentedString(s3Key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chunk_count");
    openapiFields.add("description");
    openapiFields.add("document_id");
    openapiFields.add("document_uuid");
    openapiFields.add("metadata");
    openapiFields.add("mime_type");
    openapiFields.add("s3_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationKnowledgeBaseDocument
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationKnowledgeBaseDocument.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationKnowledgeBaseDocument is not found in the empty JSON string", ConversationKnowledgeBaseDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationKnowledgeBaseDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationKnowledgeBaseDocument` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("document_id") != null && !jsonObj.get("document_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_id").toString()));
      }
      if (jsonObj.get("document_uuid") != null && !jsonObj.get("document_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_uuid").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if (jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if (jsonObj.get("s3_key") != null && !jsonObj.get("s3_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationKnowledgeBaseDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationKnowledgeBaseDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationKnowledgeBaseDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationKnowledgeBaseDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationKnowledgeBaseDocument>() {
           @Override
           public void write(JsonWriter out, ConversationKnowledgeBaseDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationKnowledgeBaseDocument read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationKnowledgeBaseDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationKnowledgeBaseDocument
  * @throws IOException if the JSON string is invalid with respect to ConversationKnowledgeBaseDocument
  */
  public static ConversationKnowledgeBaseDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationKnowledgeBaseDocument.class);
  }

 /**
  * Convert an instance of ConversationKnowledgeBaseDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Error
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-02T15:19:53.558-04:00[America/Indianapolis]")
public class Error {
  public static final String SERIALIZED_NAME_DEVELOPER_MESSAGE = "developer_message";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_MESSAGE)
  private String developerMessage;

  public static final String SERIALIZED_NAME_ERROR_CODE = "error_code";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_MORE_INFO = "more_info";
  @SerializedName(SERIALIZED_NAME_MORE_INFO)
  private String moreInfo;

  public static final String SERIALIZED_NAME_OBJECT_ID = "object_id";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID)
  private String objectId;

  public static final String SERIALIZED_NAME_USER_MESSAGE = "user_message";
  @SerializedName(SERIALIZED_NAME_USER_MESSAGE)
  private String userMessage;

  public Error() { 
  }

  public Error developerMessage(String developerMessage) {
    
    this.developerMessage = developerMessage;
    return this;
  }

   /**
   * A technical message meant to be read by a developer
   * @return developerMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A technical message meant to be read by a developer")

  public String getDeveloperMessage() {
    return developerMessage;
  }


  public void setDeveloperMessage(String developerMessage) {
    this.developerMessage = developerMessage;
  }


  public Error errorCode(String errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * HTTP status code
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HTTP status code")

  public String getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public Error moreInfo(String moreInfo) {
    
    this.moreInfo = moreInfo;
    return this;
  }

   /**
   * Additional information often a link to additional documentation
   * @return moreInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional information often a link to additional documentation")

  public String getMoreInfo() {
    return moreInfo;
  }


  public void setMoreInfo(String moreInfo) {
    this.moreInfo = moreInfo;
  }


  public Error objectId(String objectId) {
    
    this.objectId = objectId;
    return this;
  }

   /**
   * Object id that the error is associated with
   * @return objectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object id that the error is associated with")

  public String getObjectId() {
    return objectId;
  }


  public void setObjectId(String objectId) {
    this.objectId = objectId;
  }


  public Error userMessage(String userMessage) {
    
    this.userMessage = userMessage;
    return this;
  }

   /**
   * An end-user friendly message suitable for display to the customer
   * @return userMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An end-user friendly message suitable for display to the customer")

  public String getUserMessage() {
    return userMessage;
  }


  public void setUserMessage(String userMessage) {
    this.userMessage = userMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.developerMessage, error.developerMessage) &&
        Objects.equals(this.errorCode, error.errorCode) &&
        Objects.equals(this.moreInfo, error.moreInfo) &&
        Objects.equals(this.objectId, error.objectId) &&
        Objects.equals(this.userMessage, error.userMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(developerMessage, errorCode, moreInfo, objectId, userMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    sb.append("    developerMessage: ").append(toIndentedString(developerMessage)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    moreInfo: ").append(toIndentedString(moreInfo)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    userMessage: ").append(toIndentedString(userMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("developer_message");
    openapiFields.add("error_code");
    openapiFields.add("more_info");
    openapiFields.add("object_id");
    openapiFields.add("user_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Error
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Error.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Error is not found in the empty JSON string", Error.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Error.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Error` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("developer_message") != null && !jsonObj.get("developer_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_message").toString()));
      }
      if (jsonObj.get("error_code") != null && !jsonObj.get("error_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_code").toString()));
      }
      if (jsonObj.get("more_info") != null && !jsonObj.get("more_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `more_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("more_info").toString()));
      }
      if (jsonObj.get("object_id") != null && !jsonObj.get("object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_id").toString()));
      }
      if (jsonObj.get("user_message") != null && !jsonObj.get("user_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Error.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Error' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Error> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Error.class));

       return (TypeAdapter<T>) new TypeAdapter<Error>() {
           @Override
           public void write(JsonWriter out, Error value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Error read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Error given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Error
  * @throws IOException if the JSON string is invalid with respect to Error
  */
  public static Error fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Error.class);
  }

 /**
  * Convert an instance of Error to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


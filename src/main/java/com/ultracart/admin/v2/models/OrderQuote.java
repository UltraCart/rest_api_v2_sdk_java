/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderQuote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T14:49:21.142-05:00[America/Indianapolis]")
public class OrderQuote {
  public static final String SERIALIZED_NAME_QUOTE_EXPIRATION_DTS = "quote_expiration_dts";
  @SerializedName(SERIALIZED_NAME_QUOTE_EXPIRATION_DTS)
  private String quoteExpirationDts;

  public static final String SERIALIZED_NAME_QUOTED_BY = "quoted_by";
  @SerializedName(SERIALIZED_NAME_QUOTED_BY)
  private String quotedBy;

  public static final String SERIALIZED_NAME_QUOTED_DTS = "quoted_dts";
  @SerializedName(SERIALIZED_NAME_QUOTED_DTS)
  private String quotedDts;

  public OrderQuote() { 
  }

  public OrderQuote quoteExpirationDts(String quoteExpirationDts) {
    
    this.quoteExpirationDts = quoteExpirationDts;
    return this;
  }

   /**
   * Expiration of quote at date/time
   * @return quoteExpirationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration of quote at date/time")

  public String getQuoteExpirationDts() {
    return quoteExpirationDts;
  }


  public void setQuoteExpirationDts(String quoteExpirationDts) {
    this.quoteExpirationDts = quoteExpirationDts;
  }


  public OrderQuote quotedBy(String quotedBy) {
    
    this.quotedBy = quotedBy;
    return this;
  }

   /**
   * Quoted by user
   * @return quotedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quoted by user")

  public String getQuotedBy() {
    return quotedBy;
  }


  public void setQuotedBy(String quotedBy) {
    this.quotedBy = quotedBy;
  }


  public OrderQuote quotedDts(String quotedDts) {
    
    this.quotedDts = quotedDts;
    return this;
  }

   /**
   * Quoted on date/time
   * @return quotedDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quoted on date/time")

  public String getQuotedDts() {
    return quotedDts;
  }


  public void setQuotedDts(String quotedDts) {
    this.quotedDts = quotedDts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderQuote orderQuote = (OrderQuote) o;
    return Objects.equals(this.quoteExpirationDts, orderQuote.quoteExpirationDts) &&
        Objects.equals(this.quotedBy, orderQuote.quotedBy) &&
        Objects.equals(this.quotedDts, orderQuote.quotedDts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteExpirationDts, quotedBy, quotedDts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderQuote {\n");
    sb.append("    quoteExpirationDts: ").append(toIndentedString(quoteExpirationDts)).append("\n");
    sb.append("    quotedBy: ").append(toIndentedString(quotedBy)).append("\n");
    sb.append("    quotedDts: ").append(toIndentedString(quotedDts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quote_expiration_dts");
    openapiFields.add("quoted_by");
    openapiFields.add("quoted_dts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderQuote
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderQuote.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderQuote is not found in the empty JSON string", OrderQuote.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderQuote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderQuote` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("quote_expiration_dts") != null && !jsonObj.get("quote_expiration_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_expiration_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_expiration_dts").toString()));
      }
      if (jsonObj.get("quoted_by") != null && !jsonObj.get("quoted_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoted_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoted_by").toString()));
      }
      if (jsonObj.get("quoted_dts") != null && !jsonObj.get("quoted_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoted_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoted_dts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderQuote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderQuote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderQuote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderQuote.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderQuote>() {
           @Override
           public void write(JsonWriter out, OrderQuote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderQuote read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderQuote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderQuote
  * @throws IOException if the JSON string is invalid with respect to OrderQuote
  */
  public static OrderQuote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderQuote.class);
  }

 /**
  * Convert an instance of OrderQuote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


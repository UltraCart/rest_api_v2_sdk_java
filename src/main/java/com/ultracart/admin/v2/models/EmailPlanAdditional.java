/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailPlanAdditional
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-25T09:55:58.664-05:00[America/Indianapolis]")
public class EmailPlanAdditional {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CAN_DOWNGRADE = "can_downgrade";
  @SerializedName(SERIALIZED_NAME_CAN_DOWNGRADE)
  private Boolean canDowngrade;

  public static final String SERIALIZED_NAME_CAN_UPGRADE = "can_upgrade";
  @SerializedName(SERIALIZED_NAME_CAN_UPGRADE)
  private Boolean canUpgrade;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_COST_CHANGE = "cost_change";
  @SerializedName(SERIALIZED_NAME_COST_CHANGE)
  private BigDecimal costChange;

  public static final String SERIALIZED_NAME_COST_CHANGE_FORMATTED = "cost_change_formatted";
  @SerializedName(SERIALIZED_NAME_COST_CHANGE_FORMATTED)
  private String costChangeFormatted;

  public static final String SERIALIZED_NAME_COST_FORMATTED = "cost_formatted";
  @SerializedName(SERIALIZED_NAME_COST_FORMATTED)
  private String costFormatted;

  public static final String SERIALIZED_NAME_CUSTOMERS = "customers";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS)
  private Integer customers;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private Integer emails;

  public EmailPlanAdditional() { 
  }

  public EmailPlanAdditional active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public EmailPlanAdditional canDowngrade(Boolean canDowngrade) {
    
    this.canDowngrade = canDowngrade;
    return this;
  }

   /**
   * Get canDowngrade
   * @return canDowngrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanDowngrade() {
    return canDowngrade;
  }


  public void setCanDowngrade(Boolean canDowngrade) {
    this.canDowngrade = canDowngrade;
  }


  public EmailPlanAdditional canUpgrade(Boolean canUpgrade) {
    
    this.canUpgrade = canUpgrade;
    return this;
  }

   /**
   * Get canUpgrade
   * @return canUpgrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanUpgrade() {
    return canUpgrade;
  }


  public void setCanUpgrade(Boolean canUpgrade) {
    this.canUpgrade = canUpgrade;
  }


  public EmailPlanAdditional cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public EmailPlanAdditional costChange(BigDecimal costChange) {
    
    this.costChange = costChange;
    return this;
  }

   /**
   * Get costChange
   * @return costChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getCostChange() {
    return costChange;
  }


  public void setCostChange(BigDecimal costChange) {
    this.costChange = costChange;
  }


  public EmailPlanAdditional costChangeFormatted(String costChangeFormatted) {
    
    this.costChangeFormatted = costChangeFormatted;
    return this;
  }

   /**
   * Get costChangeFormatted
   * @return costChangeFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCostChangeFormatted() {
    return costChangeFormatted;
  }


  public void setCostChangeFormatted(String costChangeFormatted) {
    this.costChangeFormatted = costChangeFormatted;
  }


  public EmailPlanAdditional costFormatted(String costFormatted) {
    
    this.costFormatted = costFormatted;
    return this;
  }

   /**
   * Get costFormatted
   * @return costFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCostFormatted() {
    return costFormatted;
  }


  public void setCostFormatted(String costFormatted) {
    this.costFormatted = costFormatted;
  }


  public EmailPlanAdditional customers(Integer customers) {
    
    this.customers = customers;
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomers() {
    return customers;
  }


  public void setCustomers(Integer customers) {
    this.customers = customers;
  }


  public EmailPlanAdditional emails(Integer emails) {
    
    this.emails = emails;
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEmails() {
    return emails;
  }


  public void setEmails(Integer emails) {
    this.emails = emails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailPlanAdditional emailPlanAdditional = (EmailPlanAdditional) o;
    return Objects.equals(this.active, emailPlanAdditional.active) &&
        Objects.equals(this.canDowngrade, emailPlanAdditional.canDowngrade) &&
        Objects.equals(this.canUpgrade, emailPlanAdditional.canUpgrade) &&
        Objects.equals(this.cost, emailPlanAdditional.cost) &&
        Objects.equals(this.costChange, emailPlanAdditional.costChange) &&
        Objects.equals(this.costChangeFormatted, emailPlanAdditional.costChangeFormatted) &&
        Objects.equals(this.costFormatted, emailPlanAdditional.costFormatted) &&
        Objects.equals(this.customers, emailPlanAdditional.customers) &&
        Objects.equals(this.emails, emailPlanAdditional.emails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, canDowngrade, canUpgrade, cost, costChange, costChangeFormatted, costFormatted, customers, emails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailPlanAdditional {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    canDowngrade: ").append(toIndentedString(canDowngrade)).append("\n");
    sb.append("    canUpgrade: ").append(toIndentedString(canUpgrade)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costChange: ").append(toIndentedString(costChange)).append("\n");
    sb.append("    costChangeFormatted: ").append(toIndentedString(costChangeFormatted)).append("\n");
    sb.append("    costFormatted: ").append(toIndentedString(costFormatted)).append("\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("can_downgrade");
    openapiFields.add("can_upgrade");
    openapiFields.add("cost");
    openapiFields.add("cost_change");
    openapiFields.add("cost_change_formatted");
    openapiFields.add("cost_formatted");
    openapiFields.add("customers");
    openapiFields.add("emails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailPlanAdditional
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailPlanAdditional.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailPlanAdditional is not found in the empty JSON string", EmailPlanAdditional.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailPlanAdditional.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailPlanAdditional` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("cost_change_formatted") != null && !jsonObj.get("cost_change_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_change_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_change_formatted").toString()));
      }
      if (jsonObj.get("cost_formatted") != null && !jsonObj.get("cost_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailPlanAdditional.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailPlanAdditional' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailPlanAdditional> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailPlanAdditional.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailPlanAdditional>() {
           @Override
           public void write(JsonWriter out, EmailPlanAdditional value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailPlanAdditional read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailPlanAdditional given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailPlanAdditional
  * @throws IOException if the JSON string is invalid with respect to EmailPlanAdditional
  */
  public static EmailPlanAdditional fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailPlanAdditional.class);
  }

 /**
  * Convert an instance of EmailPlanAdditional to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


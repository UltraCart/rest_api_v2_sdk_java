/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartSettingsPaymentAmazon;
import com.ultracart.admin.v2.models.CartSettingsPaymentCreditCard;
import com.ultracart.admin.v2.models.CartSettingsPaymentPayPal;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartSettingsPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-22T10:25:24.226-04:00[America/Indianapolis]")
public class CartSettingsPayment {
  public static final String SERIALIZED_NAME_AMAZON = "amazon";
  @SerializedName(SERIALIZED_NAME_AMAZON)
  private CartSettingsPaymentAmazon amazon;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "credit_card";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private CartSettingsPaymentCreditCard creditCard;

  public static final String SERIALIZED_NAME_NEED_PAYMENT = "need_payment";
  @SerializedName(SERIALIZED_NAME_NEED_PAYMENT)
  private Boolean needPayment;

  public static final String SERIALIZED_NAME_PAYPAL = "paypal";
  @SerializedName(SERIALIZED_NAME_PAYPAL)
  private CartSettingsPaymentPayPal paypal;

  public static final String SERIALIZED_NAME_SUPPORTS_AMAZON = "supports_amazon";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_AMAZON)
  private Boolean supportsAmazon;

  public static final String SERIALIZED_NAME_SUPPORTS_CHECK = "supports_check";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CHECK)
  private Boolean supportsCheck;

  public static final String SERIALIZED_NAME_SUPPORTS_COD = "supports_cod";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_COD)
  private Boolean supportsCod;

  public static final String SERIALIZED_NAME_SUPPORTS_CREDIT_CARD = "supports_credit_card";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_CREDIT_CARD)
  private Boolean supportsCreditCard;

  public static final String SERIALIZED_NAME_SUPPORTS_MONEY_ORDER = "supports_money_order";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MONEY_ORDER)
  private Boolean supportsMoneyOrder;

  public static final String SERIALIZED_NAME_SUPPORTS_PAYPAL = "supports_paypal";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PAYPAL)
  private Boolean supportsPaypal;

  public static final String SERIALIZED_NAME_SUPPORTS_PURCHASE_ORDER = "supports_purchase_order";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_PURCHASE_ORDER)
  private Boolean supportsPurchaseOrder;

  public static final String SERIALIZED_NAME_SUPPORTS_QUOTE_REQUEST = "supports_quote_request";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_QUOTE_REQUEST)
  private Boolean supportsQuoteRequest;

  public static final String SERIALIZED_NAME_SUPPORTS_WIRE_TRANSFER = "supports_wire_transfer";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_WIRE_TRANSFER)
  private Boolean supportsWireTransfer;

  public CartSettingsPayment() { 
  }

  public CartSettingsPayment amazon(CartSettingsPaymentAmazon amazon) {
    
    this.amazon = amazon;
    return this;
  }

   /**
   * Get amazon
   * @return amazon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsPaymentAmazon getAmazon() {
    return amazon;
  }


  public void setAmazon(CartSettingsPaymentAmazon amazon) {
    this.amazon = amazon;
  }


  public CartSettingsPayment creditCard(CartSettingsPaymentCreditCard creditCard) {
    
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsPaymentCreditCard getCreditCard() {
    return creditCard;
  }


  public void setCreditCard(CartSettingsPaymentCreditCard creditCard) {
    this.creditCard = creditCard;
  }


  public CartSettingsPayment needPayment(Boolean needPayment) {
    
    this.needPayment = needPayment;
    return this;
  }

   /**
   * True if this card requires a payment from the customer
   * @return needPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this card requires a payment from the customer")

  public Boolean getNeedPayment() {
    return needPayment;
  }


  public void setNeedPayment(Boolean needPayment) {
    this.needPayment = needPayment;
  }


  public CartSettingsPayment paypal(CartSettingsPaymentPayPal paypal) {
    
    this.paypal = paypal;
    return this;
  }

   /**
   * Get paypal
   * @return paypal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsPaymentPayPal getPaypal() {
    return paypal;
  }


  public void setPaypal(CartSettingsPaymentPayPal paypal) {
    this.paypal = paypal;
  }


  public CartSettingsPayment supportsAmazon(Boolean supportsAmazon) {
    
    this.supportsAmazon = supportsAmazon;
    return this;
  }

   /**
   * True if Amazon payments are available on this order
   * @return supportsAmazon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if Amazon payments are available on this order")

  public Boolean getSupportsAmazon() {
    return supportsAmazon;
  }


  public void setSupportsAmazon(Boolean supportsAmazon) {
    this.supportsAmazon = supportsAmazon;
  }


  public CartSettingsPayment supportsCheck(Boolean supportsCheck) {
    
    this.supportsCheck = supportsCheck;
    return this;
  }

   /**
   * True if check payments are available on this order
   * @return supportsCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if check payments are available on this order")

  public Boolean getSupportsCheck() {
    return supportsCheck;
  }


  public void setSupportsCheck(Boolean supportsCheck) {
    this.supportsCheck = supportsCheck;
  }


  public CartSettingsPayment supportsCod(Boolean supportsCod) {
    
    this.supportsCod = supportsCod;
    return this;
  }

   /**
   * True if COD payments are available on this order
   * @return supportsCod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if COD payments are available on this order")

  public Boolean getSupportsCod() {
    return supportsCod;
  }


  public void setSupportsCod(Boolean supportsCod) {
    this.supportsCod = supportsCod;
  }


  public CartSettingsPayment supportsCreditCard(Boolean supportsCreditCard) {
    
    this.supportsCreditCard = supportsCreditCard;
    return this;
  }

   /**
   * True if credit card payments are available on this order
   * @return supportsCreditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if credit card payments are available on this order")

  public Boolean getSupportsCreditCard() {
    return supportsCreditCard;
  }


  public void setSupportsCreditCard(Boolean supportsCreditCard) {
    this.supportsCreditCard = supportsCreditCard;
  }


  public CartSettingsPayment supportsMoneyOrder(Boolean supportsMoneyOrder) {
    
    this.supportsMoneyOrder = supportsMoneyOrder;
    return this;
  }

   /**
   * True if money order payments are available on this order
   * @return supportsMoneyOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if money order payments are available on this order")

  public Boolean getSupportsMoneyOrder() {
    return supportsMoneyOrder;
  }


  public void setSupportsMoneyOrder(Boolean supportsMoneyOrder) {
    this.supportsMoneyOrder = supportsMoneyOrder;
  }


  public CartSettingsPayment supportsPaypal(Boolean supportsPaypal) {
    
    this.supportsPaypal = supportsPaypal;
    return this;
  }

   /**
   * True if PayPal payments are available on this order
   * @return supportsPaypal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if PayPal payments are available on this order")

  public Boolean getSupportsPaypal() {
    return supportsPaypal;
  }


  public void setSupportsPaypal(Boolean supportsPaypal) {
    this.supportsPaypal = supportsPaypal;
  }


  public CartSettingsPayment supportsPurchaseOrder(Boolean supportsPurchaseOrder) {
    
    this.supportsPurchaseOrder = supportsPurchaseOrder;
    return this;
  }

   /**
   * True if purchase order payments are available on this order
   * @return supportsPurchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if purchase order payments are available on this order")

  public Boolean getSupportsPurchaseOrder() {
    return supportsPurchaseOrder;
  }


  public void setSupportsPurchaseOrder(Boolean supportsPurchaseOrder) {
    this.supportsPurchaseOrder = supportsPurchaseOrder;
  }


  public CartSettingsPayment supportsQuoteRequest(Boolean supportsQuoteRequest) {
    
    this.supportsQuoteRequest = supportsQuoteRequest;
    return this;
  }

   /**
   * True if quote requests payments are available on this order
   * @return supportsQuoteRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if quote requests payments are available on this order")

  public Boolean getSupportsQuoteRequest() {
    return supportsQuoteRequest;
  }


  public void setSupportsQuoteRequest(Boolean supportsQuoteRequest) {
    this.supportsQuoteRequest = supportsQuoteRequest;
  }


  public CartSettingsPayment supportsWireTransfer(Boolean supportsWireTransfer) {
    
    this.supportsWireTransfer = supportsWireTransfer;
    return this;
  }

   /**
   * True if wire transfer payments are available on this order
   * @return supportsWireTransfer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if wire transfer payments are available on this order")

  public Boolean getSupportsWireTransfer() {
    return supportsWireTransfer;
  }


  public void setSupportsWireTransfer(Boolean supportsWireTransfer) {
    this.supportsWireTransfer = supportsWireTransfer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSettingsPayment cartSettingsPayment = (CartSettingsPayment) o;
    return Objects.equals(this.amazon, cartSettingsPayment.amazon) &&
        Objects.equals(this.creditCard, cartSettingsPayment.creditCard) &&
        Objects.equals(this.needPayment, cartSettingsPayment.needPayment) &&
        Objects.equals(this.paypal, cartSettingsPayment.paypal) &&
        Objects.equals(this.supportsAmazon, cartSettingsPayment.supportsAmazon) &&
        Objects.equals(this.supportsCheck, cartSettingsPayment.supportsCheck) &&
        Objects.equals(this.supportsCod, cartSettingsPayment.supportsCod) &&
        Objects.equals(this.supportsCreditCard, cartSettingsPayment.supportsCreditCard) &&
        Objects.equals(this.supportsMoneyOrder, cartSettingsPayment.supportsMoneyOrder) &&
        Objects.equals(this.supportsPaypal, cartSettingsPayment.supportsPaypal) &&
        Objects.equals(this.supportsPurchaseOrder, cartSettingsPayment.supportsPurchaseOrder) &&
        Objects.equals(this.supportsQuoteRequest, cartSettingsPayment.supportsQuoteRequest) &&
        Objects.equals(this.supportsWireTransfer, cartSettingsPayment.supportsWireTransfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amazon, creditCard, needPayment, paypal, supportsAmazon, supportsCheck, supportsCod, supportsCreditCard, supportsMoneyOrder, supportsPaypal, supportsPurchaseOrder, supportsQuoteRequest, supportsWireTransfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSettingsPayment {\n");
    sb.append("    amazon: ").append(toIndentedString(amazon)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    needPayment: ").append(toIndentedString(needPayment)).append("\n");
    sb.append("    paypal: ").append(toIndentedString(paypal)).append("\n");
    sb.append("    supportsAmazon: ").append(toIndentedString(supportsAmazon)).append("\n");
    sb.append("    supportsCheck: ").append(toIndentedString(supportsCheck)).append("\n");
    sb.append("    supportsCod: ").append(toIndentedString(supportsCod)).append("\n");
    sb.append("    supportsCreditCard: ").append(toIndentedString(supportsCreditCard)).append("\n");
    sb.append("    supportsMoneyOrder: ").append(toIndentedString(supportsMoneyOrder)).append("\n");
    sb.append("    supportsPaypal: ").append(toIndentedString(supportsPaypal)).append("\n");
    sb.append("    supportsPurchaseOrder: ").append(toIndentedString(supportsPurchaseOrder)).append("\n");
    sb.append("    supportsQuoteRequest: ").append(toIndentedString(supportsQuoteRequest)).append("\n");
    sb.append("    supportsWireTransfer: ").append(toIndentedString(supportsWireTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amazon");
    openapiFields.add("credit_card");
    openapiFields.add("need_payment");
    openapiFields.add("paypal");
    openapiFields.add("supports_amazon");
    openapiFields.add("supports_check");
    openapiFields.add("supports_cod");
    openapiFields.add("supports_credit_card");
    openapiFields.add("supports_money_order");
    openapiFields.add("supports_paypal");
    openapiFields.add("supports_purchase_order");
    openapiFields.add("supports_quote_request");
    openapiFields.add("supports_wire_transfer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartSettingsPayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartSettingsPayment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSettingsPayment is not found in the empty JSON string", CartSettingsPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartSettingsPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSettingsPayment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `amazon`
      if (jsonObj.getAsJsonObject("amazon") != null) {
        CartSettingsPaymentAmazon.validateJsonObject(jsonObj.getAsJsonObject("amazon"));
      }
      // validate the optional field `credit_card`
      if (jsonObj.getAsJsonObject("credit_card") != null) {
        CartSettingsPaymentCreditCard.validateJsonObject(jsonObj.getAsJsonObject("credit_card"));
      }
      // validate the optional field `paypal`
      if (jsonObj.getAsJsonObject("paypal") != null) {
        CartSettingsPaymentPayPal.validateJsonObject(jsonObj.getAsJsonObject("paypal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSettingsPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSettingsPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSettingsPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSettingsPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSettingsPayment>() {
           @Override
           public void write(JsonWriter out, CartSettingsPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSettingsPayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSettingsPayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSettingsPayment
  * @throws IOException if the JSON string is invalid with respect to CartSettingsPayment
  */
  public static CartSettingsPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSettingsPayment.class);
  }

 /**
  * Convert an instance of CartSettingsPayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


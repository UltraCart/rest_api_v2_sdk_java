/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * IntegrationLogQueryFilterValues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T10:43:53.313-05:00[America/Indianapolis]")
public class IntegrationLogQueryFilterValues {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<String> actions = null;

  public static final String SERIALIZED_NAME_DIRECTIONS = "directions";
  @SerializedName(SERIALIZED_NAME_DIRECTIONS)
  private List<String> directions = null;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = null;

  public static final String SERIALIZED_NAME_FILE_NAMES = "file_names";
  @SerializedName(SERIALIZED_NAME_FILE_NAMES)
  private List<String> fileNames = null;

  public static final String SERIALIZED_NAME_ITEM_IDS = "item_ids";
  @SerializedName(SERIALIZED_NAME_ITEM_IDS)
  private List<String> itemIds = null;

  public static final String SERIALIZED_NAME_ITEM_IPN_OIDS = "item_ipn_oids";
  @SerializedName(SERIALIZED_NAME_ITEM_IPN_OIDS)
  private List<Integer> itemIpnOids = null;

  public static final String SERIALIZED_NAME_LOG_DTS_MAX = "log_dts_max";
  @SerializedName(SERIALIZED_NAME_LOG_DTS_MAX)
  private String logDtsMax;

  public static final String SERIALIZED_NAME_LOG_DTS_MIN = "log_dts_min";
  @SerializedName(SERIALIZED_NAME_LOG_DTS_MIN)
  private String logDtsMin;

  public static final String SERIALIZED_NAME_LOG_TYPES = "log_types";
  @SerializedName(SERIALIZED_NAME_LOG_TYPES)
  private List<String> logTypes = null;

  public static final String SERIALIZED_NAME_LOGGER_NAMES = "logger_names";
  @SerializedName(SERIALIZED_NAME_LOGGER_NAMES)
  private List<String> loggerNames = null;

  public static final String SERIALIZED_NAME_ORDER_IDS = "order_ids";
  @SerializedName(SERIALIZED_NAME_ORDER_IDS)
  private List<String> orderIds = null;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<String> statuses = null;

  public IntegrationLogQueryFilterValues() { 
  }

  public IntegrationLogQueryFilterValues actions(List<String> actions) {
    
    this.actions = actions;
    return this;
  }

  public IntegrationLogQueryFilterValues addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getActions() {
    return actions;
  }


  public void setActions(List<String> actions) {
    this.actions = actions;
  }


  public IntegrationLogQueryFilterValues directions(List<String> directions) {
    
    this.directions = directions;
    return this;
  }

  public IntegrationLogQueryFilterValues addDirectionsItem(String directionsItem) {
    if (this.directions == null) {
      this.directions = new ArrayList<>();
    }
    this.directions.add(directionsItem);
    return this;
  }

   /**
   * Get directions
   * @return directions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDirections() {
    return directions;
  }


  public void setDirections(List<String> directions) {
    this.directions = directions;
  }


  public IntegrationLogQueryFilterValues emails(List<String> emails) {
    
    this.emails = emails;
    return this;
  }

  public IntegrationLogQueryFilterValues addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getEmails() {
    return emails;
  }


  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public IntegrationLogQueryFilterValues fileNames(List<String> fileNames) {
    
    this.fileNames = fileNames;
    return this;
  }

  public IntegrationLogQueryFilterValues addFileNamesItem(String fileNamesItem) {
    if (this.fileNames == null) {
      this.fileNames = new ArrayList<>();
    }
    this.fileNames.add(fileNamesItem);
    return this;
  }

   /**
   * Get fileNames
   * @return fileNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getFileNames() {
    return fileNames;
  }


  public void setFileNames(List<String> fileNames) {
    this.fileNames = fileNames;
  }


  public IntegrationLogQueryFilterValues itemIds(List<String> itemIds) {
    
    this.itemIds = itemIds;
    return this;
  }

  public IntegrationLogQueryFilterValues addItemIdsItem(String itemIdsItem) {
    if (this.itemIds == null) {
      this.itemIds = new ArrayList<>();
    }
    this.itemIds.add(itemIdsItem);
    return this;
  }

   /**
   * Get itemIds
   * @return itemIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getItemIds() {
    return itemIds;
  }


  public void setItemIds(List<String> itemIds) {
    this.itemIds = itemIds;
  }


  public IntegrationLogQueryFilterValues itemIpnOids(List<Integer> itemIpnOids) {
    
    this.itemIpnOids = itemIpnOids;
    return this;
  }

  public IntegrationLogQueryFilterValues addItemIpnOidsItem(Integer itemIpnOidsItem) {
    if (this.itemIpnOids == null) {
      this.itemIpnOids = new ArrayList<>();
    }
    this.itemIpnOids.add(itemIpnOidsItem);
    return this;
  }

   /**
   * Get itemIpnOids
   * @return itemIpnOids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getItemIpnOids() {
    return itemIpnOids;
  }


  public void setItemIpnOids(List<Integer> itemIpnOids) {
    this.itemIpnOids = itemIpnOids;
  }


  public IntegrationLogQueryFilterValues logDtsMax(String logDtsMax) {
    
    this.logDtsMax = logDtsMax;
    return this;
  }

   /**
   * Maximum date/time log date/time
   * @return logDtsMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum date/time log date/time")

  public String getLogDtsMax() {
    return logDtsMax;
  }


  public void setLogDtsMax(String logDtsMax) {
    this.logDtsMax = logDtsMax;
  }


  public IntegrationLogQueryFilterValues logDtsMin(String logDtsMin) {
    
    this.logDtsMin = logDtsMin;
    return this;
  }

   /**
   * Minimum date/time log date/time
   * @return logDtsMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum date/time log date/time")

  public String getLogDtsMin() {
    return logDtsMin;
  }


  public void setLogDtsMin(String logDtsMin) {
    this.logDtsMin = logDtsMin;
  }


  public IntegrationLogQueryFilterValues logTypes(List<String> logTypes) {
    
    this.logTypes = logTypes;
    return this;
  }

  public IntegrationLogQueryFilterValues addLogTypesItem(String logTypesItem) {
    if (this.logTypes == null) {
      this.logTypes = new ArrayList<>();
    }
    this.logTypes.add(logTypesItem);
    return this;
  }

   /**
   * Get logTypes
   * @return logTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getLogTypes() {
    return logTypes;
  }


  public void setLogTypes(List<String> logTypes) {
    this.logTypes = logTypes;
  }


  public IntegrationLogQueryFilterValues loggerNames(List<String> loggerNames) {
    
    this.loggerNames = loggerNames;
    return this;
  }

  public IntegrationLogQueryFilterValues addLoggerNamesItem(String loggerNamesItem) {
    if (this.loggerNames == null) {
      this.loggerNames = new ArrayList<>();
    }
    this.loggerNames.add(loggerNamesItem);
    return this;
  }

   /**
   * Get loggerNames
   * @return loggerNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getLoggerNames() {
    return loggerNames;
  }


  public void setLoggerNames(List<String> loggerNames) {
    this.loggerNames = loggerNames;
  }


  public IntegrationLogQueryFilterValues orderIds(List<String> orderIds) {
    
    this.orderIds = orderIds;
    return this;
  }

  public IntegrationLogQueryFilterValues addOrderIdsItem(String orderIdsItem) {
    if (this.orderIds == null) {
      this.orderIds = new ArrayList<>();
    }
    this.orderIds.add(orderIdsItem);
    return this;
  }

   /**
   * Get orderIds
   * @return orderIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOrderIds() {
    return orderIds;
  }


  public void setOrderIds(List<String> orderIds) {
    this.orderIds = orderIds;
  }


  public IntegrationLogQueryFilterValues statuses(List<String> statuses) {
    
    this.statuses = statuses;
    return this;
  }

  public IntegrationLogQueryFilterValues addStatusesItem(String statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getStatuses() {
    return statuses;
  }


  public void setStatuses(List<String> statuses) {
    this.statuses = statuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationLogQueryFilterValues integrationLogQueryFilterValues = (IntegrationLogQueryFilterValues) o;
    return Objects.equals(this.actions, integrationLogQueryFilterValues.actions) &&
        Objects.equals(this.directions, integrationLogQueryFilterValues.directions) &&
        Objects.equals(this.emails, integrationLogQueryFilterValues.emails) &&
        Objects.equals(this.fileNames, integrationLogQueryFilterValues.fileNames) &&
        Objects.equals(this.itemIds, integrationLogQueryFilterValues.itemIds) &&
        Objects.equals(this.itemIpnOids, integrationLogQueryFilterValues.itemIpnOids) &&
        Objects.equals(this.logDtsMax, integrationLogQueryFilterValues.logDtsMax) &&
        Objects.equals(this.logDtsMin, integrationLogQueryFilterValues.logDtsMin) &&
        Objects.equals(this.logTypes, integrationLogQueryFilterValues.logTypes) &&
        Objects.equals(this.loggerNames, integrationLogQueryFilterValues.loggerNames) &&
        Objects.equals(this.orderIds, integrationLogQueryFilterValues.orderIds) &&
        Objects.equals(this.statuses, integrationLogQueryFilterValues.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, directions, emails, fileNames, itemIds, itemIpnOids, logDtsMax, logDtsMin, logTypes, loggerNames, orderIds, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationLogQueryFilterValues {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    directions: ").append(toIndentedString(directions)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    fileNames: ").append(toIndentedString(fileNames)).append("\n");
    sb.append("    itemIds: ").append(toIndentedString(itemIds)).append("\n");
    sb.append("    itemIpnOids: ").append(toIndentedString(itemIpnOids)).append("\n");
    sb.append("    logDtsMax: ").append(toIndentedString(logDtsMax)).append("\n");
    sb.append("    logDtsMin: ").append(toIndentedString(logDtsMin)).append("\n");
    sb.append("    logTypes: ").append(toIndentedString(logTypes)).append("\n");
    sb.append("    loggerNames: ").append(toIndentedString(loggerNames)).append("\n");
    sb.append("    orderIds: ").append(toIndentedString(orderIds)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("directions");
    openapiFields.add("emails");
    openapiFields.add("file_names");
    openapiFields.add("item_ids");
    openapiFields.add("item_ipn_oids");
    openapiFields.add("log_dts_max");
    openapiFields.add("log_dts_min");
    openapiFields.add("log_types");
    openapiFields.add("logger_names");
    openapiFields.add("order_ids");
    openapiFields.add("statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationLogQueryFilterValues
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IntegrationLogQueryFilterValues.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationLogQueryFilterValues is not found in the empty JSON string", IntegrationLogQueryFilterValues.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IntegrationLogQueryFilterValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationLogQueryFilterValues` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("directions") != null && !jsonObj.get("directions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `directions` to be an array in the JSON string but got `%s`", jsonObj.get("directions").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("file_names") != null && !jsonObj.get("file_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_names` to be an array in the JSON string but got `%s`", jsonObj.get("file_names").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("item_ids") != null && !jsonObj.get("item_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_ids` to be an array in the JSON string but got `%s`", jsonObj.get("item_ids").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("item_ipn_oids") != null && !jsonObj.get("item_ipn_oids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_ipn_oids` to be an array in the JSON string but got `%s`", jsonObj.get("item_ipn_oids").toString()));
      }
      if (jsonObj.get("log_dts_max") != null && !jsonObj.get("log_dts_max").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_dts_max` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_dts_max").toString()));
      }
      if (jsonObj.get("log_dts_min") != null && !jsonObj.get("log_dts_min").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_dts_min` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_dts_min").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("log_types") != null && !jsonObj.get("log_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_types` to be an array in the JSON string but got `%s`", jsonObj.get("log_types").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("logger_names") != null && !jsonObj.get("logger_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger_names` to be an array in the JSON string but got `%s`", jsonObj.get("logger_names").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("order_ids") != null && !jsonObj.get("order_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_ids` to be an array in the JSON string but got `%s`", jsonObj.get("order_ids").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationLogQueryFilterValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationLogQueryFilterValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationLogQueryFilterValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationLogQueryFilterValues.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationLogQueryFilterValues>() {
           @Override
           public void write(JsonWriter out, IntegrationLogQueryFilterValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationLogQueryFilterValues read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationLogQueryFilterValues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationLogQueryFilterValues
  * @throws IOException if the JSON string is invalid with respect to IntegrationLogQueryFilterValues
  */
  public static IntegrationLogQueryFilterValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationLogQueryFilterValues.class);
  }

 /**
  * Convert an instance of IntegrationLogQueryFilterValues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Currency;
import com.ultracart.admin.v2.models.Distance;
import com.ultracart.admin.v2.models.OrderItemOptionFileAttachment;
import com.ultracart.admin.v2.models.Weight;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderItemOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T11:40:07.280-04:00[America/Indianapolis]")
public class OrderItemOption {
  /**
   * How the additional dimensions are applied to the item.
   */
  @JsonAdapter(AdditionalDimensionApplicationEnum.Adapter.class)
  public enum AdditionalDimensionApplicationEnum {
    NONE("none"),
    
    SET_ITEM_TO("set item to"),
    
    ADD_ITEM("add item");

    private String value;

    AdditionalDimensionApplicationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdditionalDimensionApplicationEnum fromValue(String value) {
      for (AdditionalDimensionApplicationEnum b : AdditionalDimensionApplicationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdditionalDimensionApplicationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdditionalDimensionApplicationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdditionalDimensionApplicationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdditionalDimensionApplicationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDITIONAL_DIMENSION_APPLICATION = "additional_dimension_application";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DIMENSION_APPLICATION)
  private AdditionalDimensionApplicationEnum additionalDimensionApplication;

  public static final String SERIALIZED_NAME_COST_CHANGE = "cost_change";
  @SerializedName(SERIALIZED_NAME_COST_CHANGE)
  private Currency costChange;

  public static final String SERIALIZED_NAME_FILE_ATTACHMENT = "file_attachment";
  @SerializedName(SERIALIZED_NAME_FILE_ATTACHMENT)
  private OrderItemOptionFileAttachment fileAttachment;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Distance height;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Distance length;

  public static final String SERIALIZED_NAME_ONE_TIME_FEE = "one_time_fee";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_FEE)
  private Boolean oneTimeFee;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_WEIGHT_CHANGE = "weight_change";
  @SerializedName(SERIALIZED_NAME_WEIGHT_CHANGE)
  private Weight weightChange;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Distance width;

  public OrderItemOption() { 
  }

  public OrderItemOption additionalDimensionApplication(AdditionalDimensionApplicationEnum additionalDimensionApplication) {
    
    this.additionalDimensionApplication = additionalDimensionApplication;
    return this;
  }

   /**
   * How the additional dimensions are applied to the item.
   * @return additionalDimensionApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How the additional dimensions are applied to the item.")

  public AdditionalDimensionApplicationEnum getAdditionalDimensionApplication() {
    return additionalDimensionApplication;
  }


  public void setAdditionalDimensionApplication(AdditionalDimensionApplicationEnum additionalDimensionApplication) {
    this.additionalDimensionApplication = additionalDimensionApplication;
  }


  public OrderItemOption costChange(Currency costChange) {
    
    this.costChange = costChange;
    return this;
  }

   /**
   * Get costChange
   * @return costChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getCostChange() {
    return costChange;
  }


  public void setCostChange(Currency costChange) {
    this.costChange = costChange;
  }


  public OrderItemOption fileAttachment(OrderItemOptionFileAttachment fileAttachment) {
    
    this.fileAttachment = fileAttachment;
    return this;
  }

   /**
   * Get fileAttachment
   * @return fileAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderItemOptionFileAttachment getFileAttachment() {
    return fileAttachment;
  }


  public void setFileAttachment(OrderItemOptionFileAttachment fileAttachment) {
    this.fileAttachment = fileAttachment;
  }


  public OrderItemOption height(Distance height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Distance getHeight() {
    return height;
  }


  public void setHeight(Distance height) {
    this.height = height;
  }


  public OrderItemOption hidden(Boolean hidden) {
    
    this.hidden = hidden;
    return this;
  }

   /**
   * True if this option is hidden from display on the order
   * @return hidden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this option is hidden from display on the order")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public OrderItemOption label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public OrderItemOption length(Distance length) {
    
    this.length = length;
    return this;
  }

   /**
   * Get length
   * @return length
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Distance getLength() {
    return length;
  }


  public void setLength(Distance length) {
    this.length = length;
  }


  public OrderItemOption oneTimeFee(Boolean oneTimeFee) {
    
    this.oneTimeFee = oneTimeFee;
    return this;
  }

   /**
   * True if the cost associated with this option is a one time fee or multiplied by the quantity of the item
   * @return oneTimeFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the cost associated with this option is a one time fee or multiplied by the quantity of the item")

  public Boolean getOneTimeFee() {
    return oneTimeFee;
  }


  public void setOneTimeFee(Boolean oneTimeFee) {
    this.oneTimeFee = oneTimeFee;
  }


  public OrderItemOption value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public OrderItemOption weightChange(Weight weightChange) {
    
    this.weightChange = weightChange;
    return this;
  }

   /**
   * Get weightChange
   * @return weightChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Weight getWeightChange() {
    return weightChange;
  }


  public void setWeightChange(Weight weightChange) {
    this.weightChange = weightChange;
  }


  public OrderItemOption width(Distance width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Distance getWidth() {
    return width;
  }


  public void setWidth(Distance width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItemOption orderItemOption = (OrderItemOption) o;
    return Objects.equals(this.additionalDimensionApplication, orderItemOption.additionalDimensionApplication) &&
        Objects.equals(this.costChange, orderItemOption.costChange) &&
        Objects.equals(this.fileAttachment, orderItemOption.fileAttachment) &&
        Objects.equals(this.height, orderItemOption.height) &&
        Objects.equals(this.hidden, orderItemOption.hidden) &&
        Objects.equals(this.label, orderItemOption.label) &&
        Objects.equals(this.length, orderItemOption.length) &&
        Objects.equals(this.oneTimeFee, orderItemOption.oneTimeFee) &&
        Objects.equals(this.value, orderItemOption.value) &&
        Objects.equals(this.weightChange, orderItemOption.weightChange) &&
        Objects.equals(this.width, orderItemOption.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalDimensionApplication, costChange, fileAttachment, height, hidden, label, length, oneTimeFee, value, weightChange, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemOption {\n");
    sb.append("    additionalDimensionApplication: ").append(toIndentedString(additionalDimensionApplication)).append("\n");
    sb.append("    costChange: ").append(toIndentedString(costChange)).append("\n");
    sb.append("    fileAttachment: ").append(toIndentedString(fileAttachment)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    oneTimeFee: ").append(toIndentedString(oneTimeFee)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    weightChange: ").append(toIndentedString(weightChange)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_dimension_application");
    openapiFields.add("cost_change");
    openapiFields.add("file_attachment");
    openapiFields.add("height");
    openapiFields.add("hidden");
    openapiFields.add("label");
    openapiFields.add("length");
    openapiFields.add("one_time_fee");
    openapiFields.add("value");
    openapiFields.add("weight_change");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderItemOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderItemOption.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItemOption is not found in the empty JSON string", OrderItemOption.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderItemOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderItemOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("additional_dimension_application") != null && !jsonObj.get("additional_dimension_application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_dimension_application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_dimension_application").toString()));
      }
      // validate the optional field `cost_change`
      if (jsonObj.getAsJsonObject("cost_change") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("cost_change"));
      }
      // validate the optional field `file_attachment`
      if (jsonObj.getAsJsonObject("file_attachment") != null) {
        OrderItemOptionFileAttachment.validateJsonObject(jsonObj.getAsJsonObject("file_attachment"));
      }
      // validate the optional field `height`
      if (jsonObj.getAsJsonObject("height") != null) {
        Distance.validateJsonObject(jsonObj.getAsJsonObject("height"));
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // validate the optional field `length`
      if (jsonObj.getAsJsonObject("length") != null) {
        Distance.validateJsonObject(jsonObj.getAsJsonObject("length"));
      }
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // validate the optional field `weight_change`
      if (jsonObj.getAsJsonObject("weight_change") != null) {
        Weight.validateJsonObject(jsonObj.getAsJsonObject("weight_change"));
      }
      // validate the optional field `width`
      if (jsonObj.getAsJsonObject("width") != null) {
        Distance.validateJsonObject(jsonObj.getAsJsonObject("width"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItemOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItemOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItemOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItemOption.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItemOption>() {
           @Override
           public void write(JsonWriter out, OrderItemOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItemOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderItemOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderItemOption
  * @throws IOException if the JSON string is invalid with respect to OrderItemOption
  */
  public static OrderItemOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItemOption.class);
  }

 /**
  * Convert an instance of OrderItemOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


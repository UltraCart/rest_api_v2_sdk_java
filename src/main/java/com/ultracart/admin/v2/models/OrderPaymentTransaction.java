/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.OrderPaymentTransactionDetail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPaymentTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-14T09:46:20.929-05:00[America/Indianapolis]")
public class OrderPaymentTransaction {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<OrderPaymentTransactionDetail> details = null;

  public static final String SERIALIZED_NAME_SUCCESSFUL = "successful";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL)
  private Boolean successful;

  public static final String SERIALIZED_NAME_TRANSACTION_GATEWAY = "transaction_gateway";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_GATEWAY)
  private String transactionGateway;

  public static final String SERIALIZED_NAME_TRANSACTION_TIMESTAMP = "transaction_timestamp";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIMESTAMP)
  private String transactionTimestamp;

  public OrderPaymentTransaction() { 
  }

  public OrderPaymentTransaction details(List<OrderPaymentTransactionDetail> details) {
    
    this.details = details;
    return this;
  }

  public OrderPaymentTransaction addDetailsItem(OrderPaymentTransactionDetail detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details")

  public List<OrderPaymentTransactionDetail> getDetails() {
    return details;
  }


  public void setDetails(List<OrderPaymentTransactionDetail> details) {
    this.details = details;
  }


  public OrderPaymentTransaction successful(Boolean successful) {
    
    this.successful = successful;
    return this;
  }

   /**
   * True if the transaction was successful
   * @return successful
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the transaction was successful")

  public Boolean getSuccessful() {
    return successful;
  }


  public void setSuccessful(Boolean successful) {
    this.successful = successful;
  }


  public OrderPaymentTransaction transactionGateway(String transactionGateway) {
    
    this.transactionGateway = transactionGateway;
    return this;
  }

   /**
   * Transaction gateway
   * @return transactionGateway
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction gateway")

  public String getTransactionGateway() {
    return transactionGateway;
  }


  public void setTransactionGateway(String transactionGateway) {
    this.transactionGateway = transactionGateway;
  }


  public OrderPaymentTransaction transactionTimestamp(String transactionTimestamp) {
    
    this.transactionTimestamp = transactionTimestamp;
    return this;
  }

   /**
   * Transaction date/time
   * @return transactionTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction date/time")

  public String getTransactionTimestamp() {
    return transactionTimestamp;
  }


  public void setTransactionTimestamp(String transactionTimestamp) {
    this.transactionTimestamp = transactionTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentTransaction orderPaymentTransaction = (OrderPaymentTransaction) o;
    return Objects.equals(this.details, orderPaymentTransaction.details) &&
        Objects.equals(this.successful, orderPaymentTransaction.successful) &&
        Objects.equals(this.transactionGateway, orderPaymentTransaction.transactionGateway) &&
        Objects.equals(this.transactionTimestamp, orderPaymentTransaction.transactionTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, successful, transactionGateway, transactionTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentTransaction {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("    transactionGateway: ").append(toIndentedString(transactionGateway)).append("\n");
    sb.append("    transactionTimestamp: ").append(toIndentedString(transactionTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("successful");
    openapiFields.add("transaction_gateway");
    openapiFields.add("transaction_timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPaymentTransaction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPaymentTransaction.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPaymentTransaction is not found in the empty JSON string", OrderPaymentTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPaymentTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPaymentTransaction` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
      if (jsonArraydetails != null) {
        // ensure the json data is an array
        if (!jsonObj.get("details").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
        }

        // validate the optional field `details` (array)
        for (int i = 0; i < jsonArraydetails.size(); i++) {
          OrderPaymentTransactionDetail.validateJsonObject(jsonArraydetails.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("transaction_gateway") != null && !jsonObj.get("transaction_gateway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_gateway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_gateway").toString()));
      }
      if (jsonObj.get("transaction_timestamp") != null && !jsonObj.get("transaction_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPaymentTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPaymentTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPaymentTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPaymentTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPaymentTransaction>() {
           @Override
           public void write(JsonWriter out, OrderPaymentTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPaymentTransaction read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPaymentTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPaymentTransaction
  * @throws IOException if the JSON string is invalid with respect to OrderPaymentTransaction
  */
  public static OrderPaymentTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPaymentTransaction.class);
  }

 /**
  * Convert an instance of OrderPaymentTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


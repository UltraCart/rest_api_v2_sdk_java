/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailPerformanceCustomerHistogramPeriod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T13:02:50.267-05:00[America/Indianapolis]")
public class EmailPerformanceCustomerHistogramPeriod {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Integer active;

  public static final String SERIALIZED_NAME_INACTIVE = "inactive";
  @SerializedName(SERIALIZED_NAME_INACTIVE)
  private Integer inactive;

  public static final String SERIALIZED_NAME_MONTH = "month";
  @SerializedName(SERIALIZED_NAME_MONTH)
  private Integer month;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public EmailPerformanceCustomerHistogramPeriod() { 
  }

  public EmailPerformanceCustomerHistogramPeriod active(Integer active) {
    
    this.active = active;
    return this;
  }

   /**
   * Active customers last active in this period
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active customers last active in this period")

  public Integer getActive() {
    return active;
  }


  public void setActive(Integer active) {
    this.active = active;
  }


  public EmailPerformanceCustomerHistogramPeriod inactive(Integer inactive) {
    
    this.inactive = inactive;
    return this;
  }

   /**
   * Inactive customers last active in this period
   * @return inactive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inactive customers last active in this period")

  public Integer getInactive() {
    return inactive;
  }


  public void setInactive(Integer inactive) {
    this.inactive = inactive;
  }


  public EmailPerformanceCustomerHistogramPeriod month(Integer month) {
    
    this.month = month;
    return this;
  }

   /**
   * Month (1 &#x3D; January)
   * @return month
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Month (1 = January)")

  public Integer getMonth() {
    return month;
  }


  public void setMonth(Integer month) {
    this.month = month;
  }


  public EmailPerformanceCustomerHistogramPeriod total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * Total customers last active in this period
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total customers last active in this period")

  public Integer getTotal() {
    return total;
  }


  public void setTotal(Integer total) {
    this.total = total;
  }


  public EmailPerformanceCustomerHistogramPeriod year(Integer year) {
    
    this.year = year;
    return this;
  }

   /**
   * Year (four digits)
   * @return year
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year (four digits)")

  public Integer getYear() {
    return year;
  }


  public void setYear(Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailPerformanceCustomerHistogramPeriod emailPerformanceCustomerHistogramPeriod = (EmailPerformanceCustomerHistogramPeriod) o;
    return Objects.equals(this.active, emailPerformanceCustomerHistogramPeriod.active) &&
        Objects.equals(this.inactive, emailPerformanceCustomerHistogramPeriod.inactive) &&
        Objects.equals(this.month, emailPerformanceCustomerHistogramPeriod.month) &&
        Objects.equals(this.total, emailPerformanceCustomerHistogramPeriod.total) &&
        Objects.equals(this.year, emailPerformanceCustomerHistogramPeriod.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, inactive, month, total, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailPerformanceCustomerHistogramPeriod {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    inactive: ").append(toIndentedString(inactive)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("inactive");
    openapiFields.add("month");
    openapiFields.add("total");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailPerformanceCustomerHistogramPeriod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailPerformanceCustomerHistogramPeriod.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailPerformanceCustomerHistogramPeriod is not found in the empty JSON string", EmailPerformanceCustomerHistogramPeriod.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailPerformanceCustomerHistogramPeriod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailPerformanceCustomerHistogramPeriod` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailPerformanceCustomerHistogramPeriod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailPerformanceCustomerHistogramPeriod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailPerformanceCustomerHistogramPeriod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailPerformanceCustomerHistogramPeriod.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailPerformanceCustomerHistogramPeriod>() {
           @Override
           public void write(JsonWriter out, EmailPerformanceCustomerHistogramPeriod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailPerformanceCustomerHistogramPeriod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailPerformanceCustomerHistogramPeriod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailPerformanceCustomerHistogramPeriod
  * @throws IOException if the JSON string is invalid with respect to EmailPerformanceCustomerHistogramPeriod
  */
  public static EmailPerformanceCustomerHistogramPeriod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailPerformanceCustomerHistogramPeriod.class);
  }

 /**
  * Convert an instance of EmailPerformanceCustomerHistogramPeriod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


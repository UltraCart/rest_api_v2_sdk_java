/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartItemVariationSelection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:32:40.339-05:00[America/Indianapolis]")
public class CartItemVariationSelection {
  public static final String SERIALIZED_NAME_VARIATION_NAME = "variation_name";
  @SerializedName(SERIALIZED_NAME_VARIATION_NAME)
  private String variationName;

  public static final String SERIALIZED_NAME_VARIATION_VALUE = "variation_value";
  @SerializedName(SERIALIZED_NAME_VARIATION_VALUE)
  private String variationValue;

  public CartItemVariationSelection() { 
  }

  public CartItemVariationSelection variationName(String variationName) {
    
    this.variationName = variationName;
    return this;
  }

   /**
   * Variation name
   * @return variationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variation name")

  public String getVariationName() {
    return variationName;
  }


  public void setVariationName(String variationName) {
    this.variationName = variationName;
  }


  public CartItemVariationSelection variationValue(String variationValue) {
    
    this.variationValue = variationValue;
    return this;
  }

   /**
   * Variation value
   * @return variationValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variation value")

  public String getVariationValue() {
    return variationValue;
  }


  public void setVariationValue(String variationValue) {
    this.variationValue = variationValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItemVariationSelection cartItemVariationSelection = (CartItemVariationSelection) o;
    return Objects.equals(this.variationName, cartItemVariationSelection.variationName) &&
        Objects.equals(this.variationValue, cartItemVariationSelection.variationValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variationName, variationValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItemVariationSelection {\n");
    sb.append("    variationName: ").append(toIndentedString(variationName)).append("\n");
    sb.append("    variationValue: ").append(toIndentedString(variationValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("variation_name");
    openapiFields.add("variation_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartItemVariationSelection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartItemVariationSelection.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartItemVariationSelection is not found in the empty JSON string", CartItemVariationSelection.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartItemVariationSelection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartItemVariationSelection` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("variation_name") != null && !jsonObj.get("variation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation_name").toString()));
      }
      if (jsonObj.get("variation_value") != null && !jsonObj.get("variation_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variation_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartItemVariationSelection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartItemVariationSelection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartItemVariationSelection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartItemVariationSelection.class));

       return (TypeAdapter<T>) new TypeAdapter<CartItemVariationSelection>() {
           @Override
           public void write(JsonWriter out, CartItemVariationSelection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartItemVariationSelection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartItemVariationSelection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartItemVariationSelection
  * @throws IOException if the JSON string is invalid with respect to CartItemVariationSelection
  */
  public static CartItemVariationSelection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartItemVariationSelection.class);
  }

 /**
  * Convert an instance of CartItemVariationSelection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


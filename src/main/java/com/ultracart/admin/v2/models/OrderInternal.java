/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderInternal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-21T16:45:37.861-04:00[America/Indianapolis]")
public class OrderInternal {
  public static final String SERIALIZED_NAME_EXPORTED_TO_ACCOUNTING = "exported_to_accounting";
  @SerializedName(SERIALIZED_NAME_EXPORTED_TO_ACCOUNTING)
  private Boolean exportedToAccounting;

  public static final String SERIALIZED_NAME_MERCHANT_NOTES = "merchant_notes";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NOTES)
  private String merchantNotes;

  public static final String SERIALIZED_NAME_PLACED_BY_USER = "placed_by_user";
  @SerializedName(SERIALIZED_NAME_PLACED_BY_USER)
  private String placedByUser;

  public static final String SERIALIZED_NAME_REFUND_BY_USER = "refund_by_user";
  @SerializedName(SERIALIZED_NAME_REFUND_BY_USER)
  private String refundByUser;

  public static final String SERIALIZED_NAME_SALES_REP_CODE = "sales_rep_code";
  @SerializedName(SERIALIZED_NAME_SALES_REP_CODE)
  private String salesRepCode;

  public OrderInternal() { 
  }

  public OrderInternal exportedToAccounting(Boolean exportedToAccounting) {
    
    this.exportedToAccounting = exportedToAccounting;
    return this;
  }

   /**
   * True if the order has been exported to QuickBooks. If QuickBooks is not configured, then this will already be true
   * @return exportedToAccounting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the order has been exported to QuickBooks. If QuickBooks is not configured, then this will already be true")

  public Boolean getExportedToAccounting() {
    return exportedToAccounting;
  }


  public void setExportedToAccounting(Boolean exportedToAccounting) {
    this.exportedToAccounting = exportedToAccounting;
  }


  public OrderInternal merchantNotes(String merchantNotes) {
    
    this.merchantNotes = merchantNotes;
    return this;
  }

   /**
   * Merchant notes
   * @return merchantNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant notes")

  public String getMerchantNotes() {
    return merchantNotes;
  }


  public void setMerchantNotes(String merchantNotes) {
    this.merchantNotes = merchantNotes;
  }


  public OrderInternal placedByUser(String placedByUser) {
    
    this.placedByUser = placedByUser;
    return this;
  }

   /**
   * If placed via the BEOE, this is the user that placed the order
   * @return placedByUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If placed via the BEOE, this is the user that placed the order")

  public String getPlacedByUser() {
    return placedByUser;
  }


  public void setPlacedByUser(String placedByUser) {
    this.placedByUser = placedByUser;
  }


  public OrderInternal refundByUser(String refundByUser) {
    
    this.refundByUser = refundByUser;
    return this;
  }

   /**
   * User that issued the refund
   * @return refundByUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User that issued the refund")

  public String getRefundByUser() {
    return refundByUser;
  }


  public void setRefundByUser(String refundByUser) {
    this.refundByUser = refundByUser;
  }


  public OrderInternal salesRepCode(String salesRepCode) {
    
    this.salesRepCode = salesRepCode;
    return this;
  }

   /**
   * Sales rep code associated with the order
   * @return salesRepCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sales rep code associated with the order")

  public String getSalesRepCode() {
    return salesRepCode;
  }


  public void setSalesRepCode(String salesRepCode) {
    this.salesRepCode = salesRepCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderInternal orderInternal = (OrderInternal) o;
    return Objects.equals(this.exportedToAccounting, orderInternal.exportedToAccounting) &&
        Objects.equals(this.merchantNotes, orderInternal.merchantNotes) &&
        Objects.equals(this.placedByUser, orderInternal.placedByUser) &&
        Objects.equals(this.refundByUser, orderInternal.refundByUser) &&
        Objects.equals(this.salesRepCode, orderInternal.salesRepCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportedToAccounting, merchantNotes, placedByUser, refundByUser, salesRepCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderInternal {\n");
    sb.append("    exportedToAccounting: ").append(toIndentedString(exportedToAccounting)).append("\n");
    sb.append("    merchantNotes: ").append(toIndentedString(merchantNotes)).append("\n");
    sb.append("    placedByUser: ").append(toIndentedString(placedByUser)).append("\n");
    sb.append("    refundByUser: ").append(toIndentedString(refundByUser)).append("\n");
    sb.append("    salesRepCode: ").append(toIndentedString(salesRepCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exported_to_accounting");
    openapiFields.add("merchant_notes");
    openapiFields.add("placed_by_user");
    openapiFields.add("refund_by_user");
    openapiFields.add("sales_rep_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderInternal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderInternal.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderInternal is not found in the empty JSON string", OrderInternal.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderInternal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderInternal` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("merchant_notes") != null && !jsonObj.get("merchant_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_notes").toString()));
      }
      if (jsonObj.get("placed_by_user") != null && !jsonObj.get("placed_by_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placed_by_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placed_by_user").toString()));
      }
      if (jsonObj.get("refund_by_user") != null && !jsonObj.get("refund_by_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_by_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_by_user").toString()));
      }
      if (jsonObj.get("sales_rep_code") != null && !jsonObj.get("sales_rep_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sales_rep_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sales_rep_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderInternal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderInternal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderInternal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderInternal.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderInternal>() {
           @Override
           public void write(JsonWriter out, OrderInternal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderInternal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderInternal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderInternal
  * @throws IOException if the JSON string is invalid with respect to OrderInternal
  */
  public static OrderInternal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderInternal.class);
  }

 /**
  * Convert an instance of OrderInternal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartItemOptionValue;
import com.ultracart.admin.v2.models.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CartKitComponentOption
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-29T15:09:50.559-04:00")



public class CartKitComponentOption {
  @SerializedName("cost_if_specified")
  private Currency costIfSpecified = null;

  @SerializedName("cost_per_letter")
  private Currency costPerLetter = null;

  @SerializedName("cost_per_line")
  private Currency costPerLine = null;

  @SerializedName("ignore_if_default")
  private Boolean ignoreIfDefault = null;

  @SerializedName("item_id")
  private String itemId = null;

  @SerializedName("item_oid")
  private Integer itemOid = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("one_time_fee")
  private Boolean oneTimeFee = null;

  @SerializedName("option_oid")
  private Integer optionOid = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("selected_value")
  private String selectedValue = null;

  /**
   * Type of option
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SINGLE("single"),
    
    MULTILINE("multiline"),
    
    DROPDOWN("dropdown"),
    
    HIDDEN("hidden"),
    
    RADIO("radio"),
    
    FIXED("fixed");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("values")
  private List<CartItemOptionValue> values = null;

  public CartKitComponentOption costIfSpecified(Currency costIfSpecified) {
    this.costIfSpecified = costIfSpecified;
    return this;
  }

   /**
   * Get costIfSpecified
   * @return costIfSpecified
  **/
  @ApiModelProperty(value = "")
  public Currency getCostIfSpecified() {
    return costIfSpecified;
  }

  public void setCostIfSpecified(Currency costIfSpecified) {
    this.costIfSpecified = costIfSpecified;
  }

  public CartKitComponentOption costPerLetter(Currency costPerLetter) {
    this.costPerLetter = costPerLetter;
    return this;
  }

   /**
   * Get costPerLetter
   * @return costPerLetter
  **/
  @ApiModelProperty(value = "")
  public Currency getCostPerLetter() {
    return costPerLetter;
  }

  public void setCostPerLetter(Currency costPerLetter) {
    this.costPerLetter = costPerLetter;
  }

  public CartKitComponentOption costPerLine(Currency costPerLine) {
    this.costPerLine = costPerLine;
    return this;
  }

   /**
   * Get costPerLine
   * @return costPerLine
  **/
  @ApiModelProperty(value = "")
  public Currency getCostPerLine() {
    return costPerLine;
  }

  public void setCostPerLine(Currency costPerLine) {
    this.costPerLine = costPerLine;
  }

  public CartKitComponentOption ignoreIfDefault(Boolean ignoreIfDefault) {
    this.ignoreIfDefault = ignoreIfDefault;
    return this;
  }

   /**
   * True if the default answer is ignored
   * @return ignoreIfDefault
  **/
  @ApiModelProperty(value = "True if the default answer is ignored")
  public Boolean isIgnoreIfDefault() {
    return ignoreIfDefault;
  }

  public void setIgnoreIfDefault(Boolean ignoreIfDefault) {
    this.ignoreIfDefault = ignoreIfDefault;
  }

  public CartKitComponentOption itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

   /**
   * Kit component item id
   * @return itemId
  **/
  @ApiModelProperty(value = "Kit component item id")
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public CartKitComponentOption itemOid(Integer itemOid) {
    this.itemOid = itemOid;
    return this;
  }

   /**
   * Unique identifier for the kit component item
   * @return itemOid
  **/
  @ApiModelProperty(value = "Unique identifier for the kit component item")
  public Integer getItemOid() {
    return itemOid;
  }

  public void setItemOid(Integer itemOid) {
    this.itemOid = itemOid;
  }

  public CartKitComponentOption label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Display label for the option
   * @return label
  **/
  @ApiModelProperty(value = "Display label for the option")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public CartKitComponentOption name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the option
   * @return name
  **/
  @ApiModelProperty(value = "Name of the option")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CartKitComponentOption oneTimeFee(Boolean oneTimeFee) {
    this.oneTimeFee = oneTimeFee;
    return this;
  }

   /**
   * Charge the fee a single time instead of multiplying by the quantity
   * @return oneTimeFee
  **/
  @ApiModelProperty(value = "Charge the fee a single time instead of multiplying by the quantity")
  public Boolean isOneTimeFee() {
    return oneTimeFee;
  }

  public void setOneTimeFee(Boolean oneTimeFee) {
    this.oneTimeFee = oneTimeFee;
  }

  public CartKitComponentOption optionOid(Integer optionOid) {
    this.optionOid = optionOid;
    return this;
  }

   /**
   * Unique identifier for the option
   * @return optionOid
  **/
  @ApiModelProperty(value = "Unique identifier for the option")
  public Integer getOptionOid() {
    return optionOid;
  }

  public void setOptionOid(Integer optionOid) {
    this.optionOid = optionOid;
  }

  public CartKitComponentOption required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * True if the customer is required to select a value
   * @return required
  **/
  @ApiModelProperty(value = "True if the customer is required to select a value")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public CartKitComponentOption selectedValue(String selectedValue) {
    this.selectedValue = selectedValue;
    return this;
  }

   /**
   * The value of the option specified by the customer
   * @return selectedValue
  **/
  @ApiModelProperty(value = "The value of the option specified by the customer")
  public String getSelectedValue() {
    return selectedValue;
  }

  public void setSelectedValue(String selectedValue) {
    this.selectedValue = selectedValue;
  }

  public CartKitComponentOption type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of option
   * @return type
  **/
  @ApiModelProperty(value = "Type of option")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public CartKitComponentOption values(List<CartItemOptionValue> values) {
    this.values = values;
    return this;
  }

  public CartKitComponentOption addValuesItem(CartItemOptionValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<CartItemOptionValue>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Values that the customer can select from for radio or select type options
   * @return values
  **/
  @ApiModelProperty(value = "Values that the customer can select from for radio or select type options")
  public List<CartItemOptionValue> getValues() {
    return values;
  }

  public void setValues(List<CartItemOptionValue> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartKitComponentOption cartKitComponentOption = (CartKitComponentOption) o;
    return Objects.equals(this.costIfSpecified, cartKitComponentOption.costIfSpecified) &&
        Objects.equals(this.costPerLetter, cartKitComponentOption.costPerLetter) &&
        Objects.equals(this.costPerLine, cartKitComponentOption.costPerLine) &&
        Objects.equals(this.ignoreIfDefault, cartKitComponentOption.ignoreIfDefault) &&
        Objects.equals(this.itemId, cartKitComponentOption.itemId) &&
        Objects.equals(this.itemOid, cartKitComponentOption.itemOid) &&
        Objects.equals(this.label, cartKitComponentOption.label) &&
        Objects.equals(this.name, cartKitComponentOption.name) &&
        Objects.equals(this.oneTimeFee, cartKitComponentOption.oneTimeFee) &&
        Objects.equals(this.optionOid, cartKitComponentOption.optionOid) &&
        Objects.equals(this.required, cartKitComponentOption.required) &&
        Objects.equals(this.selectedValue, cartKitComponentOption.selectedValue) &&
        Objects.equals(this.type, cartKitComponentOption.type) &&
        Objects.equals(this.values, cartKitComponentOption.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costIfSpecified, costPerLetter, costPerLine, ignoreIfDefault, itemId, itemOid, label, name, oneTimeFee, optionOid, required, selectedValue, type, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartKitComponentOption {\n");
    
    sb.append("    costIfSpecified: ").append(toIndentedString(costIfSpecified)).append("\n");
    sb.append("    costPerLetter: ").append(toIndentedString(costPerLetter)).append("\n");
    sb.append("    costPerLine: ").append(toIndentedString(costPerLine)).append("\n");
    sb.append("    ignoreIfDefault: ").append(toIndentedString(ignoreIfDefault)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemOid: ").append(toIndentedString(itemOid)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneTimeFee: ").append(toIndentedString(oneTimeFee)).append("\n");
    sb.append("    optionOid: ").append(toIndentedString(optionOid)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    selectedValue: ").append(toIndentedString(selectedValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingPageViewEvent;
import com.ultracart.admin.v2.models.ScreenRecordingPageViewParameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingPageView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-03T13:28:27.239-04:00[America/Indianapolis]")
public class ScreenRecordingPageView {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ScreenRecordingPageViewEvent> events = null;

  public static final String SERIALIZED_NAME_FIRST_EVENT_TIMESTAMP = "first_event_timestamp";
  @SerializedName(SERIALIZED_NAME_FIRST_EVENT_TIMESTAMP)
  private String firstEventTimestamp;

  public static final String SERIALIZED_NAME_HTTP_POST = "http_post";
  @SerializedName(SERIALIZED_NAME_HTTP_POST)
  private Boolean httpPost;

  public static final String SERIALIZED_NAME_LAST_EVENT_TIMESTAMP = "last_event_timestamp";
  @SerializedName(SERIALIZED_NAME_LAST_EVENT_TIMESTAMP)
  private String lastEventTimestamp;

  public static final String SERIALIZED_NAME_MISSING_EVENTS = "missing_events";
  @SerializedName(SERIALIZED_NAME_MISSING_EVENTS)
  private Boolean missingEvents;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<ScreenRecordingPageViewParameter> params = null;

  public static final String SERIALIZED_NAME_RANGE_END = "range_end";
  @SerializedName(SERIALIZED_NAME_RANGE_END)
  private Integer rangeEnd;

  public static final String SERIALIZED_NAME_RANGE_START = "range_start";
  @SerializedName(SERIALIZED_NAME_RANGE_START)
  private Integer rangeStart;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_REFERRER_PARAMS = "referrer_params";
  @SerializedName(SERIALIZED_NAME_REFERRER_PARAMS)
  private List<ScreenRecordingPageViewParameter> referrerParams = null;

  public static final String SERIALIZED_NAME_REFERRER_RAW = "referrer_raw";
  @SerializedName(SERIALIZED_NAME_REFERRER_RAW)
  private String referrerRaw;

  public static final String SERIALIZED_NAME_SCREEN_RECORDING_PAGE_VIEW_UUID = "screen_recording_page_view_uuid";
  @SerializedName(SERIALIZED_NAME_SCREEN_RECORDING_PAGE_VIEW_UUID)
  private String screenRecordingPageViewUuid;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE = "time_on_page";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE)
  private Integer timeOnPage;

  public static final String SERIALIZED_NAME_TIMING_DOM_CONTENT_LOADED = "timing_dom_content_loaded";
  @SerializedName(SERIALIZED_NAME_TIMING_DOM_CONTENT_LOADED)
  private Integer timingDomContentLoaded;

  public static final String SERIALIZED_NAME_TIMING_LOADED = "timing_loaded";
  @SerializedName(SERIALIZED_NAME_TIMING_LOADED)
  private Integer timingLoaded;

  public static final String SERIALIZED_NAME_TRUNCATED_EVENTS = "truncated_events";
  @SerializedName(SERIALIZED_NAME_TRUNCATED_EVENTS)
  private Boolean truncatedEvents;

  public static final String SERIALIZED_NAME_UCAPV = "ucapv";
  @SerializedName(SERIALIZED_NAME_UCAPV)
  private String ucapv;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ScreenRecordingPageView() { 
  }

  public ScreenRecordingPageView domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ScreenRecordingPageView events(List<ScreenRecordingPageViewEvent> events) {
    
    this.events = events;
    return this;
  }

  public ScreenRecordingPageView addEventsItem(ScreenRecordingPageViewEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingPageViewEvent> getEvents() {
    return events;
  }


  public void setEvents(List<ScreenRecordingPageViewEvent> events) {
    this.events = events;
  }


  public ScreenRecordingPageView firstEventTimestamp(String firstEventTimestamp) {
    
    this.firstEventTimestamp = firstEventTimestamp;
    return this;
  }

   /**
   * First event timestamp
   * @return firstEventTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First event timestamp")

  public String getFirstEventTimestamp() {
    return firstEventTimestamp;
  }


  public void setFirstEventTimestamp(String firstEventTimestamp) {
    this.firstEventTimestamp = firstEventTimestamp;
  }


  public ScreenRecordingPageView httpPost(Boolean httpPost) {
    
    this.httpPost = httpPost;
    return this;
  }

   /**
   * Get httpPost
   * @return httpPost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getHttpPost() {
    return httpPost;
  }


  public void setHttpPost(Boolean httpPost) {
    this.httpPost = httpPost;
  }


  public ScreenRecordingPageView lastEventTimestamp(String lastEventTimestamp) {
    
    this.lastEventTimestamp = lastEventTimestamp;
    return this;
  }

   /**
   * Last event timestamp
   * @return lastEventTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last event timestamp")

  public String getLastEventTimestamp() {
    return lastEventTimestamp;
  }


  public void setLastEventTimestamp(String lastEventTimestamp) {
    this.lastEventTimestamp = lastEventTimestamp;
  }


  public ScreenRecordingPageView missingEvents(Boolean missingEvents) {
    
    this.missingEvents = missingEvents;
    return this;
  }

   /**
   * Get missingEvents
   * @return missingEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getMissingEvents() {
    return missingEvents;
  }


  public void setMissingEvents(Boolean missingEvents) {
    this.missingEvents = missingEvents;
  }


  public ScreenRecordingPageView params(List<ScreenRecordingPageViewParameter> params) {
    
    this.params = params;
    return this;
  }

  public ScreenRecordingPageView addParamsItem(ScreenRecordingPageViewParameter paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingPageViewParameter> getParams() {
    return params;
  }


  public void setParams(List<ScreenRecordingPageViewParameter> params) {
    this.params = params;
  }


  public ScreenRecordingPageView rangeEnd(Integer rangeEnd) {
    
    this.rangeEnd = rangeEnd;
    return this;
  }

   /**
   * Get rangeEnd
   * @return rangeEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRangeEnd() {
    return rangeEnd;
  }


  public void setRangeEnd(Integer rangeEnd) {
    this.rangeEnd = rangeEnd;
  }


  public ScreenRecordingPageView rangeStart(Integer rangeStart) {
    
    this.rangeStart = rangeStart;
    return this;
  }

   /**
   * Get rangeStart
   * @return rangeStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRangeStart() {
    return rangeStart;
  }


  public void setRangeStart(Integer rangeStart) {
    this.rangeStart = rangeStart;
  }


  public ScreenRecordingPageView referrer(String referrer) {
    
    this.referrer = referrer;
    return this;
  }

   /**
   * Get referrer
   * @return referrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferrer() {
    return referrer;
  }


  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public ScreenRecordingPageView referrerParams(List<ScreenRecordingPageViewParameter> referrerParams) {
    
    this.referrerParams = referrerParams;
    return this;
  }

  public ScreenRecordingPageView addReferrerParamsItem(ScreenRecordingPageViewParameter referrerParamsItem) {
    if (this.referrerParams == null) {
      this.referrerParams = new ArrayList<>();
    }
    this.referrerParams.add(referrerParamsItem);
    return this;
  }

   /**
   * Get referrerParams
   * @return referrerParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingPageViewParameter> getReferrerParams() {
    return referrerParams;
  }


  public void setReferrerParams(List<ScreenRecordingPageViewParameter> referrerParams) {
    this.referrerParams = referrerParams;
  }


  public ScreenRecordingPageView referrerRaw(String referrerRaw) {
    
    this.referrerRaw = referrerRaw;
    return this;
  }

   /**
   * Get referrerRaw
   * @return referrerRaw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferrerRaw() {
    return referrerRaw;
  }


  public void setReferrerRaw(String referrerRaw) {
    this.referrerRaw = referrerRaw;
  }


  public ScreenRecordingPageView screenRecordingPageViewUuid(String screenRecordingPageViewUuid) {
    
    this.screenRecordingPageViewUuid = screenRecordingPageViewUuid;
    return this;
  }

   /**
   * Get screenRecordingPageViewUuid
   * @return screenRecordingPageViewUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getScreenRecordingPageViewUuid() {
    return screenRecordingPageViewUuid;
  }


  public void setScreenRecordingPageViewUuid(String screenRecordingPageViewUuid) {
    this.screenRecordingPageViewUuid = screenRecordingPageViewUuid;
  }


  public ScreenRecordingPageView timeOnPage(Integer timeOnPage) {
    
    this.timeOnPage = timeOnPage;
    return this;
  }

   /**
   * Get timeOnPage
   * @return timeOnPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTimeOnPage() {
    return timeOnPage;
  }


  public void setTimeOnPage(Integer timeOnPage) {
    this.timeOnPage = timeOnPage;
  }


  public ScreenRecordingPageView timingDomContentLoaded(Integer timingDomContentLoaded) {
    
    this.timingDomContentLoaded = timingDomContentLoaded;
    return this;
  }

   /**
   * Amount of time for DOMContentLoaded event to fire (milliseconds)
   * @return timingDomContentLoaded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of time for DOMContentLoaded event to fire (milliseconds)")

  public Integer getTimingDomContentLoaded() {
    return timingDomContentLoaded;
  }


  public void setTimingDomContentLoaded(Integer timingDomContentLoaded) {
    this.timingDomContentLoaded = timingDomContentLoaded;
  }


  public ScreenRecordingPageView timingLoaded(Integer timingLoaded) {
    
    this.timingLoaded = timingLoaded;
    return this;
  }

   /**
   * Amount of time for loaded event to fire (milliseconds)
   * @return timingLoaded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of time for loaded event to fire (milliseconds)")

  public Integer getTimingLoaded() {
    return timingLoaded;
  }


  public void setTimingLoaded(Integer timingLoaded) {
    this.timingLoaded = timingLoaded;
  }


  public ScreenRecordingPageView truncatedEvents(Boolean truncatedEvents) {
    
    this.truncatedEvents = truncatedEvents;
    return this;
  }

   /**
   * Get truncatedEvents
   * @return truncatedEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getTruncatedEvents() {
    return truncatedEvents;
  }


  public void setTruncatedEvents(Boolean truncatedEvents) {
    this.truncatedEvents = truncatedEvents;
  }


  public ScreenRecordingPageView ucapv(String ucapv) {
    
    this.ucapv = ucapv;
    return this;
  }

   /**
   * Get ucapv
   * @return ucapv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUcapv() {
    return ucapv;
  }


  public void setUcapv(String ucapv) {
    this.ucapv = ucapv;
  }


  public ScreenRecordingPageView url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingPageView screenRecordingPageView = (ScreenRecordingPageView) o;
    return Objects.equals(this.domain, screenRecordingPageView.domain) &&
        Objects.equals(this.events, screenRecordingPageView.events) &&
        Objects.equals(this.firstEventTimestamp, screenRecordingPageView.firstEventTimestamp) &&
        Objects.equals(this.httpPost, screenRecordingPageView.httpPost) &&
        Objects.equals(this.lastEventTimestamp, screenRecordingPageView.lastEventTimestamp) &&
        Objects.equals(this.missingEvents, screenRecordingPageView.missingEvents) &&
        Objects.equals(this.params, screenRecordingPageView.params) &&
        Objects.equals(this.rangeEnd, screenRecordingPageView.rangeEnd) &&
        Objects.equals(this.rangeStart, screenRecordingPageView.rangeStart) &&
        Objects.equals(this.referrer, screenRecordingPageView.referrer) &&
        Objects.equals(this.referrerParams, screenRecordingPageView.referrerParams) &&
        Objects.equals(this.referrerRaw, screenRecordingPageView.referrerRaw) &&
        Objects.equals(this.screenRecordingPageViewUuid, screenRecordingPageView.screenRecordingPageViewUuid) &&
        Objects.equals(this.timeOnPage, screenRecordingPageView.timeOnPage) &&
        Objects.equals(this.timingDomContentLoaded, screenRecordingPageView.timingDomContentLoaded) &&
        Objects.equals(this.timingLoaded, screenRecordingPageView.timingLoaded) &&
        Objects.equals(this.truncatedEvents, screenRecordingPageView.truncatedEvents) &&
        Objects.equals(this.ucapv, screenRecordingPageView.ucapv) &&
        Objects.equals(this.url, screenRecordingPageView.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, events, firstEventTimestamp, httpPost, lastEventTimestamp, missingEvents, params, rangeEnd, rangeStart, referrer, referrerParams, referrerRaw, screenRecordingPageViewUuid, timeOnPage, timingDomContentLoaded, timingLoaded, truncatedEvents, ucapv, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingPageView {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    firstEventTimestamp: ").append(toIndentedString(firstEventTimestamp)).append("\n");
    sb.append("    httpPost: ").append(toIndentedString(httpPost)).append("\n");
    sb.append("    lastEventTimestamp: ").append(toIndentedString(lastEventTimestamp)).append("\n");
    sb.append("    missingEvents: ").append(toIndentedString(missingEvents)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    rangeEnd: ").append(toIndentedString(rangeEnd)).append("\n");
    sb.append("    rangeStart: ").append(toIndentedString(rangeStart)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    referrerParams: ").append(toIndentedString(referrerParams)).append("\n");
    sb.append("    referrerRaw: ").append(toIndentedString(referrerRaw)).append("\n");
    sb.append("    screenRecordingPageViewUuid: ").append(toIndentedString(screenRecordingPageViewUuid)).append("\n");
    sb.append("    timeOnPage: ").append(toIndentedString(timeOnPage)).append("\n");
    sb.append("    timingDomContentLoaded: ").append(toIndentedString(timingDomContentLoaded)).append("\n");
    sb.append("    timingLoaded: ").append(toIndentedString(timingLoaded)).append("\n");
    sb.append("    truncatedEvents: ").append(toIndentedString(truncatedEvents)).append("\n");
    sb.append("    ucapv: ").append(toIndentedString(ucapv)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("events");
    openapiFields.add("first_event_timestamp");
    openapiFields.add("http_post");
    openapiFields.add("last_event_timestamp");
    openapiFields.add("missing_events");
    openapiFields.add("params");
    openapiFields.add("range_end");
    openapiFields.add("range_start");
    openapiFields.add("referrer");
    openapiFields.add("referrer_params");
    openapiFields.add("referrer_raw");
    openapiFields.add("screen_recording_page_view_uuid");
    openapiFields.add("time_on_page");
    openapiFields.add("timing_dom_content_loaded");
    openapiFields.add("timing_loaded");
    openapiFields.add("truncated_events");
    openapiFields.add("ucapv");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingPageView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingPageView.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingPageView is not found in the empty JSON string", ScreenRecordingPageView.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingPageView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingPageView` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
        }

        // validate the optional field `events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          ScreenRecordingPageViewEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("first_event_timestamp") != null && !jsonObj.get("first_event_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_event_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_event_timestamp").toString()));
      }
      if (jsonObj.get("last_event_timestamp") != null && !jsonObj.get("last_event_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_event_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_event_timestamp").toString()));
      }
      JsonArray jsonArrayparams = jsonObj.getAsJsonArray("params");
      if (jsonArrayparams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("params").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
        }

        // validate the optional field `params` (array)
        for (int i = 0; i < jsonArrayparams.size(); i++) {
          ScreenRecordingPageViewParameter.validateJsonObject(jsonArrayparams.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      JsonArray jsonArrayreferrerParams = jsonObj.getAsJsonArray("referrer_params");
      if (jsonArrayreferrerParams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("referrer_params").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `referrer_params` to be an array in the JSON string but got `%s`", jsonObj.get("referrer_params").toString()));
        }

        // validate the optional field `referrer_params` (array)
        for (int i = 0; i < jsonArrayreferrerParams.size(); i++) {
          ScreenRecordingPageViewParameter.validateJsonObject(jsonArrayreferrerParams.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("referrer_raw") != null && !jsonObj.get("referrer_raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer_raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer_raw").toString()));
      }
      if (jsonObj.get("screen_recording_page_view_uuid") != null && !jsonObj.get("screen_recording_page_view_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_recording_page_view_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_recording_page_view_uuid").toString()));
      }
      if (jsonObj.get("ucapv") != null && !jsonObj.get("ucapv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ucapv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ucapv").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingPageView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingPageView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingPageView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingPageView.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingPageView>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingPageView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingPageView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingPageView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingPageView
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingPageView
  */
  public static ScreenRecordingPageView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingPageView.class);
  }

 /**
  * Convert an instance of ScreenRecordingPageView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


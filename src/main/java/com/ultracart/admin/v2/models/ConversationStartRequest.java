/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationStartRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-07T11:40:07.280-04:00[America/Indianapolis]")
public class ConversationStartRequest {
  public static final String SERIALIZED_NAME_ADD_CONVERSATION_PARTICIPANT_ARNS = "add_conversation_participant_arns";
  @SerializedName(SERIALIZED_NAME_ADD_CONVERSATION_PARTICIPANT_ARNS)
  private List<String> addConversationParticipantArns = null;

  public static final String SERIALIZED_NAME_CONVERSATION_ARN = "conversation_arn";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ARN)
  private String conversationArn;

  public static final String SERIALIZED_NAME_CONVERSATION_WEBCHAT_QUEUE_UUID = "conversation_webchat_queue_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_WEBCHAT_QUEUE_UUID)
  private String conversationWebchatQueueUuid;

  public ConversationStartRequest() { 
  }

  public ConversationStartRequest addConversationParticipantArns(List<String> addConversationParticipantArns) {
    
    this.addConversationParticipantArns = addConversationParticipantArns;
    return this;
  }

  public ConversationStartRequest addAddConversationParticipantArnsItem(String addConversationParticipantArnsItem) {
    if (this.addConversationParticipantArns == null) {
      this.addConversationParticipantArns = new ArrayList<>();
    }
    this.addConversationParticipantArns.add(addConversationParticipantArnsItem);
    return this;
  }

   /**
   * Get addConversationParticipantArns
   * @return addConversationParticipantArns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAddConversationParticipantArns() {
    return addConversationParticipantArns;
  }


  public void setAddConversationParticipantArns(List<String> addConversationParticipantArns) {
    this.addConversationParticipantArns = addConversationParticipantArns;
  }


  public ConversationStartRequest conversationArn(String conversationArn) {
    
    this.conversationArn = conversationArn;
    return this;
  }

   /**
   * Get conversationArn
   * @return conversationArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationArn() {
    return conversationArn;
  }


  public void setConversationArn(String conversationArn) {
    this.conversationArn = conversationArn;
  }


  public ConversationStartRequest conversationWebchatQueueUuid(String conversationWebchatQueueUuid) {
    
    this.conversationWebchatQueueUuid = conversationWebchatQueueUuid;
    return this;
  }

   /**
   * Get conversationWebchatQueueUuid
   * @return conversationWebchatQueueUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationWebchatQueueUuid() {
    return conversationWebchatQueueUuid;
  }


  public void setConversationWebchatQueueUuid(String conversationWebchatQueueUuid) {
    this.conversationWebchatQueueUuid = conversationWebchatQueueUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationStartRequest conversationStartRequest = (ConversationStartRequest) o;
    return Objects.equals(this.addConversationParticipantArns, conversationStartRequest.addConversationParticipantArns) &&
        Objects.equals(this.conversationArn, conversationStartRequest.conversationArn) &&
        Objects.equals(this.conversationWebchatQueueUuid, conversationStartRequest.conversationWebchatQueueUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addConversationParticipantArns, conversationArn, conversationWebchatQueueUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationStartRequest {\n");
    sb.append("    addConversationParticipantArns: ").append(toIndentedString(addConversationParticipantArns)).append("\n");
    sb.append("    conversationArn: ").append(toIndentedString(conversationArn)).append("\n");
    sb.append("    conversationWebchatQueueUuid: ").append(toIndentedString(conversationWebchatQueueUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_conversation_participant_arns");
    openapiFields.add("conversation_arn");
    openapiFields.add("conversation_webchat_queue_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationStartRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationStartRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationStartRequest is not found in the empty JSON string", ConversationStartRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationStartRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationStartRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("add_conversation_participant_arns") != null && !jsonObj.get("add_conversation_participant_arns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_conversation_participant_arns` to be an array in the JSON string but got `%s`", jsonObj.get("add_conversation_participant_arns").toString()));
      }
      if (jsonObj.get("conversation_arn") != null && !jsonObj.get("conversation_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_arn").toString()));
      }
      if (jsonObj.get("conversation_webchat_queue_uuid") != null && !jsonObj.get("conversation_webchat_queue_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_webchat_queue_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_webchat_queue_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationStartRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationStartRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationStartRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationStartRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationStartRequest>() {
           @Override
           public void write(JsonWriter out, ConversationStartRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationStartRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationStartRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationStartRequest
  * @throws IOException if the JSON string is invalid with respect to ConversationStartRequest
  */
  public static ConversationStartRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationStartRequest.class);
  }

 /**
  * Convert an instance of ConversationStartRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


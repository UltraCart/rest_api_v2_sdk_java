/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.EmailPerformanceCustomerHistogram;
import com.ultracart.admin.v2.models.EmailPerformanceDaily;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailPerformance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:19:33.697-04:00[America/Indianapolis]")
public class EmailPerformance {
  public static final String SERIALIZED_NAME_ACTIVE_CUSTOMERS = "active_customers";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CUSTOMERS)
  private Integer activeCustomers;

  public static final String SERIALIZED_NAME_ACTUAL_CUSTOMERS = "actual_customers";
  @SerializedName(SERIALIZED_NAME_ACTUAL_CUSTOMERS)
  private Integer actualCustomers;

  public static final String SERIALIZED_NAME_BOUNCE_COUNT = "bounce_count";
  @SerializedName(SERIALIZED_NAME_BOUNCE_COUNT)
  private Integer bounceCount;

  public static final String SERIALIZED_NAME_BOUNCE_PERCENTAGE = "bounce_percentage";
  @SerializedName(SERIALIZED_NAME_BOUNCE_PERCENTAGE)
  private BigDecimal bouncePercentage;

  public static final String SERIALIZED_NAME_BOUNCE_PERCENTAGE_FORMATTED = "bounce_percentage_formatted";
  @SerializedName(SERIALIZED_NAME_BOUNCE_PERCENTAGE_FORMATTED)
  private String bouncePercentageFormatted;

  public static final String SERIALIZED_NAME_CUSTOMER_HISTOGRAM = "customer_histogram";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_HISTOGRAM)
  private EmailPerformanceCustomerHistogram customerHistogram;

  public static final String SERIALIZED_NAME_DAILY_STATS = "daily_stats";
  @SerializedName(SERIALIZED_NAME_DAILY_STATS)
  private List<EmailPerformanceDaily> dailyStats = null;

  public static final String SERIALIZED_NAME_DELIVERED_COUNT = "delivered_count";
  @SerializedName(SERIALIZED_NAME_DELIVERED_COUNT)
  private Integer deliveredCount;

  /**
   * Loyalty Program Type
   */
  @JsonAdapter(LoyaltyProgramTypeEnum.Adapter.class)
  public enum LoyaltyProgramTypeEnum {
    DISABLED("disabled"),
    
    POINTS("points"),
    
    CASHBACK("cashback");

    private String value;

    LoyaltyProgramTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoyaltyProgramTypeEnum fromValue(String value) {
      for (LoyaltyProgramTypeEnum b : LoyaltyProgramTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoyaltyProgramTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoyaltyProgramTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoyaltyProgramTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoyaltyProgramTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOYALTY_PROGRAM_TYPE = "loyalty_program_type";
  @SerializedName(SERIALIZED_NAME_LOYALTY_PROGRAM_TYPE)
  private LoyaltyProgramTypeEnum loyaltyProgramType;

  public static final String SERIALIZED_NAME_MAX_ACTIVE_CUSTOMERS = "max_active_customers";
  @SerializedName(SERIALIZED_NAME_MAX_ACTIVE_CUSTOMERS)
  private Integer maxActiveCustomers;

  public static final String SERIALIZED_NAME_MAX_EMAILS_PER_DAY = "max_emails_per_day";
  @SerializedName(SERIALIZED_NAME_MAX_EMAILS_PER_DAY)
  private Integer maxEmailsPerDay;

  public static final String SERIALIZED_NAME_MAX_EMAILS_PER_HOUR = "max_emails_per_hour";
  @SerializedName(SERIALIZED_NAME_MAX_EMAILS_PER_HOUR)
  private Integer maxEmailsPerHour;

  public static final String SERIALIZED_NAME_MAX_EMAILS_PER_MONTH = "max_emails_per_month";
  @SerializedName(SERIALIZED_NAME_MAX_EMAILS_PER_MONTH)
  private Integer maxEmailsPerMonth;

  public static final String SERIALIZED_NAME_PAUSED_FOR_SPAM = "paused_for_spam";
  @SerializedName(SERIALIZED_NAME_PAUSED_FOR_SPAM)
  private Boolean pausedForSpam;

  public static final String SERIALIZED_NAME_REVENUE = "revenue";
  @SerializedName(SERIALIZED_NAME_REVENUE)
  private BigDecimal revenue;

  public static final String SERIALIZED_NAME_SENT_EMAILS_PER_DAY = "sent_emails_per_day";
  @SerializedName(SERIALIZED_NAME_SENT_EMAILS_PER_DAY)
  private Integer sentEmailsPerDay;

  public static final String SERIALIZED_NAME_SENT_EMAILS_PER_HOUR = "sent_emails_per_hour";
  @SerializedName(SERIALIZED_NAME_SENT_EMAILS_PER_HOUR)
  private Integer sentEmailsPerHour;

  public static final String SERIALIZED_NAME_SENT_EMAILS_PER_MONTH = "sent_emails_per_month";
  @SerializedName(SERIALIZED_NAME_SENT_EMAILS_PER_MONTH)
  private Integer sentEmailsPerMonth;

  public static final String SERIALIZED_NAME_SEQUENCE_SEND_COUNT = "sequence_send_count";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_SEND_COUNT)
  private Integer sequenceSendCount;

  public static final String SERIALIZED_NAME_SPAM_COUNT = "spam_count";
  @SerializedName(SERIALIZED_NAME_SPAM_COUNT)
  private Integer spamCount;

  public static final String SERIALIZED_NAME_SPAM_PERCENTAGE = "spam_percentage";
  @SerializedName(SERIALIZED_NAME_SPAM_PERCENTAGE)
  private BigDecimal spamPercentage;

  public static final String SERIALIZED_NAME_SPAM_PERCENTAGE_FORMATTED = "spam_percentage_formatted";
  @SerializedName(SERIALIZED_NAME_SPAM_PERCENTAGE_FORMATTED)
  private String spamPercentageFormatted;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_SEND_COUNT = "transactional_send_count";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_SEND_COUNT)
  private Integer transactionalSendCount;

  public EmailPerformance() { 
  }

  public EmailPerformance activeCustomers(Integer activeCustomers) {
    
    this.activeCustomers = activeCustomers;
    return this;
  }

   /**
   * Active customers.  The value will be -1 if calculation is pending.
   * @return activeCustomers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Active customers.  The value will be -1 if calculation is pending.")

  public Integer getActiveCustomers() {
    return activeCustomers;
  }


  public void setActiveCustomers(Integer activeCustomers) {
    this.activeCustomers = activeCustomers;
  }


  public EmailPerformance actualCustomers(Integer actualCustomers) {
    
    this.actualCustomers = actualCustomers;
    return this;
  }

   /**
   * Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.
   * @return actualCustomers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.")

  public Integer getActualCustomers() {
    return actualCustomers;
  }


  public void setActualCustomers(Integer actualCustomers) {
    this.actualCustomers = actualCustomers;
  }


  public EmailPerformance bounceCount(Integer bounceCount) {
    
    this.bounceCount = bounceCount;
    return this;
  }

   /**
   * Bounce count
   * @return bounceCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bounce count")

  public Integer getBounceCount() {
    return bounceCount;
  }


  public void setBounceCount(Integer bounceCount) {
    this.bounceCount = bounceCount;
  }


  public EmailPerformance bouncePercentage(BigDecimal bouncePercentage) {
    
    this.bouncePercentage = bouncePercentage;
    return this;
  }

   /**
   * bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.
   * @return bouncePercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.")

  public BigDecimal getBouncePercentage() {
    return bouncePercentage;
  }


  public void setBouncePercentage(BigDecimal bouncePercentage) {
    this.bouncePercentage = bouncePercentage;
  }


  public EmailPerformance bouncePercentageFormatted(String bouncePercentageFormatted) {
    
    this.bouncePercentageFormatted = bouncePercentageFormatted;
    return this;
  }

   /**
   * bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.
   * @return bouncePercentageFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.")

  public String getBouncePercentageFormatted() {
    return bouncePercentageFormatted;
  }


  public void setBouncePercentageFormatted(String bouncePercentageFormatted) {
    this.bouncePercentageFormatted = bouncePercentageFormatted;
  }


  public EmailPerformance customerHistogram(EmailPerformanceCustomerHistogram customerHistogram) {
    
    this.customerHistogram = customerHistogram;
    return this;
  }

   /**
   * Get customerHistogram
   * @return customerHistogram
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmailPerformanceCustomerHistogram getCustomerHistogram() {
    return customerHistogram;
  }


  public void setCustomerHistogram(EmailPerformanceCustomerHistogram customerHistogram) {
    this.customerHistogram = customerHistogram;
  }


  public EmailPerformance dailyStats(List<EmailPerformanceDaily> dailyStats) {
    
    this.dailyStats = dailyStats;
    return this;
  }

  public EmailPerformance addDailyStatsItem(EmailPerformanceDaily dailyStatsItem) {
    if (this.dailyStats == null) {
      this.dailyStats = new ArrayList<>();
    }
    this.dailyStats.add(dailyStatsItem);
    return this;
  }

   /**
   * Daily statistics used for charting
   * @return dailyStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Daily statistics used for charting")

  public List<EmailPerformanceDaily> getDailyStats() {
    return dailyStats;
  }


  public void setDailyStats(List<EmailPerformanceDaily> dailyStats) {
    this.dailyStats = dailyStats;
  }


  public EmailPerformance deliveredCount(Integer deliveredCount) {
    
    this.deliveredCount = deliveredCount;
    return this;
  }

   /**
   * Delivered count
   * @return deliveredCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Delivered count")

  public Integer getDeliveredCount() {
    return deliveredCount;
  }


  public void setDeliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
  }


  public EmailPerformance loyaltyProgramType(LoyaltyProgramTypeEnum loyaltyProgramType) {
    
    this.loyaltyProgramType = loyaltyProgramType;
    return this;
  }

   /**
   * Loyalty Program Type
   * @return loyaltyProgramType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Loyalty Program Type")

  public LoyaltyProgramTypeEnum getLoyaltyProgramType() {
    return loyaltyProgramType;
  }


  public void setLoyaltyProgramType(LoyaltyProgramTypeEnum loyaltyProgramType) {
    this.loyaltyProgramType = loyaltyProgramType;
  }


  public EmailPerformance maxActiveCustomers(Integer maxActiveCustomers) {
    
    this.maxActiveCustomers = maxActiveCustomers;
    return this;
  }

   /**
   * Maximum active customers allowed under their billing plan
   * @return maxActiveCustomers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum active customers allowed under their billing plan")

  public Integer getMaxActiveCustomers() {
    return maxActiveCustomers;
  }


  public void setMaxActiveCustomers(Integer maxActiveCustomers) {
    this.maxActiveCustomers = maxActiveCustomers;
  }


  public EmailPerformance maxEmailsPerDay(Integer maxEmailsPerDay) {
    
    this.maxEmailsPerDay = maxEmailsPerDay;
    return this;
  }

   /**
   * Max emails per day
   * @return maxEmailsPerDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max emails per day")

  public Integer getMaxEmailsPerDay() {
    return maxEmailsPerDay;
  }


  public void setMaxEmailsPerDay(Integer maxEmailsPerDay) {
    this.maxEmailsPerDay = maxEmailsPerDay;
  }


  public EmailPerformance maxEmailsPerHour(Integer maxEmailsPerHour) {
    
    this.maxEmailsPerHour = maxEmailsPerHour;
    return this;
  }

   /**
   * Max emails per hour
   * @return maxEmailsPerHour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max emails per hour")

  public Integer getMaxEmailsPerHour() {
    return maxEmailsPerHour;
  }


  public void setMaxEmailsPerHour(Integer maxEmailsPerHour) {
    this.maxEmailsPerHour = maxEmailsPerHour;
  }


  public EmailPerformance maxEmailsPerMonth(Integer maxEmailsPerMonth) {
    
    this.maxEmailsPerMonth = maxEmailsPerMonth;
    return this;
  }

   /**
   * Max emails per month
   * @return maxEmailsPerMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max emails per month")

  public Integer getMaxEmailsPerMonth() {
    return maxEmailsPerMonth;
  }


  public void setMaxEmailsPerMonth(Integer maxEmailsPerMonth) {
    this.maxEmailsPerMonth = maxEmailsPerMonth;
  }


  public EmailPerformance pausedForSpam(Boolean pausedForSpam) {
    
    this.pausedForSpam = pausedForSpam;
    return this;
  }

   /**
   * True if campaign/flow emails are paused due to spam complaints.
   * @return pausedForSpam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if campaign/flow emails are paused due to spam complaints.")

  public Boolean getPausedForSpam() {
    return pausedForSpam;
  }


  public void setPausedForSpam(Boolean pausedForSpam) {
    this.pausedForSpam = pausedForSpam;
  }


  public EmailPerformance revenue(BigDecimal revenue) {
    
    this.revenue = revenue;
    return this;
  }

   /**
   * Revenue
   * @return revenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revenue")

  public BigDecimal getRevenue() {
    return revenue;
  }


  public void setRevenue(BigDecimal revenue) {
    this.revenue = revenue;
  }


  public EmailPerformance sentEmailsPerDay(Integer sentEmailsPerDay) {
    
    this.sentEmailsPerDay = sentEmailsPerDay;
    return this;
  }

   /**
   * Sent emails last 24 hours
   * @return sentEmailsPerDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sent emails last 24 hours")

  public Integer getSentEmailsPerDay() {
    return sentEmailsPerDay;
  }


  public void setSentEmailsPerDay(Integer sentEmailsPerDay) {
    this.sentEmailsPerDay = sentEmailsPerDay;
  }


  public EmailPerformance sentEmailsPerHour(Integer sentEmailsPerHour) {
    
    this.sentEmailsPerHour = sentEmailsPerHour;
    return this;
  }

   /**
   * Sent emails last hour
   * @return sentEmailsPerHour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sent emails last hour")

  public Integer getSentEmailsPerHour() {
    return sentEmailsPerHour;
  }


  public void setSentEmailsPerHour(Integer sentEmailsPerHour) {
    this.sentEmailsPerHour = sentEmailsPerHour;
  }


  public EmailPerformance sentEmailsPerMonth(Integer sentEmailsPerMonth) {
    
    this.sentEmailsPerMonth = sentEmailsPerMonth;
    return this;
  }

   /**
   * Sent emails last 31 days
   * @return sentEmailsPerMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sent emails last 31 days")

  public Integer getSentEmailsPerMonth() {
    return sentEmailsPerMonth;
  }


  public void setSentEmailsPerMonth(Integer sentEmailsPerMonth) {
    this.sentEmailsPerMonth = sentEmailsPerMonth;
  }


  public EmailPerformance sequenceSendCount(Integer sequenceSendCount) {
    
    this.sequenceSendCount = sequenceSendCount;
    return this;
  }

   /**
   * Total sequence (campaign/flow) emails sent
   * @return sequenceSendCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total sequence (campaign/flow) emails sent")

  public Integer getSequenceSendCount() {
    return sequenceSendCount;
  }


  public void setSequenceSendCount(Integer sequenceSendCount) {
    this.sequenceSendCount = sequenceSendCount;
  }


  public EmailPerformance spamCount(Integer spamCount) {
    
    this.spamCount = spamCount;
    return this;
  }

   /**
   * Spam complaints
   * @return spamCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Spam complaints")

  public Integer getSpamCount() {
    return spamCount;
  }


  public void setSpamCount(Integer spamCount) {
    this.spamCount = spamCount;
  }


  public EmailPerformance spamPercentage(BigDecimal spamPercentage) {
    
    this.spamPercentage = spamPercentage;
    return this;
  }

   /**
   * Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
   * @return spamPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.")

  public BigDecimal getSpamPercentage() {
    return spamPercentage;
  }


  public void setSpamPercentage(BigDecimal spamPercentage) {
    this.spamPercentage = spamPercentage;
  }


  public EmailPerformance spamPercentageFormatted(String spamPercentageFormatted) {
    
    this.spamPercentageFormatted = spamPercentageFormatted;
    return this;
  }

   /**
   * Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
   * @return spamPercentageFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.")

  public String getSpamPercentageFormatted() {
    return spamPercentageFormatted;
  }


  public void setSpamPercentageFormatted(String spamPercentageFormatted) {
    this.spamPercentageFormatted = spamPercentageFormatted;
  }


  public EmailPerformance transactionalSendCount(Integer transactionalSendCount) {
    
    this.transactionalSendCount = transactionalSendCount;
    return this;
  }

   /**
   * Total transactions emails sent
   * @return transactionalSendCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total transactions emails sent")

  public Integer getTransactionalSendCount() {
    return transactionalSendCount;
  }


  public void setTransactionalSendCount(Integer transactionalSendCount) {
    this.transactionalSendCount = transactionalSendCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailPerformance emailPerformance = (EmailPerformance) o;
    return Objects.equals(this.activeCustomers, emailPerformance.activeCustomers) &&
        Objects.equals(this.actualCustomers, emailPerformance.actualCustomers) &&
        Objects.equals(this.bounceCount, emailPerformance.bounceCount) &&
        Objects.equals(this.bouncePercentage, emailPerformance.bouncePercentage) &&
        Objects.equals(this.bouncePercentageFormatted, emailPerformance.bouncePercentageFormatted) &&
        Objects.equals(this.customerHistogram, emailPerformance.customerHistogram) &&
        Objects.equals(this.dailyStats, emailPerformance.dailyStats) &&
        Objects.equals(this.deliveredCount, emailPerformance.deliveredCount) &&
        Objects.equals(this.loyaltyProgramType, emailPerformance.loyaltyProgramType) &&
        Objects.equals(this.maxActiveCustomers, emailPerformance.maxActiveCustomers) &&
        Objects.equals(this.maxEmailsPerDay, emailPerformance.maxEmailsPerDay) &&
        Objects.equals(this.maxEmailsPerHour, emailPerformance.maxEmailsPerHour) &&
        Objects.equals(this.maxEmailsPerMonth, emailPerformance.maxEmailsPerMonth) &&
        Objects.equals(this.pausedForSpam, emailPerformance.pausedForSpam) &&
        Objects.equals(this.revenue, emailPerformance.revenue) &&
        Objects.equals(this.sentEmailsPerDay, emailPerformance.sentEmailsPerDay) &&
        Objects.equals(this.sentEmailsPerHour, emailPerformance.sentEmailsPerHour) &&
        Objects.equals(this.sentEmailsPerMonth, emailPerformance.sentEmailsPerMonth) &&
        Objects.equals(this.sequenceSendCount, emailPerformance.sequenceSendCount) &&
        Objects.equals(this.spamCount, emailPerformance.spamCount) &&
        Objects.equals(this.spamPercentage, emailPerformance.spamPercentage) &&
        Objects.equals(this.spamPercentageFormatted, emailPerformance.spamPercentageFormatted) &&
        Objects.equals(this.transactionalSendCount, emailPerformance.transactionalSendCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeCustomers, actualCustomers, bounceCount, bouncePercentage, bouncePercentageFormatted, customerHistogram, dailyStats, deliveredCount, loyaltyProgramType, maxActiveCustomers, maxEmailsPerDay, maxEmailsPerHour, maxEmailsPerMonth, pausedForSpam, revenue, sentEmailsPerDay, sentEmailsPerHour, sentEmailsPerMonth, sequenceSendCount, spamCount, spamPercentage, spamPercentageFormatted, transactionalSendCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailPerformance {\n");
    sb.append("    activeCustomers: ").append(toIndentedString(activeCustomers)).append("\n");
    sb.append("    actualCustomers: ").append(toIndentedString(actualCustomers)).append("\n");
    sb.append("    bounceCount: ").append(toIndentedString(bounceCount)).append("\n");
    sb.append("    bouncePercentage: ").append(toIndentedString(bouncePercentage)).append("\n");
    sb.append("    bouncePercentageFormatted: ").append(toIndentedString(bouncePercentageFormatted)).append("\n");
    sb.append("    customerHistogram: ").append(toIndentedString(customerHistogram)).append("\n");
    sb.append("    dailyStats: ").append(toIndentedString(dailyStats)).append("\n");
    sb.append("    deliveredCount: ").append(toIndentedString(deliveredCount)).append("\n");
    sb.append("    loyaltyProgramType: ").append(toIndentedString(loyaltyProgramType)).append("\n");
    sb.append("    maxActiveCustomers: ").append(toIndentedString(maxActiveCustomers)).append("\n");
    sb.append("    maxEmailsPerDay: ").append(toIndentedString(maxEmailsPerDay)).append("\n");
    sb.append("    maxEmailsPerHour: ").append(toIndentedString(maxEmailsPerHour)).append("\n");
    sb.append("    maxEmailsPerMonth: ").append(toIndentedString(maxEmailsPerMonth)).append("\n");
    sb.append("    pausedForSpam: ").append(toIndentedString(pausedForSpam)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    sentEmailsPerDay: ").append(toIndentedString(sentEmailsPerDay)).append("\n");
    sb.append("    sentEmailsPerHour: ").append(toIndentedString(sentEmailsPerHour)).append("\n");
    sb.append("    sentEmailsPerMonth: ").append(toIndentedString(sentEmailsPerMonth)).append("\n");
    sb.append("    sequenceSendCount: ").append(toIndentedString(sequenceSendCount)).append("\n");
    sb.append("    spamCount: ").append(toIndentedString(spamCount)).append("\n");
    sb.append("    spamPercentage: ").append(toIndentedString(spamPercentage)).append("\n");
    sb.append("    spamPercentageFormatted: ").append(toIndentedString(spamPercentageFormatted)).append("\n");
    sb.append("    transactionalSendCount: ").append(toIndentedString(transactionalSendCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_customers");
    openapiFields.add("actual_customers");
    openapiFields.add("bounce_count");
    openapiFields.add("bounce_percentage");
    openapiFields.add("bounce_percentage_formatted");
    openapiFields.add("customer_histogram");
    openapiFields.add("daily_stats");
    openapiFields.add("delivered_count");
    openapiFields.add("loyalty_program_type");
    openapiFields.add("max_active_customers");
    openapiFields.add("max_emails_per_day");
    openapiFields.add("max_emails_per_hour");
    openapiFields.add("max_emails_per_month");
    openapiFields.add("paused_for_spam");
    openapiFields.add("revenue");
    openapiFields.add("sent_emails_per_day");
    openapiFields.add("sent_emails_per_hour");
    openapiFields.add("sent_emails_per_month");
    openapiFields.add("sequence_send_count");
    openapiFields.add("spam_count");
    openapiFields.add("spam_percentage");
    openapiFields.add("spam_percentage_formatted");
    openapiFields.add("transactional_send_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailPerformance
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailPerformance.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailPerformance is not found in the empty JSON string", EmailPerformance.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailPerformance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailPerformance` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("bounce_percentage_formatted") != null && !jsonObj.get("bounce_percentage_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounce_percentage_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounce_percentage_formatted").toString()));
      }
      // validate the optional field `customer_histogram`
      if (jsonObj.getAsJsonObject("customer_histogram") != null) {
        EmailPerformanceCustomerHistogram.validateJsonObject(jsonObj.getAsJsonObject("customer_histogram"));
      }
      JsonArray jsonArraydailyStats = jsonObj.getAsJsonArray("daily_stats");
      if (jsonArraydailyStats != null) {
        // ensure the json data is an array
        if (!jsonObj.get("daily_stats").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `daily_stats` to be an array in the JSON string but got `%s`", jsonObj.get("daily_stats").toString()));
        }

        // validate the optional field `daily_stats` (array)
        for (int i = 0; i < jsonArraydailyStats.size(); i++) {
          EmailPerformanceDaily.validateJsonObject(jsonArraydailyStats.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("loyalty_program_type") != null && !jsonObj.get("loyalty_program_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyalty_program_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loyalty_program_type").toString()));
      }
      if (jsonObj.get("spam_percentage_formatted") != null && !jsonObj.get("spam_percentage_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spam_percentage_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spam_percentage_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailPerformance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailPerformance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailPerformance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailPerformance.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailPerformance>() {
           @Override
           public void write(JsonWriter out, EmailPerformance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailPerformance read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailPerformance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailPerformance
  * @throws IOException if the JSON string is invalid with respect to EmailPerformance
  */
  public static EmailPerformance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailPerformance.class);
  }

 /**
  * Convert an instance of EmailPerformance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


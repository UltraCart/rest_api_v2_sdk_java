/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.EmailPerformanceCustomerHistogram;
import com.ultracart.admin.v2.models.EmailPerformanceDaily;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * EmailPerformance
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:39:38.982-04:00")



public class EmailPerformance {
  @SerializedName("active_customers")
  private Integer activeCustomers = null;

  @SerializedName("actual_customers")
  private Integer actualCustomers = null;

  @SerializedName("bounce_count")
  private Integer bounceCount = null;

  @SerializedName("bounce_percentage")
  private BigDecimal bouncePercentage = null;

  @SerializedName("bounce_percentage_formatted")
  private String bouncePercentageFormatted = null;

  @SerializedName("customer_histogram")
  private EmailPerformanceCustomerHistogram customerHistogram = null;

  @SerializedName("daily_stats")
  private List<EmailPerformanceDaily> dailyStats = null;

  @SerializedName("delivered_count")
  private Integer deliveredCount = null;

  /**
   * Loyalty Program Type
   */
  @JsonAdapter(LoyaltyProgramTypeEnum.Adapter.class)
  public enum LoyaltyProgramTypeEnum {
    DISABLED("disabled"),
    
    POINTS("points"),
    
    CASHBACK("cashback");

    private String value;

    LoyaltyProgramTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoyaltyProgramTypeEnum fromValue(String text) {
      for (LoyaltyProgramTypeEnum b : LoyaltyProgramTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LoyaltyProgramTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoyaltyProgramTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoyaltyProgramTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LoyaltyProgramTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("loyalty_program_type")
  private LoyaltyProgramTypeEnum loyaltyProgramType = null;

  @SerializedName("max_active_customers")
  private Integer maxActiveCustomers = null;

  @SerializedName("max_emails_per_day")
  private Integer maxEmailsPerDay = null;

  @SerializedName("max_emails_per_hour")
  private Integer maxEmailsPerHour = null;

  @SerializedName("max_emails_per_month")
  private Integer maxEmailsPerMonth = null;

  @SerializedName("paused_for_spam")
  private Boolean pausedForSpam = null;

  @SerializedName("revenue")
  private BigDecimal revenue = null;

  @SerializedName("sent_emails_per_day")
  private Integer sentEmailsPerDay = null;

  @SerializedName("sent_emails_per_hour")
  private Integer sentEmailsPerHour = null;

  @SerializedName("sent_emails_per_month")
  private Integer sentEmailsPerMonth = null;

  @SerializedName("sequence_send_count")
  private Integer sequenceSendCount = null;

  @SerializedName("spam_count")
  private Integer spamCount = null;

  @SerializedName("spam_percentage")
  private BigDecimal spamPercentage = null;

  @SerializedName("spam_percentage_formatted")
  private String spamPercentageFormatted = null;

  @SerializedName("transactional_send_count")
  private Integer transactionalSendCount = null;

  public EmailPerformance activeCustomers(Integer activeCustomers) {
    this.activeCustomers = activeCustomers;
    return this;
  }

   /**
   * Active customers.  The value will be -1 if calculation is pending.
   * @return activeCustomers
  **/
  @ApiModelProperty(value = "Active customers.  The value will be -1 if calculation is pending.")
  public Integer getActiveCustomers() {
    return activeCustomers;
  }

  public void setActiveCustomers(Integer activeCustomers) {
    this.activeCustomers = activeCustomers;
  }

  public EmailPerformance actualCustomers(Integer actualCustomers) {
    this.actualCustomers = actualCustomers;
    return this;
  }

   /**
   * Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.
   * @return actualCustomers
  **/
  @ApiModelProperty(value = "Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.")
  public Integer getActualCustomers() {
    return actualCustomers;
  }

  public void setActualCustomers(Integer actualCustomers) {
    this.actualCustomers = actualCustomers;
  }

  public EmailPerformance bounceCount(Integer bounceCount) {
    this.bounceCount = bounceCount;
    return this;
  }

   /**
   * Bounce count
   * @return bounceCount
  **/
  @ApiModelProperty(value = "Bounce count")
  public Integer getBounceCount() {
    return bounceCount;
  }

  public void setBounceCount(Integer bounceCount) {
    this.bounceCount = bounceCount;
  }

  public EmailPerformance bouncePercentage(BigDecimal bouncePercentage) {
    this.bouncePercentage = bouncePercentage;
    return this;
  }

   /**
   * bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.
   * @return bouncePercentage
  **/
  @ApiModelProperty(value = "bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.")
  public BigDecimal getBouncePercentage() {
    return bouncePercentage;
  }

  public void setBouncePercentage(BigDecimal bouncePercentage) {
    this.bouncePercentage = bouncePercentage;
  }

  public EmailPerformance bouncePercentageFormatted(String bouncePercentageFormatted) {
    this.bouncePercentageFormatted = bouncePercentageFormatted;
    return this;
  }

   /**
   * bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.
   * @return bouncePercentageFormatted
  **/
  @ApiModelProperty(value = "bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.")
  public String getBouncePercentageFormatted() {
    return bouncePercentageFormatted;
  }

  public void setBouncePercentageFormatted(String bouncePercentageFormatted) {
    this.bouncePercentageFormatted = bouncePercentageFormatted;
  }

  public EmailPerformance customerHistogram(EmailPerformanceCustomerHistogram customerHistogram) {
    this.customerHistogram = customerHistogram;
    return this;
  }

   /**
   * Get customerHistogram
   * @return customerHistogram
  **/
  @ApiModelProperty(value = "")
  public EmailPerformanceCustomerHistogram getCustomerHistogram() {
    return customerHistogram;
  }

  public void setCustomerHistogram(EmailPerformanceCustomerHistogram customerHistogram) {
    this.customerHistogram = customerHistogram;
  }

  public EmailPerformance dailyStats(List<EmailPerformanceDaily> dailyStats) {
    this.dailyStats = dailyStats;
    return this;
  }

  public EmailPerformance addDailyStatsItem(EmailPerformanceDaily dailyStatsItem) {
    if (this.dailyStats == null) {
      this.dailyStats = new ArrayList<EmailPerformanceDaily>();
    }
    this.dailyStats.add(dailyStatsItem);
    return this;
  }

   /**
   * Daily statistics used for charting
   * @return dailyStats
  **/
  @ApiModelProperty(value = "Daily statistics used for charting")
  public List<EmailPerformanceDaily> getDailyStats() {
    return dailyStats;
  }

  public void setDailyStats(List<EmailPerformanceDaily> dailyStats) {
    this.dailyStats = dailyStats;
  }

  public EmailPerformance deliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
    return this;
  }

   /**
   * Delivered count
   * @return deliveredCount
  **/
  @ApiModelProperty(value = "Delivered count")
  public Integer getDeliveredCount() {
    return deliveredCount;
  }

  public void setDeliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
  }

  public EmailPerformance loyaltyProgramType(LoyaltyProgramTypeEnum loyaltyProgramType) {
    this.loyaltyProgramType = loyaltyProgramType;
    return this;
  }

   /**
   * Loyalty Program Type
   * @return loyaltyProgramType
  **/
  @ApiModelProperty(value = "Loyalty Program Type")
  public LoyaltyProgramTypeEnum getLoyaltyProgramType() {
    return loyaltyProgramType;
  }

  public void setLoyaltyProgramType(LoyaltyProgramTypeEnum loyaltyProgramType) {
    this.loyaltyProgramType = loyaltyProgramType;
  }

  public EmailPerformance maxActiveCustomers(Integer maxActiveCustomers) {
    this.maxActiveCustomers = maxActiveCustomers;
    return this;
  }

   /**
   * Maximum active customers allowed under their billing plan
   * @return maxActiveCustomers
  **/
  @ApiModelProperty(value = "Maximum active customers allowed under their billing plan")
  public Integer getMaxActiveCustomers() {
    return maxActiveCustomers;
  }

  public void setMaxActiveCustomers(Integer maxActiveCustomers) {
    this.maxActiveCustomers = maxActiveCustomers;
  }

  public EmailPerformance maxEmailsPerDay(Integer maxEmailsPerDay) {
    this.maxEmailsPerDay = maxEmailsPerDay;
    return this;
  }

   /**
   * Max emails per day
   * @return maxEmailsPerDay
  **/
  @ApiModelProperty(value = "Max emails per day")
  public Integer getMaxEmailsPerDay() {
    return maxEmailsPerDay;
  }

  public void setMaxEmailsPerDay(Integer maxEmailsPerDay) {
    this.maxEmailsPerDay = maxEmailsPerDay;
  }

  public EmailPerformance maxEmailsPerHour(Integer maxEmailsPerHour) {
    this.maxEmailsPerHour = maxEmailsPerHour;
    return this;
  }

   /**
   * Max emails per hour
   * @return maxEmailsPerHour
  **/
  @ApiModelProperty(value = "Max emails per hour")
  public Integer getMaxEmailsPerHour() {
    return maxEmailsPerHour;
  }

  public void setMaxEmailsPerHour(Integer maxEmailsPerHour) {
    this.maxEmailsPerHour = maxEmailsPerHour;
  }

  public EmailPerformance maxEmailsPerMonth(Integer maxEmailsPerMonth) {
    this.maxEmailsPerMonth = maxEmailsPerMonth;
    return this;
  }

   /**
   * Max emails per month
   * @return maxEmailsPerMonth
  **/
  @ApiModelProperty(value = "Max emails per month")
  public Integer getMaxEmailsPerMonth() {
    return maxEmailsPerMonth;
  }

  public void setMaxEmailsPerMonth(Integer maxEmailsPerMonth) {
    this.maxEmailsPerMonth = maxEmailsPerMonth;
  }

  public EmailPerformance pausedForSpam(Boolean pausedForSpam) {
    this.pausedForSpam = pausedForSpam;
    return this;
  }

   /**
   * True if campaign/flow emails are paused due to spam complaints.
   * @return pausedForSpam
  **/
  @ApiModelProperty(value = "True if campaign/flow emails are paused due to spam complaints.")
  public Boolean isPausedForSpam() {
    return pausedForSpam;
  }

  public void setPausedForSpam(Boolean pausedForSpam) {
    this.pausedForSpam = pausedForSpam;
  }

  public EmailPerformance revenue(BigDecimal revenue) {
    this.revenue = revenue;
    return this;
  }

   /**
   * Revenue
   * @return revenue
  **/
  @ApiModelProperty(value = "Revenue")
  public BigDecimal getRevenue() {
    return revenue;
  }

  public void setRevenue(BigDecimal revenue) {
    this.revenue = revenue;
  }

  public EmailPerformance sentEmailsPerDay(Integer sentEmailsPerDay) {
    this.sentEmailsPerDay = sentEmailsPerDay;
    return this;
  }

   /**
   * Sent emails last 24 hours
   * @return sentEmailsPerDay
  **/
  @ApiModelProperty(value = "Sent emails last 24 hours")
  public Integer getSentEmailsPerDay() {
    return sentEmailsPerDay;
  }

  public void setSentEmailsPerDay(Integer sentEmailsPerDay) {
    this.sentEmailsPerDay = sentEmailsPerDay;
  }

  public EmailPerformance sentEmailsPerHour(Integer sentEmailsPerHour) {
    this.sentEmailsPerHour = sentEmailsPerHour;
    return this;
  }

   /**
   * Sent emails last hour
   * @return sentEmailsPerHour
  **/
  @ApiModelProperty(value = "Sent emails last hour")
  public Integer getSentEmailsPerHour() {
    return sentEmailsPerHour;
  }

  public void setSentEmailsPerHour(Integer sentEmailsPerHour) {
    this.sentEmailsPerHour = sentEmailsPerHour;
  }

  public EmailPerformance sentEmailsPerMonth(Integer sentEmailsPerMonth) {
    this.sentEmailsPerMonth = sentEmailsPerMonth;
    return this;
  }

   /**
   * Sent emails last 31 days
   * @return sentEmailsPerMonth
  **/
  @ApiModelProperty(value = "Sent emails last 31 days")
  public Integer getSentEmailsPerMonth() {
    return sentEmailsPerMonth;
  }

  public void setSentEmailsPerMonth(Integer sentEmailsPerMonth) {
    this.sentEmailsPerMonth = sentEmailsPerMonth;
  }

  public EmailPerformance sequenceSendCount(Integer sequenceSendCount) {
    this.sequenceSendCount = sequenceSendCount;
    return this;
  }

   /**
   * Total sequence (campaign/flow) emails sent
   * @return sequenceSendCount
  **/
  @ApiModelProperty(value = "Total sequence (campaign/flow) emails sent")
  public Integer getSequenceSendCount() {
    return sequenceSendCount;
  }

  public void setSequenceSendCount(Integer sequenceSendCount) {
    this.sequenceSendCount = sequenceSendCount;
  }

  public EmailPerformance spamCount(Integer spamCount) {
    this.spamCount = spamCount;
    return this;
  }

   /**
   * Spam complaints
   * @return spamCount
  **/
  @ApiModelProperty(value = "Spam complaints")
  public Integer getSpamCount() {
    return spamCount;
  }

  public void setSpamCount(Integer spamCount) {
    this.spamCount = spamCount;
  }

  public EmailPerformance spamPercentage(BigDecimal spamPercentage) {
    this.spamPercentage = spamPercentage;
    return this;
  }

   /**
   * Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
   * @return spamPercentage
  **/
  @ApiModelProperty(value = "Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.")
  public BigDecimal getSpamPercentage() {
    return spamPercentage;
  }

  public void setSpamPercentage(BigDecimal spamPercentage) {
    this.spamPercentage = spamPercentage;
  }

  public EmailPerformance spamPercentageFormatted(String spamPercentageFormatted) {
    this.spamPercentageFormatted = spamPercentageFormatted;
    return this;
  }

   /**
   * Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
   * @return spamPercentageFormatted
  **/
  @ApiModelProperty(value = "Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.")
  public String getSpamPercentageFormatted() {
    return spamPercentageFormatted;
  }

  public void setSpamPercentageFormatted(String spamPercentageFormatted) {
    this.spamPercentageFormatted = spamPercentageFormatted;
  }

  public EmailPerformance transactionalSendCount(Integer transactionalSendCount) {
    this.transactionalSendCount = transactionalSendCount;
    return this;
  }

   /**
   * Total transactions emails sent
   * @return transactionalSendCount
  **/
  @ApiModelProperty(value = "Total transactions emails sent")
  public Integer getTransactionalSendCount() {
    return transactionalSendCount;
  }

  public void setTransactionalSendCount(Integer transactionalSendCount) {
    this.transactionalSendCount = transactionalSendCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailPerformance emailPerformance = (EmailPerformance) o;
    return Objects.equals(this.activeCustomers, emailPerformance.activeCustomers) &&
        Objects.equals(this.actualCustomers, emailPerformance.actualCustomers) &&
        Objects.equals(this.bounceCount, emailPerformance.bounceCount) &&
        Objects.equals(this.bouncePercentage, emailPerformance.bouncePercentage) &&
        Objects.equals(this.bouncePercentageFormatted, emailPerformance.bouncePercentageFormatted) &&
        Objects.equals(this.customerHistogram, emailPerformance.customerHistogram) &&
        Objects.equals(this.dailyStats, emailPerformance.dailyStats) &&
        Objects.equals(this.deliveredCount, emailPerformance.deliveredCount) &&
        Objects.equals(this.loyaltyProgramType, emailPerformance.loyaltyProgramType) &&
        Objects.equals(this.maxActiveCustomers, emailPerformance.maxActiveCustomers) &&
        Objects.equals(this.maxEmailsPerDay, emailPerformance.maxEmailsPerDay) &&
        Objects.equals(this.maxEmailsPerHour, emailPerformance.maxEmailsPerHour) &&
        Objects.equals(this.maxEmailsPerMonth, emailPerformance.maxEmailsPerMonth) &&
        Objects.equals(this.pausedForSpam, emailPerformance.pausedForSpam) &&
        Objects.equals(this.revenue, emailPerformance.revenue) &&
        Objects.equals(this.sentEmailsPerDay, emailPerformance.sentEmailsPerDay) &&
        Objects.equals(this.sentEmailsPerHour, emailPerformance.sentEmailsPerHour) &&
        Objects.equals(this.sentEmailsPerMonth, emailPerformance.sentEmailsPerMonth) &&
        Objects.equals(this.sequenceSendCount, emailPerformance.sequenceSendCount) &&
        Objects.equals(this.spamCount, emailPerformance.spamCount) &&
        Objects.equals(this.spamPercentage, emailPerformance.spamPercentage) &&
        Objects.equals(this.spamPercentageFormatted, emailPerformance.spamPercentageFormatted) &&
        Objects.equals(this.transactionalSendCount, emailPerformance.transactionalSendCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeCustomers, actualCustomers, bounceCount, bouncePercentage, bouncePercentageFormatted, customerHistogram, dailyStats, deliveredCount, loyaltyProgramType, maxActiveCustomers, maxEmailsPerDay, maxEmailsPerHour, maxEmailsPerMonth, pausedForSpam, revenue, sentEmailsPerDay, sentEmailsPerHour, sentEmailsPerMonth, sequenceSendCount, spamCount, spamPercentage, spamPercentageFormatted, transactionalSendCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailPerformance {\n");
    
    sb.append("    activeCustomers: ").append(toIndentedString(activeCustomers)).append("\n");
    sb.append("    actualCustomers: ").append(toIndentedString(actualCustomers)).append("\n");
    sb.append("    bounceCount: ").append(toIndentedString(bounceCount)).append("\n");
    sb.append("    bouncePercentage: ").append(toIndentedString(bouncePercentage)).append("\n");
    sb.append("    bouncePercentageFormatted: ").append(toIndentedString(bouncePercentageFormatted)).append("\n");
    sb.append("    customerHistogram: ").append(toIndentedString(customerHistogram)).append("\n");
    sb.append("    dailyStats: ").append(toIndentedString(dailyStats)).append("\n");
    sb.append("    deliveredCount: ").append(toIndentedString(deliveredCount)).append("\n");
    sb.append("    loyaltyProgramType: ").append(toIndentedString(loyaltyProgramType)).append("\n");
    sb.append("    maxActiveCustomers: ").append(toIndentedString(maxActiveCustomers)).append("\n");
    sb.append("    maxEmailsPerDay: ").append(toIndentedString(maxEmailsPerDay)).append("\n");
    sb.append("    maxEmailsPerHour: ").append(toIndentedString(maxEmailsPerHour)).append("\n");
    sb.append("    maxEmailsPerMonth: ").append(toIndentedString(maxEmailsPerMonth)).append("\n");
    sb.append("    pausedForSpam: ").append(toIndentedString(pausedForSpam)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    sentEmailsPerDay: ").append(toIndentedString(sentEmailsPerDay)).append("\n");
    sb.append("    sentEmailsPerHour: ").append(toIndentedString(sentEmailsPerHour)).append("\n");
    sb.append("    sentEmailsPerMonth: ").append(toIndentedString(sentEmailsPerMonth)).append("\n");
    sb.append("    sequenceSendCount: ").append(toIndentedString(sequenceSendCount)).append("\n");
    sb.append("    spamCount: ").append(toIndentedString(spamCount)).append("\n");
    sb.append("    spamPercentage: ").append(toIndentedString(spamPercentage)).append("\n");
    sb.append("    spamPercentageFormatted: ").append(toIndentedString(spamPercentageFormatted)).append("\n");
    sb.append("    transactionalSendCount: ").append(toIndentedString(transactionalSendCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


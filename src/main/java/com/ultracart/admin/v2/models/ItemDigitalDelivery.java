/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemDigitalItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemDigitalDelivery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-23T15:17:08.601-04:00[America/Indianapolis]")
public class ItemDigitalDelivery {
  public static final String SERIALIZED_NAME_ACTIVATION_CODE_DESCRIPTION = "activation_code_description";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_DESCRIPTION)
  private String activationCodeDescription;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE_LOW_WARNING = "activation_code_low_warning";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_LOW_WARNING)
  private Integer activationCodeLowWarning;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE_REALTIME_URL = "activation_code_realtime_url";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_REALTIME_URL)
  private String activationCodeRealtimeUrl;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE_SHARED_SECRET = "activation_code_shared_secret";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_SHARED_SECRET)
  private String activationCodeSharedSecret;

  public static final String SERIALIZED_NAME_ACTIVATION_CODE_TYPE = "activation_code_type";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_CODE_TYPE)
  private String activationCodeType;

  public static final String SERIALIZED_NAME_DIGITAL_ITEMS = "digital_items";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ITEMS)
  private List<ItemDigitalItem> digitalItems = null;

  public ItemDigitalDelivery() { 
  }

  public ItemDigitalDelivery activationCodeDescription(String activationCodeDescription) {
    
    this.activationCodeDescription = activationCodeDescription;
    return this;
  }

   /**
   * Description of the activation code
   * @return activationCodeDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the activation code")

  public String getActivationCodeDescription() {
    return activationCodeDescription;
  }


  public void setActivationCodeDescription(String activationCodeDescription) {
    this.activationCodeDescription = activationCodeDescription;
  }


  public ItemDigitalDelivery activationCodeLowWarning(Integer activationCodeLowWarning) {
    
    this.activationCodeLowWarning = activationCodeLowWarning;
    return this;
  }

   /**
   * The number of activation codes whcih should generate a warning email
   * @return activationCodeLowWarning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of activation codes whcih should generate a warning email")

  public Integer getActivationCodeLowWarning() {
    return activationCodeLowWarning;
  }


  public void setActivationCodeLowWarning(Integer activationCodeLowWarning) {
    this.activationCodeLowWarning = activationCodeLowWarning;
  }


  public ItemDigitalDelivery activationCodeRealtimeUrl(String activationCodeRealtimeUrl) {
    
    this.activationCodeRealtimeUrl = activationCodeRealtimeUrl;
    return this;
  }

   /**
   * The URL to retrieve activation codes from in real-time
   * @return activationCodeRealtimeUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL to retrieve activation codes from in real-time")

  public String getActivationCodeRealtimeUrl() {
    return activationCodeRealtimeUrl;
  }


  public void setActivationCodeRealtimeUrl(String activationCodeRealtimeUrl) {
    this.activationCodeRealtimeUrl = activationCodeRealtimeUrl;
  }


  public ItemDigitalDelivery activationCodeSharedSecret(String activationCodeSharedSecret) {
    
    this.activationCodeSharedSecret = activationCodeSharedSecret;
    return this;
  }

   /**
   * Shared secret used when communicating with the real-time URL
   * @return activationCodeSharedSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shared secret used when communicating with the real-time URL")

  public String getActivationCodeSharedSecret() {
    return activationCodeSharedSecret;
  }


  public void setActivationCodeSharedSecret(String activationCodeSharedSecret) {
    this.activationCodeSharedSecret = activationCodeSharedSecret;
  }


  public ItemDigitalDelivery activationCodeType(String activationCodeType) {
    
    this.activationCodeType = activationCodeType;
    return this;
  }

   /**
   * Type of activation code
   * @return activationCodeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of activation code")

  public String getActivationCodeType() {
    return activationCodeType;
  }


  public void setActivationCodeType(String activationCodeType) {
    this.activationCodeType = activationCodeType;
  }


  public ItemDigitalDelivery digitalItems(List<ItemDigitalItem> digitalItems) {
    
    this.digitalItems = digitalItems;
    return this;
  }

  public ItemDigitalDelivery addDigitalItemsItem(ItemDigitalItem digitalItemsItem) {
    if (this.digitalItems == null) {
      this.digitalItems = new ArrayList<>();
    }
    this.digitalItems.add(digitalItemsItem);
    return this;
  }

   /**
   * Digital items that customer can download when this item is purchased
   * @return digitalItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Digital items that customer can download when this item is purchased")

  public List<ItemDigitalItem> getDigitalItems() {
    return digitalItems;
  }


  public void setDigitalItems(List<ItemDigitalItem> digitalItems) {
    this.digitalItems = digitalItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDigitalDelivery itemDigitalDelivery = (ItemDigitalDelivery) o;
    return Objects.equals(this.activationCodeDescription, itemDigitalDelivery.activationCodeDescription) &&
        Objects.equals(this.activationCodeLowWarning, itemDigitalDelivery.activationCodeLowWarning) &&
        Objects.equals(this.activationCodeRealtimeUrl, itemDigitalDelivery.activationCodeRealtimeUrl) &&
        Objects.equals(this.activationCodeSharedSecret, itemDigitalDelivery.activationCodeSharedSecret) &&
        Objects.equals(this.activationCodeType, itemDigitalDelivery.activationCodeType) &&
        Objects.equals(this.digitalItems, itemDigitalDelivery.digitalItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationCodeDescription, activationCodeLowWarning, activationCodeRealtimeUrl, activationCodeSharedSecret, activationCodeType, digitalItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDigitalDelivery {\n");
    sb.append("    activationCodeDescription: ").append(toIndentedString(activationCodeDescription)).append("\n");
    sb.append("    activationCodeLowWarning: ").append(toIndentedString(activationCodeLowWarning)).append("\n");
    sb.append("    activationCodeRealtimeUrl: ").append(toIndentedString(activationCodeRealtimeUrl)).append("\n");
    sb.append("    activationCodeSharedSecret: ").append(toIndentedString(activationCodeSharedSecret)).append("\n");
    sb.append("    activationCodeType: ").append(toIndentedString(activationCodeType)).append("\n");
    sb.append("    digitalItems: ").append(toIndentedString(digitalItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activation_code_description");
    openapiFields.add("activation_code_low_warning");
    openapiFields.add("activation_code_realtime_url");
    openapiFields.add("activation_code_shared_secret");
    openapiFields.add("activation_code_type");
    openapiFields.add("digital_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemDigitalDelivery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemDigitalDelivery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDigitalDelivery is not found in the empty JSON string", ItemDigitalDelivery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemDigitalDelivery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemDigitalDelivery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("activation_code_description") != null && !jsonObj.get("activation_code_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activation_code_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activation_code_description").toString()));
      }
      if (jsonObj.get("activation_code_realtime_url") != null && !jsonObj.get("activation_code_realtime_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activation_code_realtime_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activation_code_realtime_url").toString()));
      }
      if (jsonObj.get("activation_code_shared_secret") != null && !jsonObj.get("activation_code_shared_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activation_code_shared_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activation_code_shared_secret").toString()));
      }
      if (jsonObj.get("activation_code_type") != null && !jsonObj.get("activation_code_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activation_code_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activation_code_type").toString()));
      }
      JsonArray jsonArraydigitalItems = jsonObj.getAsJsonArray("digital_items");
      if (jsonArraydigitalItems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("digital_items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `digital_items` to be an array in the JSON string but got `%s`", jsonObj.get("digital_items").toString()));
        }

        // validate the optional field `digital_items` (array)
        for (int i = 0; i < jsonArraydigitalItems.size(); i++) {
          ItemDigitalItem.validateJsonObject(jsonArraydigitalItems.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDigitalDelivery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDigitalDelivery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDigitalDelivery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDigitalDelivery.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDigitalDelivery>() {
           @Override
           public void write(JsonWriter out, ItemDigitalDelivery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDigitalDelivery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemDigitalDelivery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemDigitalDelivery
  * @throws IOException if the JSON string is invalid with respect to ItemDigitalDelivery
  */
  public static ItemDigitalDelivery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDigitalDelivery.class);
  }

 /**
  * Convert an instance of ItemDigitalDelivery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


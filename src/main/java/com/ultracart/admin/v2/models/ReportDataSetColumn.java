/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSetColumn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T14:46:06.786-04:00[America/Indianapolis]")
public class ReportDataSetColumn {
  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private Boolean in;

  public static final String SERIALIZED_NAME_N = "n";
  @SerializedName(SERIALIZED_NAME_N)
  private String n;

  public static final String SERIALIZED_NAME_VD = "vd";
  @SerializedName(SERIALIZED_NAME_VD)
  private String vd;

  public static final String SERIALIZED_NAME_VDT = "vdt";
  @SerializedName(SERIALIZED_NAME_VDT)
  private String vdt;

  public static final String SERIALIZED_NAME_VN = "vn";
  @SerializedName(SERIALIZED_NAME_VN)
  private BigDecimal vn;

  public static final String SERIALIZED_NAME_VS = "vs";
  @SerializedName(SERIALIZED_NAME_VS)
  private String vs;

  public ReportDataSetColumn() { 
  }

  public ReportDataSetColumn in(Boolean in) {
    
    this.in = in;
    return this;
  }

   /**
   * Get in
   * @return in
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIn() {
    return in;
  }


  public void setIn(Boolean in) {
    this.in = in;
  }


  public ReportDataSetColumn n(String n) {
    
    this.n = n;
    return this;
  }

   /**
   * Get n
   * @return n
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getN() {
    return n;
  }


  public void setN(String n) {
    this.n = n;
  }


  public ReportDataSetColumn vd(String vd) {
    
    this.vd = vd;
    return this;
  }

   /**
   * Get vd
   * @return vd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVd() {
    return vd;
  }


  public void setVd(String vd) {
    this.vd = vd;
  }


  public ReportDataSetColumn vdt(String vdt) {
    
    this.vdt = vdt;
    return this;
  }

   /**
   * Get vdt
   * @return vdt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVdt() {
    return vdt;
  }


  public void setVdt(String vdt) {
    this.vdt = vdt;
  }


  public ReportDataSetColumn vn(BigDecimal vn) {
    
    this.vn = vn;
    return this;
  }

   /**
   * Get vn
   * @return vn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getVn() {
    return vn;
  }


  public void setVn(BigDecimal vn) {
    this.vn = vn;
  }


  public ReportDataSetColumn vs(String vs) {
    
    this.vs = vs;
    return this;
  }

   /**
   * Get vs
   * @return vs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVs() {
    return vs;
  }


  public void setVs(String vs) {
    this.vs = vs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSetColumn reportDataSetColumn = (ReportDataSetColumn) o;
    return Objects.equals(this.in, reportDataSetColumn.in) &&
        Objects.equals(this.n, reportDataSetColumn.n) &&
        Objects.equals(this.vd, reportDataSetColumn.vd) &&
        Objects.equals(this.vdt, reportDataSetColumn.vdt) &&
        Objects.equals(this.vn, reportDataSetColumn.vn) &&
        Objects.equals(this.vs, reportDataSetColumn.vs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(in, n, vd, vdt, vn, vs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSetColumn {\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    vd: ").append(toIndentedString(vd)).append("\n");
    sb.append("    vdt: ").append(toIndentedString(vdt)).append("\n");
    sb.append("    vn: ").append(toIndentedString(vn)).append("\n");
    sb.append("    vs: ").append(toIndentedString(vs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in");
    openapiFields.add("n");
    openapiFields.add("vd");
    openapiFields.add("vdt");
    openapiFields.add("vn");
    openapiFields.add("vs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSetColumn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSetColumn.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSetColumn is not found in the empty JSON string", ReportDataSetColumn.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSetColumn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSetColumn` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("n") != null && !jsonObj.get("n").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `n` to be a primitive type in the JSON string but got `%s`", jsonObj.get("n").toString()));
      }
      if (jsonObj.get("vd") != null && !jsonObj.get("vd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vd").toString()));
      }
      if (jsonObj.get("vdt") != null && !jsonObj.get("vdt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vdt").toString()));
      }
      if (jsonObj.get("vs") != null && !jsonObj.get("vs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSetColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSetColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSetColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSetColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSetColumn>() {
           @Override
           public void write(JsonWriter out, ReportDataSetColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSetColumn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSetColumn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSetColumn
  * @throws IOException if the JSON string is invalid with respect to ReportDataSetColumn
  */
  public static ReportDataSetColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSetColumn.class);
  }

 /**
  * Convert an instance of ReportDataSetColumn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


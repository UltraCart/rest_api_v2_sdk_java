/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.PaymentsConfigurationRestrictions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PaymentsConfigurationCreditCardType
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-04-26T11:37:38.556-04:00")



public class PaymentsConfigurationCreditCardType {
  @SerializedName("accounting_code")
  private String accountingCode = null;

  @SerializedName("card_type_icon")
  private String cardTypeIcon = null;

  /**
   * Credit card type
   */
  @JsonAdapter(CreditCardEnum.Adapter.class)
  public enum CreditCardEnum {
    AMEX("AMEX"),
    
    DINERS_CLUB("Diners Club"),
    
    DISCOVER("Discover"),
    
    MASTERCARD("MasterCard"),
    
    JCB("JCB"),
    
    VISA("VISA");

    private String value;

    CreditCardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditCardEnum fromValue(String text) {
      for (CreditCardEnum b : CreditCardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CreditCardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditCardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditCardEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreditCardEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("credit_card")
  private CreditCardEnum creditCard = null;

  @SerializedName("deposit_to_account")
  private String depositToAccount = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("processing_fee")
  private BigDecimal processingFee = null;

  @SerializedName("processing_percentage")
  private BigDecimal processingPercentage = null;

  @SerializedName("restrictions")
  private PaymentsConfigurationRestrictions restrictions = null;

  @SerializedName("surcharge_accounting_code")
  private String surchargeAccountingCode = null;

  @SerializedName("transaction_fee")
  private BigDecimal transactionFee = null;

  @SerializedName("transaction_percentage")
  private BigDecimal transactionPercentage = null;

  public PaymentsConfigurationCreditCardType accountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks
   * @return accountingCode
  **/
  @ApiModelProperty(value = "Optional field used for Quickbooks integrations to match this credit card with the corresponding payment type in Quickbooks")
  public String getAccountingCode() {
    return accountingCode;
  }

  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }

  public PaymentsConfigurationCreditCardType cardTypeIcon(String cardTypeIcon) {
    this.cardTypeIcon = cardTypeIcon;
    return this;
  }

   /**
   * Internally used icon information for this card type
   * @return cardTypeIcon
  **/
  @ApiModelProperty(value = "Internally used icon information for this card type")
  public String getCardTypeIcon() {
    return cardTypeIcon;
  }

  public void setCardTypeIcon(String cardTypeIcon) {
    this.cardTypeIcon = cardTypeIcon;
  }

  public PaymentsConfigurationCreditCardType creditCard(CreditCardEnum creditCard) {
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Credit card type
   * @return creditCard
  **/
  @ApiModelProperty(value = "Credit card type")
  public CreditCardEnum getCreditCard() {
    return creditCard;
  }

  public void setCreditCard(CreditCardEnum creditCard) {
    this.creditCard = creditCard;
  }

  public PaymentsConfigurationCreditCardType depositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
    return this;
  }

   /**
   * The name of the account to deposit funds
   * @return depositToAccount
  **/
  @ApiModelProperty(value = "The name of the account to deposit funds")
  public String getDepositToAccount() {
    return depositToAccount;
  }

  public void setDepositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
  }

  public PaymentsConfigurationCreditCardType enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * If true, this card type will be accepted during checkout
   * @return enabled
  **/
  @ApiModelProperty(value = "If true, this card type will be accepted during checkout")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public PaymentsConfigurationCreditCardType processingFee(BigDecimal processingFee) {
    this.processingFee = processingFee;
    return this;
  }

   /**
   * Optional additional fee applied to order for this card
   * @return processingFee
  **/
  @ApiModelProperty(value = "Optional additional fee applied to order for this card")
  public BigDecimal getProcessingFee() {
    return processingFee;
  }

  public void setProcessingFee(BigDecimal processingFee) {
    this.processingFee = processingFee;
  }

  public PaymentsConfigurationCreditCardType processingPercentage(BigDecimal processingPercentage) {
    this.processingPercentage = processingPercentage;
    return this;
  }

   /**
   * Optional additional fee applied to order for this card
   * @return processingPercentage
  **/
  @ApiModelProperty(value = "Optional additional fee applied to order for this card")
  public BigDecimal getProcessingPercentage() {
    return processingPercentage;
  }

  public void setProcessingPercentage(BigDecimal processingPercentage) {
    this.processingPercentage = processingPercentage;
  }

  public PaymentsConfigurationCreditCardType restrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @ApiModelProperty(value = "")
  public PaymentsConfigurationRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public PaymentsConfigurationCreditCardType surchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
    return this;
  }

   /**
   * Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders
   * @return surchargeAccountingCode
  **/
  @ApiModelProperty(value = "Optional field. If integrated with Quickbooks, this code will be used when informing Quickbooks about any surcharges applied to orders")
  public String getSurchargeAccountingCode() {
    return surchargeAccountingCode;
  }

  public void setSurchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
  }

  public PaymentsConfigurationCreditCardType transactionFee(BigDecimal transactionFee) {
    this.transactionFee = transactionFee;
    return this;
  }

   /**
   * An optional additional fee to charge the customer for using this card.
   * @return transactionFee
  **/
  @ApiModelProperty(value = "An optional additional fee to charge the customer for using this card.")
  public BigDecimal getTransactionFee() {
    return transactionFee;
  }

  public void setTransactionFee(BigDecimal transactionFee) {
    this.transactionFee = transactionFee;
  }

  public PaymentsConfigurationCreditCardType transactionPercentage(BigDecimal transactionPercentage) {
    this.transactionPercentage = transactionPercentage;
    return this;
  }

   /**
   * An optional transaction percentage to charge the customer for using this card
   * @return transactionPercentage
  **/
  @ApiModelProperty(value = "An optional transaction percentage to charge the customer for using this card")
  public BigDecimal getTransactionPercentage() {
    return transactionPercentage;
  }

  public void setTransactionPercentage(BigDecimal transactionPercentage) {
    this.transactionPercentage = transactionPercentage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsConfigurationCreditCardType paymentsConfigurationCreditCardType = (PaymentsConfigurationCreditCardType) o;
    return Objects.equals(this.accountingCode, paymentsConfigurationCreditCardType.accountingCode) &&
        Objects.equals(this.cardTypeIcon, paymentsConfigurationCreditCardType.cardTypeIcon) &&
        Objects.equals(this.creditCard, paymentsConfigurationCreditCardType.creditCard) &&
        Objects.equals(this.depositToAccount, paymentsConfigurationCreditCardType.depositToAccount) &&
        Objects.equals(this.enabled, paymentsConfigurationCreditCardType.enabled) &&
        Objects.equals(this.processingFee, paymentsConfigurationCreditCardType.processingFee) &&
        Objects.equals(this.processingPercentage, paymentsConfigurationCreditCardType.processingPercentage) &&
        Objects.equals(this.restrictions, paymentsConfigurationCreditCardType.restrictions) &&
        Objects.equals(this.surchargeAccountingCode, paymentsConfigurationCreditCardType.surchargeAccountingCode) &&
        Objects.equals(this.transactionFee, paymentsConfigurationCreditCardType.transactionFee) &&
        Objects.equals(this.transactionPercentage, paymentsConfigurationCreditCardType.transactionPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, cardTypeIcon, creditCard, depositToAccount, enabled, processingFee, processingPercentage, restrictions, surchargeAccountingCode, transactionFee, transactionPercentage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsConfigurationCreditCardType {\n");
    
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    cardTypeIcon: ").append(toIndentedString(cardTypeIcon)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    depositToAccount: ").append(toIndentedString(depositToAccount)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    processingPercentage: ").append(toIndentedString(processingPercentage)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    surchargeAccountingCode: ").append(toIndentedString(surchargeAccountingCode)).append("\n");
    sb.append("    transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
    sb.append("    transactionPercentage: ").append(toIndentedString(transactionPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


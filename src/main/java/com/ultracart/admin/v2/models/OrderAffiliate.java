/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.OrderAffiliateLedger;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderAffiliate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T16:39:13.797-04:00[America/Indianapolis]")
public class OrderAffiliate {
  public static final String SERIALIZED_NAME_AFFILIATE_OID = "affiliate_oid";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_OID)
  private Integer affiliateOid;

  public static final String SERIALIZED_NAME_LEDGER_ENTRIES = "ledger_entries";
  @SerializedName(SERIALIZED_NAME_LEDGER_ENTRIES)
  private List<OrderAffiliateLedger> ledgerEntries = null;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  public OrderAffiliate() { 
  }

  public OrderAffiliate affiliateOid(Integer affiliateOid) {
    
    this.affiliateOid = affiliateOid;
    return this;
  }

   /**
   * Affiliate ID
   * @return affiliateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate ID")

  public Integer getAffiliateOid() {
    return affiliateOid;
  }


  public void setAffiliateOid(Integer affiliateOid) {
    this.affiliateOid = affiliateOid;
  }


  public OrderAffiliate ledgerEntries(List<OrderAffiliateLedger> ledgerEntries) {
    
    this.ledgerEntries = ledgerEntries;
    return this;
  }

  public OrderAffiliate addLedgerEntriesItem(OrderAffiliateLedger ledgerEntriesItem) {
    if (this.ledgerEntries == null) {
      this.ledgerEntries = new ArrayList<>();
    }
    this.ledgerEntries.add(ledgerEntriesItem);
    return this;
  }

   /**
   * Ledger entries associated with all the commissions earned on this order
   * @return ledgerEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ledger entries associated with all the commissions earned on this order")

  public List<OrderAffiliateLedger> getLedgerEntries() {
    return ledgerEntries;
  }


  public void setLedgerEntries(List<OrderAffiliateLedger> ledgerEntries) {
    this.ledgerEntries = ledgerEntries;
  }


  public OrderAffiliate subId(String subId) {
    
    this.subId = subId;
    return this;
  }

   /**
   * Sub identifier provided by the affiliate on the click that generated this order
   * @return subId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub identifier provided by the affiliate on the click that generated this order")

  public String getSubId() {
    return subId;
  }


  public void setSubId(String subId) {
    this.subId = subId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderAffiliate orderAffiliate = (OrderAffiliate) o;
    return Objects.equals(this.affiliateOid, orderAffiliate.affiliateOid) &&
        Objects.equals(this.ledgerEntries, orderAffiliate.ledgerEntries) &&
        Objects.equals(this.subId, orderAffiliate.subId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliateOid, ledgerEntries, subId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderAffiliate {\n");
    sb.append("    affiliateOid: ").append(toIndentedString(affiliateOid)).append("\n");
    sb.append("    ledgerEntries: ").append(toIndentedString(ledgerEntries)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliate_oid");
    openapiFields.add("ledger_entries");
    openapiFields.add("sub_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderAffiliate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderAffiliate.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderAffiliate is not found in the empty JSON string", OrderAffiliate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderAffiliate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderAffiliate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayledgerEntries = jsonObj.getAsJsonArray("ledger_entries");
      if (jsonArrayledgerEntries != null) {
        // ensure the json data is an array
        if (!jsonObj.get("ledger_entries").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `ledger_entries` to be an array in the JSON string but got `%s`", jsonObj.get("ledger_entries").toString()));
        }

        // validate the optional field `ledger_entries` (array)
        for (int i = 0; i < jsonArrayledgerEntries.size(); i++) {
          OrderAffiliateLedger.validateJsonObject(jsonArrayledgerEntries.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("sub_id") != null && !jsonObj.get("sub_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderAffiliate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderAffiliate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderAffiliate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderAffiliate.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderAffiliate>() {
           @Override
           public void write(JsonWriter out, OrderAffiliate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderAffiliate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderAffiliate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderAffiliate
  * @throws IOException if the JSON string is invalid with respect to OrderAffiliate
  */
  public static OrderAffiliate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderAffiliate.class);
  }

 /**
  * Convert an instance of OrderAffiliate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.AutoOrderItem;
import com.ultracart.admin.v2.models.AutoOrderLog;
import com.ultracart.admin.v2.models.AutoOrderManagement;
import com.ultracart.admin.v2.models.Order;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * AutoOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-19T12:15:47.119-04:00[America/Indianapolis]")
public class AutoOrder {
  public static final String SERIALIZED_NAME_AUTO_ORDER_CODE = "auto_order_code";
  @SerializedName(SERIALIZED_NAME_AUTO_ORDER_CODE)
  private String autoOrderCode;

  public static final String SERIALIZED_NAME_AUTO_ORDER_OID = "auto_order_oid";
  @SerializedName(SERIALIZED_NAME_AUTO_ORDER_OID)
  private Integer autoOrderOid;

  public static final String SERIALIZED_NAME_CANCEL_AFTER_NEXT_X_ORDERS = "cancel_after_next_x_orders";
  @SerializedName(SERIALIZED_NAME_CANCEL_AFTER_NEXT_X_ORDERS)
  private Integer cancelAfterNextXOrders;

  public static final String SERIALIZED_NAME_CANCEL_DOWNGRADE = "cancel_downgrade";
  @SerializedName(SERIALIZED_NAME_CANCEL_DOWNGRADE)
  private Boolean cancelDowngrade;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancel_reason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private String cancelReason;

  public static final String SERIALIZED_NAME_CANCEL_UPGRADE = "cancel_upgrade";
  @SerializedName(SERIALIZED_NAME_CANCEL_UPGRADE)
  private Boolean cancelUpgrade;

  public static final String SERIALIZED_NAME_CANCELED_BY_USER = "canceled_by_user";
  @SerializedName(SERIALIZED_NAME_CANCELED_BY_USER)
  private String canceledByUser;

  public static final String SERIALIZED_NAME_CANCELED_DTS = "canceled_dts";
  @SerializedName(SERIALIZED_NAME_CANCELED_DTS)
  private String canceledDts;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_CREDIT_CARD_ATTEMPT = "credit_card_attempt";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_ATTEMPT)
  private Integer creditCardAttempt;

  public static final String SERIALIZED_NAME_DISABLED_DTS = "disabled_dts";
  @SerializedName(SERIALIZED_NAME_DISABLED_DTS)
  private String disabledDts;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failure_reason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<AutoOrderItem> items = null;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<AutoOrderLog> logs = null;

  public static final String SERIALIZED_NAME_MANAGEMENT = "management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  private AutoOrderManagement management;

  public static final String SERIALIZED_NAME_NEXT_ATTEMPT = "next_attempt";
  @SerializedName(SERIALIZED_NAME_NEXT_ATTEMPT)
  private String nextAttempt;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER = "original_order";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER)
  private Order originalOrder;

  public static final String SERIALIZED_NAME_ORIGINAL_ORDER_ID = "original_order_id";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ORDER_ID)
  private String originalOrderId;

  public static final String SERIALIZED_NAME_OVERRIDE_AFFILIATE_ID = "override_affiliate_id";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_AFFILIATE_ID)
  private Integer overrideAffiliateId;

  public static final String SERIALIZED_NAME_REBILL_ORDERS = "rebill_orders";
  @SerializedName(SERIALIZED_NAME_REBILL_ORDERS)
  private List<Order> rebillOrders = null;

  public static final String SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODE = "rotating_transaction_gateway_code";
  @SerializedName(SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODE)
  private String rotatingTransactionGatewayCode;

  /**
   * The status of the auto order
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    CANCELED("canceled"),
    
    DISABLED("disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public AutoOrder() { 
  }

  public AutoOrder autoOrderCode(String autoOrderCode) {
    
    this.autoOrderCode = autoOrderCode;
    return this;
  }

   /**
   * Unique code assigned to this auto order
   * @return autoOrderCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique code assigned to this auto order")

  public String getAutoOrderCode() {
    return autoOrderCode;
  }


  public void setAutoOrderCode(String autoOrderCode) {
    this.autoOrderCode = autoOrderCode;
  }


  public AutoOrder autoOrderOid(Integer autoOrderOid) {
    
    this.autoOrderOid = autoOrderOid;
    return this;
  }

   /**
   * Auto order object identifier
   * @return autoOrderOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Auto order object identifier")

  public Integer getAutoOrderOid() {
    return autoOrderOid;
  }


  public void setAutoOrderOid(Integer autoOrderOid) {
    this.autoOrderOid = autoOrderOid;
  }


  public AutoOrder cancelAfterNextXOrders(Integer cancelAfterNextXOrders) {
    
    this.cancelAfterNextXOrders = cancelAfterNextXOrders;
    return this;
  }

   /**
   * Cancel this auto order after X additional rebills
   * @return cancelAfterNextXOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cancel this auto order after X additional rebills")

  public Integer getCancelAfterNextXOrders() {
    return cancelAfterNextXOrders;
  }


  public void setCancelAfterNextXOrders(Integer cancelAfterNextXOrders) {
    this.cancelAfterNextXOrders = cancelAfterNextXOrders;
  }


  public AutoOrder cancelDowngrade(Boolean cancelDowngrade) {
    
    this.cancelDowngrade = cancelDowngrade;
    return this;
  }

   /**
   * True if the auto order was canceled because the customer purchased a downgrade item
   * @return cancelDowngrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the auto order was canceled because the customer purchased a downgrade item")

  public Boolean getCancelDowngrade() {
    return cancelDowngrade;
  }


  public void setCancelDowngrade(Boolean cancelDowngrade) {
    this.cancelDowngrade = cancelDowngrade;
  }


  public AutoOrder cancelReason(String cancelReason) {
    
    this.cancelReason = cancelReason;
    return this;
  }

   /**
   * The reason this auto order was canceled by either merchant or customer
   * @return cancelReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason this auto order was canceled by either merchant or customer")

  public String getCancelReason() {
    return cancelReason;
  }


  public void setCancelReason(String cancelReason) {
    this.cancelReason = cancelReason;
  }


  public AutoOrder cancelUpgrade(Boolean cancelUpgrade) {
    
    this.cancelUpgrade = cancelUpgrade;
    return this;
  }

   /**
   * True if the auto order was canceled because the customer purchased an upgrade item
   * @return cancelUpgrade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the auto order was canceled because the customer purchased an upgrade item")

  public Boolean getCancelUpgrade() {
    return cancelUpgrade;
  }


  public void setCancelUpgrade(Boolean cancelUpgrade) {
    this.cancelUpgrade = cancelUpgrade;
  }


  public AutoOrder canceledByUser(String canceledByUser) {
    
    this.canceledByUser = canceledByUser;
    return this;
  }

   /**
   * The user that canceled the auto order
   * @return canceledByUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user that canceled the auto order")

  public String getCanceledByUser() {
    return canceledByUser;
  }


  public void setCanceledByUser(String canceledByUser) {
    this.canceledByUser = canceledByUser;
  }


  public AutoOrder canceledDts(String canceledDts) {
    
    this.canceledDts = canceledDts;
    return this;
  }

   /**
   * The date/time that the auto order was canceled
   * @return canceledDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date/time that the auto order was canceled")

  public String getCanceledDts() {
    return canceledDts;
  }


  public void setCanceledDts(String canceledDts) {
    this.canceledDts = canceledDts;
  }


  public AutoOrder completed(Boolean completed) {
    
    this.completed = completed;
    return this;
  }

   /**
   * True if the auto order ran successfully to completion
   * @return completed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the auto order ran successfully to completion")

  public Boolean getCompleted() {
    return completed;
  }


  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }


  public AutoOrder creditCardAttempt(Integer creditCardAttempt) {
    
    this.creditCardAttempt = creditCardAttempt;
    return this;
  }

   /**
   * The number of credit card attempts that have taken place
   * @return creditCardAttempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of credit card attempts that have taken place")

  public Integer getCreditCardAttempt() {
    return creditCardAttempt;
  }


  public void setCreditCardAttempt(Integer creditCardAttempt) {
    this.creditCardAttempt = creditCardAttempt;
  }


  public AutoOrder disabledDts(String disabledDts) {
    
    this.disabledDts = disabledDts;
    return this;
  }

   /**
   * The date/time the auto order was disabled due to failed rebills
   * @return disabledDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date/time the auto order was disabled due to failed rebills")

  public String getDisabledDts() {
    return disabledDts;
  }


  public void setDisabledDts(String disabledDts) {
    this.disabledDts = disabledDts;
  }


  public AutoOrder enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * True if this auto order is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this auto order is enabled")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AutoOrder failureReason(String failureReason) {
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * The reason this auto order failed during the last rebill attempt
   * @return failureReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason this auto order failed during the last rebill attempt")

  public String getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public AutoOrder items(List<AutoOrderItem> items) {
    
    this.items = items;
    return this;
  }

  public AutoOrder addItemsItem(AutoOrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * The items that are setup to rebill
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The items that are setup to rebill")

  public List<AutoOrderItem> getItems() {
    return items;
  }


  public void setItems(List<AutoOrderItem> items) {
    this.items = items;
  }


  public AutoOrder logs(List<AutoOrderLog> logs) {
    
    this.logs = logs;
    return this;
  }

  public AutoOrder addLogsItem(AutoOrderLog logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Logs associated with this auto order
   * @return logs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Logs associated with this auto order")

  public List<AutoOrderLog> getLogs() {
    return logs;
  }


  public void setLogs(List<AutoOrderLog> logs) {
    this.logs = logs;
  }


  public AutoOrder management(AutoOrderManagement management) {
    
    this.management = management;
    return this;
  }

   /**
   * Get management
   * @return management
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AutoOrderManagement getManagement() {
    return management;
  }


  public void setManagement(AutoOrderManagement management) {
    this.management = management;
  }


  public AutoOrder nextAttempt(String nextAttempt) {
    
    this.nextAttempt = nextAttempt;
    return this;
  }

   /**
   * The next time that the auto order will be attempted for processing
   * @return nextAttempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The next time that the auto order will be attempted for processing")

  public String getNextAttempt() {
    return nextAttempt;
  }


  public void setNextAttempt(String nextAttempt) {
    this.nextAttempt = nextAttempt;
  }


  public AutoOrder originalOrder(Order originalOrder) {
    
    this.originalOrder = originalOrder;
    return this;
  }

   /**
   * Get originalOrder
   * @return originalOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Order getOriginalOrder() {
    return originalOrder;
  }


  public void setOriginalOrder(Order originalOrder) {
    this.originalOrder = originalOrder;
  }


  public AutoOrder originalOrderId(String originalOrderId) {
    
    this.originalOrderId = originalOrderId;
    return this;
  }

   /**
   * The original order id that this auto order is associated with.
   * @return originalOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original order id that this auto order is associated with.")

  public String getOriginalOrderId() {
    return originalOrderId;
  }


  public void setOriginalOrderId(String originalOrderId) {
    this.originalOrderId = originalOrderId;
  }


  public AutoOrder overrideAffiliateId(Integer overrideAffiliateId) {
    
    this.overrideAffiliateId = overrideAffiliateId;
    return this;
  }

   /**
   * Override the affiliate id given credit for rebills of this auto order
   * @return overrideAffiliateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Override the affiliate id given credit for rebills of this auto order")

  public Integer getOverrideAffiliateId() {
    return overrideAffiliateId;
  }


  public void setOverrideAffiliateId(Integer overrideAffiliateId) {
    this.overrideAffiliateId = overrideAffiliateId;
  }


  public AutoOrder rebillOrders(List<Order> rebillOrders) {
    
    this.rebillOrders = rebillOrders;
    return this;
  }

  public AutoOrder addRebillOrdersItem(Order rebillOrdersItem) {
    if (this.rebillOrders == null) {
      this.rebillOrders = new ArrayList<>();
    }
    this.rebillOrders.add(rebillOrdersItem);
    return this;
  }

   /**
   * Rebill orders that have taken place on this auto order
   * @return rebillOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rebill orders that have taken place on this auto order")

  public List<Order> getRebillOrders() {
    return rebillOrders;
  }


  public void setRebillOrders(List<Order> rebillOrders) {
    this.rebillOrders = rebillOrders;
  }


  public AutoOrder rotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
    return this;
  }

   /**
   * The RTG code associated with this order for future rebills
   * @return rotatingTransactionGatewayCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The RTG code associated with this order for future rebills")

  public String getRotatingTransactionGatewayCode() {
    return rotatingTransactionGatewayCode;
  }


  public void setRotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
  }


  public AutoOrder status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the auto order
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the auto order")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoOrder autoOrder = (AutoOrder) o;
    return Objects.equals(this.autoOrderCode, autoOrder.autoOrderCode) &&
        Objects.equals(this.autoOrderOid, autoOrder.autoOrderOid) &&
        Objects.equals(this.cancelAfterNextXOrders, autoOrder.cancelAfterNextXOrders) &&
        Objects.equals(this.cancelDowngrade, autoOrder.cancelDowngrade) &&
        Objects.equals(this.cancelReason, autoOrder.cancelReason) &&
        Objects.equals(this.cancelUpgrade, autoOrder.cancelUpgrade) &&
        Objects.equals(this.canceledByUser, autoOrder.canceledByUser) &&
        Objects.equals(this.canceledDts, autoOrder.canceledDts) &&
        Objects.equals(this.completed, autoOrder.completed) &&
        Objects.equals(this.creditCardAttempt, autoOrder.creditCardAttempt) &&
        Objects.equals(this.disabledDts, autoOrder.disabledDts) &&
        Objects.equals(this.enabled, autoOrder.enabled) &&
        Objects.equals(this.failureReason, autoOrder.failureReason) &&
        Objects.equals(this.items, autoOrder.items) &&
        Objects.equals(this.logs, autoOrder.logs) &&
        Objects.equals(this.management, autoOrder.management) &&
        Objects.equals(this.nextAttempt, autoOrder.nextAttempt) &&
        Objects.equals(this.originalOrder, autoOrder.originalOrder) &&
        Objects.equals(this.originalOrderId, autoOrder.originalOrderId) &&
        Objects.equals(this.overrideAffiliateId, autoOrder.overrideAffiliateId) &&
        Objects.equals(this.rebillOrders, autoOrder.rebillOrders) &&
        Objects.equals(this.rotatingTransactionGatewayCode, autoOrder.rotatingTransactionGatewayCode) &&
        Objects.equals(this.status, autoOrder.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoOrderCode, autoOrderOid, cancelAfterNextXOrders, cancelDowngrade, cancelReason, cancelUpgrade, canceledByUser, canceledDts, completed, creditCardAttempt, disabledDts, enabled, failureReason, items, logs, management, nextAttempt, originalOrder, originalOrderId, overrideAffiliateId, rebillOrders, rotatingTransactionGatewayCode, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoOrder {\n");
    sb.append("    autoOrderCode: ").append(toIndentedString(autoOrderCode)).append("\n");
    sb.append("    autoOrderOid: ").append(toIndentedString(autoOrderOid)).append("\n");
    sb.append("    cancelAfterNextXOrders: ").append(toIndentedString(cancelAfterNextXOrders)).append("\n");
    sb.append("    cancelDowngrade: ").append(toIndentedString(cancelDowngrade)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    cancelUpgrade: ").append(toIndentedString(cancelUpgrade)).append("\n");
    sb.append("    canceledByUser: ").append(toIndentedString(canceledByUser)).append("\n");
    sb.append("    canceledDts: ").append(toIndentedString(canceledDts)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    creditCardAttempt: ").append(toIndentedString(creditCardAttempt)).append("\n");
    sb.append("    disabledDts: ").append(toIndentedString(disabledDts)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    nextAttempt: ").append(toIndentedString(nextAttempt)).append("\n");
    sb.append("    originalOrder: ").append(toIndentedString(originalOrder)).append("\n");
    sb.append("    originalOrderId: ").append(toIndentedString(originalOrderId)).append("\n");
    sb.append("    overrideAffiliateId: ").append(toIndentedString(overrideAffiliateId)).append("\n");
    sb.append("    rebillOrders: ").append(toIndentedString(rebillOrders)).append("\n");
    sb.append("    rotatingTransactionGatewayCode: ").append(toIndentedString(rotatingTransactionGatewayCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_order_code");
    openapiFields.add("auto_order_oid");
    openapiFields.add("cancel_after_next_x_orders");
    openapiFields.add("cancel_downgrade");
    openapiFields.add("cancel_reason");
    openapiFields.add("cancel_upgrade");
    openapiFields.add("canceled_by_user");
    openapiFields.add("canceled_dts");
    openapiFields.add("completed");
    openapiFields.add("credit_card_attempt");
    openapiFields.add("disabled_dts");
    openapiFields.add("enabled");
    openapiFields.add("failure_reason");
    openapiFields.add("items");
    openapiFields.add("logs");
    openapiFields.add("management");
    openapiFields.add("next_attempt");
    openapiFields.add("original_order");
    openapiFields.add("original_order_id");
    openapiFields.add("override_affiliate_id");
    openapiFields.add("rebill_orders");
    openapiFields.add("rotating_transaction_gateway_code");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AutoOrder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AutoOrder.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoOrder is not found in the empty JSON string", AutoOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AutoOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoOrder` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("auto_order_code") != null && !jsonObj.get("auto_order_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_order_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_order_code").toString()));
      }
      if (jsonObj.get("cancel_reason") != null && !jsonObj.get("cancel_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_reason").toString()));
      }
      if (jsonObj.get("canceled_by_user") != null && !jsonObj.get("canceled_by_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_by_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_by_user").toString()));
      }
      if (jsonObj.get("canceled_dts") != null && !jsonObj.get("canceled_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canceled_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canceled_dts").toString()));
      }
      if (jsonObj.get("disabled_dts") != null && !jsonObj.get("disabled_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabled_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabled_dts").toString()));
      }
      if (jsonObj.get("failure_reason") != null && !jsonObj.get("failure_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_reason").toString()));
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          AutoOrderItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
      if (jsonArraylogs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("logs").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
        }

        // validate the optional field `logs` (array)
        for (int i = 0; i < jsonArraylogs.size(); i++) {
          AutoOrderLog.validateJsonObject(jsonArraylogs.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `management`
      if (jsonObj.getAsJsonObject("management") != null) {
        AutoOrderManagement.validateJsonObject(jsonObj.getAsJsonObject("management"));
      }
      if (jsonObj.get("next_attempt") != null && !jsonObj.get("next_attempt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_attempt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_attempt").toString()));
      }
      // validate the optional field `original_order`
      if (jsonObj.getAsJsonObject("original_order") != null) {
        Order.validateJsonObject(jsonObj.getAsJsonObject("original_order"));
      }
      if (jsonObj.get("original_order_id") != null && !jsonObj.get("original_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_order_id").toString()));
      }
      JsonArray jsonArrayrebillOrders = jsonObj.getAsJsonArray("rebill_orders");
      if (jsonArrayrebillOrders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("rebill_orders").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `rebill_orders` to be an array in the JSON string but got `%s`", jsonObj.get("rebill_orders").toString()));
        }

        // validate the optional field `rebill_orders` (array)
        for (int i = 0; i < jsonArrayrebillOrders.size(); i++) {
          Order.validateJsonObject(jsonArrayrebillOrders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("rotating_transaction_gateway_code") != null && !jsonObj.get("rotating_transaction_gateway_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotating_transaction_gateway_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotating_transaction_gateway_code").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoOrder>() {
           @Override
           public void write(JsonWriter out, AutoOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoOrder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AutoOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AutoOrder
  * @throws IOException if the JSON string is invalid with respect to AutoOrder
  */
  public static AutoOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoOrder.class);
  }

 /**
  * Convert an instance of AutoOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


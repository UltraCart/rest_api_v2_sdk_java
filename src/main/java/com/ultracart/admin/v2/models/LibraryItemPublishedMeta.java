/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * LibraryItemPublishedMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-21T17:03:04.149-05:00[America/Indianapolis]")
public class LibraryItemPublishedMeta {
  public static final String SERIALIZED_NAME_COUNT_OF_VERSIONS = "count_of_versions";
  @SerializedName(SERIALIZED_NAME_COUNT_OF_VERSIONS)
  private Integer countOfVersions;

  public static final String SERIALIZED_NAME_LIBRARY_ITEM_PUBLISHED_OID = "library_item_published_oid";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEM_PUBLISHED_OID)
  private Integer libraryItemPublishedOid;

  public static final String SERIALIZED_NAME_LIBRARY_ITEM_REVIEW_OID = "library_item_review_oid";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEM_REVIEW_OID)
  private Integer libraryItemReviewOid;

  public static final String SERIALIZED_NAME_REJECTED = "rejected";
  @SerializedName(SERIALIZED_NAME_REJECTED)
  private Boolean rejected;

  public static final String SERIALIZED_NAME_REJECTED_REASON = "rejected_reason";
  @SerializedName(SERIALIZED_NAME_REJECTED_REASON)
  private String rejectedReason;

  public static final String SERIALIZED_NAME_RELEASE_VERSION = "release_version";
  @SerializedName(SERIALIZED_NAME_RELEASE_VERSION)
  private Integer releaseVersion;

  public static final String SERIALIZED_NAME_REVIEW_VERSION = "review_version";
  @SerializedName(SERIALIZED_NAME_REVIEW_VERSION)
  private Integer reviewVersion;

  public static final String SERIALIZED_NAME_UNDER_REVIEW = "under_review";
  @SerializedName(SERIALIZED_NAME_UNDER_REVIEW)
  private Boolean underReview;

  public LibraryItemPublishedMeta() { 
  }

  public LibraryItemPublishedMeta countOfVersions(Integer countOfVersions) {
    
    this.countOfVersions = countOfVersions;
    return this;
  }

   /**
   * The number of published versions a source item has, or zero if this item is not a source or is private
   * @return countOfVersions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of published versions a source item has, or zero if this item is not a source or is private")

  public Integer getCountOfVersions() {
    return countOfVersions;
  }


  public void setCountOfVersions(Integer countOfVersions) {
    this.countOfVersions = countOfVersions;
  }


  public LibraryItemPublishedMeta libraryItemPublishedOid(Integer libraryItemPublishedOid) {
    
    this.libraryItemPublishedOid = libraryItemPublishedOid;
    return this;
  }

   /**
   * The oid pointing to the most recent published version, or zero if this is not a published source item.
   * @return libraryItemPublishedOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The oid pointing to the most recent published version, or zero if this is not a published source item.")

  public Integer getLibraryItemPublishedOid() {
    return libraryItemPublishedOid;
  }


  public void setLibraryItemPublishedOid(Integer libraryItemPublishedOid) {
    this.libraryItemPublishedOid = libraryItemPublishedOid;
  }


  public LibraryItemPublishedMeta libraryItemReviewOid(Integer libraryItemReviewOid) {
    
    this.libraryItemReviewOid = libraryItemReviewOid;
    return this;
  }

   /**
   * The oid pointing to the review data if this is a source library item and currently under review
   * @return libraryItemReviewOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The oid pointing to the review data if this is a source library item and currently under review")

  public Integer getLibraryItemReviewOid() {
    return libraryItemReviewOid;
  }


  public void setLibraryItemReviewOid(Integer libraryItemReviewOid) {
    this.libraryItemReviewOid = libraryItemReviewOid;
  }


  public LibraryItemPublishedMeta rejected(Boolean rejected) {
    
    this.rejected = rejected;
    return this;
  }

   /**
   * True if this is a source item and is under review and was rejected.
   * @return rejected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this is a source item and is under review and was rejected.")

  public Boolean getRejected() {
    return rejected;
  }


  public void setRejected(Boolean rejected) {
    this.rejected = rejected;
  }


  public LibraryItemPublishedMeta rejectedReason(String rejectedReason) {
    
    this.rejectedReason = rejectedReason;
    return this;
  }

   /**
   * The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.
   * @return rejectedReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reason for rejection if this item is a source item, is under review, and was rejected.  For all other cases, this value will be null or missing.")

  public String getRejectedReason() {
    return rejectedReason;
  }


  public void setRejectedReason(String rejectedReason) {
    this.rejectedReason = rejectedReason;
  }


  public LibraryItemPublishedMeta releaseVersion(Integer releaseVersion) {
    
    this.releaseVersion = releaseVersion;
    return this;
  }

   /**
   * If this library item is a source item and it is published, this is the most recent release version number
   * @return releaseVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this library item is a source item and it is published, this is the most recent release version number")

  public Integer getReleaseVersion() {
    return releaseVersion;
  }


  public void setReleaseVersion(Integer releaseVersion) {
    this.releaseVersion = releaseVersion;
  }


  public LibraryItemPublishedMeta reviewVersion(Integer reviewVersion) {
    
    this.reviewVersion = reviewVersion;
    return this;
  }

   /**
   * If this library item is a source item and has a published item currently under review, this is that version number
   * @return reviewVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this library item is a source item and has a published item currently under review, this is that version number")

  public Integer getReviewVersion() {
    return reviewVersion;
  }


  public void setReviewVersion(Integer reviewVersion) {
    this.reviewVersion = reviewVersion;
  }


  public LibraryItemPublishedMeta underReview(Boolean underReview) {
    
    this.underReview = underReview;
    return this;
  }

   /**
   * True if this library item is a source item and is currently under review
   * @return underReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this library item is a source item and is currently under review")

  public Boolean getUnderReview() {
    return underReview;
  }


  public void setUnderReview(Boolean underReview) {
    this.underReview = underReview;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryItemPublishedMeta libraryItemPublishedMeta = (LibraryItemPublishedMeta) o;
    return Objects.equals(this.countOfVersions, libraryItemPublishedMeta.countOfVersions) &&
        Objects.equals(this.libraryItemPublishedOid, libraryItemPublishedMeta.libraryItemPublishedOid) &&
        Objects.equals(this.libraryItemReviewOid, libraryItemPublishedMeta.libraryItemReviewOid) &&
        Objects.equals(this.rejected, libraryItemPublishedMeta.rejected) &&
        Objects.equals(this.rejectedReason, libraryItemPublishedMeta.rejectedReason) &&
        Objects.equals(this.releaseVersion, libraryItemPublishedMeta.releaseVersion) &&
        Objects.equals(this.reviewVersion, libraryItemPublishedMeta.reviewVersion) &&
        Objects.equals(this.underReview, libraryItemPublishedMeta.underReview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countOfVersions, libraryItemPublishedOid, libraryItemReviewOid, rejected, rejectedReason, releaseVersion, reviewVersion, underReview);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryItemPublishedMeta {\n");
    sb.append("    countOfVersions: ").append(toIndentedString(countOfVersions)).append("\n");
    sb.append("    libraryItemPublishedOid: ").append(toIndentedString(libraryItemPublishedOid)).append("\n");
    sb.append("    libraryItemReviewOid: ").append(toIndentedString(libraryItemReviewOid)).append("\n");
    sb.append("    rejected: ").append(toIndentedString(rejected)).append("\n");
    sb.append("    rejectedReason: ").append(toIndentedString(rejectedReason)).append("\n");
    sb.append("    releaseVersion: ").append(toIndentedString(releaseVersion)).append("\n");
    sb.append("    reviewVersion: ").append(toIndentedString(reviewVersion)).append("\n");
    sb.append("    underReview: ").append(toIndentedString(underReview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count_of_versions");
    openapiFields.add("library_item_published_oid");
    openapiFields.add("library_item_review_oid");
    openapiFields.add("rejected");
    openapiFields.add("rejected_reason");
    openapiFields.add("release_version");
    openapiFields.add("review_version");
    openapiFields.add("under_review");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LibraryItemPublishedMeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LibraryItemPublishedMeta.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryItemPublishedMeta is not found in the empty JSON string", LibraryItemPublishedMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LibraryItemPublishedMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryItemPublishedMeta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("rejected_reason") != null && !jsonObj.get("rejected_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejected_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejected_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryItemPublishedMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryItemPublishedMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryItemPublishedMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryItemPublishedMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryItemPublishedMeta>() {
           @Override
           public void write(JsonWriter out, LibraryItemPublishedMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryItemPublishedMeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LibraryItemPublishedMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LibraryItemPublishedMeta
  * @throws IOException if the JSON string is invalid with respect to LibraryItemPublishedMeta
  */
  public static LibraryItemPublishedMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryItemPublishedMeta.class);
  }

 /**
  * Convert an instance of LibraryItemPublishedMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


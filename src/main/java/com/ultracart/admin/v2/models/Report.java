/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSource;
import com.ultracart.admin.v2.models.ReportFilter;
import com.ultracart.admin.v2.models.ReportPage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T14:46:06.786-04:00[America/Indianapolis]")
public class Report {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_DATA_SOURCES = "data_sources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List<ReportDataSource> dataSources = null;

  public static final String SERIALIZED_NAME_DEFAULT_DATASET_ID = "default_dataset_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DATASET_ID)
  private String defaultDatasetId;

  public static final String SERIALIZED_NAME_DEFAULT_PROJECT_ID = "default_project_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROJECT_ID)
  private String defaultProjectId;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ReportFilter> filters = null;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<ReportPage> pages = null;

  public static final String SERIALIZED_NAME_REPORT_OID = "report_oid";
  @SerializedName(SERIALIZED_NAME_REPORT_OID)
  private Integer reportOid;

  /**
   * Security level to execute report under
   */
  @JsonAdapter(SecurityLevelEnum.Adapter.class)
  public enum SecurityLevelEnum {
    STANDARD("standard"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    SecurityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityLevelEnum fromValue(String value) {
      for (SecurityLevelEnum b : SecurityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecurityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecurityLevelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECURITY_LEVEL = "security_level";
  @SerializedName(SERIALIZED_NAME_SECURITY_LEVEL)
  private SecurityLevelEnum securityLevel;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private String settings;

  public Report() { 
  }

  public Report active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Report dataSources(List<ReportDataSource> dataSources) {
    
    this.dataSources = dataSources;
    return this;
  }

  public Report addDataSourcesItem(ReportDataSource dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

   /**
   * Get dataSources
   * @return dataSources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportDataSource> getDataSources() {
    return dataSources;
  }


  public void setDataSources(List<ReportDataSource> dataSources) {
    this.dataSources = dataSources;
  }


  public Report defaultDatasetId(String defaultDatasetId) {
    
    this.defaultDatasetId = defaultDatasetId;
    return this;
  }

   /**
   * Get defaultDatasetId
   * @return defaultDatasetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultDatasetId() {
    return defaultDatasetId;
  }


  public void setDefaultDatasetId(String defaultDatasetId) {
    this.defaultDatasetId = defaultDatasetId;
  }


  public Report defaultProjectId(String defaultProjectId) {
    
    this.defaultProjectId = defaultProjectId;
    return this;
  }

   /**
   * Get defaultProjectId
   * @return defaultProjectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDefaultProjectId() {
    return defaultProjectId;
  }


  public void setDefaultProjectId(String defaultProjectId) {
    this.defaultProjectId = defaultProjectId;
  }


  public Report filters(List<ReportFilter> filters) {
    
    this.filters = filters;
    return this;
  }

  public Report addFiltersItem(ReportFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportFilter> getFilters() {
    return filters;
  }


  public void setFilters(List<ReportFilter> filters) {
    this.filters = filters;
  }


  public Report merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Report name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Report pages(List<ReportPage> pages) {
    
    this.pages = pages;
    return this;
  }

  public Report addPagesItem(ReportPage pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportPage> getPages() {
    return pages;
  }


  public void setPages(List<ReportPage> pages) {
    this.pages = pages;
  }


  public Report reportOid(Integer reportOid) {
    
    this.reportOid = reportOid;
    return this;
  }

   /**
   * Object identifier for this report.
   * @return reportOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object identifier for this report.")

  public Integer getReportOid() {
    return reportOid;
  }


  public void setReportOid(Integer reportOid) {
    this.reportOid = reportOid;
  }


  public Report securityLevel(SecurityLevelEnum securityLevel) {
    
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Security level to execute report under
   * @return securityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security level to execute report under")

  public SecurityLevelEnum getSecurityLevel() {
    return securityLevel;
  }


  public void setSecurityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
  }


  public Report settings(String settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * A JSON representation of the settings for this report
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON representation of the settings for this report")

  public String getSettings() {
    return settings;
  }


  public void setSettings(String settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.active, report.active) &&
        Objects.equals(this.dataSources, report.dataSources) &&
        Objects.equals(this.defaultDatasetId, report.defaultDatasetId) &&
        Objects.equals(this.defaultProjectId, report.defaultProjectId) &&
        Objects.equals(this.filters, report.filters) &&
        Objects.equals(this.merchantId, report.merchantId) &&
        Objects.equals(this.name, report.name) &&
        Objects.equals(this.pages, report.pages) &&
        Objects.equals(this.reportOid, report.reportOid) &&
        Objects.equals(this.securityLevel, report.securityLevel) &&
        Objects.equals(this.settings, report.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, dataSources, defaultDatasetId, defaultProjectId, filters, merchantId, name, pages, reportOid, securityLevel, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    defaultDatasetId: ").append(toIndentedString(defaultDatasetId)).append("\n");
    sb.append("    defaultProjectId: ").append(toIndentedString(defaultProjectId)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    reportOid: ").append(toIndentedString(reportOid)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("data_sources");
    openapiFields.add("default_dataset_id");
    openapiFields.add("default_project_id");
    openapiFields.add("filters");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("pages");
    openapiFields.add("report_oid");
    openapiFields.add("security_level");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Report
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Report.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Report is not found in the empty JSON string", Report.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Report.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Report` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydataSources = jsonObj.getAsJsonArray("data_sources");
      if (jsonArraydataSources != null) {
        // ensure the json data is an array
        if (!jsonObj.get("data_sources").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `data_sources` to be an array in the JSON string but got `%s`", jsonObj.get("data_sources").toString()));
        }

        // validate the optional field `data_sources` (array)
        for (int i = 0; i < jsonArraydataSources.size(); i++) {
          ReportDataSource.validateJsonObject(jsonArraydataSources.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("default_dataset_id") != null && !jsonObj.get("default_dataset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_dataset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_dataset_id").toString()));
      }
      if (jsonObj.get("default_project_id") != null && !jsonObj.get("default_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_project_id").toString()));
      }
      JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
      if (jsonArrayfilters != null) {
        // ensure the json data is an array
        if (!jsonObj.get("filters").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
        }

        // validate the optional field `filters` (array)
        for (int i = 0; i < jsonArrayfilters.size(); i++) {
          ReportFilter.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArraypages = jsonObj.getAsJsonArray("pages");
      if (jsonArraypages != null) {
        // ensure the json data is an array
        if (!jsonObj.get("pages").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
        }

        // validate the optional field `pages` (array)
        for (int i = 0; i < jsonArraypages.size(); i++) {
          ReportPage.validateJsonObject(jsonArraypages.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("security_level") != null && !jsonObj.get("security_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_level").toString()));
      }
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Report.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Report' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Report> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Report.class));

       return (TypeAdapter<T>) new TypeAdapter<Report>() {
           @Override
           public void write(JsonWriter out, Report value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Report read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Report given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Report
  * @throws IOException if the JSON string is invalid with respect to Report
  */
  public static Report fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Report.class);
  }

 /**
  * Convert an instance of Report to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


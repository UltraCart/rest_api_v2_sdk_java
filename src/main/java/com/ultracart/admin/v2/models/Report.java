/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSource;
import com.ultracart.admin.v2.models.ReportFilter;
import com.ultracart.admin.v2.models.ReportPage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Report
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-03-07T01:40:29.758-05:00")



public class Report {
  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("data_sources")
  private List<ReportDataSource> dataSources = null;

  @SerializedName("default_dataset_id")
  private String defaultDatasetId = null;

  @SerializedName("default_project_id")
  private String defaultProjectId = null;

  @SerializedName("filters")
  private List<ReportFilter> filters = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("pages")
  private List<ReportPage> pages = null;

  @SerializedName("report_oid")
  private Integer reportOid = null;

  /**
   * Security level to execute report under
   */
  @JsonAdapter(SecurityLevelEnum.Adapter.class)
  public enum SecurityLevelEnum {
    STANDARD("standard"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    SecurityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityLevelEnum fromValue(String text) {
      for (SecurityLevelEnum b : SecurityLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SecurityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SecurityLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("security_level")
  private SecurityLevelEnum securityLevel = null;

  @SerializedName("settings")
  private String settings = null;

  public Report active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @ApiModelProperty(value = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Report dataSources(List<ReportDataSource> dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  public Report addDataSourcesItem(ReportDataSource dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<ReportDataSource>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

   /**
   * Get dataSources
   * @return dataSources
  **/
  @ApiModelProperty(value = "")
  public List<ReportDataSource> getDataSources() {
    return dataSources;
  }

  public void setDataSources(List<ReportDataSource> dataSources) {
    this.dataSources = dataSources;
  }

  public Report defaultDatasetId(String defaultDatasetId) {
    this.defaultDatasetId = defaultDatasetId;
    return this;
  }

   /**
   * Get defaultDatasetId
   * @return defaultDatasetId
  **/
  @ApiModelProperty(value = "")
  public String getDefaultDatasetId() {
    return defaultDatasetId;
  }

  public void setDefaultDatasetId(String defaultDatasetId) {
    this.defaultDatasetId = defaultDatasetId;
  }

  public Report defaultProjectId(String defaultProjectId) {
    this.defaultProjectId = defaultProjectId;
    return this;
  }

   /**
   * Get defaultProjectId
   * @return defaultProjectId
  **/
  @ApiModelProperty(value = "")
  public String getDefaultProjectId() {
    return defaultProjectId;
  }

  public void setDefaultProjectId(String defaultProjectId) {
    this.defaultProjectId = defaultProjectId;
  }

  public Report filters(List<ReportFilter> filters) {
    this.filters = filters;
    return this;
  }

  public Report addFiltersItem(ReportFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<ReportFilter>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @ApiModelProperty(value = "")
  public List<ReportFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<ReportFilter> filters) {
    this.filters = filters;
  }

  public Report merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @ApiModelProperty(value = "")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public Report name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Report pages(List<ReportPage> pages) {
    this.pages = pages;
    return this;
  }

  public Report addPagesItem(ReportPage pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<ReportPage>();
    }
    this.pages.add(pagesItem);
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @ApiModelProperty(value = "")
  public List<ReportPage> getPages() {
    return pages;
  }

  public void setPages(List<ReportPage> pages) {
    this.pages = pages;
  }

  public Report reportOid(Integer reportOid) {
    this.reportOid = reportOid;
    return this;
  }

   /**
   * Object identifier for this report.
   * @return reportOid
  **/
  @ApiModelProperty(value = "Object identifier for this report.")
  public Integer getReportOid() {
    return reportOid;
  }

  public void setReportOid(Integer reportOid) {
    this.reportOid = reportOid;
  }

  public Report securityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Security level to execute report under
   * @return securityLevel
  **/
  @ApiModelProperty(value = "Security level to execute report under")
  public SecurityLevelEnum getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
  }

  public Report settings(String settings) {
    this.settings = settings;
    return this;
  }

   /**
   * A JSON representation of the settings for this report
   * @return settings
  **/
  @ApiModelProperty(value = "A JSON representation of the settings for this report")
  public String getSettings() {
    return settings;
  }

  public void setSettings(String settings) {
    this.settings = settings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Report report = (Report) o;
    return Objects.equals(this.active, report.active) &&
        Objects.equals(this.dataSources, report.dataSources) &&
        Objects.equals(this.defaultDatasetId, report.defaultDatasetId) &&
        Objects.equals(this.defaultProjectId, report.defaultProjectId) &&
        Objects.equals(this.filters, report.filters) &&
        Objects.equals(this.merchantId, report.merchantId) &&
        Objects.equals(this.name, report.name) &&
        Objects.equals(this.pages, report.pages) &&
        Objects.equals(this.reportOid, report.reportOid) &&
        Objects.equals(this.securityLevel, report.securityLevel) &&
        Objects.equals(this.settings, report.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, dataSources, defaultDatasetId, defaultProjectId, filters, merchantId, name, pages, reportOid, securityLevel, settings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Report {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    defaultDatasetId: ").append(toIndentedString(defaultDatasetId)).append("\n");
    sb.append("    defaultProjectId: ").append(toIndentedString(defaultProjectId)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    reportOid: ").append(toIndentedString(reportOid)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


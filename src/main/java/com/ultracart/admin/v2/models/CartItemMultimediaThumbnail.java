/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * CartItemMultimediaThumbnail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-25T05:35:08.069-04:00")



public class CartItemMultimediaThumbnail {
  @SerializedName("height")
  private Integer height = null;

  @SerializedName("png")
  private Boolean png = null;

  @SerializedName("square")
  private Boolean square = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("width")
  private Integer width = null;

  public CartItemMultimediaThumbnail height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * Height in pixels
   * @return height
  **/
  @ApiModelProperty(value = "Height in pixels")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public CartItemMultimediaThumbnail png(Boolean png) {
    this.png = png;
    return this;
  }

   /**
   * True if thumbnail is a PNG, otherwise its a JPEG
   * @return png
  **/
  @ApiModelProperty(value = "True if thumbnail is a PNG, otherwise its a JPEG")
  public Boolean isPng() {
    return png;
  }

  public void setPng(Boolean png) {
    this.png = png;
  }

  public CartItemMultimediaThumbnail square(Boolean square) {
    this.square = square;
    return this;
  }

   /**
   * True if the thumbnail is square
   * @return square
  **/
  @ApiModelProperty(value = "True if the thumbnail is square")
  public Boolean isSquare() {
    return square;
  }

  public void setSquare(Boolean square) {
    this.square = square;
  }

  public CartItemMultimediaThumbnail url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL for the thumbnail
   * @return url
  **/
  @ApiModelProperty(value = "URL for the thumbnail")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public CartItemMultimediaThumbnail width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Width in pixels
   * @return width
  **/
  @ApiModelProperty(value = "Width in pixels")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItemMultimediaThumbnail cartItemMultimediaThumbnail = (CartItemMultimediaThumbnail) o;
    return Objects.equals(this.height, cartItemMultimediaThumbnail.height) &&
        Objects.equals(this.png, cartItemMultimediaThumbnail.png) &&
        Objects.equals(this.square, cartItemMultimediaThumbnail.square) &&
        Objects.equals(this.url, cartItemMultimediaThumbnail.url) &&
        Objects.equals(this.width, cartItemMultimediaThumbnail.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, png, square, url, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItemMultimediaThumbnail {\n");
    
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    png: ").append(toIndentedString(png)).append("\n");
    sb.append("    square: ").append(toIndentedString(square)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderCurrentStageHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T16:39:13.797-04:00[America/Indianapolis]")
public class OrderCurrentStageHistory {
  /**
   * New stage that the order is in.
   */
  @JsonAdapter(AfterStageEnum.Adapter.class)
  public enum AfterStageEnum {
    ACCOUNTS_RECEIVABLE("Accounts Receivable"),
    
    PENDING_CLEARANCE("Pending Clearance"),
    
    FRAUD_REVIEW("Fraud Review"),
    
    REJECTED("Rejected"),
    
    SHIPPING_DEPARTMENT("Shipping Department"),
    
    COMPLETED_ORDER("Completed Order"),
    
    QUOTE_REQUEST("Quote Request"),
    
    QUOTE_SENT("Quote Sent"),
    
    LEAST_COST_ROUTING("Least Cost Routing"),
    
    UNKNOWN("Unknown"),
    
    PRE_ORDERED("Pre-ordered"),
    
    ADVANCED_ORDER_ROUTING("Advanced Order Routing"),
    
    HOLD("Hold");

    private String value;

    AfterStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AfterStageEnum fromValue(String value) {
      for (AfterStageEnum b : AfterStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AfterStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AfterStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AfterStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AfterStageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AFTER_STAGE = "after_stage";
  @SerializedName(SERIALIZED_NAME_AFTER_STAGE)
  private AfterStageEnum afterStage;

  /**
   * Previous stage that the order was in.
   */
  @JsonAdapter(BeforeStageEnum.Adapter.class)
  public enum BeforeStageEnum {
    ACCOUNTS_RECEIVABLE("Accounts Receivable"),
    
    PENDING_CLEARANCE("Pending Clearance"),
    
    FRAUD_REVIEW("Fraud Review"),
    
    REJECTED("Rejected"),
    
    SHIPPING_DEPARTMENT("Shipping Department"),
    
    COMPLETED_ORDER("Completed Order"),
    
    QUOTE_REQUEST("Quote Request"),
    
    QUOTE_SENT("Quote Sent"),
    
    LEAST_COST_ROUTING("Least Cost Routing"),
    
    UNKNOWN("Unknown"),
    
    PRE_ORDERED("Pre-ordered"),
    
    ADVANCED_ORDER_ROUTING("Advanced Order Routing"),
    
    HOLD("Hold");

    private String value;

    BeforeStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BeforeStageEnum fromValue(String value) {
      for (BeforeStageEnum b : BeforeStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BeforeStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BeforeStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BeforeStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BeforeStageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BEFORE_STAGE = "before_stage";
  @SerializedName(SERIALIZED_NAME_BEFORE_STAGE)
  private BeforeStageEnum beforeStage;

  public static final String SERIALIZED_NAME_TRANSITION_DTS = "transition_dts";
  @SerializedName(SERIALIZED_NAME_TRANSITION_DTS)
  private String transitionDts;

  public OrderCurrentStageHistory() { 
  }

  public OrderCurrentStageHistory afterStage(AfterStageEnum afterStage) {
    
    this.afterStage = afterStage;
    return this;
  }

   /**
   * New stage that the order is in.
   * @return afterStage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "New stage that the order is in.")

  public AfterStageEnum getAfterStage() {
    return afterStage;
  }


  public void setAfterStage(AfterStageEnum afterStage) {
    this.afterStage = afterStage;
  }


  public OrderCurrentStageHistory beforeStage(BeforeStageEnum beforeStage) {
    
    this.beforeStage = beforeStage;
    return this;
  }

   /**
   * Previous stage that the order was in.
   * @return beforeStage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Previous stage that the order was in.")

  public BeforeStageEnum getBeforeStage() {
    return beforeStage;
  }


  public void setBeforeStage(BeforeStageEnum beforeStage) {
    this.beforeStage = beforeStage;
  }


  public OrderCurrentStageHistory transitionDts(String transitionDts) {
    
    this.transitionDts = transitionDts;
    return this;
  }

   /**
   * Date/time that the stage transitioned
   * @return transitionDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the stage transitioned")

  public String getTransitionDts() {
    return transitionDts;
  }


  public void setTransitionDts(String transitionDts) {
    this.transitionDts = transitionDts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCurrentStageHistory orderCurrentStageHistory = (OrderCurrentStageHistory) o;
    return Objects.equals(this.afterStage, orderCurrentStageHistory.afterStage) &&
        Objects.equals(this.beforeStage, orderCurrentStageHistory.beforeStage) &&
        Objects.equals(this.transitionDts, orderCurrentStageHistory.transitionDts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterStage, beforeStage, transitionDts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCurrentStageHistory {\n");
    sb.append("    afterStage: ").append(toIndentedString(afterStage)).append("\n");
    sb.append("    beforeStage: ").append(toIndentedString(beforeStage)).append("\n");
    sb.append("    transitionDts: ").append(toIndentedString(transitionDts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("after_stage");
    openapiFields.add("before_stage");
    openapiFields.add("transition_dts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderCurrentStageHistory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderCurrentStageHistory.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCurrentStageHistory is not found in the empty JSON string", OrderCurrentStageHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderCurrentStageHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCurrentStageHistory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("after_stage") != null && !jsonObj.get("after_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_stage").toString()));
      }
      if (jsonObj.get("before_stage") != null && !jsonObj.get("before_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `before_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("before_stage").toString()));
      }
      if (jsonObj.get("transition_dts") != null && !jsonObj.get("transition_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transition_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transition_dts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCurrentStageHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCurrentStageHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCurrentStageHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCurrentStageHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCurrentStageHistory>() {
           @Override
           public void write(JsonWriter out, OrderCurrentStageHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCurrentStageHistory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderCurrentStageHistory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderCurrentStageHistory
  * @throws IOException if the JSON string is invalid with respect to OrderCurrentStageHistory
  */
  public static OrderCurrentStageHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCurrentStageHistory.class);
  }

 /**
  * Convert an instance of OrderCurrentStageHistory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


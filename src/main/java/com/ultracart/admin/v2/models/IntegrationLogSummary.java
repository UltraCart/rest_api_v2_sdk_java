/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * IntegrationLogSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-17T14:45:06.636-04:00[America/Indianapolis]")
public class IntegrationLogSummary {
  public static final String SERIALIZED_NAME_CRITICAL = "critical";
  @SerializedName(SERIALIZED_NAME_CRITICAL)
  private Integer critical;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Integer error;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Integer events;

  public static final String SERIALIZED_NAME_LOG_TYPE = "log_type";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  private String logType;

  public static final String SERIALIZED_NAME_LOGGER_ID = "logger_id";
  @SerializedName(SERIALIZED_NAME_LOGGER_ID)
  private String loggerId;

  public static final String SERIALIZED_NAME_LOGGER_NAME = "logger_name";
  @SerializedName(SERIALIZED_NAME_LOGGER_NAME)
  private String loggerName;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Integer success;

  public static final String SERIALIZED_NAME_VIEW_URL = "view_url";
  @SerializedName(SERIALIZED_NAME_VIEW_URL)
  private String viewUrl;

  public static final String SERIALIZED_NAME_WARNING = "warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private Integer warning;

  public IntegrationLogSummary() { 
  }

  public IntegrationLogSummary critical(Integer critical) {
    
    this.critical = critical;
    return this;
  }

   /**
   * Get critical
   * @return critical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCritical() {
    return critical;
  }


  public void setCritical(Integer critical) {
    this.critical = critical;
  }


  public IntegrationLogSummary error(Integer error) {
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getError() {
    return error;
  }


  public void setError(Integer error) {
    this.error = error;
  }


  public IntegrationLogSummary events(Integer events) {
    
    this.events = events;
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getEvents() {
    return events;
  }


  public void setEvents(Integer events) {
    this.events = events;
  }


  public IntegrationLogSummary logType(String logType) {
    
    this.logType = logType;
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogType() {
    return logType;
  }


  public void setLogType(String logType) {
    this.logType = logType;
  }


  public IntegrationLogSummary loggerId(String loggerId) {
    
    this.loggerId = loggerId;
    return this;
  }

   /**
   * Get loggerId
   * @return loggerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoggerId() {
    return loggerId;
  }


  public void setLoggerId(String loggerId) {
    this.loggerId = loggerId;
  }


  public IntegrationLogSummary loggerName(String loggerName) {
    
    this.loggerName = loggerName;
    return this;
  }

   /**
   * Get loggerName
   * @return loggerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoggerName() {
    return loggerName;
  }


  public void setLoggerName(String loggerName) {
    this.loggerName = loggerName;
  }


  public IntegrationLogSummary success(Integer success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSuccess() {
    return success;
  }


  public void setSuccess(Integer success) {
    this.success = success;
  }


  public IntegrationLogSummary viewUrl(String viewUrl) {
    
    this.viewUrl = viewUrl;
    return this;
  }

   /**
   * Get viewUrl
   * @return viewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getViewUrl() {
    return viewUrl;
  }


  public void setViewUrl(String viewUrl) {
    this.viewUrl = viewUrl;
  }


  public IntegrationLogSummary warning(Integer warning) {
    
    this.warning = warning;
    return this;
  }

   /**
   * Get warning
   * @return warning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWarning() {
    return warning;
  }


  public void setWarning(Integer warning) {
    this.warning = warning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationLogSummary integrationLogSummary = (IntegrationLogSummary) o;
    return Objects.equals(this.critical, integrationLogSummary.critical) &&
        Objects.equals(this.error, integrationLogSummary.error) &&
        Objects.equals(this.events, integrationLogSummary.events) &&
        Objects.equals(this.logType, integrationLogSummary.logType) &&
        Objects.equals(this.loggerId, integrationLogSummary.loggerId) &&
        Objects.equals(this.loggerName, integrationLogSummary.loggerName) &&
        Objects.equals(this.success, integrationLogSummary.success) &&
        Objects.equals(this.viewUrl, integrationLogSummary.viewUrl) &&
        Objects.equals(this.warning, integrationLogSummary.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(critical, error, events, logType, loggerId, loggerName, success, viewUrl, warning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationLogSummary {\n");
    sb.append("    critical: ").append(toIndentedString(critical)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    loggerId: ").append(toIndentedString(loggerId)).append("\n");
    sb.append("    loggerName: ").append(toIndentedString(loggerName)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    viewUrl: ").append(toIndentedString(viewUrl)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("critical");
    openapiFields.add("error");
    openapiFields.add("events");
    openapiFields.add("log_type");
    openapiFields.add("logger_id");
    openapiFields.add("logger_name");
    openapiFields.add("success");
    openapiFields.add("view_url");
    openapiFields.add("warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationLogSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IntegrationLogSummary.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationLogSummary is not found in the empty JSON string", IntegrationLogSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IntegrationLogSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationLogSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("log_type") != null && !jsonObj.get("log_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_type").toString()));
      }
      if (jsonObj.get("logger_id") != null && !jsonObj.get("logger_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger_id").toString()));
      }
      if (jsonObj.get("logger_name") != null && !jsonObj.get("logger_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger_name").toString()));
      }
      if (jsonObj.get("view_url") != null && !jsonObj.get("view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationLogSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationLogSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationLogSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationLogSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationLogSummary>() {
           @Override
           public void write(JsonWriter out, IntegrationLogSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationLogSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationLogSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationLogSummary
  * @throws IOException if the JSON string is invalid with respect to IntegrationLogSummary
  */
  public static IntegrationLogSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationLogSummary.class);
  }

 /**
  * Convert an instance of IntegrationLogSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


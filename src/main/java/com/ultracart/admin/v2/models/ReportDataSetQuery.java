/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetQueryOrderByColumn;
import com.ultracart.admin.v2.models.ReportDataSource;
import com.ultracart.admin.v2.models.ReportFilter;
import com.ultracart.admin.v2.models.ReportPageVisualizationDimension;
import com.ultracart.admin.v2.models.ReportPageVisualizationMetric;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSetQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-20T07:35:27.732-05:00[America/Indianapolis]")
public class ReportDataSetQuery {
  public static final String SERIALIZED_NAME_COMPARISON_RESULTS = "comparison_results";
  @SerializedName(SERIALIZED_NAME_COMPARISON_RESULTS)
  private Boolean comparisonResults;

  public static final String SERIALIZED_NAME_DATA_SET_QUERY_UUID = "data_set_query_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_SET_QUERY_UUID)
  private String dataSetQueryUuid;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private ReportDataSource dataSource;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<ReportPageVisualizationDimension> dimensions = null;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private ReportFilter filter;

  public static final String SERIALIZED_NAME_FOR_OBJECT_ID = "for_object_id";
  @SerializedName(SERIALIZED_NAME_FOR_OBJECT_ID)
  private String forObjectId;

  /**
   * The type of object this data set is for
   */
  @JsonAdapter(ForObjectTypeEnum.Adapter.class)
  public enum ForObjectTypeEnum {
    SCHEMA("schema"),
    
    FILTER("filter"),
    
    VISUALIZATION("visualization");

    private String value;

    ForObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForObjectTypeEnum fromValue(String value) {
      for (ForObjectTypeEnum b : ForObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForObjectTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FOR_OBJECT_TYPE = "for_object_type";
  @SerializedName(SERIALIZED_NAME_FOR_OBJECT_TYPE)
  private ForObjectTypeEnum forObjectType;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<ReportPageVisualizationMetric> metrics = null;

  public static final String SERIALIZED_NAME_ORDER_BY_COLUMNS = "order_by_columns";
  @SerializedName(SERIALIZED_NAME_ORDER_BY_COLUMNS)
  private List<ReportDataSetQueryOrderByColumn> orderByColumns = null;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_SELECTED_FILTERS = "selected_filters";
  @SerializedName(SERIALIZED_NAME_SELECTED_FILTERS)
  private List<ReportFilter> selectedFilters = null;

  public static final String SERIALIZED_NAME_SKIP_CACHE = "skip_cache";
  @SerializedName(SERIALIZED_NAME_SKIP_CACHE)
  private Boolean skipCache;

  public static final String SERIALIZED_NAME_USER_DATA = "user_data";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private String userData;

  public ReportDataSetQuery() { 
  }

  public ReportDataSetQuery comparisonResults(Boolean comparisonResults) {
    
    this.comparisonResults = comparisonResults;
    return this;
  }

   /**
   * True if a date range filter is provided with comparison date ranges and two results should be returned for the query.
   * @return comparisonResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if a date range filter is provided with comparison date ranges and two results should be returned for the query.")

  public Boolean getComparisonResults() {
    return comparisonResults;
  }


  public void setComparisonResults(Boolean comparisonResults) {
    this.comparisonResults = comparisonResults;
  }


  public ReportDataSetQuery dataSetQueryUuid(String dataSetQueryUuid) {
    
    this.dataSetQueryUuid = dataSetQueryUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set query that is returned.
   * @return dataSetQueryUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier assigned to the data set query that is returned.")

  public String getDataSetQueryUuid() {
    return dataSetQueryUuid;
  }


  public void setDataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
  }


  public ReportDataSetQuery dataSource(ReportDataSource dataSource) {
    
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportDataSource getDataSource() {
    return dataSource;
  }


  public void setDataSource(ReportDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public ReportDataSetQuery dimensions(List<ReportPageVisualizationDimension> dimensions) {
    
    this.dimensions = dimensions;
    return this;
  }

  public ReportDataSetQuery addDimensionsItem(ReportPageVisualizationDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportPageVisualizationDimension> getDimensions() {
    return dimensions;
  }


  public void setDimensions(List<ReportPageVisualizationDimension> dimensions) {
    this.dimensions = dimensions;
  }


  public ReportDataSetQuery filter(ReportFilter filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportFilter getFilter() {
    return filter;
  }


  public void setFilter(ReportFilter filter) {
    this.filter = filter;
  }


  public ReportDataSetQuery forObjectId(String forObjectId) {
    
    this.forObjectId = forObjectId;
    return this;
  }

   /**
   * An identifier that can be used to help match up the returned data set
   * @return forObjectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An identifier that can be used to help match up the returned data set")

  public String getForObjectId() {
    return forObjectId;
  }


  public void setForObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
  }


  public ReportDataSetQuery forObjectType(ForObjectTypeEnum forObjectType) {
    
    this.forObjectType = forObjectType;
    return this;
  }

   /**
   * The type of object this data set is for
   * @return forObjectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of object this data set is for")

  public ForObjectTypeEnum getForObjectType() {
    return forObjectType;
  }


  public void setForObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
  }


  public ReportDataSetQuery metrics(List<ReportPageVisualizationMetric> metrics) {
    
    this.metrics = metrics;
    return this;
  }

  public ReportDataSetQuery addMetricsItem(ReportPageVisualizationMetric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportPageVisualizationMetric> getMetrics() {
    return metrics;
  }


  public void setMetrics(List<ReportPageVisualizationMetric> metrics) {
    this.metrics = metrics;
  }


  public ReportDataSetQuery orderByColumns(List<ReportDataSetQueryOrderByColumn> orderByColumns) {
    
    this.orderByColumns = orderByColumns;
    return this;
  }

  public ReportDataSetQuery addOrderByColumnsItem(ReportDataSetQueryOrderByColumn orderByColumnsItem) {
    if (this.orderByColumns == null) {
      this.orderByColumns = new ArrayList<>();
    }
    this.orderByColumns.add(orderByColumnsItem);
    return this;
  }

   /**
   * The columns to order by in the final result.  If not specified the dimensions will be used
   * @return orderByColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The columns to order by in the final result.  If not specified the dimensions will be used")

  public List<ReportDataSetQueryOrderByColumn> getOrderByColumns() {
    return orderByColumns;
  }


  public void setOrderByColumns(List<ReportDataSetQueryOrderByColumn> orderByColumns) {
    this.orderByColumns = orderByColumns;
  }


  public ReportDataSetQuery pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Result set page size.  The default value is 200 records.  Max is 10000.
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Result set page size.  The default value is 200 records.  Max is 10000.")

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public ReportDataSetQuery selectedFilters(List<ReportFilter> selectedFilters) {
    
    this.selectedFilters = selectedFilters;
    return this;
  }

  public ReportDataSetQuery addSelectedFiltersItem(ReportFilter selectedFiltersItem) {
    if (this.selectedFilters == null) {
      this.selectedFilters = new ArrayList<>();
    }
    this.selectedFilters.add(selectedFiltersItem);
    return this;
  }

   /**
   * Get selectedFilters
   * @return selectedFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportFilter> getSelectedFilters() {
    return selectedFilters;
  }


  public void setSelectedFilters(List<ReportFilter> selectedFilters) {
    this.selectedFilters = selectedFilters;
  }


  public ReportDataSetQuery skipCache(Boolean skipCache) {
    
    this.skipCache = skipCache;
    return this;
  }

   /**
   * True if the 15 minute cache should be skipped.
   * @return skipCache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the 15 minute cache should be skipped.")

  public Boolean getSkipCache() {
    return skipCache;
  }


  public void setSkipCache(Boolean skipCache) {
    this.skipCache = skipCache;
  }


  public ReportDataSetQuery userData(String userData) {
    
    this.userData = userData;
    return this;
  }

   /**
   * Any other data that needs to be returned with the response to help the UI
   * @return userData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any other data that needs to be returned with the response to help the UI")

  public String getUserData() {
    return userData;
  }


  public void setUserData(String userData) {
    this.userData = userData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSetQuery reportDataSetQuery = (ReportDataSetQuery) o;
    return Objects.equals(this.comparisonResults, reportDataSetQuery.comparisonResults) &&
        Objects.equals(this.dataSetQueryUuid, reportDataSetQuery.dataSetQueryUuid) &&
        Objects.equals(this.dataSource, reportDataSetQuery.dataSource) &&
        Objects.equals(this.dimensions, reportDataSetQuery.dimensions) &&
        Objects.equals(this.filter, reportDataSetQuery.filter) &&
        Objects.equals(this.forObjectId, reportDataSetQuery.forObjectId) &&
        Objects.equals(this.forObjectType, reportDataSetQuery.forObjectType) &&
        Objects.equals(this.metrics, reportDataSetQuery.metrics) &&
        Objects.equals(this.orderByColumns, reportDataSetQuery.orderByColumns) &&
        Objects.equals(this.pageSize, reportDataSetQuery.pageSize) &&
        Objects.equals(this.selectedFilters, reportDataSetQuery.selectedFilters) &&
        Objects.equals(this.skipCache, reportDataSetQuery.skipCache) &&
        Objects.equals(this.userData, reportDataSetQuery.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonResults, dataSetQueryUuid, dataSource, dimensions, filter, forObjectId, forObjectType, metrics, orderByColumns, pageSize, selectedFilters, skipCache, userData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSetQuery {\n");
    sb.append("    comparisonResults: ").append(toIndentedString(comparisonResults)).append("\n");
    sb.append("    dataSetQueryUuid: ").append(toIndentedString(dataSetQueryUuid)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    forObjectId: ").append(toIndentedString(forObjectId)).append("\n");
    sb.append("    forObjectType: ").append(toIndentedString(forObjectType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    orderByColumns: ").append(toIndentedString(orderByColumns)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    selectedFilters: ").append(toIndentedString(selectedFilters)).append("\n");
    sb.append("    skipCache: ").append(toIndentedString(skipCache)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparison_results");
    openapiFields.add("data_set_query_uuid");
    openapiFields.add("data_source");
    openapiFields.add("dimensions");
    openapiFields.add("filter");
    openapiFields.add("for_object_id");
    openapiFields.add("for_object_type");
    openapiFields.add("metrics");
    openapiFields.add("order_by_columns");
    openapiFields.add("page_size");
    openapiFields.add("selected_filters");
    openapiFields.add("skip_cache");
    openapiFields.add("user_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSetQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSetQuery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSetQuery is not found in the empty JSON string", ReportDataSetQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSetQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSetQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("data_set_query_uuid") != null && !jsonObj.get("data_set_query_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_set_query_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_set_query_uuid").toString()));
      }
      // validate the optional field `data_source`
      if (jsonObj.getAsJsonObject("data_source") != null) {
        ReportDataSource.validateJsonObject(jsonObj.getAsJsonObject("data_source"));
      }
      JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
      if (jsonArraydimensions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("dimensions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
        }

        // validate the optional field `dimensions` (array)
        for (int i = 0; i < jsonArraydimensions.size(); i++) {
          ReportPageVisualizationDimension.validateJsonObject(jsonArraydimensions.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `filter`
      if (jsonObj.getAsJsonObject("filter") != null) {
        ReportFilter.validateJsonObject(jsonObj.getAsJsonObject("filter"));
      }
      if (jsonObj.get("for_object_id") != null && !jsonObj.get("for_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_object_id").toString()));
      }
      if (jsonObj.get("for_object_type") != null && !jsonObj.get("for_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_object_type").toString()));
      }
      JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
      if (jsonArraymetrics != null) {
        // ensure the json data is an array
        if (!jsonObj.get("metrics").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
        }

        // validate the optional field `metrics` (array)
        for (int i = 0; i < jsonArraymetrics.size(); i++) {
          ReportPageVisualizationMetric.validateJsonObject(jsonArraymetrics.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayorderByColumns = jsonObj.getAsJsonArray("order_by_columns");
      if (jsonArrayorderByColumns != null) {
        // ensure the json data is an array
        if (!jsonObj.get("order_by_columns").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `order_by_columns` to be an array in the JSON string but got `%s`", jsonObj.get("order_by_columns").toString()));
        }

        // validate the optional field `order_by_columns` (array)
        for (int i = 0; i < jsonArrayorderByColumns.size(); i++) {
          ReportDataSetQueryOrderByColumn.validateJsonObject(jsonArrayorderByColumns.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayselectedFilters = jsonObj.getAsJsonArray("selected_filters");
      if (jsonArrayselectedFilters != null) {
        // ensure the json data is an array
        if (!jsonObj.get("selected_filters").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `selected_filters` to be an array in the JSON string but got `%s`", jsonObj.get("selected_filters").toString()));
        }

        // validate the optional field `selected_filters` (array)
        for (int i = 0; i < jsonArrayselectedFilters.size(); i++) {
          ReportFilter.validateJsonObject(jsonArrayselectedFilters.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("user_data") != null && !jsonObj.get("user_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSetQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSetQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSetQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSetQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSetQuery>() {
           @Override
           public void write(JsonWriter out, ReportDataSetQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSetQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSetQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSetQuery
  * @throws IOException if the JSON string is invalid with respect to ReportDataSetQuery
  */
  public static ReportDataSetQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSetQuery.class);
  }

 /**
  * Convert an instance of ReportDataSetQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


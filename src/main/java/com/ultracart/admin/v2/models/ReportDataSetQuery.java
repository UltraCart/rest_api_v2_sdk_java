/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetQueryOrderByColumn;
import com.ultracart.admin.v2.models.ReportDataSource;
import com.ultracart.admin.v2.models.ReportFilter;
import com.ultracart.admin.v2.models.ReportPageVisualizationDimension;
import com.ultracart.admin.v2.models.ReportPageVisualizationMetric;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportDataSetQuery
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-04T14:34:21.528-04:00")



public class ReportDataSetQuery {
  @SerializedName("comparison_results")
  private Boolean comparisonResults = null;

  @SerializedName("data_set_query_uuid")
  private String dataSetQueryUuid = null;

  @SerializedName("data_source")
  private ReportDataSource dataSource = null;

  @SerializedName("dimensions")
  private List<ReportPageVisualizationDimension> dimensions = null;

  @SerializedName("filter")
  private ReportFilter filter = null;

  @SerializedName("for_object_id")
  private String forObjectId = null;

  /**
   * The type of object this data set is for
   */
  @JsonAdapter(ForObjectTypeEnum.Adapter.class)
  public enum ForObjectTypeEnum {
    SCHEMA("schema"),
    
    FILTER("filter"),
    
    VISUALIZATION("visualization");

    private String value;

    ForObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForObjectTypeEnum fromValue(String text) {
      for (ForObjectTypeEnum b : ForObjectTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ForObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ForObjectTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("for_object_type")
  private ForObjectTypeEnum forObjectType = null;

  @SerializedName("metrics")
  private List<ReportPageVisualizationMetric> metrics = null;

  @SerializedName("order_by_columns")
  private List<ReportDataSetQueryOrderByColumn> orderByColumns = null;

  @SerializedName("page_size")
  private Integer pageSize = null;

  @SerializedName("selected_filters")
  private List<ReportFilter> selectedFilters = null;

  @SerializedName("skip_cache")
  private Boolean skipCache = null;

  @SerializedName("user_data")
  private String userData = null;

  public ReportDataSetQuery comparisonResults(Boolean comparisonResults) {
    this.comparisonResults = comparisonResults;
    return this;
  }

   /**
   * True if a date range filter is provided with comparison date ranges and two results should be returned for the query.
   * @return comparisonResults
  **/
  @ApiModelProperty(value = "True if a date range filter is provided with comparison date ranges and two results should be returned for the query.")
  public Boolean isComparisonResults() {
    return comparisonResults;
  }

  public void setComparisonResults(Boolean comparisonResults) {
    this.comparisonResults = comparisonResults;
  }

  public ReportDataSetQuery dataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set query that is returned.
   * @return dataSetQueryUuid
  **/
  @ApiModelProperty(value = "A unique identifier assigned to the data set query that is returned.")
  public String getDataSetQueryUuid() {
    return dataSetQueryUuid;
  }

  public void setDataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
  }

  public ReportDataSetQuery dataSource(ReportDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Get dataSource
   * @return dataSource
  **/
  @ApiModelProperty(value = "")
  public ReportDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(ReportDataSource dataSource) {
    this.dataSource = dataSource;
  }

  public ReportDataSetQuery dimensions(List<ReportPageVisualizationDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public ReportDataSetQuery addDimensionsItem(ReportPageVisualizationDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<ReportPageVisualizationDimension>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @ApiModelProperty(value = "")
  public List<ReportPageVisualizationDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<ReportPageVisualizationDimension> dimensions) {
    this.dimensions = dimensions;
  }

  public ReportDataSetQuery filter(ReportFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public ReportFilter getFilter() {
    return filter;
  }

  public void setFilter(ReportFilter filter) {
    this.filter = filter;
  }

  public ReportDataSetQuery forObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
    return this;
  }

   /**
   * An identifier that can be used to help match up the returned data set
   * @return forObjectId
  **/
  @ApiModelProperty(value = "An identifier that can be used to help match up the returned data set")
  public String getForObjectId() {
    return forObjectId;
  }

  public void setForObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
  }

  public ReportDataSetQuery forObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
    return this;
  }

   /**
   * The type of object this data set is for
   * @return forObjectType
  **/
  @ApiModelProperty(value = "The type of object this data set is for")
  public ForObjectTypeEnum getForObjectType() {
    return forObjectType;
  }

  public void setForObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
  }

  public ReportDataSetQuery metrics(List<ReportPageVisualizationMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ReportDataSetQuery addMetricsItem(ReportPageVisualizationMetric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<ReportPageVisualizationMetric>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @ApiModelProperty(value = "")
  public List<ReportPageVisualizationMetric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<ReportPageVisualizationMetric> metrics) {
    this.metrics = metrics;
  }

  public ReportDataSetQuery orderByColumns(List<ReportDataSetQueryOrderByColumn> orderByColumns) {
    this.orderByColumns = orderByColumns;
    return this;
  }

  public ReportDataSetQuery addOrderByColumnsItem(ReportDataSetQueryOrderByColumn orderByColumnsItem) {
    if (this.orderByColumns == null) {
      this.orderByColumns = new ArrayList<ReportDataSetQueryOrderByColumn>();
    }
    this.orderByColumns.add(orderByColumnsItem);
    return this;
  }

   /**
   * The columns to order by in the final result.  If not specified the dimensions will be used
   * @return orderByColumns
  **/
  @ApiModelProperty(value = "The columns to order by in the final result.  If not specified the dimensions will be used")
  public List<ReportDataSetQueryOrderByColumn> getOrderByColumns() {
    return orderByColumns;
  }

  public void setOrderByColumns(List<ReportDataSetQueryOrderByColumn> orderByColumns) {
    this.orderByColumns = orderByColumns;
  }

  public ReportDataSetQuery pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Result set page size.  The default value is 200 records.  Max is 10000.
   * @return pageSize
  **/
  @ApiModelProperty(value = "Result set page size.  The default value is 200 records.  Max is 10000.")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ReportDataSetQuery selectedFilters(List<ReportFilter> selectedFilters) {
    this.selectedFilters = selectedFilters;
    return this;
  }

  public ReportDataSetQuery addSelectedFiltersItem(ReportFilter selectedFiltersItem) {
    if (this.selectedFilters == null) {
      this.selectedFilters = new ArrayList<ReportFilter>();
    }
    this.selectedFilters.add(selectedFiltersItem);
    return this;
  }

   /**
   * Get selectedFilters
   * @return selectedFilters
  **/
  @ApiModelProperty(value = "")
  public List<ReportFilter> getSelectedFilters() {
    return selectedFilters;
  }

  public void setSelectedFilters(List<ReportFilter> selectedFilters) {
    this.selectedFilters = selectedFilters;
  }

  public ReportDataSetQuery skipCache(Boolean skipCache) {
    this.skipCache = skipCache;
    return this;
  }

   /**
   * True if the 15 minute cache should be skipped.
   * @return skipCache
  **/
  @ApiModelProperty(value = "True if the 15 minute cache should be skipped.")
  public Boolean isSkipCache() {
    return skipCache;
  }

  public void setSkipCache(Boolean skipCache) {
    this.skipCache = skipCache;
  }

  public ReportDataSetQuery userData(String userData) {
    this.userData = userData;
    return this;
  }

   /**
   * Any other data that needs to be returned with the response to help the UI
   * @return userData
  **/
  @ApiModelProperty(value = "Any other data that needs to be returned with the response to help the UI")
  public String getUserData() {
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSetQuery reportDataSetQuery = (ReportDataSetQuery) o;
    return Objects.equals(this.comparisonResults, reportDataSetQuery.comparisonResults) &&
        Objects.equals(this.dataSetQueryUuid, reportDataSetQuery.dataSetQueryUuid) &&
        Objects.equals(this.dataSource, reportDataSetQuery.dataSource) &&
        Objects.equals(this.dimensions, reportDataSetQuery.dimensions) &&
        Objects.equals(this.filter, reportDataSetQuery.filter) &&
        Objects.equals(this.forObjectId, reportDataSetQuery.forObjectId) &&
        Objects.equals(this.forObjectType, reportDataSetQuery.forObjectType) &&
        Objects.equals(this.metrics, reportDataSetQuery.metrics) &&
        Objects.equals(this.orderByColumns, reportDataSetQuery.orderByColumns) &&
        Objects.equals(this.pageSize, reportDataSetQuery.pageSize) &&
        Objects.equals(this.selectedFilters, reportDataSetQuery.selectedFilters) &&
        Objects.equals(this.skipCache, reportDataSetQuery.skipCache) &&
        Objects.equals(this.userData, reportDataSetQuery.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonResults, dataSetQueryUuid, dataSource, dimensions, filter, forObjectId, forObjectType, metrics, orderByColumns, pageSize, selectedFilters, skipCache, userData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSetQuery {\n");
    
    sb.append("    comparisonResults: ").append(toIndentedString(comparisonResults)).append("\n");
    sb.append("    dataSetQueryUuid: ").append(toIndentedString(dataSetQueryUuid)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    forObjectId: ").append(toIndentedString(forObjectId)).append("\n");
    sb.append("    forObjectType: ").append(toIndentedString(forObjectType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    orderByColumns: ").append(toIndentedString(orderByColumns)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    selectedFilters: ").append(toIndentedString(selectedFilters)).append("\n");
    sb.append("    skipCache: ").append(toIndentedString(skipCache)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxPostalCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T10:48:42.268-05:00[America/Indianapolis]")
public class TaxPostalCode {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_CITY_OID = "city_oid";
  @SerializedName(SERIALIZED_NAME_CITY_OID)
  private Integer cityOid;

  public static final String SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE = "dont_collect_postal_code";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE)
  private Boolean dontCollectPostalCode;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_POSTAL_CODE_OID = "postal_code_oid";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE_OID)
  private Integer postalCodeOid;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public TaxPostalCode() { 
  }

  public TaxPostalCode accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxPostalCode cityOid(Integer cityOid) {
    
    this.cityOid = cityOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return cityOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCityOid() {
    return cityOid;
  }


  public void setCityOid(Integer cityOid) {
    this.cityOid = cityOid;
  }


  public TaxPostalCode dontCollectPostalCode(Boolean dontCollectPostalCode) {
    
    this.dontCollectPostalCode = dontCollectPostalCode;
    return this;
  }

   /**
   * Flag instructing engine to not collect postal code tax for this postal code
   * @return dontCollectPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect postal code tax for this postal code")

  public Boolean getDontCollectPostalCode() {
    return dontCollectPostalCode;
  }


  public void setDontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
  }


  public TaxPostalCode postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal Code (5 digits)
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal Code (5 digits)")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public TaxPostalCode postalCodeOid(Integer postalCodeOid) {
    
    this.postalCodeOid = postalCodeOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return postalCodeOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getPostalCodeOid() {
    return postalCodeOid;
  }


  public void setPostalCodeOid(Integer postalCodeOid) {
    this.postalCodeOid = postalCodeOid;
  }


  public TaxPostalCode taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxPostalCode taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxPostalCode taxPostalCode = (TaxPostalCode) o;
    return Objects.equals(this.accountingCode, taxPostalCode.accountingCode) &&
        Objects.equals(this.cityOid, taxPostalCode.cityOid) &&
        Objects.equals(this.dontCollectPostalCode, taxPostalCode.dontCollectPostalCode) &&
        Objects.equals(this.postalCode, taxPostalCode.postalCode) &&
        Objects.equals(this.postalCodeOid, taxPostalCode.postalCodeOid) &&
        Objects.equals(this.taxRate, taxPostalCode.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxPostalCode.taxRateFormatted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, cityOid, dontCollectPostalCode, postalCode, postalCodeOid, taxRate, taxRateFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxPostalCode {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    cityOid: ").append(toIndentedString(cityOid)).append("\n");
    sb.append("    dontCollectPostalCode: ").append(toIndentedString(dontCollectPostalCode)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    postalCodeOid: ").append(toIndentedString(postalCodeOid)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("city_oid");
    openapiFields.add("dont_collect_postal_code");
    openapiFields.add("postal_code");
    openapiFields.add("postal_code_oid");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxPostalCode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxPostalCode.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxPostalCode is not found in the empty JSON string", TaxPostalCode.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxPostalCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxPostalCode` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      if (jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxPostalCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxPostalCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxPostalCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxPostalCode.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxPostalCode>() {
           @Override
           public void write(JsonWriter out, TaxPostalCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxPostalCode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxPostalCode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxPostalCode
  * @throws IOException if the JSON string is invalid with respect to TaxPostalCode
  */
  public static TaxPostalCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxPostalCode.class);
  }

 /**
  * Convert an instance of TaxPostalCode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


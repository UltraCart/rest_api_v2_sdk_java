/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.PaymentsConfigurationCreditCardType;
import com.ultracart.admin.v2.models.PaymentsConfigurationTestMethod;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PaymentsConfigurationCreditCard
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-06-01T16:51:13.532-04:00")



public class PaymentsConfigurationCreditCard {
  @SerializedName("accept_credit_card")
  private Boolean acceptCreditCard = null;

  @SerializedName("billed_by")
  private String billedBy = null;

  @SerializedName("charge_during_checkout")
  private Boolean chargeDuringCheckout = null;

  @SerializedName("collect_cvv2")
  private Boolean collectCvv2 = null;

  @SerializedName("configured_gateway_details")
  private String configuredGatewayDetails = null;

  @SerializedName("failed_attempts")
  private Integer failedAttempts = null;

  @SerializedName("hide_connect_single_gateway")
  private Boolean hideConnectSingleGateway = null;

  @SerializedName("send_customer_billing_update_on_decline")
  private Boolean sendCustomerBillingUpdateOnDecline = null;

  @SerializedName("supported_cards")
  private List<PaymentsConfigurationCreditCardType> supportedCards = null;

  @SerializedName("test_methods")
  private List<PaymentsConfigurationTestMethod> testMethods = null;

  public PaymentsConfigurationCreditCard acceptCreditCard(Boolean acceptCreditCard) {
    this.acceptCreditCard = acceptCreditCard;
    return this;
  }

   /**
   * Master flag indicating whether this merchant accepts credit card payments
   * @return acceptCreditCard
  **/
  @ApiModelProperty(value = "Master flag indicating whether this merchant accepts credit card payments")
  public Boolean isAcceptCreditCard() {
    return acceptCreditCard;
  }

  public void setAcceptCreditCard(Boolean acceptCreditCard) {
    this.acceptCreditCard = acceptCreditCard;
  }

  public PaymentsConfigurationCreditCard billedBy(String billedBy) {
    this.billedBy = billedBy;
    return this;
  }

   /**
   * Description that appears on customer statements
   * @return billedBy
  **/
  @ApiModelProperty(value = "Description that appears on customer statements")
  public String getBilledBy() {
    return billedBy;
  }

  public void setBilledBy(String billedBy) {
    this.billedBy = billedBy;
  }

  public PaymentsConfigurationCreditCard chargeDuringCheckout(Boolean chargeDuringCheckout) {
    this.chargeDuringCheckout = chargeDuringCheckout;
    return this;
  }

   /**
   * If false, order will be accepted and placed into Accounts Receivable without charging card first
   * @return chargeDuringCheckout
  **/
  @ApiModelProperty(value = "If false, order will be accepted and placed into Accounts Receivable without charging card first")
  public Boolean isChargeDuringCheckout() {
    return chargeDuringCheckout;
  }

  public void setChargeDuringCheckout(Boolean chargeDuringCheckout) {
    this.chargeDuringCheckout = chargeDuringCheckout;
  }

  public PaymentsConfigurationCreditCard collectCvv2(Boolean collectCvv2) {
    this.collectCvv2 = collectCvv2;
    return this;
  }

   /**
   * UltraCart will require customer to enter cvv if this is true
   * @return collectCvv2
  **/
  @ApiModelProperty(value = "UltraCart will require customer to enter cvv if this is true")
  public Boolean isCollectCvv2() {
    return collectCvv2;
  }

  public void setCollectCvv2(Boolean collectCvv2) {
    this.collectCvv2 = collectCvv2;
  }

  public PaymentsConfigurationCreditCard configuredGatewayDetails(String configuredGatewayDetails) {
    this.configuredGatewayDetails = configuredGatewayDetails;
    return this;
  }

   /**
   * Human readable description of the credit card gateway currently configured
   * @return configuredGatewayDetails
  **/
  @ApiModelProperty(value = "Human readable description of the credit card gateway currently configured")
  public String getConfiguredGatewayDetails() {
    return configuredGatewayDetails;
  }

  public void setConfiguredGatewayDetails(String configuredGatewayDetails) {
    this.configuredGatewayDetails = configuredGatewayDetails;
  }

  public PaymentsConfigurationCreditCard failedAttempts(Integer failedAttempts) {
    this.failedAttempts = failedAttempts;
    return this;
  }

   /**
   * The number of failed attempts before the order is placed into Accounts Receivable for manual intervention
   * @return failedAttempts
  **/
  @ApiModelProperty(value = "The number of failed attempts before the order is placed into Accounts Receivable for manual intervention")
  public Integer getFailedAttempts() {
    return failedAttempts;
  }

  public void setFailedAttempts(Integer failedAttempts) {
    this.failedAttempts = failedAttempts;
  }

  public PaymentsConfigurationCreditCard hideConnectSingleGateway(Boolean hideConnectSingleGateway) {
    this.hideConnectSingleGateway = hideConnectSingleGateway;
    return this;
  }

   /**
   * This internal flag aids the UI in determining which buttons to show.
   * @return hideConnectSingleGateway
  **/
  @ApiModelProperty(value = "This internal flag aids the UI in determining which buttons to show.")
  public Boolean isHideConnectSingleGateway() {
    return hideConnectSingleGateway;
  }

  public void setHideConnectSingleGateway(Boolean hideConnectSingleGateway) {
    this.hideConnectSingleGateway = hideConnectSingleGateway;
  }

  public PaymentsConfigurationCreditCard sendCustomerBillingUpdateOnDecline(Boolean sendCustomerBillingUpdateOnDecline) {
    this.sendCustomerBillingUpdateOnDecline = sendCustomerBillingUpdateOnDecline;
    return this;
  }

   /**
   * UltraCart will send customers emails to update their credit card if the card is declined
   * @return sendCustomerBillingUpdateOnDecline
  **/
  @ApiModelProperty(value = "UltraCart will send customers emails to update their credit card if the card is declined")
  public Boolean isSendCustomerBillingUpdateOnDecline() {
    return sendCustomerBillingUpdateOnDecline;
  }

  public void setSendCustomerBillingUpdateOnDecline(Boolean sendCustomerBillingUpdateOnDecline) {
    this.sendCustomerBillingUpdateOnDecline = sendCustomerBillingUpdateOnDecline;
  }

  public PaymentsConfigurationCreditCard supportedCards(List<PaymentsConfigurationCreditCardType> supportedCards) {
    this.supportedCards = supportedCards;
    return this;
  }

  public PaymentsConfigurationCreditCard addSupportedCardsItem(PaymentsConfigurationCreditCardType supportedCardsItem) {
    if (this.supportedCards == null) {
      this.supportedCards = new ArrayList<PaymentsConfigurationCreditCardType>();
    }
    this.supportedCards.add(supportedCardsItem);
    return this;
  }

   /**
   * A list of credit cards the merchant wishes to accept.
   * @return supportedCards
  **/
  @ApiModelProperty(value = "A list of credit cards the merchant wishes to accept.")
  public List<PaymentsConfigurationCreditCardType> getSupportedCards() {
    return supportedCards;
  }

  public void setSupportedCards(List<PaymentsConfigurationCreditCardType> supportedCards) {
    this.supportedCards = supportedCards;
  }

  public PaymentsConfigurationCreditCard testMethods(List<PaymentsConfigurationTestMethod> testMethods) {
    this.testMethods = testMethods;
    return this;
  }

  public PaymentsConfigurationCreditCard addTestMethodsItem(PaymentsConfigurationTestMethod testMethodsItem) {
    if (this.testMethods == null) {
      this.testMethods = new ArrayList<PaymentsConfigurationTestMethod>();
    }
    this.testMethods.add(testMethodsItem);
    return this;
  }

   /**
   * An array of test methods for placing test orders.  The cards defined here may be real or fake, but any order placed with them will be marked as Test orders
   * @return testMethods
  **/
  @ApiModelProperty(value = "An array of test methods for placing test orders.  The cards defined here may be real or fake, but any order placed with them will be marked as Test orders")
  public List<PaymentsConfigurationTestMethod> getTestMethods() {
    return testMethods;
  }

  public void setTestMethods(List<PaymentsConfigurationTestMethod> testMethods) {
    this.testMethods = testMethods;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsConfigurationCreditCard paymentsConfigurationCreditCard = (PaymentsConfigurationCreditCard) o;
    return Objects.equals(this.acceptCreditCard, paymentsConfigurationCreditCard.acceptCreditCard) &&
        Objects.equals(this.billedBy, paymentsConfigurationCreditCard.billedBy) &&
        Objects.equals(this.chargeDuringCheckout, paymentsConfigurationCreditCard.chargeDuringCheckout) &&
        Objects.equals(this.collectCvv2, paymentsConfigurationCreditCard.collectCvv2) &&
        Objects.equals(this.configuredGatewayDetails, paymentsConfigurationCreditCard.configuredGatewayDetails) &&
        Objects.equals(this.failedAttempts, paymentsConfigurationCreditCard.failedAttempts) &&
        Objects.equals(this.hideConnectSingleGateway, paymentsConfigurationCreditCard.hideConnectSingleGateway) &&
        Objects.equals(this.sendCustomerBillingUpdateOnDecline, paymentsConfigurationCreditCard.sendCustomerBillingUpdateOnDecline) &&
        Objects.equals(this.supportedCards, paymentsConfigurationCreditCard.supportedCards) &&
        Objects.equals(this.testMethods, paymentsConfigurationCreditCard.testMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptCreditCard, billedBy, chargeDuringCheckout, collectCvv2, configuredGatewayDetails, failedAttempts, hideConnectSingleGateway, sendCustomerBillingUpdateOnDecline, supportedCards, testMethods);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsConfigurationCreditCard {\n");
    
    sb.append("    acceptCreditCard: ").append(toIndentedString(acceptCreditCard)).append("\n");
    sb.append("    billedBy: ").append(toIndentedString(billedBy)).append("\n");
    sb.append("    chargeDuringCheckout: ").append(toIndentedString(chargeDuringCheckout)).append("\n");
    sb.append("    collectCvv2: ").append(toIndentedString(collectCvv2)).append("\n");
    sb.append("    configuredGatewayDetails: ").append(toIndentedString(configuredGatewayDetails)).append("\n");
    sb.append("    failedAttempts: ").append(toIndentedString(failedAttempts)).append("\n");
    sb.append("    hideConnectSingleGateway: ").append(toIndentedString(hideConnectSingleGateway)).append("\n");
    sb.append("    sendCustomerBillingUpdateOnDecline: ").append(toIndentedString(sendCustomerBillingUpdateOnDecline)).append("\n");
    sb.append("    supportedCards: ").append(toIndentedString(supportedCards)).append("\n");
    sb.append("    testMethods: ").append(toIndentedString(testMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


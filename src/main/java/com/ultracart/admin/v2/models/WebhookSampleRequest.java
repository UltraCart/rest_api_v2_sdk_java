/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.HTTPHeader;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WebhookSampleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T12:55:24.276-05:00[America/Indianapolis]")
public class WebhookSampleRequest {
  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private String request;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "request_headers";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private List<HTTPHeader> requestHeaders = null;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public WebhookSampleRequest() { 
  }

  public WebhookSampleRequest request(String request) {
    
    this.request = request;
    return this;
  }

   /**
   * Request
   * @return request
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request")

  public String getRequest() {
    return request;
  }


  public void setRequest(String request) {
    this.request = request;
  }


  public WebhookSampleRequest requestHeaders(List<HTTPHeader> requestHeaders) {
    
    this.requestHeaders = requestHeaders;
    return this;
  }

  public WebhookSampleRequest addRequestHeadersItem(HTTPHeader requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new ArrayList<>();
    }
    this.requestHeaders.add(requestHeadersItem);
    return this;
  }

   /**
   * Request headers
   * @return requestHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request headers")

  public List<HTTPHeader> getRequestHeaders() {
    return requestHeaders;
  }


  public void setRequestHeaders(List<HTTPHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public WebhookSampleRequest requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Request id
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request id")

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public WebhookSampleRequest uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * URI to send request to
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URI to send request to")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookSampleRequest webhookSampleRequest = (WebhookSampleRequest) o;
    return Objects.equals(this.request, webhookSampleRequest.request) &&
        Objects.equals(this.requestHeaders, webhookSampleRequest.requestHeaders) &&
        Objects.equals(this.requestId, webhookSampleRequest.requestId) &&
        Objects.equals(this.uri, webhookSampleRequest.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(request, requestHeaders, requestId, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookSampleRequest {\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("request");
    openapiFields.add("request_headers");
    openapiFields.add("request_id");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookSampleRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WebhookSampleRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookSampleRequest is not found in the empty JSON string", WebhookSampleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookSampleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookSampleRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request").toString()));
      }
      JsonArray jsonArrayrequestHeaders = jsonObj.getAsJsonArray("request_headers");
      if (jsonArrayrequestHeaders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("request_headers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `request_headers` to be an array in the JSON string but got `%s`", jsonObj.get("request_headers").toString()));
        }

        // validate the optional field `request_headers` (array)
        for (int i = 0; i < jsonArrayrequestHeaders.size(); i++) {
          HTTPHeader.validateJsonObject(jsonArrayrequestHeaders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if (jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookSampleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookSampleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookSampleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookSampleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookSampleRequest>() {
           @Override
           public void write(JsonWriter out, WebhookSampleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookSampleRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookSampleRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookSampleRequest
  * @throws IOException if the JSON string is invalid with respect to WebhookSampleRequest
  */
  public static WebhookSampleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookSampleRequest.class);
  }

 /**
  * Convert an instance of WebhookSampleRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


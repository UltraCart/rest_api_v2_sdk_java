/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.HTTPHeader;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WebhookLog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-23T00:47:02.286-04:00[America/Indianapolis]")
public class WebhookLog {
  public static final String SERIALIZED_NAME_DELIVERY_DTS = "delivery_dts";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DTS)
  private String deliveryDts;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_QUEUE_DELAY = "queue_delay";
  @SerializedName(SERIALIZED_NAME_QUEUE_DELAY)
  private Long queueDelay;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private String request;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "request_headers";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private List<HTTPHeader> requestHeaders = null;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS = "response_headers";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS)
  private List<HTTPHeader> responseHeaders = null;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public WebhookLog() { 
  }

  public WebhookLog deliveryDts(String deliveryDts) {
    
    this.deliveryDts = deliveryDts;
    return this;
  }

   /**
   * Date/time of delivery
   * @return deliveryDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time of delivery")

  public String getDeliveryDts() {
    return deliveryDts;
  }


  public void setDeliveryDts(String deliveryDts) {
    this.deliveryDts = deliveryDts;
  }


  public WebhookLog duration(Integer duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * Number of milliseconds to process the notification
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of milliseconds to process the notification")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public WebhookLog queueDelay(Long queueDelay) {
    
    this.queueDelay = queueDelay;
    return this;
  }

   /**
   * Number of milliseconds of delay caused by queuing
   * @return queueDelay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of milliseconds of delay caused by queuing")

  public Long getQueueDelay() {
    return queueDelay;
  }


  public void setQueueDelay(Long queueDelay) {
    this.queueDelay = queueDelay;
  }


  public WebhookLog request(String request) {
    
    this.request = request;
    return this;
  }

   /**
   * Request payload (first 100,000 characters)
   * @return request
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request payload (first 100,000 characters)")

  public String getRequest() {
    return request;
  }


  public void setRequest(String request) {
    this.request = request;
  }


  public WebhookLog requestHeaders(List<HTTPHeader> requestHeaders) {
    
    this.requestHeaders = requestHeaders;
    return this;
  }

  public WebhookLog addRequestHeadersItem(HTTPHeader requestHeadersItem) {
    if (this.requestHeaders == null) {
      this.requestHeaders = new ArrayList<>();
    }
    this.requestHeaders.add(requestHeadersItem);
    return this;
  }

   /**
   * Request headers sent to the server
   * @return requestHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request headers sent to the server")

  public List<HTTPHeader> getRequestHeaders() {
    return requestHeaders;
  }


  public void setRequestHeaders(List<HTTPHeader> requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public WebhookLog requestId(String requestId) {
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Request id is a unique string that you can look up in the logs
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request id is a unique string that you can look up in the logs")

  public String getRequestId() {
    return requestId;
  }


  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public WebhookLog response(String response) {
    
    this.response = response;
    return this;
  }

   /**
   * Response payload (first 100,000 characters)
   * @return response
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Response payload (first 100,000 characters)")

  public String getResponse() {
    return response;
  }


  public void setResponse(String response) {
    this.response = response;
  }


  public WebhookLog responseHeaders(List<HTTPHeader> responseHeaders) {
    
    this.responseHeaders = responseHeaders;
    return this;
  }

  public WebhookLog addResponseHeadersItem(HTTPHeader responseHeadersItem) {
    if (this.responseHeaders == null) {
      this.responseHeaders = new ArrayList<>();
    }
    this.responseHeaders.add(responseHeadersItem);
    return this;
  }

   /**
   * Response headers received from the server
   * @return responseHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Response headers received from the server")

  public List<HTTPHeader> getResponseHeaders() {
    return responseHeaders;
  }


  public void setResponseHeaders(List<HTTPHeader> responseHeaders) {
    this.responseHeaders = responseHeaders;
  }


  public WebhookLog statusCode(Integer statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * HTTP status code received from the server
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HTTP status code received from the server")

  public Integer getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public WebhookLog success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * True if the delivery was successful
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the delivery was successful")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public WebhookLog uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * URI of the webhook delivered to
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URI of the webhook delivered to")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookLog webhookLog = (WebhookLog) o;
    return Objects.equals(this.deliveryDts, webhookLog.deliveryDts) &&
        Objects.equals(this.duration, webhookLog.duration) &&
        Objects.equals(this.queueDelay, webhookLog.queueDelay) &&
        Objects.equals(this.request, webhookLog.request) &&
        Objects.equals(this.requestHeaders, webhookLog.requestHeaders) &&
        Objects.equals(this.requestId, webhookLog.requestId) &&
        Objects.equals(this.response, webhookLog.response) &&
        Objects.equals(this.responseHeaders, webhookLog.responseHeaders) &&
        Objects.equals(this.statusCode, webhookLog.statusCode) &&
        Objects.equals(this.success, webhookLog.success) &&
        Objects.equals(this.uri, webhookLog.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryDts, duration, queueDelay, request, requestHeaders, requestId, response, responseHeaders, statusCode, success, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookLog {\n");
    sb.append("    deliveryDts: ").append(toIndentedString(deliveryDts)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    queueDelay: ").append(toIndentedString(queueDelay)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delivery_dts");
    openapiFields.add("duration");
    openapiFields.add("queue_delay");
    openapiFields.add("request");
    openapiFields.add("request_headers");
    openapiFields.add("request_id");
    openapiFields.add("response");
    openapiFields.add("response_headers");
    openapiFields.add("status_code");
    openapiFields.add("success");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookLog
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WebhookLog.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookLog is not found in the empty JSON string", WebhookLog.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookLog` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("delivery_dts") != null && !jsonObj.get("delivery_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_dts").toString()));
      }
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request").toString()));
      }
      JsonArray jsonArrayrequestHeaders = jsonObj.getAsJsonArray("request_headers");
      if (jsonArrayrequestHeaders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("request_headers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `request_headers` to be an array in the JSON string but got `%s`", jsonObj.get("request_headers").toString()));
        }

        // validate the optional field `request_headers` (array)
        for (int i = 0; i < jsonArrayrequestHeaders.size(); i++) {
          HTTPHeader.validateJsonObject(jsonArrayrequestHeaders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
      JsonArray jsonArrayresponseHeaders = jsonObj.getAsJsonArray("response_headers");
      if (jsonArrayresponseHeaders != null) {
        // ensure the json data is an array
        if (!jsonObj.get("response_headers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `response_headers` to be an array in the JSON string but got `%s`", jsonObj.get("response_headers").toString()));
        }

        // validate the optional field `response_headers` (array)
        for (int i = 0; i < jsonArrayresponseHeaders.size(); i++) {
          HTTPHeader.validateJsonObject(jsonArrayresponseHeaders.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookLog.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookLog>() {
           @Override
           public void write(JsonWriter out, WebhookLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookLog read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookLog
  * @throws IOException if the JSON string is invalid with respect to WebhookLog
  */
  public static WebhookLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookLog.class);
  }

 /**
  * Convert an instance of WebhookLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


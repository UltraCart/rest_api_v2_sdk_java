/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ApplyLibraryItemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-05T15:48:24.518-04:00[America/Indianapolis]")
public class ApplyLibraryItemRequest {
  public static final String SERIALIZED_NAME_EMAIL_UUID = "email_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_UUID)
  private String emailUuid;

  public static final String SERIALIZED_NAME_LIBRARY_ITEM_OID = "library_item_oid";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEM_OID)
  private Integer libraryItemOid;

  public static final String SERIALIZED_NAME_POSTCARD_UUID = "postcard_uuid";
  @SerializedName(SERIALIZED_NAME_POSTCARD_UUID)
  private String postcardUuid;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public ApplyLibraryItemRequest() { 
  }

  public ApplyLibraryItemRequest emailUuid(String emailUuid) {
    
    this.emailUuid = emailUuid;
    return this;
  }

   /**
   * Normal emails are applied to an existing email object, so when requesting a library item to be applied to an email, supply the email uuid.  This is only for normal emails.  Transactional emails do not have a uuid.
   * @return emailUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Normal emails are applied to an existing email object, so when requesting a library item to be applied to an email, supply the email uuid.  This is only for normal emails.  Transactional emails do not have a uuid.")

  public String getEmailUuid() {
    return emailUuid;
  }


  public void setEmailUuid(String emailUuid) {
    this.emailUuid = emailUuid;
  }


  public ApplyLibraryItemRequest libraryItemOid(Integer libraryItemOid) {
    
    this.libraryItemOid = libraryItemOid;
    return this;
  }

   /**
   * Library item oid that you wish to apply to the given StoreFront
   * @return libraryItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Library item oid that you wish to apply to the given StoreFront")

  public Integer getLibraryItemOid() {
    return libraryItemOid;
  }


  public void setLibraryItemOid(Integer libraryItemOid) {
    this.libraryItemOid = libraryItemOid;
  }


  public ApplyLibraryItemRequest postcardUuid(String postcardUuid) {
    
    this.postcardUuid = postcardUuid;
    return this;
  }

   /**
   * The postcard uuid you wish to apply to a given StoreFront.
   * @return postcardUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The postcard uuid you wish to apply to a given StoreFront.")

  public String getPostcardUuid() {
    return postcardUuid;
  }


  public void setPostcardUuid(String postcardUuid) {
    this.postcardUuid = postcardUuid;
  }


  public ApplyLibraryItemRequest storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * StoreFront oid where content originates necessary for tracking down relative assets
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "StoreFront oid where content originates necessary for tracking down relative assets")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplyLibraryItemRequest applyLibraryItemRequest = (ApplyLibraryItemRequest) o;
    return Objects.equals(this.emailUuid, applyLibraryItemRequest.emailUuid) &&
        Objects.equals(this.libraryItemOid, applyLibraryItemRequest.libraryItemOid) &&
        Objects.equals(this.postcardUuid, applyLibraryItemRequest.postcardUuid) &&
        Objects.equals(this.storefrontOid, applyLibraryItemRequest.storefrontOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailUuid, libraryItemOid, postcardUuid, storefrontOid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplyLibraryItemRequest {\n");
    sb.append("    emailUuid: ").append(toIndentedString(emailUuid)).append("\n");
    sb.append("    libraryItemOid: ").append(toIndentedString(libraryItemOid)).append("\n");
    sb.append("    postcardUuid: ").append(toIndentedString(postcardUuid)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email_uuid");
    openapiFields.add("library_item_oid");
    openapiFields.add("postcard_uuid");
    openapiFields.add("storefront_oid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplyLibraryItemRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ApplyLibraryItemRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplyLibraryItemRequest is not found in the empty JSON string", ApplyLibraryItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ApplyLibraryItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplyLibraryItemRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("email_uuid") != null && !jsonObj.get("email_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_uuid").toString()));
      }
      if (jsonObj.get("postcard_uuid") != null && !jsonObj.get("postcard_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcard_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcard_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplyLibraryItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplyLibraryItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplyLibraryItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplyLibraryItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplyLibraryItemRequest>() {
           @Override
           public void write(JsonWriter out, ApplyLibraryItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplyLibraryItemRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplyLibraryItemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplyLibraryItemRequest
  * @throws IOException if the JSON string is invalid with respect to ApplyLibraryItemRequest
  */
  public static ApplyLibraryItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplyLibraryItemRequest.class);
  }

 /**
  * Convert an instance of ApplyLibraryItemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


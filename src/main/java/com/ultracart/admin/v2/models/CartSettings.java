/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartSettingsBilling;
import com.ultracart.admin.v2.models.CartSettingsGift;
import com.ultracart.admin.v2.models.CartSettingsPayment;
import com.ultracart.admin.v2.models.CartSettingsShipping;
import com.ultracart.admin.v2.models.CartSettingsTaxes;
import com.ultracart.admin.v2.models.CartSettingsTerms;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-25T09:55:58.664-05:00[America/Indianapolis]")
public class CartSettings {
  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private CartSettingsBilling billing;

  public static final String SERIALIZED_NAME_GIFT = "gift";
  @SerializedName(SERIALIZED_NAME_GIFT)
  private CartSettingsGift gift;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private CartSettingsPayment payment;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private CartSettingsShipping shipping;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private CartSettingsTaxes taxes;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private CartSettingsTerms terms;

  public CartSettings() { 
  }

  public CartSettings billing(CartSettingsBilling billing) {
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsBilling getBilling() {
    return billing;
  }


  public void setBilling(CartSettingsBilling billing) {
    this.billing = billing;
  }


  public CartSettings gift(CartSettingsGift gift) {
    
    this.gift = gift;
    return this;
  }

   /**
   * Get gift
   * @return gift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsGift getGift() {
    return gift;
  }


  public void setGift(CartSettingsGift gift) {
    this.gift = gift;
  }


  public CartSettings payment(CartSettingsPayment payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsPayment getPayment() {
    return payment;
  }


  public void setPayment(CartSettingsPayment payment) {
    this.payment = payment;
  }


  public CartSettings shipping(CartSettingsShipping shipping) {
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsShipping getShipping() {
    return shipping;
  }


  public void setShipping(CartSettingsShipping shipping) {
    this.shipping = shipping;
  }


  public CartSettings taxes(CartSettingsTaxes taxes) {
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsTaxes getTaxes() {
    return taxes;
  }


  public void setTaxes(CartSettingsTaxes taxes) {
    this.taxes = taxes;
  }


  public CartSettings terms(CartSettingsTerms terms) {
    
    this.terms = terms;
    return this;
  }

   /**
   * Get terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettingsTerms getTerms() {
    return terms;
  }


  public void setTerms(CartSettingsTerms terms) {
    this.terms = terms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSettings cartSettings = (CartSettings) o;
    return Objects.equals(this.billing, cartSettings.billing) &&
        Objects.equals(this.gift, cartSettings.gift) &&
        Objects.equals(this.payment, cartSettings.payment) &&
        Objects.equals(this.shipping, cartSettings.shipping) &&
        Objects.equals(this.taxes, cartSettings.taxes) &&
        Objects.equals(this.terms, cartSettings.terms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billing, gift, payment, shipping, taxes, terms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSettings {\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing");
    openapiFields.add("gift");
    openapiFields.add("payment");
    openapiFields.add("shipping");
    openapiFields.add("taxes");
    openapiFields.add("terms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartSettings.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSettings is not found in the empty JSON string", CartSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSettings` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `billing`
      if (jsonObj.getAsJsonObject("billing") != null) {
        CartSettingsBilling.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `gift`
      if (jsonObj.getAsJsonObject("gift") != null) {
        CartSettingsGift.validateJsonObject(jsonObj.getAsJsonObject("gift"));
      }
      // validate the optional field `payment`
      if (jsonObj.getAsJsonObject("payment") != null) {
        CartSettingsPayment.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
      // validate the optional field `shipping`
      if (jsonObj.getAsJsonObject("shipping") != null) {
        CartSettingsShipping.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      // validate the optional field `taxes`
      if (jsonObj.getAsJsonObject("taxes") != null) {
        CartSettingsTaxes.validateJsonObject(jsonObj.getAsJsonObject("taxes"));
      }
      // validate the optional field `terms`
      if (jsonObj.getAsJsonObject("terms") != null) {
        CartSettingsTerms.validateJsonObject(jsonObj.getAsJsonObject("terms"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSettings>() {
           @Override
           public void write(JsonWriter out, CartSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSettings
  * @throws IOException if the JSON string is invalid with respect to CartSettings
  */
  public static CartSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSettings.class);
  }

 /**
  * Convert an instance of CartSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetQuery;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportExecuteQueriesRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-16T14:51:12.703-04:00")



public class ReportExecuteQueriesRequest {
  @SerializedName("client_uuid")
  private String clientUuid = null;

  @SerializedName("connection_id")
  private String connectionId = null;

  @SerializedName("default_dataset_id")
  private String defaultDatasetId = null;

  @SerializedName("default_project_id")
  private String defaultProjectId = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("queries")
  private List<ReportDataSetQuery> queries = null;

  @SerializedName("request_dts")
  private String requestDts = null;

  /**
   * Security level to execute report under
   */
  @JsonAdapter(SecurityLevelEnum.Adapter.class)
  public enum SecurityLevelEnum {
    STANDARD("standard"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    SecurityLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityLevelEnum fromValue(String text) {
      for (SecurityLevelEnum b : SecurityLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SecurityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SecurityLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("security_level")
  private SecurityLevelEnum securityLevel = null;

  public ReportExecuteQueriesRequest clientUuid(String clientUuid) {
    this.clientUuid = clientUuid;
    return this;
  }

   /**
   * Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.
   * @return clientUuid
  **/
  @ApiModelProperty(value = "Unique UUID assigned to this client during the auth.  This will be used to locate the websocket connect id.")
  public String getClientUuid() {
    return clientUuid;
  }

  public void setClientUuid(String clientUuid) {
    this.clientUuid = clientUuid;
  }

  public ReportExecuteQueriesRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * The websocket connection id that should receive back notices of query completion.
   * @return connectionId
  **/
  @ApiModelProperty(value = "The websocket connection id that should receive back notices of query completion.")
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }

  public ReportExecuteQueriesRequest defaultDatasetId(String defaultDatasetId) {
    this.defaultDatasetId = defaultDatasetId;
    return this;
  }

   /**
   * Get defaultDatasetId
   * @return defaultDatasetId
  **/
  @ApiModelProperty(value = "")
  public String getDefaultDatasetId() {
    return defaultDatasetId;
  }

  public void setDefaultDatasetId(String defaultDatasetId) {
    this.defaultDatasetId = defaultDatasetId;
  }

  public ReportExecuteQueriesRequest defaultProjectId(String defaultProjectId) {
    this.defaultProjectId = defaultProjectId;
    return this;
  }

   /**
   * Get defaultProjectId
   * @return defaultProjectId
  **/
  @ApiModelProperty(value = "")
  public String getDefaultProjectId() {
    return defaultProjectId;
  }

  public void setDefaultProjectId(String defaultProjectId) {
    this.defaultProjectId = defaultProjectId;
  }

  public ReportExecuteQueriesRequest merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @ApiModelProperty(value = "")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public ReportExecuteQueriesRequest queries(List<ReportDataSetQuery> queries) {
    this.queries = queries;
    return this;
  }

  public ReportExecuteQueriesRequest addQueriesItem(ReportDataSetQuery queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<ReportDataSetQuery>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * An array of queries that we want the lambda function to execute.
   * @return queries
  **/
  @ApiModelProperty(value = "An array of queries that we want the lambda function to execute.")
  public List<ReportDataSetQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<ReportDataSetQuery> queries) {
    this.queries = queries;
  }

  public ReportExecuteQueriesRequest requestDts(String requestDts) {
    this.requestDts = requestDts;
    return this;
  }

   /**
   * Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results
   * @return requestDts
  **/
  @ApiModelProperty(value = "Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results")
  public String getRequestDts() {
    return requestDts;
  }

  public void setRequestDts(String requestDts) {
    this.requestDts = requestDts;
  }

  public ReportExecuteQueriesRequest securityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Security level to execute report under
   * @return securityLevel
  **/
  @ApiModelProperty(value = "Security level to execute report under")
  public SecurityLevelEnum getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(SecurityLevelEnum securityLevel) {
    this.securityLevel = securityLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportExecuteQueriesRequest reportExecuteQueriesRequest = (ReportExecuteQueriesRequest) o;
    return Objects.equals(this.clientUuid, reportExecuteQueriesRequest.clientUuid) &&
        Objects.equals(this.connectionId, reportExecuteQueriesRequest.connectionId) &&
        Objects.equals(this.defaultDatasetId, reportExecuteQueriesRequest.defaultDatasetId) &&
        Objects.equals(this.defaultProjectId, reportExecuteQueriesRequest.defaultProjectId) &&
        Objects.equals(this.merchantId, reportExecuteQueriesRequest.merchantId) &&
        Objects.equals(this.queries, reportExecuteQueriesRequest.queries) &&
        Objects.equals(this.requestDts, reportExecuteQueriesRequest.requestDts) &&
        Objects.equals(this.securityLevel, reportExecuteQueriesRequest.securityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientUuid, connectionId, defaultDatasetId, defaultProjectId, merchantId, queries, requestDts, securityLevel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportExecuteQueriesRequest {\n");
    
    sb.append("    clientUuid: ").append(toIndentedString(clientUuid)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    defaultDatasetId: ").append(toIndentedString(defaultDatasetId)).append("\n");
    sb.append("    defaultProjectId: ").append(toIndentedString(defaultProjectId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    requestDts: ").append(toIndentedString(requestDts)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationMessage;
import com.ultracart.admin.v2.models.ConversationParticipant;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Conversation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-03T15:03:12.760-04:00[America/Indianapolis]")
public class Conversation {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CONVERSATION_ARN = "conversation_arn";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ARN)
  private String conversationArn;

  public static final String SERIALIZED_NAME_CONVERSATION_UUID = "conversation_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_UUID)
  private String conversationUuid;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<ConversationMessage> messages = null;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<ConversationParticipant> participants = null;

  public Conversation() { 
  }

  public Conversation closed(Boolean closed) {
    
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getClosed() {
    return closed;
  }


  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public Conversation conversationArn(String conversationArn) {
    
    this.conversationArn = conversationArn;
    return this;
  }

   /**
   * Get conversationArn
   * @return conversationArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationArn() {
    return conversationArn;
  }


  public void setConversationArn(String conversationArn) {
    this.conversationArn = conversationArn;
  }


  public Conversation conversationUuid(String conversationUuid) {
    
    this.conversationUuid = conversationUuid;
    return this;
  }

   /**
   * Get conversationUuid
   * @return conversationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationUuid() {
    return conversationUuid;
  }


  public void setConversationUuid(String conversationUuid) {
    this.conversationUuid = conversationUuid;
  }


  public Conversation merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Conversation messages(List<ConversationMessage> messages) {
    
    this.messages = messages;
    return this;
  }

  public Conversation addMessagesItem(ConversationMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationMessage> getMessages() {
    return messages;
  }


  public void setMessages(List<ConversationMessage> messages) {
    this.messages = messages;
  }


  public Conversation participants(List<ConversationParticipant> participants) {
    
    this.participants = participants;
    return this;
  }

  public Conversation addParticipantsItem(ConversationParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationParticipant> getParticipants() {
    return participants;
  }


  public void setParticipants(List<ConversationParticipant> participants) {
    this.participants = participants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversation conversation = (Conversation) o;
    return Objects.equals(this.closed, conversation.closed) &&
        Objects.equals(this.conversationArn, conversation.conversationArn) &&
        Objects.equals(this.conversationUuid, conversation.conversationUuid) &&
        Objects.equals(this.merchantId, conversation.merchantId) &&
        Objects.equals(this.messages, conversation.messages) &&
        Objects.equals(this.participants, conversation.participants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, conversationArn, conversationUuid, merchantId, messages, participants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversation {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    conversationArn: ").append(toIndentedString(conversationArn)).append("\n");
    sb.append("    conversationUuid: ").append(toIndentedString(conversationUuid)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("conversation_arn");
    openapiFields.add("conversation_uuid");
    openapiFields.add("merchant_id");
    openapiFields.add("messages");
    openapiFields.add("participants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Conversation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Conversation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conversation is not found in the empty JSON string", Conversation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Conversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conversation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("conversation_arn") != null && !jsonObj.get("conversation_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_arn").toString()));
      }
      if (jsonObj.get("conversation_uuid") != null && !jsonObj.get("conversation_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_uuid").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
      if (jsonArraymessages != null) {
        // ensure the json data is an array
        if (!jsonObj.get("messages").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
        }

        // validate the optional field `messages` (array)
        for (int i = 0; i < jsonArraymessages.size(); i++) {
          ConversationMessage.validateJsonObject(jsonArraymessages.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      if (jsonArrayparticipants != null) {
        // ensure the json data is an array
        if (!jsonObj.get("participants").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
        }

        // validate the optional field `participants` (array)
        for (int i = 0; i < jsonArrayparticipants.size(); i++) {
          ConversationParticipant.validateJsonObject(jsonArrayparticipants.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conversation.class));

       return (TypeAdapter<T>) new TypeAdapter<Conversation>() {
           @Override
           public void write(JsonWriter out, Conversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conversation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Conversation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Conversation
  * @throws IOException if the JSON string is invalid with respect to Conversation
  */
  public static Conversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conversation.class);
  }

 /**
  * Convert an instance of Conversation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPaymentHealthBenefitCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-06T15:20:48.894-04:00[America/Indianapolis]")
public class OrderPaymentHealthBenefitCard {
  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_EXPIRATION_MONTH = "health_benefit_card_expiration_month";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_EXPIRATION_MONTH)
  private Integer healthBenefitCardExpirationMonth;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_EXPIRATION_YEAR = "health_benefit_card_expiration_year";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_EXPIRATION_YEAR)
  private Integer healthBenefitCardExpirationYear;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER = "health_benefit_card_number";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER)
  private String healthBenefitCardNumber;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER_TOKEN = "health_benefit_card_number_token";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER_TOKEN)
  private String healthBenefitCardNumberToken;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER_TRUNCATED = "health_benefit_card_number_truncated";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_NUMBER_TRUNCATED)
  private Boolean healthBenefitCardNumberTruncated;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_VERIFICATION_NUMBER_TOKEN = "health_benefit_card_verification_number_token";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_VERIFICATION_NUMBER_TOKEN)
  private String healthBenefitCardVerificationNumberToken;

  public OrderPaymentHealthBenefitCard() { 
  }

  public OrderPaymentHealthBenefitCard healthBenefitCardExpirationMonth(Integer healthBenefitCardExpirationMonth) {
    
    this.healthBenefitCardExpirationMonth = healthBenefitCardExpirationMonth;
    return this;
  }

   /**
   * Health benefit card expiration month (1-12)
   * @return healthBenefitCardExpirationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card expiration month (1-12)")

  public Integer getHealthBenefitCardExpirationMonth() {
    return healthBenefitCardExpirationMonth;
  }


  public void setHealthBenefitCardExpirationMonth(Integer healthBenefitCardExpirationMonth) {
    this.healthBenefitCardExpirationMonth = healthBenefitCardExpirationMonth;
  }


  public OrderPaymentHealthBenefitCard healthBenefitCardExpirationYear(Integer healthBenefitCardExpirationYear) {
    
    this.healthBenefitCardExpirationYear = healthBenefitCardExpirationYear;
    return this;
  }

   /**
   * Health benefit card expiration year (Four digit year)
   * @return healthBenefitCardExpirationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card expiration year (Four digit year)")

  public Integer getHealthBenefitCardExpirationYear() {
    return healthBenefitCardExpirationYear;
  }


  public void setHealthBenefitCardExpirationYear(Integer healthBenefitCardExpirationYear) {
    this.healthBenefitCardExpirationYear = healthBenefitCardExpirationYear;
  }


  public OrderPaymentHealthBenefitCard healthBenefitCardNumber(String healthBenefitCardNumber) {
    
    this.healthBenefitCardNumber = healthBenefitCardNumber;
    return this;
  }

   /**
   * Health benefit card number (masked to last 4)
   * @return healthBenefitCardNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card number (masked to last 4)")

  public String getHealthBenefitCardNumber() {
    return healthBenefitCardNumber;
  }


  public void setHealthBenefitCardNumber(String healthBenefitCardNumber) {
    this.healthBenefitCardNumber = healthBenefitCardNumber;
  }


  public OrderPaymentHealthBenefitCard healthBenefitCardNumberToken(String healthBenefitCardNumberToken) {
    
    this.healthBenefitCardNumberToken = healthBenefitCardNumberToken;
    return this;
  }

   /**
   * Health benefit card number token from hosted fields used to update the health benefit card number
   * @return healthBenefitCardNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card number token from hosted fields used to update the health benefit card number")

  public String getHealthBenefitCardNumberToken() {
    return healthBenefitCardNumberToken;
  }


  public void setHealthBenefitCardNumberToken(String healthBenefitCardNumberToken) {
    this.healthBenefitCardNumberToken = healthBenefitCardNumberToken;
  }


  public OrderPaymentHealthBenefitCard healthBenefitCardNumberTruncated(Boolean healthBenefitCardNumberTruncated) {
    
    this.healthBenefitCardNumberTruncated = healthBenefitCardNumberTruncated;
    return this;
  }

   /**
   * True if the health benefit card has been truncated
   * @return healthBenefitCardNumberTruncated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the health benefit card has been truncated")

  public Boolean getHealthBenefitCardNumberTruncated() {
    return healthBenefitCardNumberTruncated;
  }


  public void setHealthBenefitCardNumberTruncated(Boolean healthBenefitCardNumberTruncated) {
    this.healthBenefitCardNumberTruncated = healthBenefitCardNumberTruncated;
  }


  public OrderPaymentHealthBenefitCard healthBenefitCardVerificationNumberToken(String healthBenefitCardVerificationNumberToken) {
    
    this.healthBenefitCardVerificationNumberToken = healthBenefitCardVerificationNumberToken;
    return this;
  }

   /**
   * Health benefit card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries
   * @return healthBenefitCardVerificationNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries")

  public String getHealthBenefitCardVerificationNumberToken() {
    return healthBenefitCardVerificationNumberToken;
  }


  public void setHealthBenefitCardVerificationNumberToken(String healthBenefitCardVerificationNumberToken) {
    this.healthBenefitCardVerificationNumberToken = healthBenefitCardVerificationNumberToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentHealthBenefitCard orderPaymentHealthBenefitCard = (OrderPaymentHealthBenefitCard) o;
    return Objects.equals(this.healthBenefitCardExpirationMonth, orderPaymentHealthBenefitCard.healthBenefitCardExpirationMonth) &&
        Objects.equals(this.healthBenefitCardExpirationYear, orderPaymentHealthBenefitCard.healthBenefitCardExpirationYear) &&
        Objects.equals(this.healthBenefitCardNumber, orderPaymentHealthBenefitCard.healthBenefitCardNumber) &&
        Objects.equals(this.healthBenefitCardNumberToken, orderPaymentHealthBenefitCard.healthBenefitCardNumberToken) &&
        Objects.equals(this.healthBenefitCardNumberTruncated, orderPaymentHealthBenefitCard.healthBenefitCardNumberTruncated) &&
        Objects.equals(this.healthBenefitCardVerificationNumberToken, orderPaymentHealthBenefitCard.healthBenefitCardVerificationNumberToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthBenefitCardExpirationMonth, healthBenefitCardExpirationYear, healthBenefitCardNumber, healthBenefitCardNumberToken, healthBenefitCardNumberTruncated, healthBenefitCardVerificationNumberToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentHealthBenefitCard {\n");
    sb.append("    healthBenefitCardExpirationMonth: ").append(toIndentedString(healthBenefitCardExpirationMonth)).append("\n");
    sb.append("    healthBenefitCardExpirationYear: ").append(toIndentedString(healthBenefitCardExpirationYear)).append("\n");
    sb.append("    healthBenefitCardNumber: ").append(toIndentedString(healthBenefitCardNumber)).append("\n");
    sb.append("    healthBenefitCardNumberToken: ").append(toIndentedString(healthBenefitCardNumberToken)).append("\n");
    sb.append("    healthBenefitCardNumberTruncated: ").append(toIndentedString(healthBenefitCardNumberTruncated)).append("\n");
    sb.append("    healthBenefitCardVerificationNumberToken: ").append(toIndentedString(healthBenefitCardVerificationNumberToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("health_benefit_card_expiration_month");
    openapiFields.add("health_benefit_card_expiration_year");
    openapiFields.add("health_benefit_card_number");
    openapiFields.add("health_benefit_card_number_token");
    openapiFields.add("health_benefit_card_number_truncated");
    openapiFields.add("health_benefit_card_verification_number_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPaymentHealthBenefitCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPaymentHealthBenefitCard.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPaymentHealthBenefitCard is not found in the empty JSON string", OrderPaymentHealthBenefitCard.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPaymentHealthBenefitCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPaymentHealthBenefitCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("health_benefit_card_number") != null && !jsonObj.get("health_benefit_card_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_benefit_card_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_benefit_card_number").toString()));
      }
      if (jsonObj.get("health_benefit_card_number_token") != null && !jsonObj.get("health_benefit_card_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_benefit_card_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_benefit_card_number_token").toString()));
      }
      if (jsonObj.get("health_benefit_card_verification_number_token") != null && !jsonObj.get("health_benefit_card_verification_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_benefit_card_verification_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_benefit_card_verification_number_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPaymentHealthBenefitCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPaymentHealthBenefitCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPaymentHealthBenefitCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPaymentHealthBenefitCard.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPaymentHealthBenefitCard>() {
           @Override
           public void write(JsonWriter out, OrderPaymentHealthBenefitCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPaymentHealthBenefitCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPaymentHealthBenefitCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPaymentHealthBenefitCard
  * @throws IOException if the JSON string is invalid with respect to OrderPaymentHealthBenefitCard
  */
  public static OrderPaymentHealthBenefitCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPaymentHealthBenefitCard.class);
  }

 /**
  * Convert an instance of OrderPaymentHealthBenefitCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


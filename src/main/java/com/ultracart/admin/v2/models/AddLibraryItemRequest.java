/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.LibraryItemAttribute;
import com.ultracart.admin.v2.models.LibraryItemScreenshot;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * AddLibraryItemRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T11:25:46.475-05:00[America/Indianapolis]")
public class AddLibraryItemRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<LibraryItemAttribute> attributes = null;

  public static final String SERIALIZED_NAME_CJSON = "cjson";
  @SerializedName(SERIALIZED_NAME_CJSON)
  private String cjson;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_NAME = "email_name";
  @SerializedName(SERIALIZED_NAME_EMAIL_NAME)
  private String emailName;

  public static final String SERIALIZED_NAME_EMAIL_PATH = "email_path";
  @SerializedName(SERIALIZED_NAME_EMAIL_PATH)
  private String emailPath;

  public static final String SERIALIZED_NAME_SCREENSHOTS = "screenshots";
  @SerializedName(SERIALIZED_NAME_SCREENSHOTS)
  private List<LibraryItemScreenshot> screenshots = null;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPSELL_OFFER_OID = "upsell_offer_oid";
  @SerializedName(SERIALIZED_NAME_UPSELL_OFFER_OID)
  private Integer upsellOfferOid;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public AddLibraryItemRequest() { 
  }

  public AddLibraryItemRequest attributes(List<LibraryItemAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public AddLibraryItemRequest addAttributesItem(LibraryItemAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attributes associated with the library item to contain additional configuration.
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attributes associated with the library item to contain additional configuration.")

  public List<LibraryItemAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<LibraryItemAttribute> attributes) {
    this.attributes = attributes;
  }


  public AddLibraryItemRequest cjson(String cjson) {
    
    this.cjson = cjson;
    return this;
  }

   /**
   * Cjson to be added to library
   * @return cjson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cjson to be added to library")

  public String getCjson() {
    return cjson;
  }


  public void setCjson(String cjson) {
    this.cjson = cjson;
  }


  public AddLibraryItemRequest contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * flow, campaign, cjson, email, transactional_email, postcard or upsell
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "flow, campaign, cjson, email, transactional_email, postcard or upsell")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public AddLibraryItemRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * description of library item
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description of library item")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public AddLibraryItemRequest emailName(String emailName) {
    
    this.emailName = emailName;
    return this;
  }

   /**
   * Required if content_type is transactional_email. This is the name of the email template (html, not text).  This name should have a .vm file extension.  An example is auto_order_cancel_html.vm
   * @return emailName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if content_type is transactional_email. This is the name of the email template (html, not text).  This name should have a .vm file extension.  An example is auto_order_cancel_html.vm")

  public String getEmailName() {
    return emailName;
  }


  public void setEmailName(String emailName) {
    this.emailName = emailName;
  }


  public AddLibraryItemRequest emailPath(String emailPath) {
    
    this.emailPath = emailPath;
    return this;
  }

   /**
   * Required if content_type is transactional_email. This is the full path to the email template stored in the file system.  This defines which StoreFront contains the desired email template.  An example is /themes/Elements/core/emails/auto_order_cancel_html.vm
   * @return emailPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if content_type is transactional_email. This is the full path to the email template stored in the file system.  This defines which StoreFront contains the desired email template.  An example is /themes/Elements/core/emails/auto_order_cancel_html.vm")

  public String getEmailPath() {
    return emailPath;
  }


  public void setEmailPath(String emailPath) {
    this.emailPath = emailPath;
  }


  public AddLibraryItemRequest screenshots(List<LibraryItemScreenshot> screenshots) {
    
    this.screenshots = screenshots;
    return this;
  }

  public AddLibraryItemRequest addScreenshotsItem(LibraryItemScreenshot screenshotsItem) {
    if (this.screenshots == null) {
      this.screenshots = new ArrayList<>();
    }
    this.screenshots.add(screenshotsItem);
    return this;
  }

   /**
   * Screenshot urls for display
   * @return screenshots
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Screenshot urls for display")

  public List<LibraryItemScreenshot> getScreenshots() {
    return screenshots;
  }


  public void setScreenshots(List<LibraryItemScreenshot> screenshots) {
    this.screenshots = screenshots;
  }


  public AddLibraryItemRequest storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * StoreFront oid where content originates necessary for tracking down relative assets
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "StoreFront oid where content originates necessary for tracking down relative assets")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public AddLibraryItemRequest title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * title of library item, usually the name of the flow or campaign, or description of cjson
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "title of library item, usually the name of the flow or campaign, or description of cjson")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public AddLibraryItemRequest upsellOfferOid(Integer upsellOfferOid) {
    
    this.upsellOfferOid = upsellOfferOid;
    return this;
  }

   /**
   * Required if content_type is upsell. This is object identifier of a StoreFront Upsell Offer.
   * @return upsellOfferOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if content_type is upsell. This is object identifier of a StoreFront Upsell Offer.")

  public Integer getUpsellOfferOid() {
    return upsellOfferOid;
  }


  public void setUpsellOfferOid(Integer upsellOfferOid) {
    this.upsellOfferOid = upsellOfferOid;
  }


  public AddLibraryItemRequest uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of communication flow, campaign, email, postcard, or null if this item is something else. transactional_email do not have a uuid because they are singleton objects within a storefront and easily identifiable by name
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUID of communication flow, campaign, email, postcard, or null if this item is something else. transactional_email do not have a uuid because they are singleton objects within a storefront and easily identifiable by name")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddLibraryItemRequest addLibraryItemRequest = (AddLibraryItemRequest) o;
    return Objects.equals(this.attributes, addLibraryItemRequest.attributes) &&
        Objects.equals(this.cjson, addLibraryItemRequest.cjson) &&
        Objects.equals(this.contentType, addLibraryItemRequest.contentType) &&
        Objects.equals(this.description, addLibraryItemRequest.description) &&
        Objects.equals(this.emailName, addLibraryItemRequest.emailName) &&
        Objects.equals(this.emailPath, addLibraryItemRequest.emailPath) &&
        Objects.equals(this.screenshots, addLibraryItemRequest.screenshots) &&
        Objects.equals(this.storefrontOid, addLibraryItemRequest.storefrontOid) &&
        Objects.equals(this.title, addLibraryItemRequest.title) &&
        Objects.equals(this.upsellOfferOid, addLibraryItemRequest.upsellOfferOid) &&
        Objects.equals(this.uuid, addLibraryItemRequest.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, cjson, contentType, description, emailName, emailPath, screenshots, storefrontOid, title, upsellOfferOid, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddLibraryItemRequest {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    cjson: ").append(toIndentedString(cjson)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailName: ").append(toIndentedString(emailName)).append("\n");
    sb.append("    emailPath: ").append(toIndentedString(emailPath)).append("\n");
    sb.append("    screenshots: ").append(toIndentedString(screenshots)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    upsellOfferOid: ").append(toIndentedString(upsellOfferOid)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("cjson");
    openapiFields.add("content_type");
    openapiFields.add("description");
    openapiFields.add("email_name");
    openapiFields.add("email_path");
    openapiFields.add("screenshots");
    openapiFields.add("storefront_oid");
    openapiFields.add("title");
    openapiFields.add("upsell_offer_oid");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddLibraryItemRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AddLibraryItemRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddLibraryItemRequest is not found in the empty JSON string", AddLibraryItemRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddLibraryItemRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddLibraryItemRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      if (jsonArrayattributes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("attributes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
        }

        // validate the optional field `attributes` (array)
        for (int i = 0; i < jsonArrayattributes.size(); i++) {
          LibraryItemAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("cjson") != null && !jsonObj.get("cjson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cjson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cjson").toString()));
      }
      if (jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("email_name") != null && !jsonObj.get("email_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_name").toString()));
      }
      if (jsonObj.get("email_path") != null && !jsonObj.get("email_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_path").toString()));
      }
      JsonArray jsonArrayscreenshots = jsonObj.getAsJsonArray("screenshots");
      if (jsonArrayscreenshots != null) {
        // ensure the json data is an array
        if (!jsonObj.get("screenshots").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `screenshots` to be an array in the JSON string but got `%s`", jsonObj.get("screenshots").toString()));
        }

        // validate the optional field `screenshots` (array)
        for (int i = 0; i < jsonArrayscreenshots.size(); i++) {
          LibraryItemScreenshot.validateJsonObject(jsonArrayscreenshots.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddLibraryItemRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddLibraryItemRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddLibraryItemRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddLibraryItemRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddLibraryItemRequest>() {
           @Override
           public void write(JsonWriter out, AddLibraryItemRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddLibraryItemRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddLibraryItemRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddLibraryItemRequest
  * @throws IOException if the JSON string is invalid with respect to AddLibraryItemRequest
  */
  public static AddLibraryItemRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddLibraryItemRequest.class);
  }

 /**
  * Convert an instance of AddLibraryItemRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


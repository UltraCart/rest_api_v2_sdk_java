/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSourceSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T16:39:09.029-04:00[America/Indianapolis]")
public class ReportDataSourceSchema {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private String config;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Boolean dimension;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Type of the column.  Only supporting the allowed values.  Any other types will be ignored.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BIGNUMERIC("BIGNUMERIC"),
    
    BOOL("BOOL"),
    
    DATE("DATE"),
    
    DATETIME("DATETIME"),
    
    FLOAT64("FLOAT64"),
    
    INT64("INT64"),
    
    JSON("JSON"),
    
    NUMERIC("NUMERIC"),
    
    STRING("STRING"),
    
    TIME("TIME"),
    
    TIMESTAMP("TIMESTAMP");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ReportDataSourceSchema() { 
  }

  public ReportDataSourceSchema config(String config) {
    
    this.config = config;
    return this;
  }

   /**
   * A JSON representation of the configuration for this visualization
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON representation of the configuration for this visualization")

  public String getConfig() {
    return config;
  }


  public void setConfig(String config) {
    this.config = config;
  }


  public ReportDataSourceSchema dimension(Boolean dimension) {
    
    this.dimension = dimension;
    return this;
  }

   /**
   * Whether or not this column can be used as a dimension within a visualization
   * @return dimension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not this column can be used as a dimension within a visualization")

  public Boolean getDimension() {
    return dimension;
  }


  public void setDimension(Boolean dimension) {
    this.dimension = dimension;
  }


  public ReportDataSourceSchema name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ReportDataSourceSchema type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the column.  Only supporting the allowed values.  Any other types will be ignored.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the column.  Only supporting the allowed values.  Any other types will be ignored.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSourceSchema reportDataSourceSchema = (ReportDataSourceSchema) o;
    return Objects.equals(this.config, reportDataSourceSchema.config) &&
        Objects.equals(this.dimension, reportDataSourceSchema.dimension) &&
        Objects.equals(this.name, reportDataSourceSchema.name) &&
        Objects.equals(this.type, reportDataSourceSchema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, dimension, name, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSourceSchema {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("dimension");
    openapiFields.add("name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSourceSchema
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSourceSchema.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSourceSchema is not found in the empty JSON string", ReportDataSourceSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSourceSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSourceSchema` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSourceSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSourceSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSourceSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSourceSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSourceSchema>() {
           @Override
           public void write(JsonWriter out, ReportDataSourceSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSourceSchema read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSourceSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSourceSchema
  * @throws IOException if the JSON string is invalid with respect to ReportDataSourceSchema
  */
  public static ReportDataSourceSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSourceSchema.class);
  }

 /**
  * Convert an instance of ReportDataSourceSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


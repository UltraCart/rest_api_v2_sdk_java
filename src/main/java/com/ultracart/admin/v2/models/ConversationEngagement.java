/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationEngagementEquation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationEngagement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T11:25:46.475-05:00[America/Indianapolis]")
public class ConversationEngagement {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONVERSATION_ENGAGEMENT_OID = "conversation_engagement_oid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ENGAGEMENT_OID)
  private Integer conversationEngagementOid;

  public static final String SERIALIZED_NAME_CUSTOMER_GREETING = "customer_greeting";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_GREETING)
  private String customerGreeting;

  public static final String SERIALIZED_NAME_DEPARTMENT_OIDS = "department_oids";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_OIDS)
  private List<Integer> departmentOids = null;

  public static final String SERIALIZED_NAME_ENGAGEMENT_NAME = "engagement_name";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_NAME)
  private String engagementName;

  public static final String SERIALIZED_NAME_EQUATION = "equation";
  @SerializedName(SERIALIZED_NAME_EQUATION)
  private ConversationEngagementEquation equation;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE = "time_on_page";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE)
  private Integer timeOnPage;

  /**
   * The type of visitor
   */
  @JsonAdapter(VisitorTypeEnum.Adapter.class)
  public enum VisitorTypeEnum {
    ALL("all"),
    
    FIRST_TIME("first time"),
    
    RETURNING("returning");

    private String value;

    VisitorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisitorTypeEnum fromValue(String value) {
      for (VisitorTypeEnum b : VisitorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisitorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisitorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisitorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisitorTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISITOR_TYPE = "visitor_type";
  @SerializedName(SERIALIZED_NAME_VISITOR_TYPE)
  private VisitorTypeEnum visitorType;

  public ConversationEngagement() { 
  }

  public ConversationEngagement active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public ConversationEngagement conversationEngagementOid(Integer conversationEngagementOid) {
    
    this.conversationEngagementOid = conversationEngagementOid;
    return this;
  }

   /**
   * Get conversationEngagementOid
   * @return conversationEngagementOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getConversationEngagementOid() {
    return conversationEngagementOid;
  }


  public void setConversationEngagementOid(Integer conversationEngagementOid) {
    this.conversationEngagementOid = conversationEngagementOid;
  }


  public ConversationEngagement customerGreeting(String customerGreeting) {
    
    this.customerGreeting = customerGreeting;
    return this;
  }

   /**
   * Get customerGreeting
   * @return customerGreeting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerGreeting() {
    return customerGreeting;
  }


  public void setCustomerGreeting(String customerGreeting) {
    this.customerGreeting = customerGreeting;
  }


  public ConversationEngagement departmentOids(List<Integer> departmentOids) {
    
    this.departmentOids = departmentOids;
    return this;
  }

  public ConversationEngagement addDepartmentOidsItem(Integer departmentOidsItem) {
    if (this.departmentOids == null) {
      this.departmentOids = new ArrayList<>();
    }
    this.departmentOids.add(departmentOidsItem);
    return this;
  }

   /**
   * Get departmentOids
   * @return departmentOids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDepartmentOids() {
    return departmentOids;
  }


  public void setDepartmentOids(List<Integer> departmentOids) {
    this.departmentOids = departmentOids;
  }


  public ConversationEngagement engagementName(String engagementName) {
    
    this.engagementName = engagementName;
    return this;
  }

   /**
   * Get engagementName
   * @return engagementName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEngagementName() {
    return engagementName;
  }


  public void setEngagementName(String engagementName) {
    this.engagementName = engagementName;
  }


  public ConversationEngagement equation(ConversationEngagementEquation equation) {
    
    this.equation = equation;
    return this;
  }

   /**
   * Get equation
   * @return equation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEngagementEquation getEquation() {
    return equation;
  }


  public void setEquation(ConversationEngagementEquation equation) {
    this.equation = equation;
  }


  public ConversationEngagement timeOnPage(Integer timeOnPage) {
    
    this.timeOnPage = timeOnPage;
    return this;
  }

   /**
   * Get timeOnPage
   * @return timeOnPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTimeOnPage() {
    return timeOnPage;
  }


  public void setTimeOnPage(Integer timeOnPage) {
    this.timeOnPage = timeOnPage;
  }


  public ConversationEngagement visitorType(VisitorTypeEnum visitorType) {
    
    this.visitorType = visitorType;
    return this;
  }

   /**
   * The type of visitor
   * @return visitorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of visitor")

  public VisitorTypeEnum getVisitorType() {
    return visitorType;
  }


  public void setVisitorType(VisitorTypeEnum visitorType) {
    this.visitorType = visitorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationEngagement conversationEngagement = (ConversationEngagement) o;
    return Objects.equals(this.active, conversationEngagement.active) &&
        Objects.equals(this.conversationEngagementOid, conversationEngagement.conversationEngagementOid) &&
        Objects.equals(this.customerGreeting, conversationEngagement.customerGreeting) &&
        Objects.equals(this.departmentOids, conversationEngagement.departmentOids) &&
        Objects.equals(this.engagementName, conversationEngagement.engagementName) &&
        Objects.equals(this.equation, conversationEngagement.equation) &&
        Objects.equals(this.timeOnPage, conversationEngagement.timeOnPage) &&
        Objects.equals(this.visitorType, conversationEngagement.visitorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, conversationEngagementOid, customerGreeting, departmentOids, engagementName, equation, timeOnPage, visitorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationEngagement {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    conversationEngagementOid: ").append(toIndentedString(conversationEngagementOid)).append("\n");
    sb.append("    customerGreeting: ").append(toIndentedString(customerGreeting)).append("\n");
    sb.append("    departmentOids: ").append(toIndentedString(departmentOids)).append("\n");
    sb.append("    engagementName: ").append(toIndentedString(engagementName)).append("\n");
    sb.append("    equation: ").append(toIndentedString(equation)).append("\n");
    sb.append("    timeOnPage: ").append(toIndentedString(timeOnPage)).append("\n");
    sb.append("    visitorType: ").append(toIndentedString(visitorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("conversation_engagement_oid");
    openapiFields.add("customer_greeting");
    openapiFields.add("department_oids");
    openapiFields.add("engagement_name");
    openapiFields.add("equation");
    openapiFields.add("time_on_page");
    openapiFields.add("visitor_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationEngagement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationEngagement.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationEngagement is not found in the empty JSON string", ConversationEngagement.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationEngagement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationEngagement` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("customer_greeting") != null && !jsonObj.get("customer_greeting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_greeting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_greeting").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("department_oids") != null && !jsonObj.get("department_oids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `department_oids` to be an array in the JSON string but got `%s`", jsonObj.get("department_oids").toString()));
      }
      if (jsonObj.get("engagement_name") != null && !jsonObj.get("engagement_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagement_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engagement_name").toString()));
      }
      // validate the optional field `equation`
      if (jsonObj.getAsJsonObject("equation") != null) {
        ConversationEngagementEquation.validateJsonObject(jsonObj.getAsJsonObject("equation"));
      }
      if (jsonObj.get("visitor_type") != null && !jsonObj.get("visitor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitor_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationEngagement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationEngagement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationEngagement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationEngagement.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationEngagement>() {
           @Override
           public void write(JsonWriter out, ConversationEngagement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationEngagement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationEngagement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationEngagement
  * @throws IOException if the JSON string is invalid with respect to ConversationEngagement
  */
  public static ConversationEngagement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationEngagement.class);
  }

 /**
  * Convert an instance of ConversationEngagement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportPageVisualizationDimension;
import com.ultracart.admin.v2.models.ReportPageVisualizationMetric;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportPageVisualization
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:02:44.982-04:00")



public class ReportPageVisualization {
  @SerializedName("config")
  private String config = null;

  @SerializedName("data_source_name")
  private String dataSourceName = null;

  @SerializedName("data_source_uuid")
  private String dataSourceUuid = null;

  @SerializedName("dimensions")
  private List<ReportPageVisualizationDimension> dimensions = null;

  @SerializedName("metrics")
  private List<ReportPageVisualizationMetric> metrics = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("show_comparison")
  private Boolean showComparison = null;

  @SerializedName("styles")
  private String styles = null;

  /**
   * Type of visualization
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SCORE_CARD("score card"),
    
    LINE_CHART("line chart"),
    
    BAR_CHART("bar chart"),
    
    TEXT("text"),
    
    TABLE("table"),
    
    GAUGE("gauge"),
    
    PIE_CHART("pie chart");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("visualization_uuid")
  private String visualizationUuid = null;

  public ReportPageVisualization config(String config) {
    this.config = config;
    return this;
  }

   /**
   * A JSON representation of the configuration for this visualization
   * @return config
  **/
  @ApiModelProperty(value = "A JSON representation of the configuration for this visualization")
  public String getConfig() {
    return config;
  }

  public void setConfig(String config) {
    this.config = config;
  }

  public ReportPageVisualization dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

   /**
   * Get dataSourceName
   * @return dataSourceName
  **/
  @ApiModelProperty(value = "")
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }

  public ReportPageVisualization dataSourceUuid(String dataSourceUuid) {
    this.dataSourceUuid = dataSourceUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data source.
   * @return dataSourceUuid
  **/
  @ApiModelProperty(value = "A unique identifier assigned to the data source.")
  public String getDataSourceUuid() {
    return dataSourceUuid;
  }

  public void setDataSourceUuid(String dataSourceUuid) {
    this.dataSourceUuid = dataSourceUuid;
  }

  public ReportPageVisualization dimensions(List<ReportPageVisualizationDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public ReportPageVisualization addDimensionsItem(ReportPageVisualizationDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<ReportPageVisualizationDimension>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Get dimensions
   * @return dimensions
  **/
  @ApiModelProperty(value = "")
  public List<ReportPageVisualizationDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<ReportPageVisualizationDimension> dimensions) {
    this.dimensions = dimensions;
  }

  public ReportPageVisualization metrics(List<ReportPageVisualizationMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ReportPageVisualization addMetricsItem(ReportPageVisualizationMetric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<ReportPageVisualizationMetric>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  @ApiModelProperty(value = "")
  public List<ReportPageVisualizationMetric> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<ReportPageVisualizationMetric> metrics) {
    this.metrics = metrics;
  }

  public ReportPageVisualization name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportPageVisualization showComparison(Boolean showComparison) {
    this.showComparison = showComparison;
    return this;
  }

   /**
   * True if the visualization should show a comparison based upon the date range
   * @return showComparison
  **/
  @ApiModelProperty(value = "True if the visualization should show a comparison based upon the date range")
  public Boolean isShowComparison() {
    return showComparison;
  }

  public void setShowComparison(Boolean showComparison) {
    this.showComparison = showComparison;
  }

  public ReportPageVisualization styles(String styles) {
    this.styles = styles;
    return this;
  }

   /**
   * A JSON representation of the style configuration for this visualization
   * @return styles
  **/
  @ApiModelProperty(value = "A JSON representation of the style configuration for this visualization")
  public String getStyles() {
    return styles;
  }

  public void setStyles(String styles) {
    this.styles = styles;
  }

  public ReportPageVisualization type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of visualization
   * @return type
  **/
  @ApiModelProperty(value = "Type of visualization")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ReportPageVisualization visualizationUuid(String visualizationUuid) {
    this.visualizationUuid = visualizationUuid;
    return this;
  }

   /**
   * A UUID for the visualization
   * @return visualizationUuid
  **/
  @ApiModelProperty(value = "A UUID for the visualization")
  public String getVisualizationUuid() {
    return visualizationUuid;
  }

  public void setVisualizationUuid(String visualizationUuid) {
    this.visualizationUuid = visualizationUuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPageVisualization reportPageVisualization = (ReportPageVisualization) o;
    return Objects.equals(this.config, reportPageVisualization.config) &&
        Objects.equals(this.dataSourceName, reportPageVisualization.dataSourceName) &&
        Objects.equals(this.dataSourceUuid, reportPageVisualization.dataSourceUuid) &&
        Objects.equals(this.dimensions, reportPageVisualization.dimensions) &&
        Objects.equals(this.metrics, reportPageVisualization.metrics) &&
        Objects.equals(this.name, reportPageVisualization.name) &&
        Objects.equals(this.showComparison, reportPageVisualization.showComparison) &&
        Objects.equals(this.styles, reportPageVisualization.styles) &&
        Objects.equals(this.type, reportPageVisualization.type) &&
        Objects.equals(this.visualizationUuid, reportPageVisualization.visualizationUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, dataSourceName, dataSourceUuid, dimensions, metrics, name, showComparison, styles, type, visualizationUuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPageVisualization {\n");
    
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    dataSourceUuid: ").append(toIndentedString(dataSourceUuid)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    showComparison: ").append(toIndentedString(showComparison)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    visualizationUuid: ").append(toIndentedString(visualizationUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


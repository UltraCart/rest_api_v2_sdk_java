/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ChannelPartner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-20T10:38:24.317-05:00[America/Indianapolis]")
public class ChannelPartner {
  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_OID = "channel_partner_oid";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_OID)
  private Integer channelPartnerOid;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMMUNICATION_METHOD = "communication_method";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_METHOD)
  private String communicationMethod;

  public static final String SERIALIZED_NAME_DONT_HOLD_SHIPMENT = "dont_hold_shipment";
  @SerializedName(SERIALIZED_NAME_DONT_HOLD_SHIPMENT)
  private Boolean dontHoldShipment;

  public static final String SERIALIZED_NAME_INACTIVE = "inactive";
  @SerializedName(SERIALIZED_NAME_INACTIVE)
  private Boolean inactive;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SKIP_CUSTOMER_EMAILS = "skip_customer_emails";
  @SerializedName(SERIALIZED_NAME_SKIP_CUSTOMER_EMAILS)
  private Boolean skipCustomerEmails;

  public ChannelPartner() { 
  }

  public ChannelPartner channelPartnerOid(Integer channelPartnerOid) {
    
    this.channelPartnerOid = channelPartnerOid;
    return this;
  }

   /**
   * Channel partner object id
   * @return channelPartnerOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel partner object id")

  public Integer getChannelPartnerOid() {
    return channelPartnerOid;
  }


  public void setChannelPartnerOid(Integer channelPartnerOid) {
    this.channelPartnerOid = channelPartnerOid;
  }


  public ChannelPartner code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Code associated with the channel partner
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code associated with the channel partner")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ChannelPartner communicationMethod(String communicationMethod) {
    
    this.communicationMethod = communicationMethod;
    return this;
  }

   /**
   * Communication method of the channel partner
   * @return communicationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Communication method of the channel partner")

  public String getCommunicationMethod() {
    return communicationMethod;
  }


  public void setCommunicationMethod(String communicationMethod) {
    this.communicationMethod = communicationMethod;
  }


  public ChannelPartner dontHoldShipment(Boolean dontHoldShipment) {
    
    this.dontHoldShipment = dontHoldShipment;
    return this;
  }

   /**
   * True if shipments should immediately process for this channel partner.
   * @return dontHoldShipment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if shipments should immediately process for this channel partner.")

  public Boolean getDontHoldShipment() {
    return dontHoldShipment;
  }


  public void setDontHoldShipment(Boolean dontHoldShipment) {
    this.dontHoldShipment = dontHoldShipment;
  }


  public ChannelPartner inactive(Boolean inactive) {
    
    this.inactive = inactive;
    return this;
  }

   /**
   * True if the channel partner is inactive
   * @return inactive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the channel partner is inactive")

  public Boolean getInactive() {
    return inactive;
  }


  public void setInactive(Boolean inactive) {
    this.inactive = inactive;
  }


  public ChannelPartner merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID of the channel partner
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID of the channel partner")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ChannelPartner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the channel partner
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the channel partner")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ChannelPartner skipCustomerEmails(Boolean skipCustomerEmails) {
    
    this.skipCustomerEmails = skipCustomerEmails;
    return this;
  }

   /**
   * True if emails to the customer are skipped for this channel partner.
   * @return skipCustomerEmails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if emails to the customer are skipped for this channel partner.")

  public Boolean getSkipCustomerEmails() {
    return skipCustomerEmails;
  }


  public void setSkipCustomerEmails(Boolean skipCustomerEmails) {
    this.skipCustomerEmails = skipCustomerEmails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelPartner channelPartner = (ChannelPartner) o;
    return Objects.equals(this.channelPartnerOid, channelPartner.channelPartnerOid) &&
        Objects.equals(this.code, channelPartner.code) &&
        Objects.equals(this.communicationMethod, channelPartner.communicationMethod) &&
        Objects.equals(this.dontHoldShipment, channelPartner.dontHoldShipment) &&
        Objects.equals(this.inactive, channelPartner.inactive) &&
        Objects.equals(this.merchantId, channelPartner.merchantId) &&
        Objects.equals(this.name, channelPartner.name) &&
        Objects.equals(this.skipCustomerEmails, channelPartner.skipCustomerEmails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelPartnerOid, code, communicationMethod, dontHoldShipment, inactive, merchantId, name, skipCustomerEmails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelPartner {\n");
    sb.append("    channelPartnerOid: ").append(toIndentedString(channelPartnerOid)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    communicationMethod: ").append(toIndentedString(communicationMethod)).append("\n");
    sb.append("    dontHoldShipment: ").append(toIndentedString(dontHoldShipment)).append("\n");
    sb.append("    inactive: ").append(toIndentedString(inactive)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    skipCustomerEmails: ").append(toIndentedString(skipCustomerEmails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_partner_oid");
    openapiFields.add("code");
    openapiFields.add("communication_method");
    openapiFields.add("dont_hold_shipment");
    openapiFields.add("inactive");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("skip_customer_emails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChannelPartner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ChannelPartner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelPartner is not found in the empty JSON string", ChannelPartner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChannelPartner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelPartner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("communication_method") != null && !jsonObj.get("communication_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communication_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communication_method").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelPartner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelPartner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelPartner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelPartner.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelPartner>() {
           @Override
           public void write(JsonWriter out, ChannelPartner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelPartner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelPartner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelPartner
  * @throws IOException if the JSON string is invalid with respect to ChannelPartner
  */
  public static ChannelPartner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelPartner.class);
  }

 /**
  * Convert an instance of ChannelPartner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.swagger.JSON;

/**
 * LibraryItemPurchasedMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-22T23:12:18.213-04:00[America/Indianapolis]")
public class LibraryItemPurchasedMeta {
  public static final String SERIALIZED_NAME_MOST_RECENT_VERSION = "most_recent_version";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT_VERSION)
  private Integer mostRecentVersion;

  public static final String SERIALIZED_NAME_MY_PURCHASED_VERSION = "my_purchased_version";
  @SerializedName(SERIALIZED_NAME_MY_PURCHASED_VERSION)
  private Integer myPurchasedVersion;

  public static final String SERIALIZED_NAME_UPGRADE_AVAILABLE = "upgrade_available";
  @SerializedName(SERIALIZED_NAME_UPGRADE_AVAILABLE)
  private Boolean upgradeAvailable;

  public LibraryItemPurchasedMeta() { 
  }

  public LibraryItemPurchasedMeta mostRecentVersion(Integer mostRecentVersion) {
    
    this.mostRecentVersion = mostRecentVersion;
    return this;
  }

   /**
   * The most recent version of the item purchased
   * @return mostRecentVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The most recent version of the item purchased")

  public Integer getMostRecentVersion() {
    return mostRecentVersion;
  }


  public void setMostRecentVersion(Integer mostRecentVersion) {
    this.mostRecentVersion = mostRecentVersion;
  }


  public LibraryItemPurchasedMeta myPurchasedVersion(Integer myPurchasedVersion) {
    
    this.myPurchasedVersion = myPurchasedVersion;
    return this;
  }

   /**
   * If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.
   * @return myPurchasedVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this is a public item and the merchant has already purchased it, this is their version.  If not yet purchased, this will be zero.  This value will only be populated during a searchPublicItems() call.")

  public Integer getMyPurchasedVersion() {
    return myPurchasedVersion;
  }


  public void setMyPurchasedVersion(Integer myPurchasedVersion) {
    this.myPurchasedVersion = myPurchasedVersion;
  }


  public LibraryItemPurchasedMeta upgradeAvailable(Boolean upgradeAvailable) {
    
    this.upgradeAvailable = upgradeAvailable;
    return this;
  }

   /**
   * True if the most recent version of this purchase it greater than what was purchased
   * @return upgradeAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the most recent version of this purchase it greater than what was purchased")

  public Boolean getUpgradeAvailable() {
    return upgradeAvailable;
  }


  public void setUpgradeAvailable(Boolean upgradeAvailable) {
    this.upgradeAvailable = upgradeAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryItemPurchasedMeta libraryItemPurchasedMeta = (LibraryItemPurchasedMeta) o;
    return Objects.equals(this.mostRecentVersion, libraryItemPurchasedMeta.mostRecentVersion) &&
        Objects.equals(this.myPurchasedVersion, libraryItemPurchasedMeta.myPurchasedVersion) &&
        Objects.equals(this.upgradeAvailable, libraryItemPurchasedMeta.upgradeAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mostRecentVersion, myPurchasedVersion, upgradeAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryItemPurchasedMeta {\n");
    sb.append("    mostRecentVersion: ").append(toIndentedString(mostRecentVersion)).append("\n");
    sb.append("    myPurchasedVersion: ").append(toIndentedString(myPurchasedVersion)).append("\n");
    sb.append("    upgradeAvailable: ").append(toIndentedString(upgradeAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("most_recent_version");
    openapiFields.add("my_purchased_version");
    openapiFields.add("upgrade_available");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LibraryItemPurchasedMeta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LibraryItemPurchasedMeta.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryItemPurchasedMeta is not found in the empty JSON string", LibraryItemPurchasedMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LibraryItemPurchasedMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryItemPurchasedMeta` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryItemPurchasedMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryItemPurchasedMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryItemPurchasedMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryItemPurchasedMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryItemPurchasedMeta>() {
           @Override
           public void write(JsonWriter out, LibraryItemPurchasedMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryItemPurchasedMeta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LibraryItemPurchasedMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LibraryItemPurchasedMeta
  * @throws IOException if the JSON string is invalid with respect to LibraryItemPurchasedMeta
  */
  public static LibraryItemPurchasedMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryItemPurchasedMeta.class);
  }

 /**
  * Convert an instance of LibraryItemPurchasedMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


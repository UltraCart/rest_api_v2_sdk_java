/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilterRangeBigDecimal;
import com.ultracart.admin.v2.models.ScreenRecordingFilterRangeInteger;
import com.ultracart.admin.v2.models.ScreenRecordingFilterStringSearch;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingFilterPageViewEventParam
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T12:07:35.113-04:00[America/Indianapolis]")
public class ScreenRecordingFilterPageViewEventParam {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUE_BD = "value_bd";
  @SerializedName(SERIALIZED_NAME_VALUE_BD)
  private ScreenRecordingFilterRangeBigDecimal valueBd;

  public static final String SERIALIZED_NAME_VALUE_BOOL = "value_bool";
  @SerializedName(SERIALIZED_NAME_VALUE_BOOL)
  private Boolean valueBool;

  public static final String SERIALIZED_NAME_VALUE_NUM = "value_num";
  @SerializedName(SERIALIZED_NAME_VALUE_NUM)
  private ScreenRecordingFilterRangeInteger valueNum;

  public static final String SERIALIZED_NAME_VALUE_TEXT = "value_text";
  @SerializedName(SERIALIZED_NAME_VALUE_TEXT)
  private ScreenRecordingFilterStringSearch valueText;

  public ScreenRecordingFilterPageViewEventParam() { 
  }

  public ScreenRecordingFilterPageViewEventParam name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ScreenRecordingFilterPageViewEventParam valueBd(ScreenRecordingFilterRangeBigDecimal valueBd) {
    
    this.valueBd = valueBd;
    return this;
  }

   /**
   * Get valueBd
   * @return valueBd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterRangeBigDecimal getValueBd() {
    return valueBd;
  }


  public void setValueBd(ScreenRecordingFilterRangeBigDecimal valueBd) {
    this.valueBd = valueBd;
  }


  public ScreenRecordingFilterPageViewEventParam valueBool(Boolean valueBool) {
    
    this.valueBool = valueBool;
    return this;
  }

   /**
   * Get valueBool
   * @return valueBool
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getValueBool() {
    return valueBool;
  }


  public void setValueBool(Boolean valueBool) {
    this.valueBool = valueBool;
  }


  public ScreenRecordingFilterPageViewEventParam valueNum(ScreenRecordingFilterRangeInteger valueNum) {
    
    this.valueNum = valueNum;
    return this;
  }

   /**
   * Get valueNum
   * @return valueNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterRangeInteger getValueNum() {
    return valueNum;
  }


  public void setValueNum(ScreenRecordingFilterRangeInteger valueNum) {
    this.valueNum = valueNum;
  }


  public ScreenRecordingFilterPageViewEventParam valueText(ScreenRecordingFilterStringSearch valueText) {
    
    this.valueText = valueText;
    return this;
  }

   /**
   * Get valueText
   * @return valueText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilterStringSearch getValueText() {
    return valueText;
  }


  public void setValueText(ScreenRecordingFilterStringSearch valueText) {
    this.valueText = valueText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterPageViewEventParam screenRecordingFilterPageViewEventParam = (ScreenRecordingFilterPageViewEventParam) o;
    return Objects.equals(this.name, screenRecordingFilterPageViewEventParam.name) &&
        Objects.equals(this.valueBd, screenRecordingFilterPageViewEventParam.valueBd) &&
        Objects.equals(this.valueBool, screenRecordingFilterPageViewEventParam.valueBool) &&
        Objects.equals(this.valueNum, screenRecordingFilterPageViewEventParam.valueNum) &&
        Objects.equals(this.valueText, screenRecordingFilterPageViewEventParam.valueText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, valueBd, valueBool, valueNum, valueText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterPageViewEventParam {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    valueBd: ").append(toIndentedString(valueBd)).append("\n");
    sb.append("    valueBool: ").append(toIndentedString(valueBool)).append("\n");
    sb.append("    valueNum: ").append(toIndentedString(valueNum)).append("\n");
    sb.append("    valueText: ").append(toIndentedString(valueText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("value_bd");
    openapiFields.add("value_bool");
    openapiFields.add("value_num");
    openapiFields.add("value_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingFilterPageViewEventParam
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingFilterPageViewEventParam.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingFilterPageViewEventParam is not found in the empty JSON string", ScreenRecordingFilterPageViewEventParam.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingFilterPageViewEventParam.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingFilterPageViewEventParam` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `value_bd`
      if (jsonObj.getAsJsonObject("value_bd") != null) {
        ScreenRecordingFilterRangeBigDecimal.validateJsonObject(jsonObj.getAsJsonObject("value_bd"));
      }
      // validate the optional field `value_num`
      if (jsonObj.getAsJsonObject("value_num") != null) {
        ScreenRecordingFilterRangeInteger.validateJsonObject(jsonObj.getAsJsonObject("value_num"));
      }
      // validate the optional field `value_text`
      if (jsonObj.getAsJsonObject("value_text") != null) {
        ScreenRecordingFilterStringSearch.validateJsonObject(jsonObj.getAsJsonObject("value_text"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingFilterPageViewEventParam.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingFilterPageViewEventParam' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingFilterPageViewEventParam> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingFilterPageViewEventParam.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingFilterPageViewEventParam>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingFilterPageViewEventParam value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingFilterPageViewEventParam read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingFilterPageViewEventParam given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingFilterPageViewEventParam
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingFilterPageViewEventParam
  */
  public static ScreenRecordingFilterPageViewEventParam fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingFilterPageViewEventParam.class);
  }

 /**
  * Convert an instance of ScreenRecordingFilterPageViewEventParam to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


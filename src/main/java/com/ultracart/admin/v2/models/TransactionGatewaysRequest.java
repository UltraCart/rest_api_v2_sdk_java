/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.PaymentsThemeTransactionType;
import com.ultracart.admin.v2.models.TransactionGateway;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TransactionGatewaysRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-10-05T14:32:28.614-04:00")



public class TransactionGatewaysRequest {
  /**
   * The default transaction type for this merchant account
   */
  @JsonAdapter(DefaultCreditCardTransactionTypeEnum.Adapter.class)
  public enum DefaultCreditCardTransactionTypeEnum {
    AND_CAPTURE("auth and capture"),
    
    THEN_CAPTURE("auth then capture"),
    
    ONLY("auth only");

    private String value;

    DefaultCreditCardTransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultCreditCardTransactionTypeEnum fromValue(String text) {
      for (DefaultCreditCardTransactionTypeEnum b : DefaultCreditCardTransactionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DefaultCreditCardTransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultCreditCardTransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultCreditCardTransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DefaultCreditCardTransactionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("default_credit_card_transaction_type")
  private DefaultCreditCardTransactionTypeEnum defaultCreditCardTransactionType = null;

  @SerializedName("gateways")
  private List<TransactionGateway> gateways = null;

  @SerializedName("theme_credit_card_transaction_types")
  private List<PaymentsThemeTransactionType> themeCreditCardTransactionTypes = null;

  public TransactionGatewaysRequest defaultCreditCardTransactionType(DefaultCreditCardTransactionTypeEnum defaultCreditCardTransactionType) {
    this.defaultCreditCardTransactionType = defaultCreditCardTransactionType;
    return this;
  }

   /**
   * The default transaction type for this merchant account
   * @return defaultCreditCardTransactionType
  **/
  @ApiModelProperty(value = "The default transaction type for this merchant account")
  public DefaultCreditCardTransactionTypeEnum getDefaultCreditCardTransactionType() {
    return defaultCreditCardTransactionType;
  }

  public void setDefaultCreditCardTransactionType(DefaultCreditCardTransactionTypeEnum defaultCreditCardTransactionType) {
    this.defaultCreditCardTransactionType = defaultCreditCardTransactionType;
  }

  public TransactionGatewaysRequest gateways(List<TransactionGateway> gateways) {
    this.gateways = gateways;
    return this;
  }

  public TransactionGatewaysRequest addGatewaysItem(TransactionGateway gatewaysItem) {
    if (this.gateways == null) {
      this.gateways = new ArrayList<TransactionGateway>();
    }
    this.gateways.add(gatewaysItem);
    return this;
  }

   /**
   * Get gateways
   * @return gateways
  **/
  @ApiModelProperty(value = "")
  public List<TransactionGateway> getGateways() {
    return gateways;
  }

  public void setGateways(List<TransactionGateway> gateways) {
    this.gateways = gateways;
  }

  public TransactionGatewaysRequest themeCreditCardTransactionTypes(List<PaymentsThemeTransactionType> themeCreditCardTransactionTypes) {
    this.themeCreditCardTransactionTypes = themeCreditCardTransactionTypes;
    return this;
  }

  public TransactionGatewaysRequest addThemeCreditCardTransactionTypesItem(PaymentsThemeTransactionType themeCreditCardTransactionTypesItem) {
    if (this.themeCreditCardTransactionTypes == null) {
      this.themeCreditCardTransactionTypes = new ArrayList<PaymentsThemeTransactionType>();
    }
    this.themeCreditCardTransactionTypes.add(themeCreditCardTransactionTypesItem);
    return this;
  }

   /**
   * A list of the storefronts and themes for this merchant account and what type of transaction should be attempted
   * @return themeCreditCardTransactionTypes
  **/
  @ApiModelProperty(value = "A list of the storefronts and themes for this merchant account and what type of transaction should be attempted")
  public List<PaymentsThemeTransactionType> getThemeCreditCardTransactionTypes() {
    return themeCreditCardTransactionTypes;
  }

  public void setThemeCreditCardTransactionTypes(List<PaymentsThemeTransactionType> themeCreditCardTransactionTypes) {
    this.themeCreditCardTransactionTypes = themeCreditCardTransactionTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionGatewaysRequest transactionGatewaysRequest = (TransactionGatewaysRequest) o;
    return Objects.equals(this.defaultCreditCardTransactionType, transactionGatewaysRequest.defaultCreditCardTransactionType) &&
        Objects.equals(this.gateways, transactionGatewaysRequest.gateways) &&
        Objects.equals(this.themeCreditCardTransactionTypes, transactionGatewaysRequest.themeCreditCardTransactionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultCreditCardTransactionType, gateways, themeCreditCardTransactionTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionGatewaysRequest {\n");
    
    sb.append("    defaultCreditCardTransactionType: ").append(toIndentedString(defaultCreditCardTransactionType)).append("\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("    themeCreditCardTransactionTypes: ").append(toIndentedString(themeCreditCardTransactionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


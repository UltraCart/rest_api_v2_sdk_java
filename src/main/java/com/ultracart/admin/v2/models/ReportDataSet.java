/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetPage;
import com.ultracart.admin.v2.models.ReportDataSetSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-21T12:08:57.583-05:00[America/Indianapolis]")
public class ReportDataSet {
  public static final String SERIALIZED_NAME_DATA_SET_QUERY_UUID = "data_set_query_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_SET_QUERY_UUID)
  private String dataSetQueryUuid;

  public static final String SERIALIZED_NAME_DATA_SET_UUID = "data_set_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_SET_UUID)
  private String dataSetUuid;

  public static final String SERIALIZED_NAME_DESTINATION_TABLE_ID = "destination_table_id";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TABLE_ID)
  private String destinationTableId;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXECUTED_SQL = "executed_sql";
  @SerializedName(SERIALIZED_NAME_EXECUTED_SQL)
  private String executedSql;

  public static final String SERIALIZED_NAME_FOR_OBJECT_ID = "for_object_id";
  @SerializedName(SERIALIZED_NAME_FOR_OBJECT_ID)
  private String forObjectId;

  /**
   * The type of object this data set is for
   */
  @JsonAdapter(ForObjectTypeEnum.Adapter.class)
  public enum ForObjectTypeEnum {
    SCHEMA("schema"),
    
    FILTER("filter"),
    
    VISUALIZATION("visualization");

    private String value;

    ForObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForObjectTypeEnum fromValue(String value) {
      for (ForObjectTypeEnum b : ForObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForObjectTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FOR_OBJECT_TYPE = "for_object_type";
  @SerializedName(SERIALIZED_NAME_FOR_OBJECT_TYPE)
  private ForObjectTypeEnum forObjectType;

  public static final String SERIALIZED_NAME_INITIAL_PAGES = "initial_pages";
  @SerializedName(SERIALIZED_NAME_INITIAL_PAGES)
  private List<ReportDataSetPage> initialPages = null;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "max_results";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Long maxResults;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_PAGE_COUNT = "page_count";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private Integer pageCount;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_REQUEST_DTS = "request_dts";
  @SerializedName(SERIALIZED_NAME_REQUEST_DTS)
  private String requestDts;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private List<ReportDataSetSchema> schema = null;

  public static final String SERIALIZED_NAME_SECURITY_LEVEL = "security_level";
  @SerializedName(SERIALIZED_NAME_SECURITY_LEVEL)
  private String securityLevel;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_USER_DATA = "user_data";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private String userData;

  public ReportDataSet() { 
  }

  public ReportDataSet dataSetQueryUuid(String dataSetQueryUuid) {
    
    this.dataSetQueryUuid = dataSetQueryUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set query that is returned.
   * @return dataSetQueryUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier assigned to the data set query that is returned.")

  public String getDataSetQueryUuid() {
    return dataSetQueryUuid;
  }


  public void setDataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
  }


  public ReportDataSet dataSetUuid(String dataSetUuid) {
    
    this.dataSetUuid = dataSetUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set that is returned.
   * @return dataSetUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier assigned to the data set that is returned.")

  public String getDataSetUuid() {
    return dataSetUuid;
  }


  public void setDataSetUuid(String dataSetUuid) {
    this.dataSetUuid = dataSetUuid;
  }


  public ReportDataSet destinationTableId(String destinationTableId) {
    
    this.destinationTableId = destinationTableId;
    return this;
  }

   /**
   * The BigQuery destination table id that contains the result.
   * @return destinationTableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The BigQuery destination table id that contains the result.")

  public String getDestinationTableId() {
    return destinationTableId;
  }


  public void setDestinationTableId(String destinationTableId) {
    this.destinationTableId = destinationTableId;
  }


  public ReportDataSet errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Error message if the query failed.
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Error message if the query failed.")

  public String getErrorMessage() {
    return errorMessage;
  }


  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ReportDataSet executedSql(String executedSql) {
    
    this.executedSql = executedSql;
    return this;
  }

   /**
   * Get executedSql
   * @return executedSql
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExecutedSql() {
    return executedSql;
  }


  public void setExecutedSql(String executedSql) {
    this.executedSql = executedSql;
  }


  public ReportDataSet forObjectId(String forObjectId) {
    
    this.forObjectId = forObjectId;
    return this;
  }

   /**
   * An identifier that can be used to help match up the returned data set
   * @return forObjectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An identifier that can be used to help match up the returned data set")

  public String getForObjectId() {
    return forObjectId;
  }


  public void setForObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
  }


  public ReportDataSet forObjectType(ForObjectTypeEnum forObjectType) {
    
    this.forObjectType = forObjectType;
    return this;
  }

   /**
   * The type of object this data set is for
   * @return forObjectType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of object this data set is for")

  public ForObjectTypeEnum getForObjectType() {
    return forObjectType;
  }


  public void setForObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
  }


  public ReportDataSet initialPages(List<ReportDataSetPage> initialPages) {
    
    this.initialPages = initialPages;
    return this;
  }

  public ReportDataSet addInitialPagesItem(ReportDataSetPage initialPagesItem) {
    if (this.initialPages == null) {
      this.initialPages = new ArrayList<>();
    }
    this.initialPages.add(initialPagesItem);
    return this;
  }

   /**
   * Initial pages returned in the dataset
   * @return initialPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Initial pages returned in the dataset")

  public List<ReportDataSetPage> getInitialPages() {
    return initialPages;
  }


  public void setInitialPages(List<ReportDataSetPage> initialPages) {
    this.initialPages = initialPages;
  }


  public ReportDataSet maxResults(Long maxResults) {
    
    this.maxResults = maxResults;
    return this;
  }

   /**
   * The total number of results
   * @return maxResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of results")

  public Long getMaxResults() {
    return maxResults;
  }


  public void setMaxResults(Long maxResults) {
    this.maxResults = maxResults;
  }


  public ReportDataSet merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant that owns this data set
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant that owns this data set")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ReportDataSet pageCount(Integer pageCount) {
    
    this.pageCount = pageCount;
    return this;
  }

   /**
   * The total number of pages in the result set
   * @return pageCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of pages in the result set")

  public Integer getPageCount() {
    return pageCount;
  }


  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }


  public ReportDataSet pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * The size of the pages
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the pages")

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public ReportDataSet requestDts(String requestDts) {
    
    this.requestDts = requestDts;
    return this;
  }

   /**
   * Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results
   * @return requestDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results")

  public String getRequestDts() {
    return requestDts;
  }


  public void setRequestDts(String requestDts) {
    this.requestDts = requestDts;
  }


  public ReportDataSet schema(List<ReportDataSetSchema> schema) {
    
    this.schema = schema;
    return this;
  }

  public ReportDataSet addSchemaItem(ReportDataSetSchema schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<>();
    }
    this.schema.add(schemaItem);
    return this;
  }

   /**
   * The schema associated with the data set.
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The schema associated with the data set.")

  public List<ReportDataSetSchema> getSchema() {
    return schema;
  }


  public void setSchema(List<ReportDataSetSchema> schema) {
    this.schema = schema;
  }


  public ReportDataSet securityLevel(String securityLevel) {
    
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Security level this dataset was read from.
   * @return securityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Security level this dataset was read from.")

  public String getSecurityLevel() {
    return securityLevel;
  }


  public void setSecurityLevel(String securityLevel) {
    this.securityLevel = securityLevel;
  }


  public ReportDataSet timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public ReportDataSet userData(String userData) {
    
    this.userData = userData;
    return this;
  }

   /**
   * Any other data that needs to be returned with the response to help the UI
   * @return userData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any other data that needs to be returned with the response to help the UI")

  public String getUserData() {
    return userData;
  }


  public void setUserData(String userData) {
    this.userData = userData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSet reportDataSet = (ReportDataSet) o;
    return Objects.equals(this.dataSetQueryUuid, reportDataSet.dataSetQueryUuid) &&
        Objects.equals(this.dataSetUuid, reportDataSet.dataSetUuid) &&
        Objects.equals(this.destinationTableId, reportDataSet.destinationTableId) &&
        Objects.equals(this.errorMessage, reportDataSet.errorMessage) &&
        Objects.equals(this.executedSql, reportDataSet.executedSql) &&
        Objects.equals(this.forObjectId, reportDataSet.forObjectId) &&
        Objects.equals(this.forObjectType, reportDataSet.forObjectType) &&
        Objects.equals(this.initialPages, reportDataSet.initialPages) &&
        Objects.equals(this.maxResults, reportDataSet.maxResults) &&
        Objects.equals(this.merchantId, reportDataSet.merchantId) &&
        Objects.equals(this.pageCount, reportDataSet.pageCount) &&
        Objects.equals(this.pageSize, reportDataSet.pageSize) &&
        Objects.equals(this.requestDts, reportDataSet.requestDts) &&
        Objects.equals(this.schema, reportDataSet.schema) &&
        Objects.equals(this.securityLevel, reportDataSet.securityLevel) &&
        Objects.equals(this.timezone, reportDataSet.timezone) &&
        Objects.equals(this.userData, reportDataSet.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetQueryUuid, dataSetUuid, destinationTableId, errorMessage, executedSql, forObjectId, forObjectType, initialPages, maxResults, merchantId, pageCount, pageSize, requestDts, schema, securityLevel, timezone, userData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSet {\n");
    sb.append("    dataSetQueryUuid: ").append(toIndentedString(dataSetQueryUuid)).append("\n");
    sb.append("    dataSetUuid: ").append(toIndentedString(dataSetUuid)).append("\n");
    sb.append("    destinationTableId: ").append(toIndentedString(destinationTableId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executedSql: ").append(toIndentedString(executedSql)).append("\n");
    sb.append("    forObjectId: ").append(toIndentedString(forObjectId)).append("\n");
    sb.append("    forObjectType: ").append(toIndentedString(forObjectType)).append("\n");
    sb.append("    initialPages: ").append(toIndentedString(initialPages)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    requestDts: ").append(toIndentedString(requestDts)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_set_query_uuid");
    openapiFields.add("data_set_uuid");
    openapiFields.add("destination_table_id");
    openapiFields.add("error_message");
    openapiFields.add("executed_sql");
    openapiFields.add("for_object_id");
    openapiFields.add("for_object_type");
    openapiFields.add("initial_pages");
    openapiFields.add("max_results");
    openapiFields.add("merchant_id");
    openapiFields.add("page_count");
    openapiFields.add("page_size");
    openapiFields.add("request_dts");
    openapiFields.add("schema");
    openapiFields.add("security_level");
    openapiFields.add("timezone");
    openapiFields.add("user_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSet
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSet.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSet is not found in the empty JSON string", ReportDataSet.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSet` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("data_set_query_uuid") != null && !jsonObj.get("data_set_query_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_set_query_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_set_query_uuid").toString()));
      }
      if (jsonObj.get("data_set_uuid") != null && !jsonObj.get("data_set_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_set_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_set_uuid").toString()));
      }
      if (jsonObj.get("destination_table_id") != null && !jsonObj.get("destination_table_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_table_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_table_id").toString()));
      }
      if (jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if (jsonObj.get("executed_sql") != null && !jsonObj.get("executed_sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executed_sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executed_sql").toString()));
      }
      if (jsonObj.get("for_object_id") != null && !jsonObj.get("for_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_object_id").toString()));
      }
      if (jsonObj.get("for_object_type") != null && !jsonObj.get("for_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_object_type").toString()));
      }
      JsonArray jsonArrayinitialPages = jsonObj.getAsJsonArray("initial_pages");
      if (jsonArrayinitialPages != null) {
        // ensure the json data is an array
        if (!jsonObj.get("initial_pages").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `initial_pages` to be an array in the JSON string but got `%s`", jsonObj.get("initial_pages").toString()));
        }

        // validate the optional field `initial_pages` (array)
        for (int i = 0; i < jsonArrayinitialPages.size(); i++) {
          ReportDataSetPage.validateJsonObject(jsonArrayinitialPages.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("request_dts") != null && !jsonObj.get("request_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_dts").toString()));
      }
      JsonArray jsonArrayschema = jsonObj.getAsJsonArray("schema");
      if (jsonArrayschema != null) {
        // ensure the json data is an array
        if (!jsonObj.get("schema").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `schema` to be an array in the JSON string but got `%s`", jsonObj.get("schema").toString()));
        }

        // validate the optional field `schema` (array)
        for (int i = 0; i < jsonArrayschema.size(); i++) {
          ReportDataSetSchema.validateJsonObject(jsonArrayschema.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("security_level") != null && !jsonObj.get("security_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_level").toString()));
      }
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if (jsonObj.get("user_data") != null && !jsonObj.get("user_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSet.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSet>() {
           @Override
           public void write(JsonWriter out, ReportDataSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSet read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSet
  * @throws IOException if the JSON string is invalid with respect to ReportDataSet
  */
  public static ReportDataSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSet.class);
  }

 /**
  * Convert an instance of ReportDataSet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


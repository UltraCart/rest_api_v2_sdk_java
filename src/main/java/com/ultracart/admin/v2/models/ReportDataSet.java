/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSetPage;
import com.ultracart.admin.v2.models.ReportDataSetSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportDataSet
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-04T14:34:21.528-04:00")



public class ReportDataSet {
  @SerializedName("data_set_query_uuid")
  private String dataSetQueryUuid = null;

  @SerializedName("data_set_uuid")
  private String dataSetUuid = null;

  @SerializedName("destination_table_id")
  private String destinationTableId = null;

  @SerializedName("error_message")
  private String errorMessage = null;

  @SerializedName("executed_sql")
  private String executedSql = null;

  @SerializedName("for_object_id")
  private String forObjectId = null;

  /**
   * The type of object this data set is for
   */
  @JsonAdapter(ForObjectTypeEnum.Adapter.class)
  public enum ForObjectTypeEnum {
    SCHEMA("schema"),
    
    FILTER("filter"),
    
    VISUALIZATION("visualization");

    private String value;

    ForObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForObjectTypeEnum fromValue(String text) {
      for (ForObjectTypeEnum b : ForObjectTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ForObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ForObjectTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("for_object_type")
  private ForObjectTypeEnum forObjectType = null;

  @SerializedName("initial_pages")
  private List<ReportDataSetPage> initialPages = null;

  @SerializedName("max_results")
  private Long maxResults = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("page_count")
  private Integer pageCount = null;

  @SerializedName("page_size")
  private Integer pageSize = null;

  @SerializedName("request_dts")
  private String requestDts = null;

  @SerializedName("schema")
  private List<ReportDataSetSchema> schema = null;

  @SerializedName("security_level")
  private String securityLevel = null;

  @SerializedName("timezone")
  private String timezone = null;

  @SerializedName("user_data")
  private String userData = null;

  public ReportDataSet dataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set query that is returned.
   * @return dataSetQueryUuid
  **/
  @ApiModelProperty(value = "A unique identifier assigned to the data set query that is returned.")
  public String getDataSetQueryUuid() {
    return dataSetQueryUuid;
  }

  public void setDataSetQueryUuid(String dataSetQueryUuid) {
    this.dataSetQueryUuid = dataSetQueryUuid;
  }

  public ReportDataSet dataSetUuid(String dataSetUuid) {
    this.dataSetUuid = dataSetUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data set that is returned.
   * @return dataSetUuid
  **/
  @ApiModelProperty(value = "A unique identifier assigned to the data set that is returned.")
  public String getDataSetUuid() {
    return dataSetUuid;
  }

  public void setDataSetUuid(String dataSetUuid) {
    this.dataSetUuid = dataSetUuid;
  }

  public ReportDataSet destinationTableId(String destinationTableId) {
    this.destinationTableId = destinationTableId;
    return this;
  }

   /**
   * The BigQuery destination table id that contains the result.
   * @return destinationTableId
  **/
  @ApiModelProperty(value = "The BigQuery destination table id that contains the result.")
  public String getDestinationTableId() {
    return destinationTableId;
  }

  public void setDestinationTableId(String destinationTableId) {
    this.destinationTableId = destinationTableId;
  }

  public ReportDataSet errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Error message if the query failed.
   * @return errorMessage
  **/
  @ApiModelProperty(value = "Error message if the query failed.")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  public ReportDataSet executedSql(String executedSql) {
    this.executedSql = executedSql;
    return this;
  }

   /**
   * Get executedSql
   * @return executedSql
  **/
  @ApiModelProperty(value = "")
  public String getExecutedSql() {
    return executedSql;
  }

  public void setExecutedSql(String executedSql) {
    this.executedSql = executedSql;
  }

  public ReportDataSet forObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
    return this;
  }

   /**
   * An identifier that can be used to help match up the returned data set
   * @return forObjectId
  **/
  @ApiModelProperty(value = "An identifier that can be used to help match up the returned data set")
  public String getForObjectId() {
    return forObjectId;
  }

  public void setForObjectId(String forObjectId) {
    this.forObjectId = forObjectId;
  }

  public ReportDataSet forObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
    return this;
  }

   /**
   * The type of object this data set is for
   * @return forObjectType
  **/
  @ApiModelProperty(value = "The type of object this data set is for")
  public ForObjectTypeEnum getForObjectType() {
    return forObjectType;
  }

  public void setForObjectType(ForObjectTypeEnum forObjectType) {
    this.forObjectType = forObjectType;
  }

  public ReportDataSet initialPages(List<ReportDataSetPage> initialPages) {
    this.initialPages = initialPages;
    return this;
  }

  public ReportDataSet addInitialPagesItem(ReportDataSetPage initialPagesItem) {
    if (this.initialPages == null) {
      this.initialPages = new ArrayList<ReportDataSetPage>();
    }
    this.initialPages.add(initialPagesItem);
    return this;
  }

   /**
   * Initial pages returned in the dataset
   * @return initialPages
  **/
  @ApiModelProperty(value = "Initial pages returned in the dataset")
  public List<ReportDataSetPage> getInitialPages() {
    return initialPages;
  }

  public void setInitialPages(List<ReportDataSetPage> initialPages) {
    this.initialPages = initialPages;
  }

  public ReportDataSet maxResults(Long maxResults) {
    this.maxResults = maxResults;
    return this;
  }

   /**
   * The total number of results
   * @return maxResults
  **/
  @ApiModelProperty(value = "The total number of results")
  public Long getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Long maxResults) {
    this.maxResults = maxResults;
  }

  public ReportDataSet merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant that owns this data set
   * @return merchantId
  **/
  @ApiModelProperty(value = "Merchant that owns this data set")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public ReportDataSet pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

   /**
   * The total number of pages in the result set
   * @return pageCount
  **/
  @ApiModelProperty(value = "The total number of pages in the result set")
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }

  public ReportDataSet pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * The size of the pages
   * @return pageSize
  **/
  @ApiModelProperty(value = "The size of the pages")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public ReportDataSet requestDts(String requestDts) {
    this.requestDts = requestDts;
    return this;
  }

   /**
   * Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results
   * @return requestDts
  **/
  @ApiModelProperty(value = "Date/Time of the client submitted the request.  Can be used to resolve out of order query completion results")
  public String getRequestDts() {
    return requestDts;
  }

  public void setRequestDts(String requestDts) {
    this.requestDts = requestDts;
  }

  public ReportDataSet schema(List<ReportDataSetSchema> schema) {
    this.schema = schema;
    return this;
  }

  public ReportDataSet addSchemaItem(ReportDataSetSchema schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<ReportDataSetSchema>();
    }
    this.schema.add(schemaItem);
    return this;
  }

   /**
   * The schema associated with the data set.
   * @return schema
  **/
  @ApiModelProperty(value = "The schema associated with the data set.")
  public List<ReportDataSetSchema> getSchema() {
    return schema;
  }

  public void setSchema(List<ReportDataSetSchema> schema) {
    this.schema = schema;
  }

  public ReportDataSet securityLevel(String securityLevel) {
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Security level this dataset was read from.
   * @return securityLevel
  **/
  @ApiModelProperty(value = "Security level this dataset was read from.")
  public String getSecurityLevel() {
    return securityLevel;
  }

  public void setSecurityLevel(String securityLevel) {
    this.securityLevel = securityLevel;
  }

  public ReportDataSet timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @ApiModelProperty(value = "")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public ReportDataSet userData(String userData) {
    this.userData = userData;
    return this;
  }

   /**
   * Any other data that needs to be returned with the response to help the UI
   * @return userData
  **/
  @ApiModelProperty(value = "Any other data that needs to be returned with the response to help the UI")
  public String getUserData() {
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSet reportDataSet = (ReportDataSet) o;
    return Objects.equals(this.dataSetQueryUuid, reportDataSet.dataSetQueryUuid) &&
        Objects.equals(this.dataSetUuid, reportDataSet.dataSetUuid) &&
        Objects.equals(this.destinationTableId, reportDataSet.destinationTableId) &&
        Objects.equals(this.errorMessage, reportDataSet.errorMessage) &&
        Objects.equals(this.executedSql, reportDataSet.executedSql) &&
        Objects.equals(this.forObjectId, reportDataSet.forObjectId) &&
        Objects.equals(this.forObjectType, reportDataSet.forObjectType) &&
        Objects.equals(this.initialPages, reportDataSet.initialPages) &&
        Objects.equals(this.maxResults, reportDataSet.maxResults) &&
        Objects.equals(this.merchantId, reportDataSet.merchantId) &&
        Objects.equals(this.pageCount, reportDataSet.pageCount) &&
        Objects.equals(this.pageSize, reportDataSet.pageSize) &&
        Objects.equals(this.requestDts, reportDataSet.requestDts) &&
        Objects.equals(this.schema, reportDataSet.schema) &&
        Objects.equals(this.securityLevel, reportDataSet.securityLevel) &&
        Objects.equals(this.timezone, reportDataSet.timezone) &&
        Objects.equals(this.userData, reportDataSet.userData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetQueryUuid, dataSetUuid, destinationTableId, errorMessage, executedSql, forObjectId, forObjectType, initialPages, maxResults, merchantId, pageCount, pageSize, requestDts, schema, securityLevel, timezone, userData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSet {\n");
    
    sb.append("    dataSetQueryUuid: ").append(toIndentedString(dataSetQueryUuid)).append("\n");
    sb.append("    dataSetUuid: ").append(toIndentedString(dataSetUuid)).append("\n");
    sb.append("    destinationTableId: ").append(toIndentedString(destinationTableId)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    executedSql: ").append(toIndentedString(executedSql)).append("\n");
    sb.append("    forObjectId: ").append(toIndentedString(forObjectId)).append("\n");
    sb.append("    forObjectType: ").append(toIndentedString(forObjectType)).append("\n");
    sb.append("    initialPages: ").append(toIndentedString(initialPages)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    requestDts: ").append(toIndentedString(requestDts)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


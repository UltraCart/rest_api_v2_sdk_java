/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingFilterValuesEventParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T13:13:08.776-04:00[America/Indianapolis]")
public class ScreenRecordingFilterValuesEventParams {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUES_BD = "values_bd";
  @SerializedName(SERIALIZED_NAME_VALUES_BD)
  private List<BigDecimal> valuesBd = null;

  public static final String SERIALIZED_NAME_VALUES_BOOL = "values_bool";
  @SerializedName(SERIALIZED_NAME_VALUES_BOOL)
  private List<Boolean> valuesBool = null;

  public static final String SERIALIZED_NAME_VALUES_NUM = "values_num";
  @SerializedName(SERIALIZED_NAME_VALUES_NUM)
  private List<Integer> valuesNum = null;

  public static final String SERIALIZED_NAME_VALUES_TEXT = "values_text";
  @SerializedName(SERIALIZED_NAME_VALUES_TEXT)
  private List<String> valuesText = null;

  public ScreenRecordingFilterValuesEventParams() { 
  }

  public ScreenRecordingFilterValuesEventParams name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ScreenRecordingFilterValuesEventParams valuesBd(List<BigDecimal> valuesBd) {
    
    this.valuesBd = valuesBd;
    return this;
  }

  public ScreenRecordingFilterValuesEventParams addValuesBdItem(BigDecimal valuesBdItem) {
    if (this.valuesBd == null) {
      this.valuesBd = new ArrayList<>();
    }
    this.valuesBd.add(valuesBdItem);
    return this;
  }

   /**
   * Get valuesBd
   * @return valuesBd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<BigDecimal> getValuesBd() {
    return valuesBd;
  }


  public void setValuesBd(List<BigDecimal> valuesBd) {
    this.valuesBd = valuesBd;
  }


  public ScreenRecordingFilterValuesEventParams valuesBool(List<Boolean> valuesBool) {
    
    this.valuesBool = valuesBool;
    return this;
  }

  public ScreenRecordingFilterValuesEventParams addValuesBoolItem(Boolean valuesBoolItem) {
    if (this.valuesBool == null) {
      this.valuesBool = new ArrayList<>();
    }
    this.valuesBool.add(valuesBoolItem);
    return this;
  }

   /**
   * Get valuesBool
   * @return valuesBool
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Boolean> getValuesBool() {
    return valuesBool;
  }


  public void setValuesBool(List<Boolean> valuesBool) {
    this.valuesBool = valuesBool;
  }


  public ScreenRecordingFilterValuesEventParams valuesNum(List<Integer> valuesNum) {
    
    this.valuesNum = valuesNum;
    return this;
  }

  public ScreenRecordingFilterValuesEventParams addValuesNumItem(Integer valuesNumItem) {
    if (this.valuesNum == null) {
      this.valuesNum = new ArrayList<>();
    }
    this.valuesNum.add(valuesNumItem);
    return this;
  }

   /**
   * Get valuesNum
   * @return valuesNum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getValuesNum() {
    return valuesNum;
  }


  public void setValuesNum(List<Integer> valuesNum) {
    this.valuesNum = valuesNum;
  }


  public ScreenRecordingFilterValuesEventParams valuesText(List<String> valuesText) {
    
    this.valuesText = valuesText;
    return this;
  }

  public ScreenRecordingFilterValuesEventParams addValuesTextItem(String valuesTextItem) {
    if (this.valuesText == null) {
      this.valuesText = new ArrayList<>();
    }
    this.valuesText.add(valuesTextItem);
    return this;
  }

   /**
   * Get valuesText
   * @return valuesText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getValuesText() {
    return valuesText;
  }


  public void setValuesText(List<String> valuesText) {
    this.valuesText = valuesText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterValuesEventParams screenRecordingFilterValuesEventParams = (ScreenRecordingFilterValuesEventParams) o;
    return Objects.equals(this.name, screenRecordingFilterValuesEventParams.name) &&
        Objects.equals(this.valuesBd, screenRecordingFilterValuesEventParams.valuesBd) &&
        Objects.equals(this.valuesBool, screenRecordingFilterValuesEventParams.valuesBool) &&
        Objects.equals(this.valuesNum, screenRecordingFilterValuesEventParams.valuesNum) &&
        Objects.equals(this.valuesText, screenRecordingFilterValuesEventParams.valuesText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, valuesBd, valuesBool, valuesNum, valuesText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterValuesEventParams {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    valuesBd: ").append(toIndentedString(valuesBd)).append("\n");
    sb.append("    valuesBool: ").append(toIndentedString(valuesBool)).append("\n");
    sb.append("    valuesNum: ").append(toIndentedString(valuesNum)).append("\n");
    sb.append("    valuesText: ").append(toIndentedString(valuesText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("values_bd");
    openapiFields.add("values_bool");
    openapiFields.add("values_num");
    openapiFields.add("values_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingFilterValuesEventParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingFilterValuesEventParams.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingFilterValuesEventParams is not found in the empty JSON string", ScreenRecordingFilterValuesEventParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingFilterValuesEventParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingFilterValuesEventParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("values_bd") != null && !jsonObj.get("values_bd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values_bd` to be an array in the JSON string but got `%s`", jsonObj.get("values_bd").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("values_bool") != null && !jsonObj.get("values_bool").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values_bool` to be an array in the JSON string but got `%s`", jsonObj.get("values_bool").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("values_num") != null && !jsonObj.get("values_num").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values_num` to be an array in the JSON string but got `%s`", jsonObj.get("values_num").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("values_text") != null && !jsonObj.get("values_text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values_text` to be an array in the JSON string but got `%s`", jsonObj.get("values_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingFilterValuesEventParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingFilterValuesEventParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingFilterValuesEventParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingFilterValuesEventParams.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingFilterValuesEventParams>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingFilterValuesEventParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingFilterValuesEventParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingFilterValuesEventParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingFilterValuesEventParams
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingFilterValuesEventParams
  */
  public static ScreenRecordingFilterValuesEventParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingFilterValuesEventParams.class);
  }

 /**
  * Convert an instance of ScreenRecordingFilterValuesEventParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


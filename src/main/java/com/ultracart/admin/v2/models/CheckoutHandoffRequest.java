/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Cart;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CheckoutHandoffRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-18T12:06:01.619-05:00[America/Indianapolis]")
public class CheckoutHandoffRequest {
  public static final String SERIALIZED_NAME_CART = "cart";
  @SerializedName(SERIALIZED_NAME_CART)
  private Cart cart;

  public static final String SERIALIZED_NAME_ERROR_PARAMETER_NAME = "error_parameter_name";
  @SerializedName(SERIALIZED_NAME_ERROR_PARAMETER_NAME)
  private String errorParameterName;

  public static final String SERIALIZED_NAME_ERROR_RETURN_URL = "error_return_url";
  @SerializedName(SERIALIZED_NAME_ERROR_RETURN_URL)
  private String errorReturnUrl;

  /**
   * The type of handoff operation to perform
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    CHECKOUT("checkout"),
    
    PAYPAL("payPal"),
    
    PAYPALCREDIT("payPalCredit"),
    
    VIEW("view"),
    
    AFFIRM("affirm"),
    
    SEZZLE("sezzle");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_PAYPAL_MAXIMUM_UPSELL_REVENUE = "paypal_maximum_upsell_revenue";
  @SerializedName(SERIALIZED_NAME_PAYPAL_MAXIMUM_UPSELL_REVENUE)
  private BigDecimal paypalMaximumUpsellRevenue;

  public static final String SERIALIZED_NAME_PAYPAL_RETURN_URL = "paypal_return_url";
  @SerializedName(SERIALIZED_NAME_PAYPAL_RETURN_URL)
  private String paypalReturnUrl;

  public static final String SERIALIZED_NAME_SECURE_HOST_NAME = "secure_host_name";
  @SerializedName(SERIALIZED_NAME_SECURE_HOST_NAME)
  private String secureHostName;

  public static final String SERIALIZED_NAME_UCACID = "ucacid";
  @SerializedName(SERIALIZED_NAME_UCACID)
  private String ucacid;

  public CheckoutHandoffRequest() { 
  }

  public CheckoutHandoffRequest cart(Cart cart) {
    
    this.cart = cart;
    return this;
  }

   /**
   * Get cart
   * @return cart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Cart getCart() {
    return cart;
  }


  public void setCart(Cart cart) {
    this.cart = cart;
  }


  public CheckoutHandoffRequest errorParameterName(String errorParameterName) {
    
    this.errorParameterName = errorParameterName;
    return this;
  }

   /**
   * If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.
   * @return errorParameterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.")

  public String getErrorParameterName() {
    return errorParameterName;
  }


  public void setErrorParameterName(String errorParameterName) {
    this.errorParameterName = errorParameterName;
  }


  public CheckoutHandoffRequest errorReturnUrl(String errorReturnUrl) {
    
    this.errorReturnUrl = errorReturnUrl;
    return this;
  }

   /**
   * The URL to return the browser to if there are processing errors on the UltraCart side.
   * @return errorReturnUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL to return the browser to if there are processing errors on the UltraCart side.")

  public String getErrorReturnUrl() {
    return errorReturnUrl;
  }


  public void setErrorReturnUrl(String errorReturnUrl) {
    this.errorReturnUrl = errorReturnUrl;
  }


  public CheckoutHandoffRequest operation(OperationEnum operation) {
    
    this.operation = operation;
    return this;
  }

   /**
   * The type of handoff operation to perform
   * @return operation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of handoff operation to perform")

  public OperationEnum getOperation() {
    return operation;
  }


  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public CheckoutHandoffRequest paypalMaximumUpsellRevenue(BigDecimal paypalMaximumUpsellRevenue) {
    
    this.paypalMaximumUpsellRevenue = paypalMaximumUpsellRevenue;
    return this;
  }

   /**
   * The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.
   * @return paypalMaximumUpsellRevenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.")

  public BigDecimal getPaypalMaximumUpsellRevenue() {
    return paypalMaximumUpsellRevenue;
  }


  public void setPaypalMaximumUpsellRevenue(BigDecimal paypalMaximumUpsellRevenue) {
    this.paypalMaximumUpsellRevenue = paypalMaximumUpsellRevenue;
  }


  public CheckoutHandoffRequest paypalReturnUrl(String paypalReturnUrl) {
    
    this.paypalReturnUrl = paypalReturnUrl;
    return this;
  }

   /**
   * The URl to return the customers browser to after they have completed the PayPal process.
   * @return paypalReturnUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URl to return the customers browser to after they have completed the PayPal process.")

  public String getPaypalReturnUrl() {
    return paypalReturnUrl;
  }


  public void setPaypalReturnUrl(String paypalReturnUrl) {
    this.paypalReturnUrl = paypalReturnUrl;
  }


  public CheckoutHandoffRequest secureHostName(String secureHostName) {
    
    this.secureHostName = secureHostName;
    return this;
  }

   /**
   * The desired secure host name to perform the handoff on.  This should match the desired StoreFront.
   * @return secureHostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The desired secure host name to perform the handoff on.  This should match the desired StoreFront.")

  public String getSecureHostName() {
    return secureHostName;
  }


  public void setSecureHostName(String secureHostName) {
    this.secureHostName = secureHostName;
  }


  public CheckoutHandoffRequest ucacid(String ucacid) {
    
    this.ucacid = ucacid;
    return this;
  }

   /**
   * The UltraCart Analytics cookie value.  Populate this if you&#39;re handing off from a different domain than the checkout.
   * @return ucacid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UltraCart Analytics cookie value.  Populate this if you're handing off from a different domain than the checkout.")

  public String getUcacid() {
    return ucacid;
  }


  public void setUcacid(String ucacid) {
    this.ucacid = ucacid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutHandoffRequest checkoutHandoffRequest = (CheckoutHandoffRequest) o;
    return Objects.equals(this.cart, checkoutHandoffRequest.cart) &&
        Objects.equals(this.errorParameterName, checkoutHandoffRequest.errorParameterName) &&
        Objects.equals(this.errorReturnUrl, checkoutHandoffRequest.errorReturnUrl) &&
        Objects.equals(this.operation, checkoutHandoffRequest.operation) &&
        Objects.equals(this.paypalMaximumUpsellRevenue, checkoutHandoffRequest.paypalMaximumUpsellRevenue) &&
        Objects.equals(this.paypalReturnUrl, checkoutHandoffRequest.paypalReturnUrl) &&
        Objects.equals(this.secureHostName, checkoutHandoffRequest.secureHostName) &&
        Objects.equals(this.ucacid, checkoutHandoffRequest.ucacid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cart, errorParameterName, errorReturnUrl, operation, paypalMaximumUpsellRevenue, paypalReturnUrl, secureHostName, ucacid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutHandoffRequest {\n");
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    errorParameterName: ").append(toIndentedString(errorParameterName)).append("\n");
    sb.append("    errorReturnUrl: ").append(toIndentedString(errorReturnUrl)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    paypalMaximumUpsellRevenue: ").append(toIndentedString(paypalMaximumUpsellRevenue)).append("\n");
    sb.append("    paypalReturnUrl: ").append(toIndentedString(paypalReturnUrl)).append("\n");
    sb.append("    secureHostName: ").append(toIndentedString(secureHostName)).append("\n");
    sb.append("    ucacid: ").append(toIndentedString(ucacid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cart");
    openapiFields.add("error_parameter_name");
    openapiFields.add("error_return_url");
    openapiFields.add("operation");
    openapiFields.add("paypal_maximum_upsell_revenue");
    openapiFields.add("paypal_return_url");
    openapiFields.add("secure_host_name");
    openapiFields.add("ucacid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CheckoutHandoffRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CheckoutHandoffRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutHandoffRequest is not found in the empty JSON string", CheckoutHandoffRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CheckoutHandoffRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutHandoffRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `cart`
      if (jsonObj.getAsJsonObject("cart") != null) {
        Cart.validateJsonObject(jsonObj.getAsJsonObject("cart"));
      }
      if (jsonObj.get("error_parameter_name") != null && !jsonObj.get("error_parameter_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_parameter_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_parameter_name").toString()));
      }
      if (jsonObj.get("error_return_url") != null && !jsonObj.get("error_return_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_return_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_return_url").toString()));
      }
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if (jsonObj.get("paypal_return_url") != null && !jsonObj.get("paypal_return_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paypal_return_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paypal_return_url").toString()));
      }
      if (jsonObj.get("secure_host_name") != null && !jsonObj.get("secure_host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secure_host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secure_host_name").toString()));
      }
      if (jsonObj.get("ucacid") != null && !jsonObj.get("ucacid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ucacid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ucacid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutHandoffRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutHandoffRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutHandoffRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutHandoffRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutHandoffRequest>() {
           @Override
           public void write(JsonWriter out, CheckoutHandoffRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutHandoffRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutHandoffRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutHandoffRequest
  * @throws IOException if the JSON string is invalid with respect to CheckoutHandoffRequest
  */
  public static CheckoutHandoffRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutHandoffRequest.class);
  }

 /**
  * Convert an instance of CheckoutHandoffRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


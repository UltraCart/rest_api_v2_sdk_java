/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Cart;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CheckoutHandoffRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-03T09:27:16.618-04:00")



public class CheckoutHandoffRequest {
  @SerializedName("cart")
  private Cart cart = null;

  @SerializedName("error_parameter_name")
  private String errorParameterName = null;

  @SerializedName("error_return_url")
  private String errorReturnUrl = null;

  /**
   * The type of handoff operation to perform
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    CHECKOUT("checkout"),
    
    PAYPAL("payPal"),
    
    PAYPALCREDIT("payPalCredit"),
    
    VIEW("view"),
    
    AFFIRM("affirm"),
    
    SEZZLE("sezzle");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("paypal_maximum_upsell_revenue")
  private BigDecimal paypalMaximumUpsellRevenue = null;

  @SerializedName("paypal_return_url")
  private String paypalReturnUrl = null;

  @SerializedName("secure_host_name")
  private String secureHostName = null;

  @SerializedName("ucacid")
  private String ucacid = null;

  public CheckoutHandoffRequest cart(Cart cart) {
    this.cart = cart;
    return this;
  }

   /**
   * Get cart
   * @return cart
  **/
  @ApiModelProperty(value = "")
  public Cart getCart() {
    return cart;
  }

  public void setCart(Cart cart) {
    this.cart = cart;
  }

  public CheckoutHandoffRequest errorParameterName(String errorParameterName) {
    this.errorParameterName = errorParameterName;
    return this;
  }

   /**
   * If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.
   * @return errorParameterName
  **/
  @ApiModelProperty(value = "If any error happen during the processing on the UltraCart side, the browser will be redirected to your error_return_url with the error passed in this parameter name.")
  public String getErrorParameterName() {
    return errorParameterName;
  }

  public void setErrorParameterName(String errorParameterName) {
    this.errorParameterName = errorParameterName;
  }

  public CheckoutHandoffRequest errorReturnUrl(String errorReturnUrl) {
    this.errorReturnUrl = errorReturnUrl;
    return this;
  }

   /**
   * The URL to return the browser to if there are processing errors on the UltraCart side.
   * @return errorReturnUrl
  **/
  @ApiModelProperty(value = "The URL to return the browser to if there are processing errors on the UltraCart side.")
  public String getErrorReturnUrl() {
    return errorReturnUrl;
  }

  public void setErrorReturnUrl(String errorReturnUrl) {
    this.errorReturnUrl = errorReturnUrl;
  }

  public CheckoutHandoffRequest operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The type of handoff operation to perform
   * @return operation
  **/
  @ApiModelProperty(value = "The type of handoff operation to perform")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public CheckoutHandoffRequest paypalMaximumUpsellRevenue(BigDecimal paypalMaximumUpsellRevenue) {
    this.paypalMaximumUpsellRevenue = paypalMaximumUpsellRevenue;
    return this;
  }

   /**
   * The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.
   * @return paypalMaximumUpsellRevenue
  **/
  @ApiModelProperty(value = "The maximum amount of revenue that you think the customer could add during a custom upsell after sequence on your checkout.")
  public BigDecimal getPaypalMaximumUpsellRevenue() {
    return paypalMaximumUpsellRevenue;
  }

  public void setPaypalMaximumUpsellRevenue(BigDecimal paypalMaximumUpsellRevenue) {
    this.paypalMaximumUpsellRevenue = paypalMaximumUpsellRevenue;
  }

  public CheckoutHandoffRequest paypalReturnUrl(String paypalReturnUrl) {
    this.paypalReturnUrl = paypalReturnUrl;
    return this;
  }

   /**
   * The URl to return the customers browser to after they have completed the PayPal process.
   * @return paypalReturnUrl
  **/
  @ApiModelProperty(value = "The URl to return the customers browser to after they have completed the PayPal process.")
  public String getPaypalReturnUrl() {
    return paypalReturnUrl;
  }

  public void setPaypalReturnUrl(String paypalReturnUrl) {
    this.paypalReturnUrl = paypalReturnUrl;
  }

  public CheckoutHandoffRequest secureHostName(String secureHostName) {
    this.secureHostName = secureHostName;
    return this;
  }

   /**
   * The desired secure host name to perform the handoff on.  This should match the desired StoreFront.
   * @return secureHostName
  **/
  @ApiModelProperty(value = "The desired secure host name to perform the handoff on.  This should match the desired StoreFront.")
  public String getSecureHostName() {
    return secureHostName;
  }

  public void setSecureHostName(String secureHostName) {
    this.secureHostName = secureHostName;
  }

  public CheckoutHandoffRequest ucacid(String ucacid) {
    this.ucacid = ucacid;
    return this;
  }

   /**
   * The UltraCart Analytics cookie value.  Populate this if you&#39;re handing off from a different domain than the checkout.
   * @return ucacid
  **/
  @ApiModelProperty(value = "The UltraCart Analytics cookie value.  Populate this if you're handing off from a different domain than the checkout.")
  public String getUcacid() {
    return ucacid;
  }

  public void setUcacid(String ucacid) {
    this.ucacid = ucacid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutHandoffRequest checkoutHandoffRequest = (CheckoutHandoffRequest) o;
    return Objects.equals(this.cart, checkoutHandoffRequest.cart) &&
        Objects.equals(this.errorParameterName, checkoutHandoffRequest.errorParameterName) &&
        Objects.equals(this.errorReturnUrl, checkoutHandoffRequest.errorReturnUrl) &&
        Objects.equals(this.operation, checkoutHandoffRequest.operation) &&
        Objects.equals(this.paypalMaximumUpsellRevenue, checkoutHandoffRequest.paypalMaximumUpsellRevenue) &&
        Objects.equals(this.paypalReturnUrl, checkoutHandoffRequest.paypalReturnUrl) &&
        Objects.equals(this.secureHostName, checkoutHandoffRequest.secureHostName) &&
        Objects.equals(this.ucacid, checkoutHandoffRequest.ucacid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cart, errorParameterName, errorReturnUrl, operation, paypalMaximumUpsellRevenue, paypalReturnUrl, secureHostName, ucacid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutHandoffRequest {\n");
    
    sb.append("    cart: ").append(toIndentedString(cart)).append("\n");
    sb.append("    errorParameterName: ").append(toIndentedString(errorParameterName)).append("\n");
    sb.append("    errorReturnUrl: ").append(toIndentedString(errorReturnUrl)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    paypalMaximumUpsellRevenue: ").append(toIndentedString(paypalMaximumUpsellRevenue)).append("\n");
    sb.append("    paypalReturnUrl: ").append(toIndentedString(paypalReturnUrl)).append("\n");
    sb.append("    secureHostName: ").append(toIndentedString(secureHostName)).append("\n");
    sb.append("    ucacid: ").append(toIndentedString(ucacid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


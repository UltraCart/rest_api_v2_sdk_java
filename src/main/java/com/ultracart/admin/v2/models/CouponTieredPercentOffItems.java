/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CouponTierQuantityPercent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CouponTieredPercentOffItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:19:44.125-04:00[America/Indianapolis]")
public class CouponTieredPercentOffItems {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<String> items = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private BigDecimal limit;

  public static final String SERIALIZED_NAME_TIERS = "tiers";
  @SerializedName(SERIALIZED_NAME_TIERS)
  private List<CouponTierQuantityPercent> tiers = null;

  public CouponTieredPercentOffItems() { 
  }

  public CouponTieredPercentOffItems items(List<String> items) {
    
    this.items = items;
    return this;
  }

  public CouponTieredPercentOffItems addItemsItem(String itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * A list of items of which at least one must be purchased for coupon to be valid.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of items of which at least one must be purchased for coupon to be valid.")

  public List<String> getItems() {
    return items;
  }


  public void setItems(List<String> items) {
    this.items = items;
  }


  public CouponTieredPercentOffItems limit(BigDecimal limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * The (optional) maximum quantity of discounted items.
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The (optional) maximum quantity of discounted items.")

  public BigDecimal getLimit() {
    return limit;
  }


  public void setLimit(BigDecimal limit) {
    this.limit = limit;
  }


  public CouponTieredPercentOffItems tiers(List<CouponTierQuantityPercent> tiers) {
    
    this.tiers = tiers;
    return this;
  }

  public CouponTieredPercentOffItems addTiersItem(CouponTierQuantityPercent tiersItem) {
    if (this.tiers == null) {
      this.tiers = new ArrayList<>();
    }
    this.tiers.add(tiersItem);
    return this;
  }

   /**
   * A list of discount tiers.
   * @return tiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of discount tiers.")

  public List<CouponTierQuantityPercent> getTiers() {
    return tiers;
  }


  public void setTiers(List<CouponTierQuantityPercent> tiers) {
    this.tiers = tiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponTieredPercentOffItems couponTieredPercentOffItems = (CouponTieredPercentOffItems) o;
    return Objects.equals(this.items, couponTieredPercentOffItems.items) &&
        Objects.equals(this.limit, couponTieredPercentOffItems.limit) &&
        Objects.equals(this.tiers, couponTieredPercentOffItems.tiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, limit, tiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponTieredPercentOffItems {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("limit");
    openapiFields.add("tiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponTieredPercentOffItems
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CouponTieredPercentOffItems.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponTieredPercentOffItems is not found in the empty JSON string", CouponTieredPercentOffItems.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponTieredPercentOffItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponTieredPercentOffItems` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }
      JsonArray jsonArraytiers = jsonObj.getAsJsonArray("tiers");
      if (jsonArraytiers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("tiers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `tiers` to be an array in the JSON string but got `%s`", jsonObj.get("tiers").toString()));
        }

        // validate the optional field `tiers` (array)
        for (int i = 0; i < jsonArraytiers.size(); i++) {
          CouponTierQuantityPercent.validateJsonObject(jsonArraytiers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponTieredPercentOffItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponTieredPercentOffItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponTieredPercentOffItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponTieredPercentOffItems.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponTieredPercentOffItems>() {
           @Override
           public void write(JsonWriter out, CouponTieredPercentOffItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponTieredPercentOffItems read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponTieredPercentOffItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponTieredPercentOffItems
  * @throws IOException if the JSON string is invalid with respect to CouponTieredPercentOffItems
  */
  public static CouponTieredPercentOffItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponTieredPercentOffItems.class);
  }

 /**
  * Convert an instance of CouponTieredPercentOffItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilterValuesEvent;
import com.ultracart.admin.v2.models.ScreenRecordingFilterValuesPageParam;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingFilterValuesPageView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-11T09:49:01.664-04:00[America/Indianapolis]")
public class ScreenRecordingFilterValuesPageView {
  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<String> domains = null;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<ScreenRecordingFilterValuesEvent> events = null;

  public static final String SERIALIZED_NAME_PAGE_PARAMS = "page_params";
  @SerializedName(SERIALIZED_NAME_PAGE_PARAMS)
  private List<ScreenRecordingFilterValuesPageParam> pageParams = null;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE_MAX = "time_on_page_max";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE_MAX)
  private Integer timeOnPageMax;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE_MIN = "time_on_page_min";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE_MIN)
  private Integer timeOnPageMin;

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<String> urls = null;

  public ScreenRecordingFilterValuesPageView() { 
  }

  public ScreenRecordingFilterValuesPageView domains(List<String> domains) {
    
    this.domains = domains;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDomains() {
    return domains;
  }


  public void setDomains(List<String> domains) {
    this.domains = domains;
  }


  public ScreenRecordingFilterValuesPageView events(List<ScreenRecordingFilterValuesEvent> events) {
    
    this.events = events;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addEventsItem(ScreenRecordingFilterValuesEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingFilterValuesEvent> getEvents() {
    return events;
  }


  public void setEvents(List<ScreenRecordingFilterValuesEvent> events) {
    this.events = events;
  }


  public ScreenRecordingFilterValuesPageView pageParams(List<ScreenRecordingFilterValuesPageParam> pageParams) {
    
    this.pageParams = pageParams;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addPageParamsItem(ScreenRecordingFilterValuesPageParam pageParamsItem) {
    if (this.pageParams == null) {
      this.pageParams = new ArrayList<>();
    }
    this.pageParams.add(pageParamsItem);
    return this;
  }

   /**
   * Get pageParams
   * @return pageParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreenRecordingFilterValuesPageParam> getPageParams() {
    return pageParams;
  }


  public void setPageParams(List<ScreenRecordingFilterValuesPageParam> pageParams) {
    this.pageParams = pageParams;
  }


  public ScreenRecordingFilterValuesPageView timeOnPageMax(Integer timeOnPageMax) {
    
    this.timeOnPageMax = timeOnPageMax;
    return this;
  }

   /**
   * Get timeOnPageMax
   * @return timeOnPageMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTimeOnPageMax() {
    return timeOnPageMax;
  }


  public void setTimeOnPageMax(Integer timeOnPageMax) {
    this.timeOnPageMax = timeOnPageMax;
  }


  public ScreenRecordingFilterValuesPageView timeOnPageMin(Integer timeOnPageMin) {
    
    this.timeOnPageMin = timeOnPageMin;
    return this;
  }

   /**
   * Get timeOnPageMin
   * @return timeOnPageMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTimeOnPageMin() {
    return timeOnPageMin;
  }


  public void setTimeOnPageMin(Integer timeOnPageMin) {
    this.timeOnPageMin = timeOnPageMin;
  }


  public ScreenRecordingFilterValuesPageView urls(List<String> urls) {
    
    this.urls = urls;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

   /**
   * Get urls
   * @return urls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getUrls() {
    return urls;
  }


  public void setUrls(List<String> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterValuesPageView screenRecordingFilterValuesPageView = (ScreenRecordingFilterValuesPageView) o;
    return Objects.equals(this.domains, screenRecordingFilterValuesPageView.domains) &&
        Objects.equals(this.events, screenRecordingFilterValuesPageView.events) &&
        Objects.equals(this.pageParams, screenRecordingFilterValuesPageView.pageParams) &&
        Objects.equals(this.timeOnPageMax, screenRecordingFilterValuesPageView.timeOnPageMax) &&
        Objects.equals(this.timeOnPageMin, screenRecordingFilterValuesPageView.timeOnPageMin) &&
        Objects.equals(this.urls, screenRecordingFilterValuesPageView.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domains, events, pageParams, timeOnPageMax, timeOnPageMin, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterValuesPageView {\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    pageParams: ").append(toIndentedString(pageParams)).append("\n");
    sb.append("    timeOnPageMax: ").append(toIndentedString(timeOnPageMax)).append("\n");
    sb.append("    timeOnPageMin: ").append(toIndentedString(timeOnPageMin)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domains");
    openapiFields.add("events");
    openapiFields.add("page_params");
    openapiFields.add("time_on_page_max");
    openapiFields.add("time_on_page_min");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingFilterValuesPageView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingFilterValuesPageView.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingFilterValuesPageView is not found in the empty JSON string", ScreenRecordingFilterValuesPageView.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingFilterValuesPageView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingFilterValuesPageView` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
        }

        // validate the optional field `events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          ScreenRecordingFilterValuesEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraypageParams = jsonObj.getAsJsonArray("page_params");
      if (jsonArraypageParams != null) {
        // ensure the json data is an array
        if (!jsonObj.get("page_params").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `page_params` to be an array in the JSON string but got `%s`", jsonObj.get("page_params").toString()));
        }

        // validate the optional field `page_params` (array)
        for (int i = 0; i < jsonArraypageParams.size(); i++) {
          ScreenRecordingFilterValuesPageParam.validateJsonObject(jsonArraypageParams.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingFilterValuesPageView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingFilterValuesPageView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingFilterValuesPageView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingFilterValuesPageView.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingFilterValuesPageView>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingFilterValuesPageView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingFilterValuesPageView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingFilterValuesPageView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingFilterValuesPageView
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingFilterValuesPageView
  */
  public static ScreenRecordingFilterValuesPageView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingFilterValuesPageView.class);
  }

 /**
  * Convert an instance of ScreenRecordingFilterValuesPageView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


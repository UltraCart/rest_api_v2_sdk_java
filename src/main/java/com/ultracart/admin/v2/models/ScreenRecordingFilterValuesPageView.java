/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilterValuesEvent;
import com.ultracart.admin.v2.models.ScreenRecordingFilterValuesPageParam;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ScreenRecordingFilterValuesPageView
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-09-12T09:08:25.634-04:00")



public class ScreenRecordingFilterValuesPageView {
  @SerializedName("domains")
  private List<String> domains = null;

  @SerializedName("events")
  private List<ScreenRecordingFilterValuesEvent> events = null;

  @SerializedName("page_params")
  private List<ScreenRecordingFilterValuesPageParam> pageParams = null;

  @SerializedName("time_on_page_max")
  private Integer timeOnPageMax = null;

  @SerializedName("time_on_page_min")
  private Integer timeOnPageMin = null;

  @SerializedName("urls")
  private List<String> urls = null;

  public ScreenRecordingFilterValuesPageView domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<String>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @ApiModelProperty(value = "")
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }

  public ScreenRecordingFilterValuesPageView events(List<ScreenRecordingFilterValuesEvent> events) {
    this.events = events;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addEventsItem(ScreenRecordingFilterValuesEvent eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<ScreenRecordingFilterValuesEvent>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @ApiModelProperty(value = "")
  public List<ScreenRecordingFilterValuesEvent> getEvents() {
    return events;
  }

  public void setEvents(List<ScreenRecordingFilterValuesEvent> events) {
    this.events = events;
  }

  public ScreenRecordingFilterValuesPageView pageParams(List<ScreenRecordingFilterValuesPageParam> pageParams) {
    this.pageParams = pageParams;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addPageParamsItem(ScreenRecordingFilterValuesPageParam pageParamsItem) {
    if (this.pageParams == null) {
      this.pageParams = new ArrayList<ScreenRecordingFilterValuesPageParam>();
    }
    this.pageParams.add(pageParamsItem);
    return this;
  }

   /**
   * Get pageParams
   * @return pageParams
  **/
  @ApiModelProperty(value = "")
  public List<ScreenRecordingFilterValuesPageParam> getPageParams() {
    return pageParams;
  }

  public void setPageParams(List<ScreenRecordingFilterValuesPageParam> pageParams) {
    this.pageParams = pageParams;
  }

  public ScreenRecordingFilterValuesPageView timeOnPageMax(Integer timeOnPageMax) {
    this.timeOnPageMax = timeOnPageMax;
    return this;
  }

   /**
   * Get timeOnPageMax
   * @return timeOnPageMax
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeOnPageMax() {
    return timeOnPageMax;
  }

  public void setTimeOnPageMax(Integer timeOnPageMax) {
    this.timeOnPageMax = timeOnPageMax;
  }

  public ScreenRecordingFilterValuesPageView timeOnPageMin(Integer timeOnPageMin) {
    this.timeOnPageMin = timeOnPageMin;
    return this;
  }

   /**
   * Get timeOnPageMin
   * @return timeOnPageMin
  **/
  @ApiModelProperty(value = "")
  public Integer getTimeOnPageMin() {
    return timeOnPageMin;
  }

  public void setTimeOnPageMin(Integer timeOnPageMin) {
    this.timeOnPageMin = timeOnPageMin;
  }

  public ScreenRecordingFilterValuesPageView urls(List<String> urls) {
    this.urls = urls;
    return this;
  }

  public ScreenRecordingFilterValuesPageView addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<String>();
    }
    this.urls.add(urlsItem);
    return this;
  }

   /**
   * Get urls
   * @return urls
  **/
  @ApiModelProperty(value = "")
  public List<String> getUrls() {
    return urls;
  }

  public void setUrls(List<String> urls) {
    this.urls = urls;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterValuesPageView screenRecordingFilterValuesPageView = (ScreenRecordingFilterValuesPageView) o;
    return Objects.equals(this.domains, screenRecordingFilterValuesPageView.domains) &&
        Objects.equals(this.events, screenRecordingFilterValuesPageView.events) &&
        Objects.equals(this.pageParams, screenRecordingFilterValuesPageView.pageParams) &&
        Objects.equals(this.timeOnPageMax, screenRecordingFilterValuesPageView.timeOnPageMax) &&
        Objects.equals(this.timeOnPageMin, screenRecordingFilterValuesPageView.timeOnPageMin) &&
        Objects.equals(this.urls, screenRecordingFilterValuesPageView.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domains, events, pageParams, timeOnPageMax, timeOnPageMin, urls);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterValuesPageView {\n");
    
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    pageParams: ").append(toIndentedString(pageParams)).append("\n");
    sb.append("    timeOnPageMax: ").append(toIndentedString(timeOnPageMax)).append("\n");
    sb.append("    timeOnPageMin: ").append(toIndentedString(timeOnPageMin)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


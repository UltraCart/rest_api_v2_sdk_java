/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationParticipant;
import com.ultracart.admin.v2.models.ConversationSentiment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:21:52.957-04:00[America/Indianapolis]")
public class ConversationSummary {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CONVERSATION_ARN = "conversation_arn";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ARN)
  private String conversationArn;

  public static final String SERIALIZED_NAME_CONVERSATION_UUID = "conversation_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_UUID)
  private String conversationUuid;

  public static final String SERIALIZED_NAME_CUSTOMER_FIRST_MESSAGE_UNRESPONDED_TO_DTS = "customer_first_message_unresponded_to_dts";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_FIRST_MESSAGE_UNRESPONDED_TO_DTS)
  private String customerFirstMessageUnrespondedToDts;

  public static final String SERIALIZED_NAME_LAST_CONVERSATION_MESSAGE_BODY = "last_conversation_message_body";
  @SerializedName(SERIALIZED_NAME_LAST_CONVERSATION_MESSAGE_BODY)
  private String lastConversationMessageBody;

  public static final String SERIALIZED_NAME_LAST_CONVERSATION_PARTICIPANT_ARN = "last_conversation_participant_arn";
  @SerializedName(SERIALIZED_NAME_LAST_CONVERSATION_PARTICIPANT_ARN)
  private String lastConversationParticipantArn;

  public static final String SERIALIZED_NAME_LAST_CONVERSATION_PARTICIPANT_NAME = "last_conversation_participant_name";
  @SerializedName(SERIALIZED_NAME_LAST_CONVERSATION_PARTICIPANT_NAME)
  private String lastConversationParticipantName;

  public static final String SERIALIZED_NAME_LAST_INTERACTIVE_MESSAGE_DTS = "last_interactive_message_dts";
  @SerializedName(SERIALIZED_NAME_LAST_INTERACTIVE_MESSAGE_DTS)
  private String lastInteractiveMessageDts;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_DTS = "last_message_dts";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_DTS)
  private String lastMessageDts;

  /**
   * The communication medium of the customer.
   */
  @JsonAdapter(MediumEnum.Adapter.class)
  public enum MediumEnum {
    SMS("sms"),
    
    WEBSOCKET("websocket");

    private String value;

    MediumEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediumEnum fromValue(String value) {
      for (MediumEnum b : MediumEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediumEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediumEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediumEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediumEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MEDIUM = "medium";
  @SerializedName(SERIALIZED_NAME_MEDIUM)
  private MediumEnum medium;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MESSAGE_COUNT = "message_count";
  @SerializedName(SERIALIZED_NAME_MESSAGE_COUNT)
  private Integer messageCount;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<ConversationParticipant> participants = null;

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private ConversationSentiment sentiment;

  public static final String SERIALIZED_NAME_START_DTS = "start_dts";
  @SerializedName(SERIALIZED_NAME_START_DTS)
  private String startDts;

  public static final String SERIALIZED_NAME_UNREAD_MESSAGES = "unread_messages";
  @SerializedName(SERIALIZED_NAME_UNREAD_MESSAGES)
  private Boolean unreadMessages;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private Boolean visible;

  public ConversationSummary() { 
  }

  public ConversationSummary closed(Boolean closed) {
    
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getClosed() {
    return closed;
  }


  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public ConversationSummary conversationArn(String conversationArn) {
    
    this.conversationArn = conversationArn;
    return this;
  }

   /**
   * Get conversationArn
   * @return conversationArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationArn() {
    return conversationArn;
  }


  public void setConversationArn(String conversationArn) {
    this.conversationArn = conversationArn;
  }


  public ConversationSummary conversationUuid(String conversationUuid) {
    
    this.conversationUuid = conversationUuid;
    return this;
  }

   /**
   * Get conversationUuid
   * @return conversationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationUuid() {
    return conversationUuid;
  }


  public void setConversationUuid(String conversationUuid) {
    this.conversationUuid = conversationUuid;
  }


  public ConversationSummary customerFirstMessageUnrespondedToDts(String customerFirstMessageUnrespondedToDts) {
    
    this.customerFirstMessageUnrespondedToDts = customerFirstMessageUnrespondedToDts;
    return this;
  }

   /**
   * Date/time of the first customer message that is unresponded to.
   * @return customerFirstMessageUnrespondedToDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time of the first customer message that is unresponded to.")

  public String getCustomerFirstMessageUnrespondedToDts() {
    return customerFirstMessageUnrespondedToDts;
  }


  public void setCustomerFirstMessageUnrespondedToDts(String customerFirstMessageUnrespondedToDts) {
    this.customerFirstMessageUnrespondedToDts = customerFirstMessageUnrespondedToDts;
  }


  public ConversationSummary lastConversationMessageBody(String lastConversationMessageBody) {
    
    this.lastConversationMessageBody = lastConversationMessageBody;
    return this;
  }

   /**
   * Get lastConversationMessageBody
   * @return lastConversationMessageBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastConversationMessageBody() {
    return lastConversationMessageBody;
  }


  public void setLastConversationMessageBody(String lastConversationMessageBody) {
    this.lastConversationMessageBody = lastConversationMessageBody;
  }


  public ConversationSummary lastConversationParticipantArn(String lastConversationParticipantArn) {
    
    this.lastConversationParticipantArn = lastConversationParticipantArn;
    return this;
  }

   /**
   * Get lastConversationParticipantArn
   * @return lastConversationParticipantArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastConversationParticipantArn() {
    return lastConversationParticipantArn;
  }


  public void setLastConversationParticipantArn(String lastConversationParticipantArn) {
    this.lastConversationParticipantArn = lastConversationParticipantArn;
  }


  public ConversationSummary lastConversationParticipantName(String lastConversationParticipantName) {
    
    this.lastConversationParticipantName = lastConversationParticipantName;
    return this;
  }

   /**
   * Get lastConversationParticipantName
   * @return lastConversationParticipantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastConversationParticipantName() {
    return lastConversationParticipantName;
  }


  public void setLastConversationParticipantName(String lastConversationParticipantName) {
    this.lastConversationParticipantName = lastConversationParticipantName;
  }


  public ConversationSummary lastInteractiveMessageDts(String lastInteractiveMessageDts) {
    
    this.lastInteractiveMessageDts = lastInteractiveMessageDts;
    return this;
  }

   /**
   * Last interactive message date/time
   * @return lastInteractiveMessageDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last interactive message date/time")

  public String getLastInteractiveMessageDts() {
    return lastInteractiveMessageDts;
  }


  public void setLastInteractiveMessageDts(String lastInteractiveMessageDts) {
    this.lastInteractiveMessageDts = lastInteractiveMessageDts;
  }


  public ConversationSummary lastMessageDts(String lastMessageDts) {
    
    this.lastMessageDts = lastMessageDts;
    return this;
  }

   /**
   * Last message date/time
   * @return lastMessageDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last message date/time")

  public String getLastMessageDts() {
    return lastMessageDts;
  }


  public void setLastMessageDts(String lastMessageDts) {
    this.lastMessageDts = lastMessageDts;
  }


  public ConversationSummary medium(MediumEnum medium) {
    
    this.medium = medium;
    return this;
  }

   /**
   * The communication medium of the customer.
   * @return medium
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The communication medium of the customer.")

  public MediumEnum getMedium() {
    return medium;
  }


  public void setMedium(MediumEnum medium) {
    this.medium = medium;
  }


  public ConversationSummary merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ConversationSummary messageCount(Integer messageCount) {
    
    this.messageCount = messageCount;
    return this;
  }

   /**
   * Get messageCount
   * @return messageCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMessageCount() {
    return messageCount;
  }


  public void setMessageCount(Integer messageCount) {
    this.messageCount = messageCount;
  }


  public ConversationSummary participants(List<ConversationParticipant> participants) {
    
    this.participants = participants;
    return this;
  }

  public ConversationSummary addParticipantsItem(ConversationParticipant participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

   /**
   * Get participants
   * @return participants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationParticipant> getParticipants() {
    return participants;
  }


  public void setParticipants(List<ConversationParticipant> participants) {
    this.participants = participants;
  }


  public ConversationSummary sentiment(ConversationSentiment sentiment) {
    
    this.sentiment = sentiment;
    return this;
  }

   /**
   * Get sentiment
   * @return sentiment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSentiment getSentiment() {
    return sentiment;
  }


  public void setSentiment(ConversationSentiment sentiment) {
    this.sentiment = sentiment;
  }


  public ConversationSummary startDts(String startDts) {
    
    this.startDts = startDts;
    return this;
  }

   /**
   * Start of the conversation date/time
   * @return startDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start of the conversation date/time")

  public String getStartDts() {
    return startDts;
  }


  public void setStartDts(String startDts) {
    this.startDts = startDts;
  }


  public ConversationSummary unreadMessages(Boolean unreadMessages) {
    
    this.unreadMessages = unreadMessages;
    return this;
  }

   /**
   * Get unreadMessages
   * @return unreadMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUnreadMessages() {
    return unreadMessages;
  }


  public void setUnreadMessages(Boolean unreadMessages) {
    this.unreadMessages = unreadMessages;
  }


  public ConversationSummary visible(Boolean visible) {
    
    this.visible = visible;
    return this;
  }

   /**
   * Get visible
   * @return visible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getVisible() {
    return visible;
  }


  public void setVisible(Boolean visible) {
    this.visible = visible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationSummary conversationSummary = (ConversationSummary) o;
    return Objects.equals(this.closed, conversationSummary.closed) &&
        Objects.equals(this.conversationArn, conversationSummary.conversationArn) &&
        Objects.equals(this.conversationUuid, conversationSummary.conversationUuid) &&
        Objects.equals(this.customerFirstMessageUnrespondedToDts, conversationSummary.customerFirstMessageUnrespondedToDts) &&
        Objects.equals(this.lastConversationMessageBody, conversationSummary.lastConversationMessageBody) &&
        Objects.equals(this.lastConversationParticipantArn, conversationSummary.lastConversationParticipantArn) &&
        Objects.equals(this.lastConversationParticipantName, conversationSummary.lastConversationParticipantName) &&
        Objects.equals(this.lastInteractiveMessageDts, conversationSummary.lastInteractiveMessageDts) &&
        Objects.equals(this.lastMessageDts, conversationSummary.lastMessageDts) &&
        Objects.equals(this.medium, conversationSummary.medium) &&
        Objects.equals(this.merchantId, conversationSummary.merchantId) &&
        Objects.equals(this.messageCount, conversationSummary.messageCount) &&
        Objects.equals(this.participants, conversationSummary.participants) &&
        Objects.equals(this.sentiment, conversationSummary.sentiment) &&
        Objects.equals(this.startDts, conversationSummary.startDts) &&
        Objects.equals(this.unreadMessages, conversationSummary.unreadMessages) &&
        Objects.equals(this.visible, conversationSummary.visible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, conversationArn, conversationUuid, customerFirstMessageUnrespondedToDts, lastConversationMessageBody, lastConversationParticipantArn, lastConversationParticipantName, lastInteractiveMessageDts, lastMessageDts, medium, merchantId, messageCount, participants, sentiment, startDts, unreadMessages, visible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationSummary {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    conversationArn: ").append(toIndentedString(conversationArn)).append("\n");
    sb.append("    conversationUuid: ").append(toIndentedString(conversationUuid)).append("\n");
    sb.append("    customerFirstMessageUnrespondedToDts: ").append(toIndentedString(customerFirstMessageUnrespondedToDts)).append("\n");
    sb.append("    lastConversationMessageBody: ").append(toIndentedString(lastConversationMessageBody)).append("\n");
    sb.append("    lastConversationParticipantArn: ").append(toIndentedString(lastConversationParticipantArn)).append("\n");
    sb.append("    lastConversationParticipantName: ").append(toIndentedString(lastConversationParticipantName)).append("\n");
    sb.append("    lastInteractiveMessageDts: ").append(toIndentedString(lastInteractiveMessageDts)).append("\n");
    sb.append("    lastMessageDts: ").append(toIndentedString(lastMessageDts)).append("\n");
    sb.append("    medium: ").append(toIndentedString(medium)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    startDts: ").append(toIndentedString(startDts)).append("\n");
    sb.append("    unreadMessages: ").append(toIndentedString(unreadMessages)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("conversation_arn");
    openapiFields.add("conversation_uuid");
    openapiFields.add("customer_first_message_unresponded_to_dts");
    openapiFields.add("last_conversation_message_body");
    openapiFields.add("last_conversation_participant_arn");
    openapiFields.add("last_conversation_participant_name");
    openapiFields.add("last_interactive_message_dts");
    openapiFields.add("last_message_dts");
    openapiFields.add("medium");
    openapiFields.add("merchant_id");
    openapiFields.add("message_count");
    openapiFields.add("participants");
    openapiFields.add("sentiment");
    openapiFields.add("start_dts");
    openapiFields.add("unread_messages");
    openapiFields.add("visible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationSummary.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationSummary is not found in the empty JSON string", ConversationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("conversation_arn") != null && !jsonObj.get("conversation_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_arn").toString()));
      }
      if (jsonObj.get("conversation_uuid") != null && !jsonObj.get("conversation_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_uuid").toString()));
      }
      if (jsonObj.get("customer_first_message_unresponded_to_dts") != null && !jsonObj.get("customer_first_message_unresponded_to_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_first_message_unresponded_to_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_first_message_unresponded_to_dts").toString()));
      }
      if (jsonObj.get("last_conversation_message_body") != null && !jsonObj.get("last_conversation_message_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_conversation_message_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_conversation_message_body").toString()));
      }
      if (jsonObj.get("last_conversation_participant_arn") != null && !jsonObj.get("last_conversation_participant_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_conversation_participant_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_conversation_participant_arn").toString()));
      }
      if (jsonObj.get("last_conversation_participant_name") != null && !jsonObj.get("last_conversation_participant_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_conversation_participant_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_conversation_participant_name").toString()));
      }
      if (jsonObj.get("last_interactive_message_dts") != null && !jsonObj.get("last_interactive_message_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_interactive_message_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_interactive_message_dts").toString()));
      }
      if (jsonObj.get("last_message_dts") != null && !jsonObj.get("last_message_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_message_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_message_dts").toString()));
      }
      if (jsonObj.get("medium") != null && !jsonObj.get("medium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medium").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      JsonArray jsonArrayparticipants = jsonObj.getAsJsonArray("participants");
      if (jsonArrayparticipants != null) {
        // ensure the json data is an array
        if (!jsonObj.get("participants").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
        }

        // validate the optional field `participants` (array)
        for (int i = 0; i < jsonArrayparticipants.size(); i++) {
          ConversationParticipant.validateJsonObject(jsonArrayparticipants.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `sentiment`
      if (jsonObj.getAsJsonObject("sentiment") != null) {
        ConversationSentiment.validateJsonObject(jsonObj.getAsJsonObject("sentiment"));
      }
      if (jsonObj.get("start_dts") != null && !jsonObj.get("start_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_dts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationSummary>() {
           @Override
           public void write(JsonWriter out, ConversationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationSummary
  * @throws IOException if the JSON string is invalid with respect to ConversationSummary
  */
  public static ConversationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationSummary.class);
  }

 /**
  * Convert an instance of ConversationSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailCustomer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-05T11:02:37.171-05:00[America/Indianapolis]")
public class EmailCustomer {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_CUSTOMER_UUID = "email_customer_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_CUSTOMER_UUID)
  private String emailCustomerUuid;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GLOBAL_UNSUBSCRIBE = "global_unsubscribe";
  @SerializedName(SERIALIZED_NAME_GLOBAL_UNSUBSCRIBE)
  private Boolean globalUnsubscribe;

  public static final String SERIALIZED_NAME_LAST_INTERACTION_DTS = "last_interaction_dts";
  @SerializedName(SERIALIZED_NAME_LAST_INTERACTION_DTS)
  private String lastInteractionDts;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LIST_UUIDS = "list_uuids";
  @SerializedName(SERIALIZED_NAME_LIST_UUIDS)
  private List<String> listUuids = null;

  public EmailCustomer() { 
  }

  public EmailCustomer active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * True if the customer is flagged as active within StoreFront Communications
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer is flagged as active within StoreFront Communications")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public EmailCustomer email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public EmailCustomer emailCustomerUuid(String emailCustomerUuid) {
    
    this.emailCustomerUuid = emailCustomerUuid;
    return this;
  }

   /**
   * Email customer UUID
   * @return emailCustomerUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email customer UUID")

  public String getEmailCustomerUuid() {
    return emailCustomerUuid;
  }


  public void setEmailCustomerUuid(String emailCustomerUuid) {
    this.emailCustomerUuid = emailCustomerUuid;
  }


  public EmailCustomer firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public EmailCustomer globalUnsubscribe(Boolean globalUnsubscribe) {
    
    this.globalUnsubscribe = globalUnsubscribe;
    return this;
  }

   /**
   * True if the customer has globally unsubscribed from all communication.
   * @return globalUnsubscribe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer has globally unsubscribed from all communication.")

  public Boolean getGlobalUnsubscribe() {
    return globalUnsubscribe;
  }


  public void setGlobalUnsubscribe(Boolean globalUnsubscribe) {
    this.globalUnsubscribe = globalUnsubscribe;
  }


  public EmailCustomer lastInteractionDts(String lastInteractionDts) {
    
    this.lastInteractionDts = lastInteractionDts;
    return this;
  }

   /**
   * Last interaction
   * @return lastInteractionDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last interaction")

  public String getLastInteractionDts() {
    return lastInteractionDts;
  }


  public void setLastInteractionDts(String lastInteractionDts) {
    this.lastInteractionDts = lastInteractionDts;
  }


  public EmailCustomer lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public EmailCustomer listUuids(List<String> listUuids) {
    
    this.listUuids = listUuids;
    return this;
  }

  public EmailCustomer addListUuidsItem(String listUuidsItem) {
    if (this.listUuids == null) {
      this.listUuids = new ArrayList<>();
    }
    this.listUuids.add(listUuidsItem);
    return this;
  }

   /**
   * UUIDs of the lists they are subscribed to
   * @return listUuids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUIDs of the lists they are subscribed to")

  public List<String> getListUuids() {
    return listUuids;
  }


  public void setListUuids(List<String> listUuids) {
    this.listUuids = listUuids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailCustomer emailCustomer = (EmailCustomer) o;
    return Objects.equals(this.active, emailCustomer.active) &&
        Objects.equals(this.email, emailCustomer.email) &&
        Objects.equals(this.emailCustomerUuid, emailCustomer.emailCustomerUuid) &&
        Objects.equals(this.firstName, emailCustomer.firstName) &&
        Objects.equals(this.globalUnsubscribe, emailCustomer.globalUnsubscribe) &&
        Objects.equals(this.lastInteractionDts, emailCustomer.lastInteractionDts) &&
        Objects.equals(this.lastName, emailCustomer.lastName) &&
        Objects.equals(this.listUuids, emailCustomer.listUuids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, email, emailCustomerUuid, firstName, globalUnsubscribe, lastInteractionDts, lastName, listUuids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailCustomer {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailCustomerUuid: ").append(toIndentedString(emailCustomerUuid)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    globalUnsubscribe: ").append(toIndentedString(globalUnsubscribe)).append("\n");
    sb.append("    lastInteractionDts: ").append(toIndentedString(lastInteractionDts)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    listUuids: ").append(toIndentedString(listUuids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("email");
    openapiFields.add("email_customer_uuid");
    openapiFields.add("first_name");
    openapiFields.add("global_unsubscribe");
    openapiFields.add("last_interaction_dts");
    openapiFields.add("last_name");
    openapiFields.add("list_uuids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailCustomer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailCustomer.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailCustomer is not found in the empty JSON string", EmailCustomer.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailCustomer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailCustomer` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("email_customer_uuid") != null && !jsonObj.get("email_customer_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_customer_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_customer_uuid").toString()));
      }
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (jsonObj.get("last_interaction_dts") != null && !jsonObj.get("last_interaction_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_interaction_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_interaction_dts").toString()));
      }
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("list_uuids") != null && !jsonObj.get("list_uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("list_uuids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailCustomer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailCustomer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailCustomer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailCustomer.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailCustomer>() {
           @Override
           public void write(JsonWriter out, EmailCustomer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailCustomer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailCustomer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailCustomer
  * @throws IOException if the JSON string is invalid with respect to EmailCustomer
  */
  public static EmailCustomer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailCustomer.class);
  }

 /**
  * Convert an instance of EmailCustomer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


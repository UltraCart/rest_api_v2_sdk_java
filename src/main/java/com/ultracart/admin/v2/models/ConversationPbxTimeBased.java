/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationPbxTimeBasedMappingConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationPbxTimeBased
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:26:00.852-04:00[America/Indianapolis]")
public class ConversationPbxTimeBased {
  public static final String SERIALIZED_NAME_CONVERSATION_PBX_TIME_BASED_UUID = "conversation_pbx_time_based_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_PBX_TIME_BASED_UUID)
  private String conversationPbxTimeBasedUuid;

  public static final String SERIALIZED_NAME_MAPPING_CONFIG = "mapping_config";
  @SerializedName(SERIALIZED_NAME_MAPPING_CONFIG)
  private ConversationPbxTimeBasedMappingConfig mappingConfig;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_TIME_BASED_NAME = "time_based_name";
  @SerializedName(SERIALIZED_NAME_TIME_BASED_NAME)
  private String timeBasedName;

  public ConversationPbxTimeBased() { 
  }

  public ConversationPbxTimeBased conversationPbxTimeBasedUuid(String conversationPbxTimeBasedUuid) {
    
    this.conversationPbxTimeBasedUuid = conversationPbxTimeBasedUuid;
    return this;
  }

   /**
   * Get conversationPbxTimeBasedUuid
   * @return conversationPbxTimeBasedUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationPbxTimeBasedUuid() {
    return conversationPbxTimeBasedUuid;
  }


  public void setConversationPbxTimeBasedUuid(String conversationPbxTimeBasedUuid) {
    this.conversationPbxTimeBasedUuid = conversationPbxTimeBasedUuid;
  }


  public ConversationPbxTimeBased mappingConfig(ConversationPbxTimeBasedMappingConfig mappingConfig) {
    
    this.mappingConfig = mappingConfig;
    return this;
  }

   /**
   * Get mappingConfig
   * @return mappingConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationPbxTimeBasedMappingConfig getMappingConfig() {
    return mappingConfig;
  }


  public void setMappingConfig(ConversationPbxTimeBasedMappingConfig mappingConfig) {
    this.mappingConfig = mappingConfig;
  }


  public ConversationPbxTimeBased merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ConversationPbxTimeBased timeBasedName(String timeBasedName) {
    
    this.timeBasedName = timeBasedName;
    return this;
  }

   /**
   * Get timeBasedName
   * @return timeBasedName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTimeBasedName() {
    return timeBasedName;
  }


  public void setTimeBasedName(String timeBasedName) {
    this.timeBasedName = timeBasedName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationPbxTimeBased conversationPbxTimeBased = (ConversationPbxTimeBased) o;
    return Objects.equals(this.conversationPbxTimeBasedUuid, conversationPbxTimeBased.conversationPbxTimeBasedUuid) &&
        Objects.equals(this.mappingConfig, conversationPbxTimeBased.mappingConfig) &&
        Objects.equals(this.merchantId, conversationPbxTimeBased.merchantId) &&
        Objects.equals(this.timeBasedName, conversationPbxTimeBased.timeBasedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationPbxTimeBasedUuid, mappingConfig, merchantId, timeBasedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationPbxTimeBased {\n");
    sb.append("    conversationPbxTimeBasedUuid: ").append(toIndentedString(conversationPbxTimeBasedUuid)).append("\n");
    sb.append("    mappingConfig: ").append(toIndentedString(mappingConfig)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    timeBasedName: ").append(toIndentedString(timeBasedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversation_pbx_time_based_uuid");
    openapiFields.add("mapping_config");
    openapiFields.add("merchant_id");
    openapiFields.add("time_based_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationPbxTimeBased
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationPbxTimeBased.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationPbxTimeBased is not found in the empty JSON string", ConversationPbxTimeBased.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationPbxTimeBased.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationPbxTimeBased` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("conversation_pbx_time_based_uuid") != null && !jsonObj.get("conversation_pbx_time_based_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_pbx_time_based_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_pbx_time_based_uuid").toString()));
      }
      // validate the optional field `mapping_config`
      if (jsonObj.getAsJsonObject("mapping_config") != null) {
        ConversationPbxTimeBasedMappingConfig.validateJsonObject(jsonObj.getAsJsonObject("mapping_config"));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("time_based_name") != null && !jsonObj.get("time_based_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_based_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_based_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationPbxTimeBased.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationPbxTimeBased' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationPbxTimeBased> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationPbxTimeBased.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationPbxTimeBased>() {
           @Override
           public void write(JsonWriter out, ConversationPbxTimeBased value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationPbxTimeBased read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationPbxTimeBased given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationPbxTimeBased
  * @throws IOException if the JSON string is invalid with respect to ConversationPbxTimeBased
  */
  public static ConversationPbxTimeBased fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationPbxTimeBased.class);
  }

 /**
  * Convert an instance of ConversationPbxTimeBased to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartAffiliate;
import com.ultracart.admin.v2.models.CartBilling;
import com.ultracart.admin.v2.models.CartBuysafe;
import com.ultracart.admin.v2.models.CartCheckout;
import com.ultracart.admin.v2.models.CartCoupon;
import com.ultracart.admin.v2.models.CartCurrencyConversion;
import com.ultracart.admin.v2.models.CartCustomerProfile;
import com.ultracart.admin.v2.models.CartGift;
import com.ultracart.admin.v2.models.CartGiftCertificate;
import com.ultracart.admin.v2.models.CartItem;
import com.ultracart.admin.v2.models.CartMarketing;
import com.ultracart.admin.v2.models.CartPayment;
import com.ultracart.admin.v2.models.CartProperty;
import com.ultracart.admin.v2.models.CartSettings;
import com.ultracart.admin.v2.models.CartShipping;
import com.ultracart.admin.v2.models.CartSummary;
import com.ultracart.admin.v2.models.CartTaxes;
import com.ultracart.admin.v2.models.CartUpsellAfter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Cart
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-06-16T15:52:34.213-04:00")



public class Cart {
  @SerializedName("affiliate")
  private CartAffiliate affiliate = null;

  @SerializedName("affiliate_network_pixel_oid")
  private Integer affiliateNetworkPixelOid = null;

  @SerializedName("base_currency_code")
  private String baseCurrencyCode = null;

  @SerializedName("billing")
  private CartBilling billing = null;

  @SerializedName("buysafe")
  private CartBuysafe buysafe = null;

  @SerializedName("cart_id")
  private String cartId = null;

  @SerializedName("checkout")
  private CartCheckout checkout = null;

  @SerializedName("coupons")
  private List<CartCoupon> coupons = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("currency_conversion")
  private CartCurrencyConversion currencyConversion = null;

  @SerializedName("customer_profile")
  private CartCustomerProfile customerProfile = null;

  @SerializedName("exchange_rate")
  private BigDecimal exchangeRate = null;

  @SerializedName("gift")
  private CartGift gift = null;

  @SerializedName("gift_certificate")
  private CartGiftCertificate giftCertificate = null;

  @SerializedName("items")
  private List<CartItem> items = null;

  @SerializedName("language_iso_code")
  private String languageIsoCode = null;

  @SerializedName("logged_in")
  private Boolean loggedIn = null;

  @SerializedName("marketing")
  private CartMarketing marketing = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("payment")
  private CartPayment payment = null;

  @SerializedName("properties")
  private List<CartProperty> properties = null;

  @SerializedName("settings")
  private CartSettings settings = null;

  @SerializedName("shipping")
  private CartShipping shipping = null;

  @SerializedName("summary")
  private CartSummary summary = null;

  @SerializedName("taxes")
  private CartTaxes taxes = null;

  @SerializedName("upsell_after")
  private CartUpsellAfter upsellAfter = null;

  public Cart affiliate(CartAffiliate affiliate) {
    this.affiliate = affiliate;
    return this;
  }

   /**
   * Get affiliate
   * @return affiliate
  **/
  @ApiModelProperty(value = "")
  public CartAffiliate getAffiliate() {
    return affiliate;
  }

  public void setAffiliate(CartAffiliate affiliate) {
    this.affiliate = affiliate;
  }

  public Cart affiliateNetworkPixelOid(Integer affiliateNetworkPixelOid) {
    this.affiliateNetworkPixelOid = affiliateNetworkPixelOid;
    return this;
  }

   /**
   * The affiliate network pixel identifier associated with the cart
   * @return affiliateNetworkPixelOid
  **/
  @ApiModelProperty(value = "The affiliate network pixel identifier associated with the cart")
  public Integer getAffiliateNetworkPixelOid() {
    return affiliateNetworkPixelOid;
  }

  public void setAffiliateNetworkPixelOid(Integer affiliateNetworkPixelOid) {
    this.affiliateNetworkPixelOid = affiliateNetworkPixelOid;
  }

  public Cart baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter base currency code of the account
   * @return baseCurrencyCode
  **/
  @ApiModelProperty(value = "The ISO-4217 three letter base currency code of the account")
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }

  public Cart billing(CartBilling billing) {
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @ApiModelProperty(value = "")
  public CartBilling getBilling() {
    return billing;
  }

  public void setBilling(CartBilling billing) {
    this.billing = billing;
  }

  public Cart buysafe(CartBuysafe buysafe) {
    this.buysafe = buysafe;
    return this;
  }

   /**
   * Get buysafe
   * @return buysafe
  **/
  @ApiModelProperty(value = "")
  public CartBuysafe getBuysafe() {
    return buysafe;
  }

  public void setBuysafe(CartBuysafe buysafe) {
    this.buysafe = buysafe;
  }

  public Cart cartId(String cartId) {
    this.cartId = cartId;
    return this;
  }

   /**
   * Unique identifier for this cart
   * @return cartId
  **/
  @ApiModelProperty(value = "Unique identifier for this cart")
  public String getCartId() {
    return cartId;
  }

  public void setCartId(String cartId) {
    this.cartId = cartId;
  }

  public Cart checkout(CartCheckout checkout) {
    this.checkout = checkout;
    return this;
  }

   /**
   * Get checkout
   * @return checkout
  **/
  @ApiModelProperty(value = "")
  public CartCheckout getCheckout() {
    return checkout;
  }

  public void setCheckout(CartCheckout checkout) {
    this.checkout = checkout;
  }

  public Cart coupons(List<CartCoupon> coupons) {
    this.coupons = coupons;
    return this;
  }

  public Cart addCouponsItem(CartCoupon couponsItem) {
    if (this.coupons == null) {
      this.coupons = new ArrayList<CartCoupon>();
    }
    this.coupons.add(couponsItem);
    return this;
  }

   /**
   * Coupons
   * @return coupons
  **/
  @ApiModelProperty(value = "Coupons")
  public List<CartCoupon> getCoupons() {
    return coupons;
  }

  public void setCoupons(List<CartCoupon> coupons) {
    this.coupons = coupons;
  }

  public Cart currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter currency code the customer is viewing prices in
   * @return currencyCode
  **/
  @ApiModelProperty(value = "The ISO-4217 three letter currency code the customer is viewing prices in")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public Cart currencyConversion(CartCurrencyConversion currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @ApiModelProperty(value = "")
  public CartCurrencyConversion getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(CartCurrencyConversion currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  public Cart customerProfile(CartCustomerProfile customerProfile) {
    this.customerProfile = customerProfile;
    return this;
  }

   /**
   * Get customerProfile
   * @return customerProfile
  **/
  @ApiModelProperty(value = "")
  public CartCustomerProfile getCustomerProfile() {
    return customerProfile;
  }

  public void setCustomerProfile(CartCustomerProfile customerProfile) {
    this.customerProfile = customerProfile;
  }

  public Cart exchangeRate(BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate if the customer is viewing a different currency than the base
   * @return exchangeRate
  **/
  @ApiModelProperty(value = "The exchange rate if the customer is viewing a different currency than the base")
  public BigDecimal getExchangeRate() {
    return exchangeRate;
  }

  public void setExchangeRate(BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }

  public Cart gift(CartGift gift) {
    this.gift = gift;
    return this;
  }

   /**
   * Get gift
   * @return gift
  **/
  @ApiModelProperty(value = "")
  public CartGift getGift() {
    return gift;
  }

  public void setGift(CartGift gift) {
    this.gift = gift;
  }

  public Cart giftCertificate(CartGiftCertificate giftCertificate) {
    this.giftCertificate = giftCertificate;
    return this;
  }

   /**
   * Get giftCertificate
   * @return giftCertificate
  **/
  @ApiModelProperty(value = "")
  public CartGiftCertificate getGiftCertificate() {
    return giftCertificate;
  }

  public void setGiftCertificate(CartGiftCertificate giftCertificate) {
    this.giftCertificate = giftCertificate;
  }

  public Cart items(List<CartItem> items) {
    this.items = items;
    return this;
  }

  public Cart addItemsItem(CartItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<CartItem>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Items
   * @return items
  **/
  @ApiModelProperty(value = "Items")
  public List<CartItem> getItems() {
    return items;
  }

  public void setItems(List<CartItem> items) {
    this.items = items;
  }

  public Cart languageIsoCode(String languageIsoCode) {
    this.languageIsoCode = languageIsoCode;
    return this;
  }

   /**
   * The ISO-631 three letter code the customer would like to checkout with
   * @return languageIsoCode
  **/
  @ApiModelProperty(value = "The ISO-631 three letter code the customer would like to checkout with")
  public String getLanguageIsoCode() {
    return languageIsoCode;
  }

  public void setLanguageIsoCode(String languageIsoCode) {
    this.languageIsoCode = languageIsoCode;
  }

  public Cart loggedIn(Boolean loggedIn) {
    this.loggedIn = loggedIn;
    return this;
  }

   /**
   * True if the customer is logged into their profile
   * @return loggedIn
  **/
  @ApiModelProperty(value = "True if the customer is logged into their profile")
  public Boolean isLoggedIn() {
    return loggedIn;
  }

  public void setLoggedIn(Boolean loggedIn) {
    this.loggedIn = loggedIn;
  }

  public Cart marketing(CartMarketing marketing) {
    this.marketing = marketing;
    return this;
  }

   /**
   * Get marketing
   * @return marketing
  **/
  @ApiModelProperty(value = "")
  public CartMarketing getMarketing() {
    return marketing;
  }

  public void setMarketing(CartMarketing marketing) {
    this.marketing = marketing;
  }

  public Cart merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID this cart is associated with
   * @return merchantId
  **/
  @ApiModelProperty(value = "Merchant ID this cart is associated with")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public Cart payment(CartPayment payment) {
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @ApiModelProperty(value = "")
  public CartPayment getPayment() {
    return payment;
  }

  public void setPayment(CartPayment payment) {
    this.payment = payment;
  }

  public Cart properties(List<CartProperty> properties) {
    this.properties = properties;
    return this;
  }

  public Cart addPropertiesItem(CartProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<CartProperty>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Properties associated with the cart
   * @return properties
  **/
  @ApiModelProperty(value = "Properties associated with the cart")
  public List<CartProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<CartProperty> properties) {
    this.properties = properties;
  }

  public Cart settings(CartSettings settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public CartSettings getSettings() {
    return settings;
  }

  public void setSettings(CartSettings settings) {
    this.settings = settings;
  }

  public Cart shipping(CartShipping shipping) {
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @ApiModelProperty(value = "")
  public CartShipping getShipping() {
    return shipping;
  }

  public void setShipping(CartShipping shipping) {
    this.shipping = shipping;
  }

  public Cart summary(CartSummary summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @ApiModelProperty(value = "")
  public CartSummary getSummary() {
    return summary;
  }

  public void setSummary(CartSummary summary) {
    this.summary = summary;
  }

  public Cart taxes(CartTaxes taxes) {
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @ApiModelProperty(value = "")
  public CartTaxes getTaxes() {
    return taxes;
  }

  public void setTaxes(CartTaxes taxes) {
    this.taxes = taxes;
  }

  public Cart upsellAfter(CartUpsellAfter upsellAfter) {
    this.upsellAfter = upsellAfter;
    return this;
  }

   /**
   * Get upsellAfter
   * @return upsellAfter
  **/
  @ApiModelProperty(value = "")
  public CartUpsellAfter getUpsellAfter() {
    return upsellAfter;
  }

  public void setUpsellAfter(CartUpsellAfter upsellAfter) {
    this.upsellAfter = upsellAfter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.affiliate, cart.affiliate) &&
        Objects.equals(this.affiliateNetworkPixelOid, cart.affiliateNetworkPixelOid) &&
        Objects.equals(this.baseCurrencyCode, cart.baseCurrencyCode) &&
        Objects.equals(this.billing, cart.billing) &&
        Objects.equals(this.buysafe, cart.buysafe) &&
        Objects.equals(this.cartId, cart.cartId) &&
        Objects.equals(this.checkout, cart.checkout) &&
        Objects.equals(this.coupons, cart.coupons) &&
        Objects.equals(this.currencyCode, cart.currencyCode) &&
        Objects.equals(this.currencyConversion, cart.currencyConversion) &&
        Objects.equals(this.customerProfile, cart.customerProfile) &&
        Objects.equals(this.exchangeRate, cart.exchangeRate) &&
        Objects.equals(this.gift, cart.gift) &&
        Objects.equals(this.giftCertificate, cart.giftCertificate) &&
        Objects.equals(this.items, cart.items) &&
        Objects.equals(this.languageIsoCode, cart.languageIsoCode) &&
        Objects.equals(this.loggedIn, cart.loggedIn) &&
        Objects.equals(this.marketing, cart.marketing) &&
        Objects.equals(this.merchantId, cart.merchantId) &&
        Objects.equals(this.payment, cart.payment) &&
        Objects.equals(this.properties, cart.properties) &&
        Objects.equals(this.settings, cart.settings) &&
        Objects.equals(this.shipping, cart.shipping) &&
        Objects.equals(this.summary, cart.summary) &&
        Objects.equals(this.taxes, cart.taxes) &&
        Objects.equals(this.upsellAfter, cart.upsellAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliate, affiliateNetworkPixelOid, baseCurrencyCode, billing, buysafe, cartId, checkout, coupons, currencyCode, currencyConversion, customerProfile, exchangeRate, gift, giftCertificate, items, languageIsoCode, loggedIn, marketing, merchantId, payment, properties, settings, shipping, summary, taxes, upsellAfter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    
    sb.append("    affiliate: ").append(toIndentedString(affiliate)).append("\n");
    sb.append("    affiliateNetworkPixelOid: ").append(toIndentedString(affiliateNetworkPixelOid)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    buysafe: ").append(toIndentedString(buysafe)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    coupons: ").append(toIndentedString(coupons)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    customerProfile: ").append(toIndentedString(customerProfile)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    giftCertificate: ").append(toIndentedString(giftCertificate)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    languageIsoCode: ").append(toIndentedString(languageIsoCode)).append("\n");
    sb.append("    loggedIn: ").append(toIndentedString(loggedIn)).append("\n");
    sb.append("    marketing: ").append(toIndentedString(marketing)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    upsellAfter: ").append(toIndentedString(upsellAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


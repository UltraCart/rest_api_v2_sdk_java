/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartAffiliate;
import com.ultracart.admin.v2.models.CartBilling;
import com.ultracart.admin.v2.models.CartBuysafe;
import com.ultracart.admin.v2.models.CartCheckout;
import com.ultracart.admin.v2.models.CartCoupon;
import com.ultracart.admin.v2.models.CartCurrencyConversion;
import com.ultracart.admin.v2.models.CartCustomerProfile;
import com.ultracart.admin.v2.models.CartGift;
import com.ultracart.admin.v2.models.CartGiftCertificate;
import com.ultracart.admin.v2.models.CartItem;
import com.ultracart.admin.v2.models.CartMarketing;
import com.ultracart.admin.v2.models.CartPayment;
import com.ultracart.admin.v2.models.CartProperty;
import com.ultracart.admin.v2.models.CartSettings;
import com.ultracart.admin.v2.models.CartShipping;
import com.ultracart.admin.v2.models.CartSummary;
import com.ultracart.admin.v2.models.CartTaxes;
import com.ultracart.admin.v2.models.CartUpsellAfter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Cart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T12:05:11.750-05:00[America/Indianapolis]")
public class Cart {
  public static final String SERIALIZED_NAME_AFFILIATE = "affiliate";
  @SerializedName(SERIALIZED_NAME_AFFILIATE)
  private CartAffiliate affiliate;

  public static final String SERIALIZED_NAME_AFFILIATE_NETWORK_PIXEL_OID = "affiliate_network_pixel_oid";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_NETWORK_PIXEL_OID)
  private Integer affiliateNetworkPixelOid;

  public static final String SERIALIZED_NAME_BASE_CURRENCY_CODE = "base_currency_code";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY_CODE)
  private String baseCurrencyCode;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private CartBilling billing;

  public static final String SERIALIZED_NAME_BUYSAFE = "buysafe";
  @SerializedName(SERIALIZED_NAME_BUYSAFE)
  private CartBuysafe buysafe;

  public static final String SERIALIZED_NAME_CART_ID = "cart_id";
  @SerializedName(SERIALIZED_NAME_CART_ID)
  private String cartId;

  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private CartCheckout checkout;

  public static final String SERIALIZED_NAME_COUPONS = "coupons";
  @SerializedName(SERIALIZED_NAME_COUPONS)
  private List<CartCoupon> coupons = null;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION = "currency_conversion";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION)
  private CartCurrencyConversion currencyConversion;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILE = "customer_profile";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILE)
  private CartCustomerProfile customerProfile;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchange_rate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_GIFT = "gift";
  @SerializedName(SERIALIZED_NAME_GIFT)
  private CartGift gift;

  public static final String SERIALIZED_NAME_GIFT_CERTIFICATE = "gift_certificate";
  @SerializedName(SERIALIZED_NAME_GIFT_CERTIFICATE)
  private CartGiftCertificate giftCertificate;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<CartItem> items = null;

  public static final String SERIALIZED_NAME_LANGUAGE_ISO_CODE = "language_iso_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_ISO_CODE)
  private String languageIsoCode;

  public static final String SERIALIZED_NAME_LOGGED_IN = "logged_in";
  @SerializedName(SERIALIZED_NAME_LOGGED_IN)
  private Boolean loggedIn;

  public static final String SERIALIZED_NAME_MARKETING = "marketing";
  @SerializedName(SERIALIZED_NAME_MARKETING)
  private CartMarketing marketing;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private CartPayment payment;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<CartProperty> properties = null;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private CartSettings settings;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private CartShipping shipping;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private CartSummary summary;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private CartTaxes taxes;

  public static final String SERIALIZED_NAME_UPSELL_AFTER = "upsell_after";
  @SerializedName(SERIALIZED_NAME_UPSELL_AFTER)
  private CartUpsellAfter upsellAfter;

  public Cart() { 
  }

  public Cart affiliate(CartAffiliate affiliate) {
    
    this.affiliate = affiliate;
    return this;
  }

   /**
   * Get affiliate
   * @return affiliate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartAffiliate getAffiliate() {
    return affiliate;
  }


  public void setAffiliate(CartAffiliate affiliate) {
    this.affiliate = affiliate;
  }


  public Cart affiliateNetworkPixelOid(Integer affiliateNetworkPixelOid) {
    
    this.affiliateNetworkPixelOid = affiliateNetworkPixelOid;
    return this;
  }

   /**
   * The affiliate network pixel identifier associated with the cart
   * @return affiliateNetworkPixelOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The affiliate network pixel identifier associated with the cart")

  public Integer getAffiliateNetworkPixelOid() {
    return affiliateNetworkPixelOid;
  }


  public void setAffiliateNetworkPixelOid(Integer affiliateNetworkPixelOid) {
    this.affiliateNetworkPixelOid = affiliateNetworkPixelOid;
  }


  public Cart baseCurrencyCode(String baseCurrencyCode) {
    
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter base currency code of the account
   * @return baseCurrencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO-4217 three letter base currency code of the account")

  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }


  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }


  public Cart billing(CartBilling billing) {
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartBilling getBilling() {
    return billing;
  }


  public void setBilling(CartBilling billing) {
    this.billing = billing;
  }


  public Cart buysafe(CartBuysafe buysafe) {
    
    this.buysafe = buysafe;
    return this;
  }

   /**
   * Get buysafe
   * @return buysafe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartBuysafe getBuysafe() {
    return buysafe;
  }


  public void setBuysafe(CartBuysafe buysafe) {
    this.buysafe = buysafe;
  }


  public Cart cartId(String cartId) {
    
    this.cartId = cartId;
    return this;
  }

   /**
   * Unique identifier for this cart
   * @return cartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for this cart")

  public String getCartId() {
    return cartId;
  }


  public void setCartId(String cartId) {
    this.cartId = cartId;
  }


  public Cart checkout(CartCheckout checkout) {
    
    this.checkout = checkout;
    return this;
  }

   /**
   * Get checkout
   * @return checkout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartCheckout getCheckout() {
    return checkout;
  }


  public void setCheckout(CartCheckout checkout) {
    this.checkout = checkout;
  }


  public Cart coupons(List<CartCoupon> coupons) {
    
    this.coupons = coupons;
    return this;
  }

  public Cart addCouponsItem(CartCoupon couponsItem) {
    if (this.coupons == null) {
      this.coupons = new ArrayList<>();
    }
    this.coupons.add(couponsItem);
    return this;
  }

   /**
   * Coupons
   * @return coupons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupons")

  public List<CartCoupon> getCoupons() {
    return coupons;
  }


  public void setCoupons(List<CartCoupon> coupons) {
    this.coupons = coupons;
  }


  public Cart currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter currency code the customer is viewing prices in
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO-4217 three letter currency code the customer is viewing prices in")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Cart currencyConversion(CartCurrencyConversion currencyConversion) {
    
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartCurrencyConversion getCurrencyConversion() {
    return currencyConversion;
  }


  public void setCurrencyConversion(CartCurrencyConversion currencyConversion) {
    this.currencyConversion = currencyConversion;
  }


  public Cart customerProfile(CartCustomerProfile customerProfile) {
    
    this.customerProfile = customerProfile;
    return this;
  }

   /**
   * Get customerProfile
   * @return customerProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartCustomerProfile getCustomerProfile() {
    return customerProfile;
  }


  public void setCustomerProfile(CartCustomerProfile customerProfile) {
    this.customerProfile = customerProfile;
  }


  public Cart exchangeRate(BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * The exchange rate if the customer is viewing a different currency than the base
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The exchange rate if the customer is viewing a different currency than the base")

  public BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public Cart gift(CartGift gift) {
    
    this.gift = gift;
    return this;
  }

   /**
   * Get gift
   * @return gift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartGift getGift() {
    return gift;
  }


  public void setGift(CartGift gift) {
    this.gift = gift;
  }


  public Cart giftCertificate(CartGiftCertificate giftCertificate) {
    
    this.giftCertificate = giftCertificate;
    return this;
  }

   /**
   * Get giftCertificate
   * @return giftCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartGiftCertificate getGiftCertificate() {
    return giftCertificate;
  }


  public void setGiftCertificate(CartGiftCertificate giftCertificate) {
    this.giftCertificate = giftCertificate;
  }


  public Cart items(List<CartItem> items) {
    
    this.items = items;
    return this;
  }

  public Cart addItemsItem(CartItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Items")

  public List<CartItem> getItems() {
    return items;
  }


  public void setItems(List<CartItem> items) {
    this.items = items;
  }


  public Cart languageIsoCode(String languageIsoCode) {
    
    this.languageIsoCode = languageIsoCode;
    return this;
  }

   /**
   * The ISO-631 three letter code the customer would like to checkout with
   * @return languageIsoCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO-631 three letter code the customer would like to checkout with")

  public String getLanguageIsoCode() {
    return languageIsoCode;
  }


  public void setLanguageIsoCode(String languageIsoCode) {
    this.languageIsoCode = languageIsoCode;
  }


  public Cart loggedIn(Boolean loggedIn) {
    
    this.loggedIn = loggedIn;
    return this;
  }

   /**
   * True if the customer is logged into their profile
   * @return loggedIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer is logged into their profile")

  public Boolean getLoggedIn() {
    return loggedIn;
  }


  public void setLoggedIn(Boolean loggedIn) {
    this.loggedIn = loggedIn;
  }


  public Cart marketing(CartMarketing marketing) {
    
    this.marketing = marketing;
    return this;
  }

   /**
   * Get marketing
   * @return marketing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartMarketing getMarketing() {
    return marketing;
  }


  public void setMarketing(CartMarketing marketing) {
    this.marketing = marketing;
  }


  public Cart merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID this cart is associated with
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID this cart is associated with")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Cart payment(CartPayment payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPayment getPayment() {
    return payment;
  }


  public void setPayment(CartPayment payment) {
    this.payment = payment;
  }


  public Cart properties(List<CartProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Cart addPropertiesItem(CartProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Properties associated with the cart
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Properties associated with the cart")

  public List<CartProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<CartProperty> properties) {
    this.properties = properties;
  }


  public Cart settings(CartSettings settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSettings getSettings() {
    return settings;
  }


  public void setSettings(CartSettings settings) {
    this.settings = settings;
  }


  public Cart shipping(CartShipping shipping) {
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartShipping getShipping() {
    return shipping;
  }


  public void setShipping(CartShipping shipping) {
    this.shipping = shipping;
  }


  public Cart summary(CartSummary summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartSummary getSummary() {
    return summary;
  }


  public void setSummary(CartSummary summary) {
    this.summary = summary;
  }


  public Cart taxes(CartTaxes taxes) {
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartTaxes getTaxes() {
    return taxes;
  }


  public void setTaxes(CartTaxes taxes) {
    this.taxes = taxes;
  }


  public Cart upsellAfter(CartUpsellAfter upsellAfter) {
    
    this.upsellAfter = upsellAfter;
    return this;
  }

   /**
   * Get upsellAfter
   * @return upsellAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartUpsellAfter getUpsellAfter() {
    return upsellAfter;
  }


  public void setUpsellAfter(CartUpsellAfter upsellAfter) {
    this.upsellAfter = upsellAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.affiliate, cart.affiliate) &&
        Objects.equals(this.affiliateNetworkPixelOid, cart.affiliateNetworkPixelOid) &&
        Objects.equals(this.baseCurrencyCode, cart.baseCurrencyCode) &&
        Objects.equals(this.billing, cart.billing) &&
        Objects.equals(this.buysafe, cart.buysafe) &&
        Objects.equals(this.cartId, cart.cartId) &&
        Objects.equals(this.checkout, cart.checkout) &&
        Objects.equals(this.coupons, cart.coupons) &&
        Objects.equals(this.currencyCode, cart.currencyCode) &&
        Objects.equals(this.currencyConversion, cart.currencyConversion) &&
        Objects.equals(this.customerProfile, cart.customerProfile) &&
        Objects.equals(this.exchangeRate, cart.exchangeRate) &&
        Objects.equals(this.gift, cart.gift) &&
        Objects.equals(this.giftCertificate, cart.giftCertificate) &&
        Objects.equals(this.items, cart.items) &&
        Objects.equals(this.languageIsoCode, cart.languageIsoCode) &&
        Objects.equals(this.loggedIn, cart.loggedIn) &&
        Objects.equals(this.marketing, cart.marketing) &&
        Objects.equals(this.merchantId, cart.merchantId) &&
        Objects.equals(this.payment, cart.payment) &&
        Objects.equals(this.properties, cart.properties) &&
        Objects.equals(this.settings, cart.settings) &&
        Objects.equals(this.shipping, cart.shipping) &&
        Objects.equals(this.summary, cart.summary) &&
        Objects.equals(this.taxes, cart.taxes) &&
        Objects.equals(this.upsellAfter, cart.upsellAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliate, affiliateNetworkPixelOid, baseCurrencyCode, billing, buysafe, cartId, checkout, coupons, currencyCode, currencyConversion, customerProfile, exchangeRate, gift, giftCertificate, items, languageIsoCode, loggedIn, marketing, merchantId, payment, properties, settings, shipping, summary, taxes, upsellAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    sb.append("    affiliate: ").append(toIndentedString(affiliate)).append("\n");
    sb.append("    affiliateNetworkPixelOid: ").append(toIndentedString(affiliateNetworkPixelOid)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    buysafe: ").append(toIndentedString(buysafe)).append("\n");
    sb.append("    cartId: ").append(toIndentedString(cartId)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    coupons: ").append(toIndentedString(coupons)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    customerProfile: ").append(toIndentedString(customerProfile)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    giftCertificate: ").append(toIndentedString(giftCertificate)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    languageIsoCode: ").append(toIndentedString(languageIsoCode)).append("\n");
    sb.append("    loggedIn: ").append(toIndentedString(loggedIn)).append("\n");
    sb.append("    marketing: ").append(toIndentedString(marketing)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    upsellAfter: ").append(toIndentedString(upsellAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliate");
    openapiFields.add("affiliate_network_pixel_oid");
    openapiFields.add("base_currency_code");
    openapiFields.add("billing");
    openapiFields.add("buysafe");
    openapiFields.add("cart_id");
    openapiFields.add("checkout");
    openapiFields.add("coupons");
    openapiFields.add("currency_code");
    openapiFields.add("currency_conversion");
    openapiFields.add("customer_profile");
    openapiFields.add("exchange_rate");
    openapiFields.add("gift");
    openapiFields.add("gift_certificate");
    openapiFields.add("items");
    openapiFields.add("language_iso_code");
    openapiFields.add("logged_in");
    openapiFields.add("marketing");
    openapiFields.add("merchant_id");
    openapiFields.add("payment");
    openapiFields.add("properties");
    openapiFields.add("settings");
    openapiFields.add("shipping");
    openapiFields.add("summary");
    openapiFields.add("taxes");
    openapiFields.add("upsell_after");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Cart
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Cart.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cart is not found in the empty JSON string", Cart.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Cart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cart` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `affiliate`
      if (jsonObj.getAsJsonObject("affiliate") != null) {
        CartAffiliate.validateJsonObject(jsonObj.getAsJsonObject("affiliate"));
      }
      if (jsonObj.get("base_currency_code") != null && !jsonObj.get("base_currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_currency_code").toString()));
      }
      // validate the optional field `billing`
      if (jsonObj.getAsJsonObject("billing") != null) {
        CartBilling.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `buysafe`
      if (jsonObj.getAsJsonObject("buysafe") != null) {
        CartBuysafe.validateJsonObject(jsonObj.getAsJsonObject("buysafe"));
      }
      if (jsonObj.get("cart_id") != null && !jsonObj.get("cart_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_id").toString()));
      }
      // validate the optional field `checkout`
      if (jsonObj.getAsJsonObject("checkout") != null) {
        CartCheckout.validateJsonObject(jsonObj.getAsJsonObject("checkout"));
      }
      JsonArray jsonArraycoupons = jsonObj.getAsJsonArray("coupons");
      if (jsonArraycoupons != null) {
        // ensure the json data is an array
        if (!jsonObj.get("coupons").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `coupons` to be an array in the JSON string but got `%s`", jsonObj.get("coupons").toString()));
        }

        // validate the optional field `coupons` (array)
        for (int i = 0; i < jsonArraycoupons.size(); i++) {
          CartCoupon.validateJsonObject(jsonArraycoupons.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      // validate the optional field `currency_conversion`
      if (jsonObj.getAsJsonObject("currency_conversion") != null) {
        CartCurrencyConversion.validateJsonObject(jsonObj.getAsJsonObject("currency_conversion"));
      }
      // validate the optional field `customer_profile`
      if (jsonObj.getAsJsonObject("customer_profile") != null) {
        CartCustomerProfile.validateJsonObject(jsonObj.getAsJsonObject("customer_profile"));
      }
      // validate the optional field `gift`
      if (jsonObj.getAsJsonObject("gift") != null) {
        CartGift.validateJsonObject(jsonObj.getAsJsonObject("gift"));
      }
      // validate the optional field `gift_certificate`
      if (jsonObj.getAsJsonObject("gift_certificate") != null) {
        CartGiftCertificate.validateJsonObject(jsonObj.getAsJsonObject("gift_certificate"));
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          CartItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("language_iso_code") != null && !jsonObj.get("language_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_iso_code").toString()));
      }
      // validate the optional field `marketing`
      if (jsonObj.getAsJsonObject("marketing") != null) {
        CartMarketing.validateJsonObject(jsonObj.getAsJsonObject("marketing"));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      // validate the optional field `payment`
      if (jsonObj.getAsJsonObject("payment") != null) {
        CartPayment.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
      JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
      if (jsonArrayproperties != null) {
        // ensure the json data is an array
        if (!jsonObj.get("properties").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
        }

        // validate the optional field `properties` (array)
        for (int i = 0; i < jsonArrayproperties.size(); i++) {
          CartProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `settings`
      if (jsonObj.getAsJsonObject("settings") != null) {
        CartSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      }
      // validate the optional field `shipping`
      if (jsonObj.getAsJsonObject("shipping") != null) {
        CartShipping.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      // validate the optional field `summary`
      if (jsonObj.getAsJsonObject("summary") != null) {
        CartSummary.validateJsonObject(jsonObj.getAsJsonObject("summary"));
      }
      // validate the optional field `taxes`
      if (jsonObj.getAsJsonObject("taxes") != null) {
        CartTaxes.validateJsonObject(jsonObj.getAsJsonObject("taxes"));
      }
      // validate the optional field `upsell_after`
      if (jsonObj.getAsJsonObject("upsell_after") != null) {
        CartUpsellAfter.validateJsonObject(jsonObj.getAsJsonObject("upsell_after"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cart.class));

       return (TypeAdapter<T>) new TypeAdapter<Cart>() {
           @Override
           public void write(JsonWriter out, Cart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cart read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Cart given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Cart
  * @throws IOException if the JSON string is invalid with respect to Cart
  */
  public static Cart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cart.class);
  }

 /**
  * Convert an instance of Cart to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Metric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T12:07:35.113-04:00[America/Indianapolis]")
public class Metric {
  public static final String SERIALIZED_NAME_ALL_TIME = "all_time";
  @SerializedName(SERIALIZED_NAME_ALL_TIME)
  private BigDecimal allTime;

  public static final String SERIALIZED_NAME_ALL_TIME_FORMATTED = "all_time_formatted";
  @SerializedName(SERIALIZED_NAME_ALL_TIME_FORMATTED)
  private String allTimeFormatted;

  public static final String SERIALIZED_NAME_LAST30 = "last_30";
  @SerializedName(SERIALIZED_NAME_LAST30)
  private BigDecimal last30;

  public static final String SERIALIZED_NAME_LAST30_FORMATTED = "last_30_formatted";
  @SerializedName(SERIALIZED_NAME_LAST30_FORMATTED)
  private String last30Formatted;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIOR30 = "prior_30";
  @SerializedName(SERIALIZED_NAME_PRIOR30)
  private BigDecimal prior30;

  public static final String SERIALIZED_NAME_PRIOR30_FORMATTED = "prior_30_formatted";
  @SerializedName(SERIALIZED_NAME_PRIOR30_FORMATTED)
  private String prior30Formatted;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Metric() { 
  }

  public Metric allTime(BigDecimal allTime) {
    
    this.allTime = allTime;
    return this;
  }

   /**
   * Get allTime
   * @return allTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getAllTime() {
    return allTime;
  }


  public void setAllTime(BigDecimal allTime) {
    this.allTime = allTime;
  }


  public Metric allTimeFormatted(String allTimeFormatted) {
    
    this.allTimeFormatted = allTimeFormatted;
    return this;
  }

   /**
   * Get allTimeFormatted
   * @return allTimeFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAllTimeFormatted() {
    return allTimeFormatted;
  }


  public void setAllTimeFormatted(String allTimeFormatted) {
    this.allTimeFormatted = allTimeFormatted;
  }


  public Metric last30(BigDecimal last30) {
    
    this.last30 = last30;
    return this;
  }

   /**
   * Get last30
   * @return last30
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getLast30() {
    return last30;
  }


  public void setLast30(BigDecimal last30) {
    this.last30 = last30;
  }


  public Metric last30Formatted(String last30Formatted) {
    
    this.last30Formatted = last30Formatted;
    return this;
  }

   /**
   * Get last30Formatted
   * @return last30Formatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLast30Formatted() {
    return last30Formatted;
  }


  public void setLast30Formatted(String last30Formatted) {
    this.last30Formatted = last30Formatted;
  }


  public Metric name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Metric prior30(BigDecimal prior30) {
    
    this.prior30 = prior30;
    return this;
  }

   /**
   * Get prior30
   * @return prior30
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getPrior30() {
    return prior30;
  }


  public void setPrior30(BigDecimal prior30) {
    this.prior30 = prior30;
  }


  public Metric prior30Formatted(String prior30Formatted) {
    
    this.prior30Formatted = prior30Formatted;
    return this;
  }

   /**
   * Get prior30Formatted
   * @return prior30Formatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrior30Formatted() {
    return prior30Formatted;
  }


  public void setPrior30Formatted(String prior30Formatted) {
    this.prior30Formatted = prior30Formatted;
  }


  public Metric type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metric metric = (Metric) o;
    return Objects.equals(this.allTime, metric.allTime) &&
        Objects.equals(this.allTimeFormatted, metric.allTimeFormatted) &&
        Objects.equals(this.last30, metric.last30) &&
        Objects.equals(this.last30Formatted, metric.last30Formatted) &&
        Objects.equals(this.name, metric.name) &&
        Objects.equals(this.prior30, metric.prior30) &&
        Objects.equals(this.prior30Formatted, metric.prior30Formatted) &&
        Objects.equals(this.type, metric.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allTime, allTimeFormatted, last30, last30Formatted, name, prior30, prior30Formatted, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metric {\n");
    sb.append("    allTime: ").append(toIndentedString(allTime)).append("\n");
    sb.append("    allTimeFormatted: ").append(toIndentedString(allTimeFormatted)).append("\n");
    sb.append("    last30: ").append(toIndentedString(last30)).append("\n");
    sb.append("    last30Formatted: ").append(toIndentedString(last30Formatted)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prior30: ").append(toIndentedString(prior30)).append("\n");
    sb.append("    prior30Formatted: ").append(toIndentedString(prior30Formatted)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("all_time");
    openapiFields.add("all_time_formatted");
    openapiFields.add("last_30");
    openapiFields.add("last_30_formatted");
    openapiFields.add("name");
    openapiFields.add("prior_30");
    openapiFields.add("prior_30_formatted");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Metric
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Metric.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Metric is not found in the empty JSON string", Metric.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Metric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Metric` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("all_time_formatted") != null && !jsonObj.get("all_time_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `all_time_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("all_time_formatted").toString()));
      }
      if (jsonObj.get("last_30_formatted") != null && !jsonObj.get("last_30_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_30_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_30_formatted").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("prior_30_formatted") != null && !jsonObj.get("prior_30_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prior_30_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prior_30_formatted").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Metric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Metric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Metric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Metric.class));

       return (TypeAdapter<T>) new TypeAdapter<Metric>() {
           @Override
           public void write(JsonWriter out, Metric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Metric read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Metric given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Metric
  * @throws IOException if the JSON string is invalid with respect to Metric
  */
  public static Metric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Metric.class);
  }

 /**
  * Convert an instance of Metric to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


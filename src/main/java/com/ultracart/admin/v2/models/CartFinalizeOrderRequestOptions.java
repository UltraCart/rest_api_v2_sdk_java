/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartFinalizeOrderRequestOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-14T09:46:20.929-05:00[America/Indianapolis]")
public class CartFinalizeOrderRequestOptions {
  public static final String SERIALIZED_NAME_AUTO_APPROVE_PURCHASE_ORDER = "auto_approve_purchase_order";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVE_PURCHASE_ORDER)
  private Boolean autoApprovePurchaseOrder;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_CODE = "channel_partner_code";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_CODE)
  private String channelPartnerCode;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_OID = "channel_partner_oid";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_OID)
  private Integer channelPartnerOid;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_ORDER_ID = "channel_partner_order_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_ORDER_ID)
  private String channelPartnerOrderId;

  public static final String SERIALIZED_NAME_CONSIDER_RECURRING = "consider_recurring";
  @SerializedName(SERIALIZED_NAME_CONSIDER_RECURRING)
  private Boolean considerRecurring;

  public static final String SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_AMOUNT = "credit_card_authorization_amount";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_AMOUNT)
  private BigDecimal creditCardAuthorizationAmount;

  public static final String SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_DATE = "credit_card_authorization_date";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_DATE)
  private String creditCardAuthorizationDate;

  public static final String SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_REFERENCE_NUMBER = "credit_card_authorization_reference_number";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_AUTHORIZATION_REFERENCE_NUMBER)
  private String creditCardAuthorizationReferenceNumber;

  public static final String SERIALIZED_NAME_NO_REALTIME_PAYMENT_PROCESSING = "no_realtime_payment_processing";
  @SerializedName(SERIALIZED_NAME_NO_REALTIME_PAYMENT_PROCESSING)
  private Boolean noRealtimePaymentProcessing;

  public static final String SERIALIZED_NAME_SETUP_NEXT_CART = "setup_next_cart";
  @SerializedName(SERIALIZED_NAME_SETUP_NEXT_CART)
  private Boolean setupNextCart;

  public static final String SERIALIZED_NAME_SKIP_PAYMENT_PROCESSING = "skip_payment_processing";
  @SerializedName(SERIALIZED_NAME_SKIP_PAYMENT_PROCESSING)
  private Boolean skipPaymentProcessing;

  public static final String SERIALIZED_NAME_STORE_COMPLETED = "store_completed";
  @SerializedName(SERIALIZED_NAME_STORE_COMPLETED)
  private Boolean storeCompleted;

  public static final String SERIALIZED_NAME_STORE_IF_PAYMENT_DECLINES = "store_if_payment_declines";
  @SerializedName(SERIALIZED_NAME_STORE_IF_PAYMENT_DECLINES)
  private Boolean storeIfPaymentDeclines;

  public CartFinalizeOrderRequestOptions() { 
  }

  public CartFinalizeOrderRequestOptions autoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
    return this;
  }

   /**
   * Automatically approve the purchase order
   * @return autoApprovePurchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Automatically approve the purchase order")

  public Boolean getAutoApprovePurchaseOrder() {
    return autoApprovePurchaseOrder;
  }


  public void setAutoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
  }


  public CartFinalizeOrderRequestOptions channelPartnerCode(String channelPartnerCode) {
    
    this.channelPartnerCode = channelPartnerCode;
    return this;
  }

   /**
   * Channel partner code to associate this order with
   * @return channelPartnerCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel partner code to associate this order with")

  public String getChannelPartnerCode() {
    return channelPartnerCode;
  }


  public void setChannelPartnerCode(String channelPartnerCode) {
    this.channelPartnerCode = channelPartnerCode;
  }


  public CartFinalizeOrderRequestOptions channelPartnerOid(Integer channelPartnerOid) {
    
    this.channelPartnerOid = channelPartnerOid;
    return this;
  }

   /**
   * Channel partner oid to associate this order with
   * @return channelPartnerOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel partner oid to associate this order with")

  public Integer getChannelPartnerOid() {
    return channelPartnerOid;
  }


  public void setChannelPartnerOid(Integer channelPartnerOid) {
    this.channelPartnerOid = channelPartnerOid;
  }


  public CartFinalizeOrderRequestOptions channelPartnerOrderId(String channelPartnerOrderId) {
    
    this.channelPartnerOrderId = channelPartnerOrderId;
    return this;
  }

   /**
   * Channel partner order id for reference
   * @return channelPartnerOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel partner order id for reference")

  public String getChannelPartnerOrderId() {
    return channelPartnerOrderId;
  }


  public void setChannelPartnerOrderId(String channelPartnerOrderId) {
    this.channelPartnerOrderId = channelPartnerOrderId;
  }


  public CartFinalizeOrderRequestOptions considerRecurring(Boolean considerRecurring) {
    
    this.considerRecurring = considerRecurring;
    return this;
  }

   /**
   * Consider this order a recurring order for the purposes of payment gateway recurring flag
   * @return considerRecurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Consider this order a recurring order for the purposes of payment gateway recurring flag")

  public Boolean getConsiderRecurring() {
    return considerRecurring;
  }


  public void setConsiderRecurring(Boolean considerRecurring) {
    this.considerRecurring = considerRecurring;
  }


  public CartFinalizeOrderRequestOptions creditCardAuthorizationAmount(BigDecimal creditCardAuthorizationAmount) {
    
    this.creditCardAuthorizationAmount = creditCardAuthorizationAmount;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the amount of the authorization
   * @return creditCardAuthorizationAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the amount of the authorization")

  public BigDecimal getCreditCardAuthorizationAmount() {
    return creditCardAuthorizationAmount;
  }


  public void setCreditCardAuthorizationAmount(BigDecimal creditCardAuthorizationAmount) {
    this.creditCardAuthorizationAmount = creditCardAuthorizationAmount;
  }


  public CartFinalizeOrderRequestOptions creditCardAuthorizationDate(String creditCardAuthorizationDate) {
    
    this.creditCardAuthorizationDate = creditCardAuthorizationDate;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the date/time of the authorization
   * @return creditCardAuthorizationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the date/time of the authorization")

  public String getCreditCardAuthorizationDate() {
    return creditCardAuthorizationDate;
  }


  public void setCreditCardAuthorizationDate(String creditCardAuthorizationDate) {
    this.creditCardAuthorizationDate = creditCardAuthorizationDate;
  }


  public CartFinalizeOrderRequestOptions creditCardAuthorizationReferenceNumber(String creditCardAuthorizationReferenceNumber) {
    
    this.creditCardAuthorizationReferenceNumber = creditCardAuthorizationReferenceNumber;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the authorization reference number
   * @return creditCardAuthorizationReferenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the authorization reference number")

  public String getCreditCardAuthorizationReferenceNumber() {
    return creditCardAuthorizationReferenceNumber;
  }


  public void setCreditCardAuthorizationReferenceNumber(String creditCardAuthorizationReferenceNumber) {
    this.creditCardAuthorizationReferenceNumber = creditCardAuthorizationReferenceNumber;
  }


  public CartFinalizeOrderRequestOptions noRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
    return this;
  }

   /**
   * Prevents normal real-time processing of the payment and sends the order to Accounts Receivable
   * @return noRealtimePaymentProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Prevents normal real-time processing of the payment and sends the order to Accounts Receivable")

  public Boolean getNoRealtimePaymentProcessing() {
    return noRealtimePaymentProcessing;
  }


  public void setNoRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
  }


  public CartFinalizeOrderRequestOptions setupNextCart(Boolean setupNextCart) {
    
    this.setupNextCart = setupNextCart;
    return this;
  }

   /**
   * True if the system should create another cart automatically if the current cart was logged into a profile
   * @return setupNextCart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the system should create another cart automatically if the current cart was logged into a profile")

  public Boolean getSetupNextCart() {
    return setupNextCart;
  }


  public void setSetupNextCart(Boolean setupNextCart) {
    this.setupNextCart = setupNextCart;
  }


  public CartFinalizeOrderRequestOptions skipPaymentProcessing(Boolean skipPaymentProcessing) {
    
    this.skipPaymentProcessing = skipPaymentProcessing;
    return this;
  }

   /**
   * Skip payment processing and move the order on to shipping (or completed if no shipping required)
   * @return skipPaymentProcessing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Skip payment processing and move the order on to shipping (or completed if no shipping required)")

  public Boolean getSkipPaymentProcessing() {
    return skipPaymentProcessing;
  }


  public void setSkipPaymentProcessing(Boolean skipPaymentProcessing) {
    this.skipPaymentProcessing = skipPaymentProcessing;
  }


  public CartFinalizeOrderRequestOptions storeCompleted(Boolean storeCompleted) {
    
    this.storeCompleted = storeCompleted;
    return this;
  }

   /**
   * True the order in the completed stage
   * @return storeCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True the order in the completed stage")

  public Boolean getStoreCompleted() {
    return storeCompleted;
  }


  public void setStoreCompleted(Boolean storeCompleted) {
    this.storeCompleted = storeCompleted;
  }


  public CartFinalizeOrderRequestOptions storeIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
    return this;
  }

   /**
   * Store the order in accounts receivable if the payment declines
   * @return storeIfPaymentDeclines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Store the order in accounts receivable if the payment declines")

  public Boolean getStoreIfPaymentDeclines() {
    return storeIfPaymentDeclines;
  }


  public void setStoreIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartFinalizeOrderRequestOptions cartFinalizeOrderRequestOptions = (CartFinalizeOrderRequestOptions) o;
    return Objects.equals(this.autoApprovePurchaseOrder, cartFinalizeOrderRequestOptions.autoApprovePurchaseOrder) &&
        Objects.equals(this.channelPartnerCode, cartFinalizeOrderRequestOptions.channelPartnerCode) &&
        Objects.equals(this.channelPartnerOid, cartFinalizeOrderRequestOptions.channelPartnerOid) &&
        Objects.equals(this.channelPartnerOrderId, cartFinalizeOrderRequestOptions.channelPartnerOrderId) &&
        Objects.equals(this.considerRecurring, cartFinalizeOrderRequestOptions.considerRecurring) &&
        Objects.equals(this.creditCardAuthorizationAmount, cartFinalizeOrderRequestOptions.creditCardAuthorizationAmount) &&
        Objects.equals(this.creditCardAuthorizationDate, cartFinalizeOrderRequestOptions.creditCardAuthorizationDate) &&
        Objects.equals(this.creditCardAuthorizationReferenceNumber, cartFinalizeOrderRequestOptions.creditCardAuthorizationReferenceNumber) &&
        Objects.equals(this.noRealtimePaymentProcessing, cartFinalizeOrderRequestOptions.noRealtimePaymentProcessing) &&
        Objects.equals(this.setupNextCart, cartFinalizeOrderRequestOptions.setupNextCart) &&
        Objects.equals(this.skipPaymentProcessing, cartFinalizeOrderRequestOptions.skipPaymentProcessing) &&
        Objects.equals(this.storeCompleted, cartFinalizeOrderRequestOptions.storeCompleted) &&
        Objects.equals(this.storeIfPaymentDeclines, cartFinalizeOrderRequestOptions.storeIfPaymentDeclines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoApprovePurchaseOrder, channelPartnerCode, channelPartnerOid, channelPartnerOrderId, considerRecurring, creditCardAuthorizationAmount, creditCardAuthorizationDate, creditCardAuthorizationReferenceNumber, noRealtimePaymentProcessing, setupNextCart, skipPaymentProcessing, storeCompleted, storeIfPaymentDeclines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartFinalizeOrderRequestOptions {\n");
    sb.append("    autoApprovePurchaseOrder: ").append(toIndentedString(autoApprovePurchaseOrder)).append("\n");
    sb.append("    channelPartnerCode: ").append(toIndentedString(channelPartnerCode)).append("\n");
    sb.append("    channelPartnerOid: ").append(toIndentedString(channelPartnerOid)).append("\n");
    sb.append("    channelPartnerOrderId: ").append(toIndentedString(channelPartnerOrderId)).append("\n");
    sb.append("    considerRecurring: ").append(toIndentedString(considerRecurring)).append("\n");
    sb.append("    creditCardAuthorizationAmount: ").append(toIndentedString(creditCardAuthorizationAmount)).append("\n");
    sb.append("    creditCardAuthorizationDate: ").append(toIndentedString(creditCardAuthorizationDate)).append("\n");
    sb.append("    creditCardAuthorizationReferenceNumber: ").append(toIndentedString(creditCardAuthorizationReferenceNumber)).append("\n");
    sb.append("    noRealtimePaymentProcessing: ").append(toIndentedString(noRealtimePaymentProcessing)).append("\n");
    sb.append("    setupNextCart: ").append(toIndentedString(setupNextCart)).append("\n");
    sb.append("    skipPaymentProcessing: ").append(toIndentedString(skipPaymentProcessing)).append("\n");
    sb.append("    storeCompleted: ").append(toIndentedString(storeCompleted)).append("\n");
    sb.append("    storeIfPaymentDeclines: ").append(toIndentedString(storeIfPaymentDeclines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_approve_purchase_order");
    openapiFields.add("channel_partner_code");
    openapiFields.add("channel_partner_oid");
    openapiFields.add("channel_partner_order_id");
    openapiFields.add("consider_recurring");
    openapiFields.add("credit_card_authorization_amount");
    openapiFields.add("credit_card_authorization_date");
    openapiFields.add("credit_card_authorization_reference_number");
    openapiFields.add("no_realtime_payment_processing");
    openapiFields.add("setup_next_cart");
    openapiFields.add("skip_payment_processing");
    openapiFields.add("store_completed");
    openapiFields.add("store_if_payment_declines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartFinalizeOrderRequestOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartFinalizeOrderRequestOptions.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartFinalizeOrderRequestOptions is not found in the empty JSON string", CartFinalizeOrderRequestOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartFinalizeOrderRequestOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartFinalizeOrderRequestOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("channel_partner_code") != null && !jsonObj.get("channel_partner_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_partner_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_partner_code").toString()));
      }
      if (jsonObj.get("channel_partner_order_id") != null && !jsonObj.get("channel_partner_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_partner_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_partner_order_id").toString()));
      }
      if (jsonObj.get("credit_card_authorization_date") != null && !jsonObj.get("credit_card_authorization_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit_card_authorization_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credit_card_authorization_date").toString()));
      }
      if (jsonObj.get("credit_card_authorization_reference_number") != null && !jsonObj.get("credit_card_authorization_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit_card_authorization_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credit_card_authorization_reference_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartFinalizeOrderRequestOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartFinalizeOrderRequestOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartFinalizeOrderRequestOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartFinalizeOrderRequestOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CartFinalizeOrderRequestOptions>() {
           @Override
           public void write(JsonWriter out, CartFinalizeOrderRequestOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartFinalizeOrderRequestOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartFinalizeOrderRequestOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartFinalizeOrderRequestOptions
  * @throws IOException if the JSON string is invalid with respect to CartFinalizeOrderRequestOptions
  */
  public static CartFinalizeOrderRequestOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartFinalizeOrderRequestOptions.class);
  }

 /**
  * Convert an instance of CartFinalizeOrderRequestOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CartFinalizeOrderRequestOptions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-08-30T15:16:26.936-04:00")



public class CartFinalizeOrderRequestOptions {
  @SerializedName("auto_approve_purchase_order")
  private Boolean autoApprovePurchaseOrder = null;

  @SerializedName("channel_partner_code")
  private String channelPartnerCode = null;

  @SerializedName("channel_partner_oid")
  private Integer channelPartnerOid = null;

  @SerializedName("channel_partner_order_id")
  private String channelPartnerOrderId = null;

  @SerializedName("consider_recurring")
  private Boolean considerRecurring = null;

  @SerializedName("credit_card_authorization_amount")
  private BigDecimal creditCardAuthorizationAmount = null;

  @SerializedName("credit_card_authorization_date")
  private String creditCardAuthorizationDate = null;

  @SerializedName("credit_card_authorization_reference_number")
  private String creditCardAuthorizationReferenceNumber = null;

  @SerializedName("no_realtime_payment_processing")
  private Boolean noRealtimePaymentProcessing = null;

  @SerializedName("setup_next_cart")
  private Boolean setupNextCart = null;

  @SerializedName("skip_payment_processing")
  private Boolean skipPaymentProcessing = null;

  @SerializedName("store_completed")
  private Boolean storeCompleted = null;

  @SerializedName("store_if_payment_declines")
  private Boolean storeIfPaymentDeclines = null;

  public CartFinalizeOrderRequestOptions autoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
    return this;
  }

   /**
   * Automatically approve the purchase order
   * @return autoApprovePurchaseOrder
  **/
  @ApiModelProperty(value = "Automatically approve the purchase order")
  public Boolean isAutoApprovePurchaseOrder() {
    return autoApprovePurchaseOrder;
  }

  public void setAutoApprovePurchaseOrder(Boolean autoApprovePurchaseOrder) {
    this.autoApprovePurchaseOrder = autoApprovePurchaseOrder;
  }

  public CartFinalizeOrderRequestOptions channelPartnerCode(String channelPartnerCode) {
    this.channelPartnerCode = channelPartnerCode;
    return this;
  }

   /**
   * Channel partner code to associate this order with
   * @return channelPartnerCode
  **/
  @ApiModelProperty(value = "Channel partner code to associate this order with")
  public String getChannelPartnerCode() {
    return channelPartnerCode;
  }

  public void setChannelPartnerCode(String channelPartnerCode) {
    this.channelPartnerCode = channelPartnerCode;
  }

  public CartFinalizeOrderRequestOptions channelPartnerOid(Integer channelPartnerOid) {
    this.channelPartnerOid = channelPartnerOid;
    return this;
  }

   /**
   * Channel partner oid to associate this order with
   * @return channelPartnerOid
  **/
  @ApiModelProperty(value = "Channel partner oid to associate this order with")
  public Integer getChannelPartnerOid() {
    return channelPartnerOid;
  }

  public void setChannelPartnerOid(Integer channelPartnerOid) {
    this.channelPartnerOid = channelPartnerOid;
  }

  public CartFinalizeOrderRequestOptions channelPartnerOrderId(String channelPartnerOrderId) {
    this.channelPartnerOrderId = channelPartnerOrderId;
    return this;
  }

   /**
   * Channel partner order id for reference
   * @return channelPartnerOrderId
  **/
  @ApiModelProperty(value = "Channel partner order id for reference")
  public String getChannelPartnerOrderId() {
    return channelPartnerOrderId;
  }

  public void setChannelPartnerOrderId(String channelPartnerOrderId) {
    this.channelPartnerOrderId = channelPartnerOrderId;
  }

  public CartFinalizeOrderRequestOptions considerRecurring(Boolean considerRecurring) {
    this.considerRecurring = considerRecurring;
    return this;
  }

   /**
   * Consider this order a recurring order for the purposes of payment gateway recurring flag
   * @return considerRecurring
  **/
  @ApiModelProperty(value = "Consider this order a recurring order for the purposes of payment gateway recurring flag")
  public Boolean isConsiderRecurring() {
    return considerRecurring;
  }

  public void setConsiderRecurring(Boolean considerRecurring) {
    this.considerRecurring = considerRecurring;
  }

  public CartFinalizeOrderRequestOptions creditCardAuthorizationAmount(BigDecimal creditCardAuthorizationAmount) {
    this.creditCardAuthorizationAmount = creditCardAuthorizationAmount;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the amount of the authorization
   * @return creditCardAuthorizationAmount
  **/
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the amount of the authorization")
  public BigDecimal getCreditCardAuthorizationAmount() {
    return creditCardAuthorizationAmount;
  }

  public void setCreditCardAuthorizationAmount(BigDecimal creditCardAuthorizationAmount) {
    this.creditCardAuthorizationAmount = creditCardAuthorizationAmount;
  }

  public CartFinalizeOrderRequestOptions creditCardAuthorizationDate(String creditCardAuthorizationDate) {
    this.creditCardAuthorizationDate = creditCardAuthorizationDate;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the date/time of the authorization
   * @return creditCardAuthorizationDate
  **/
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the date/time of the authorization")
  public String getCreditCardAuthorizationDate() {
    return creditCardAuthorizationDate;
  }

  public void setCreditCardAuthorizationDate(String creditCardAuthorizationDate) {
    this.creditCardAuthorizationDate = creditCardAuthorizationDate;
  }

  public CartFinalizeOrderRequestOptions creditCardAuthorizationReferenceNumber(String creditCardAuthorizationReferenceNumber) {
    this.creditCardAuthorizationReferenceNumber = creditCardAuthorizationReferenceNumber;
    return this;
  }

   /**
   * If the order was authorized outside of UltraCart, this is the authorization reference number
   * @return creditCardAuthorizationReferenceNumber
  **/
  @ApiModelProperty(value = "If the order was authorized outside of UltraCart, this is the authorization reference number")
  public String getCreditCardAuthorizationReferenceNumber() {
    return creditCardAuthorizationReferenceNumber;
  }

  public void setCreditCardAuthorizationReferenceNumber(String creditCardAuthorizationReferenceNumber) {
    this.creditCardAuthorizationReferenceNumber = creditCardAuthorizationReferenceNumber;
  }

  public CartFinalizeOrderRequestOptions noRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
    return this;
  }

   /**
   * Prevents normal real-time processing of the payment and sends the order to Accounts Receivable
   * @return noRealtimePaymentProcessing
  **/
  @ApiModelProperty(value = "Prevents normal real-time processing of the payment and sends the order to Accounts Receivable")
  public Boolean isNoRealtimePaymentProcessing() {
    return noRealtimePaymentProcessing;
  }

  public void setNoRealtimePaymentProcessing(Boolean noRealtimePaymentProcessing) {
    this.noRealtimePaymentProcessing = noRealtimePaymentProcessing;
  }

  public CartFinalizeOrderRequestOptions setupNextCart(Boolean setupNextCart) {
    this.setupNextCart = setupNextCart;
    return this;
  }

   /**
   * True if the system should create another cart automatically if the current cart was logged into a profile
   * @return setupNextCart
  **/
  @ApiModelProperty(value = "True if the system should create another cart automatically if the current cart was logged into a profile")
  public Boolean isSetupNextCart() {
    return setupNextCart;
  }

  public void setSetupNextCart(Boolean setupNextCart) {
    this.setupNextCart = setupNextCart;
  }

  public CartFinalizeOrderRequestOptions skipPaymentProcessing(Boolean skipPaymentProcessing) {
    this.skipPaymentProcessing = skipPaymentProcessing;
    return this;
  }

   /**
   * Skip payment processing and move the order on to shipping (or completed if no shipping required)
   * @return skipPaymentProcessing
  **/
  @ApiModelProperty(value = "Skip payment processing and move the order on to shipping (or completed if no shipping required)")
  public Boolean isSkipPaymentProcessing() {
    return skipPaymentProcessing;
  }

  public void setSkipPaymentProcessing(Boolean skipPaymentProcessing) {
    this.skipPaymentProcessing = skipPaymentProcessing;
  }

  public CartFinalizeOrderRequestOptions storeCompleted(Boolean storeCompleted) {
    this.storeCompleted = storeCompleted;
    return this;
  }

   /**
   * True the order in the completed stage
   * @return storeCompleted
  **/
  @ApiModelProperty(value = "True the order in the completed stage")
  public Boolean isStoreCompleted() {
    return storeCompleted;
  }

  public void setStoreCompleted(Boolean storeCompleted) {
    this.storeCompleted = storeCompleted;
  }

  public CartFinalizeOrderRequestOptions storeIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
    return this;
  }

   /**
   * Store the order in accounts receivable if the payment declines
   * @return storeIfPaymentDeclines
  **/
  @ApiModelProperty(value = "Store the order in accounts receivable if the payment declines")
  public Boolean isStoreIfPaymentDeclines() {
    return storeIfPaymentDeclines;
  }

  public void setStoreIfPaymentDeclines(Boolean storeIfPaymentDeclines) {
    this.storeIfPaymentDeclines = storeIfPaymentDeclines;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartFinalizeOrderRequestOptions cartFinalizeOrderRequestOptions = (CartFinalizeOrderRequestOptions) o;
    return Objects.equals(this.autoApprovePurchaseOrder, cartFinalizeOrderRequestOptions.autoApprovePurchaseOrder) &&
        Objects.equals(this.channelPartnerCode, cartFinalizeOrderRequestOptions.channelPartnerCode) &&
        Objects.equals(this.channelPartnerOid, cartFinalizeOrderRequestOptions.channelPartnerOid) &&
        Objects.equals(this.channelPartnerOrderId, cartFinalizeOrderRequestOptions.channelPartnerOrderId) &&
        Objects.equals(this.considerRecurring, cartFinalizeOrderRequestOptions.considerRecurring) &&
        Objects.equals(this.creditCardAuthorizationAmount, cartFinalizeOrderRequestOptions.creditCardAuthorizationAmount) &&
        Objects.equals(this.creditCardAuthorizationDate, cartFinalizeOrderRequestOptions.creditCardAuthorizationDate) &&
        Objects.equals(this.creditCardAuthorizationReferenceNumber, cartFinalizeOrderRequestOptions.creditCardAuthorizationReferenceNumber) &&
        Objects.equals(this.noRealtimePaymentProcessing, cartFinalizeOrderRequestOptions.noRealtimePaymentProcessing) &&
        Objects.equals(this.setupNextCart, cartFinalizeOrderRequestOptions.setupNextCart) &&
        Objects.equals(this.skipPaymentProcessing, cartFinalizeOrderRequestOptions.skipPaymentProcessing) &&
        Objects.equals(this.storeCompleted, cartFinalizeOrderRequestOptions.storeCompleted) &&
        Objects.equals(this.storeIfPaymentDeclines, cartFinalizeOrderRequestOptions.storeIfPaymentDeclines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoApprovePurchaseOrder, channelPartnerCode, channelPartnerOid, channelPartnerOrderId, considerRecurring, creditCardAuthorizationAmount, creditCardAuthorizationDate, creditCardAuthorizationReferenceNumber, noRealtimePaymentProcessing, setupNextCart, skipPaymentProcessing, storeCompleted, storeIfPaymentDeclines);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartFinalizeOrderRequestOptions {\n");
    
    sb.append("    autoApprovePurchaseOrder: ").append(toIndentedString(autoApprovePurchaseOrder)).append("\n");
    sb.append("    channelPartnerCode: ").append(toIndentedString(channelPartnerCode)).append("\n");
    sb.append("    channelPartnerOid: ").append(toIndentedString(channelPartnerOid)).append("\n");
    sb.append("    channelPartnerOrderId: ").append(toIndentedString(channelPartnerOrderId)).append("\n");
    sb.append("    considerRecurring: ").append(toIndentedString(considerRecurring)).append("\n");
    sb.append("    creditCardAuthorizationAmount: ").append(toIndentedString(creditCardAuthorizationAmount)).append("\n");
    sb.append("    creditCardAuthorizationDate: ").append(toIndentedString(creditCardAuthorizationDate)).append("\n");
    sb.append("    creditCardAuthorizationReferenceNumber: ").append(toIndentedString(creditCardAuthorizationReferenceNumber)).append("\n");
    sb.append("    noRealtimePaymentProcessing: ").append(toIndentedString(noRealtimePaymentProcessing)).append("\n");
    sb.append("    setupNextCart: ").append(toIndentedString(setupNextCart)).append("\n");
    sb.append("    skipPaymentProcessing: ").append(toIndentedString(skipPaymentProcessing)).append("\n");
    sb.append("    storeCompleted: ").append(toIndentedString(storeCompleted)).append("\n");
    sb.append("    storeIfPaymentDeclines: ").append(toIndentedString(storeIfPaymentDeclines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


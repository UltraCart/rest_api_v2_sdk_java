/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Notification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T10:08:44.056-05:00[America/Indianapolis]")
public class Notification {
  public static final String SERIALIZED_NAME_CAN_FILTER_BY_DISTRIBUTION_CENTERS = "can_filter_by_distribution_centers";
  @SerializedName(SERIALIZED_NAME_CAN_FILTER_BY_DISTRIBUTION_CENTERS)
  private Boolean canFilterByDistributionCenters;

  public static final String SERIALIZED_NAME_CAN_INCLUDE_AFFILIATE = "can_include_affiliate";
  @SerializedName(SERIALIZED_NAME_CAN_INCLUDE_AFFILIATE)
  private Boolean canIncludeAffiliate;

  public static final String SERIALIZED_NAME_CAN_INCLUDE_ORDER = "can_include_order";
  @SerializedName(SERIALIZED_NAME_CAN_INCLUDE_ORDER)
  private Boolean canIncludeOrder;

  public static final String SERIALIZED_NAME_CAN_INCLUDE_ORDER_PLAIN_TEXT = "can_include_order_plain_text";
  @SerializedName(SERIALIZED_NAME_CAN_INCLUDE_ORDER_PLAIN_TEXT)
  private Boolean canIncludeOrderPlainText;

  public static final String SERIALIZED_NAME_DISTRIBUTION_CENTER_FILTERS = "distribution_center_filters";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_CENTER_FILTERS)
  private List<String> distributionCenterFilters = null;

  public static final String SERIALIZED_NAME_INCLUDE_AFFILIATE = "include_affiliate";
  @SerializedName(SERIALIZED_NAME_INCLUDE_AFFILIATE)
  private Boolean includeAffiliate;

  public static final String SERIALIZED_NAME_INCLUDE_ORDER = "include_order";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ORDER)
  private Boolean includeOrder;

  public static final String SERIALIZED_NAME_INCLUDE_ORDER_PLAIN_TEXT = "include_order_plain_text";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ORDER_PLAIN_TEXT)
  private Boolean includeOrderPlainText;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_GROUP = "notification_group";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_GROUP)
  private String notificationGroup;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public Notification() { 
  }

  public Notification canFilterByDistributionCenters(Boolean canFilterByDistributionCenters) {
    
    this.canFilterByDistributionCenters = canFilterByDistributionCenters;
    return this;
  }

   /**
   * True if this notification can be filtered to only send for one or more distribution centers.
   * @return canFilterByDistributionCenters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this notification can be filtered to only send for one or more distribution centers.")

  public Boolean getCanFilterByDistributionCenters() {
    return canFilterByDistributionCenters;
  }


  public void setCanFilterByDistributionCenters(Boolean canFilterByDistributionCenters) {
    this.canFilterByDistributionCenters = canFilterByDistributionCenters;
  }


  public Notification canIncludeAffiliate(Boolean canIncludeAffiliate) {
    
    this.canIncludeAffiliate = canIncludeAffiliate;
    return this;
  }

   /**
   * True if this notification can include an affiliate information.
   * @return canIncludeAffiliate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this notification can include an affiliate information.")

  public Boolean getCanIncludeAffiliate() {
    return canIncludeAffiliate;
  }


  public void setCanIncludeAffiliate(Boolean canIncludeAffiliate) {
    this.canIncludeAffiliate = canIncludeAffiliate;
  }


  public Notification canIncludeOrder(Boolean canIncludeOrder) {
    
    this.canIncludeOrder = canIncludeOrder;
    return this;
  }

   /**
   * True if this notification can include an order attachment.
   * @return canIncludeOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this notification can include an order attachment.")

  public Boolean getCanIncludeOrder() {
    return canIncludeOrder;
  }


  public void setCanIncludeOrder(Boolean canIncludeOrder) {
    this.canIncludeOrder = canIncludeOrder;
  }


  public Notification canIncludeOrderPlainText(Boolean canIncludeOrderPlainText) {
    
    this.canIncludeOrderPlainText = canIncludeOrderPlainText;
    return this;
  }

   /**
   * True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment
   * @return canIncludeOrderPlainText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment")

  public Boolean getCanIncludeOrderPlainText() {
    return canIncludeOrderPlainText;
  }


  public void setCanIncludeOrderPlainText(Boolean canIncludeOrderPlainText) {
    this.canIncludeOrderPlainText = canIncludeOrderPlainText;
  }


  public Notification distributionCenterFilters(List<String> distributionCenterFilters) {
    
    this.distributionCenterFilters = distributionCenterFilters;
    return this;
  }

  public Notification addDistributionCenterFiltersItem(String distributionCenterFiltersItem) {
    if (this.distributionCenterFilters == null) {
      this.distributionCenterFilters = new ArrayList<>();
    }
    this.distributionCenterFilters.add(distributionCenterFiltersItem);
    return this;
  }

   /**
   * If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.
   * @return distributionCenterFilters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.")

  public List<String> getDistributionCenterFilters() {
    return distributionCenterFilters;
  }


  public void setDistributionCenterFilters(List<String> distributionCenterFilters) {
    this.distributionCenterFilters = distributionCenterFilters;
  }


  public Notification includeAffiliate(Boolean includeAffiliate) {
    
    this.includeAffiliate = includeAffiliate;
    return this;
  }

   /**
   * If true, and this notification supports it, affiliate information will be attached to all notifications of this type
   * @return includeAffiliate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, and this notification supports it, affiliate information will be attached to all notifications of this type")

  public Boolean getIncludeAffiliate() {
    return includeAffiliate;
  }


  public void setIncludeAffiliate(Boolean includeAffiliate) {
    this.includeAffiliate = includeAffiliate;
  }


  public Notification includeOrder(Boolean includeOrder) {
    
    this.includeOrder = includeOrder;
    return this;
  }

   /**
   * If true, and this notification supports it, the order will be attached to all notifications of this type
   * @return includeOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, and this notification supports it, the order will be attached to all notifications of this type")

  public Boolean getIncludeOrder() {
    return includeOrder;
  }


  public void setIncludeOrder(Boolean includeOrder) {
    this.includeOrder = includeOrder;
  }


  public Notification includeOrderPlainText(Boolean includeOrderPlainText) {
    
    this.includeOrderPlainText = includeOrderPlainText;
    return this;
  }

   /**
   * If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type
   * @return includeOrderPlainText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type")

  public Boolean getIncludeOrderPlainText() {
    return includeOrderPlainText;
  }


  public void setIncludeOrderPlainText(Boolean includeOrderPlainText) {
    this.includeOrderPlainText = includeOrderPlainText;
  }


  public Notification name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this notification.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of this notification.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Notification notificationGroup(String notificationGroup) {
    
    this.notificationGroup = notificationGroup;
    return this;
  }

   /**
   * A group for this notification.  This name is only used for visual grouping within interfaces.
   * @return notificationGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A group for this notification.  This name is only used for visual grouping within interfaces.")

  public String getNotificationGroup() {
    return notificationGroup;
  }


  public void setNotificationGroup(String notificationGroup) {
    this.notificationGroup = notificationGroup;
  }


  public Notification selected(Boolean selected) {
    
    this.selected = selected;
    return this;
  }

   /**
   * True if this user wishes to receive this email notification.
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this user wishes to receive this email notification.")

  public Boolean getSelected() {
    return selected;
  }


  public void setSelected(Boolean selected) {
    this.selected = selected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.canFilterByDistributionCenters, notification.canFilterByDistributionCenters) &&
        Objects.equals(this.canIncludeAffiliate, notification.canIncludeAffiliate) &&
        Objects.equals(this.canIncludeOrder, notification.canIncludeOrder) &&
        Objects.equals(this.canIncludeOrderPlainText, notification.canIncludeOrderPlainText) &&
        Objects.equals(this.distributionCenterFilters, notification.distributionCenterFilters) &&
        Objects.equals(this.includeAffiliate, notification.includeAffiliate) &&
        Objects.equals(this.includeOrder, notification.includeOrder) &&
        Objects.equals(this.includeOrderPlainText, notification.includeOrderPlainText) &&
        Objects.equals(this.name, notification.name) &&
        Objects.equals(this.notificationGroup, notification.notificationGroup) &&
        Objects.equals(this.selected, notification.selected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canFilterByDistributionCenters, canIncludeAffiliate, canIncludeOrder, canIncludeOrderPlainText, distributionCenterFilters, includeAffiliate, includeOrder, includeOrderPlainText, name, notificationGroup, selected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    canFilterByDistributionCenters: ").append(toIndentedString(canFilterByDistributionCenters)).append("\n");
    sb.append("    canIncludeAffiliate: ").append(toIndentedString(canIncludeAffiliate)).append("\n");
    sb.append("    canIncludeOrder: ").append(toIndentedString(canIncludeOrder)).append("\n");
    sb.append("    canIncludeOrderPlainText: ").append(toIndentedString(canIncludeOrderPlainText)).append("\n");
    sb.append("    distributionCenterFilters: ").append(toIndentedString(distributionCenterFilters)).append("\n");
    sb.append("    includeAffiliate: ").append(toIndentedString(includeAffiliate)).append("\n");
    sb.append("    includeOrder: ").append(toIndentedString(includeOrder)).append("\n");
    sb.append("    includeOrderPlainText: ").append(toIndentedString(includeOrderPlainText)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationGroup: ").append(toIndentedString(notificationGroup)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_filter_by_distribution_centers");
    openapiFields.add("can_include_affiliate");
    openapiFields.add("can_include_order");
    openapiFields.add("can_include_order_plain_text");
    openapiFields.add("distribution_center_filters");
    openapiFields.add("include_affiliate");
    openapiFields.add("include_order");
    openapiFields.add("include_order_plain_text");
    openapiFields.add("name");
    openapiFields.add("notification_group");
    openapiFields.add("selected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Notification
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Notification.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Notification is not found in the empty JSON string", Notification.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Notification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Notification` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("distribution_center_filters") != null && !jsonObj.get("distribution_center_filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution_center_filters` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_center_filters").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("notification_group") != null && !jsonObj.get("notification_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_group").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Notification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Notification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Notification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Notification.class));

       return (TypeAdapter<T>) new TypeAdapter<Notification>() {
           @Override
           public void write(JsonWriter out, Notification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Notification read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Notification given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Notification
  * @throws IOException if the JSON string is invalid with respect to Notification
  */
  public static Notification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Notification.class);
  }

 /**
  * Convert an instance of Notification to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


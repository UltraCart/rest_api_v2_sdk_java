/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Notification
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-09-07T11:22:29.322-04:00")



public class Notification {
  @SerializedName("can_filter_by_distribution_centers")
  private Boolean canFilterByDistributionCenters = null;

  @SerializedName("can_include_affiliate")
  private Boolean canIncludeAffiliate = null;

  @SerializedName("can_include_order")
  private Boolean canIncludeOrder = null;

  @SerializedName("can_include_order_plain_text")
  private Boolean canIncludeOrderPlainText = null;

  @SerializedName("distribution_center_filters")
  private List<String> distributionCenterFilters = null;

  @SerializedName("include_affiliate")
  private Boolean includeAffiliate = null;

  @SerializedName("include_order")
  private Boolean includeOrder = null;

  @SerializedName("include_order_plain_text")
  private Boolean includeOrderPlainText = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("notification_group")
  private String notificationGroup = null;

  @SerializedName("selected")
  private Boolean selected = null;

  public Notification canFilterByDistributionCenters(Boolean canFilterByDistributionCenters) {
    this.canFilterByDistributionCenters = canFilterByDistributionCenters;
    return this;
  }

   /**
   * True if this notification can be filtered to only send for one or more distribution centers.
   * @return canFilterByDistributionCenters
  **/
  @ApiModelProperty(value = "True if this notification can be filtered to only send for one or more distribution centers.")
  public Boolean isCanFilterByDistributionCenters() {
    return canFilterByDistributionCenters;
  }

  public void setCanFilterByDistributionCenters(Boolean canFilterByDistributionCenters) {
    this.canFilterByDistributionCenters = canFilterByDistributionCenters;
  }

  public Notification canIncludeAffiliate(Boolean canIncludeAffiliate) {
    this.canIncludeAffiliate = canIncludeAffiliate;
    return this;
  }

   /**
   * True if this notification can include an affiliate information.
   * @return canIncludeAffiliate
  **/
  @ApiModelProperty(value = "True if this notification can include an affiliate information.")
  public Boolean isCanIncludeAffiliate() {
    return canIncludeAffiliate;
  }

  public void setCanIncludeAffiliate(Boolean canIncludeAffiliate) {
    this.canIncludeAffiliate = canIncludeAffiliate;
  }

  public Notification canIncludeOrder(Boolean canIncludeOrder) {
    this.canIncludeOrder = canIncludeOrder;
    return this;
  }

   /**
   * True if this notification can include an order attachment.
   * @return canIncludeOrder
  **/
  @ApiModelProperty(value = "True if this notification can include an order attachment.")
  public Boolean isCanIncludeOrder() {
    return canIncludeOrder;
  }

  public void setCanIncludeOrder(Boolean canIncludeOrder) {
    this.canIncludeOrder = canIncludeOrder;
  }

  public Notification canIncludeOrderPlainText(Boolean canIncludeOrderPlainText) {
    this.canIncludeOrderPlainText = canIncludeOrderPlainText;
    return this;
  }

   /**
   * True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment
   * @return canIncludeOrderPlainText
  **/
  @ApiModelProperty(value = "True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment")
  public Boolean isCanIncludeOrderPlainText() {
    return canIncludeOrderPlainText;
  }

  public void setCanIncludeOrderPlainText(Boolean canIncludeOrderPlainText) {
    this.canIncludeOrderPlainText = canIncludeOrderPlainText;
  }

  public Notification distributionCenterFilters(List<String> distributionCenterFilters) {
    this.distributionCenterFilters = distributionCenterFilters;
    return this;
  }

  public Notification addDistributionCenterFiltersItem(String distributionCenterFiltersItem) {
    if (this.distributionCenterFilters == null) {
      this.distributionCenterFilters = new ArrayList<String>();
    }
    this.distributionCenterFilters.add(distributionCenterFiltersItem);
    return this;
  }

   /**
   * If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.
   * @return distributionCenterFilters
  **/
  @ApiModelProperty(value = "If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.")
  public List<String> getDistributionCenterFilters() {
    return distributionCenterFilters;
  }

  public void setDistributionCenterFilters(List<String> distributionCenterFilters) {
    this.distributionCenterFilters = distributionCenterFilters;
  }

  public Notification includeAffiliate(Boolean includeAffiliate) {
    this.includeAffiliate = includeAffiliate;
    return this;
  }

   /**
   * If true, and this notification supports it, affiliate information will be attached to all notifications of this type
   * @return includeAffiliate
  **/
  @ApiModelProperty(value = "If true, and this notification supports it, affiliate information will be attached to all notifications of this type")
  public Boolean isIncludeAffiliate() {
    return includeAffiliate;
  }

  public void setIncludeAffiliate(Boolean includeAffiliate) {
    this.includeAffiliate = includeAffiliate;
  }

  public Notification includeOrder(Boolean includeOrder) {
    this.includeOrder = includeOrder;
    return this;
  }

   /**
   * If true, and this notification supports it, the order will be attached to all notifications of this type
   * @return includeOrder
  **/
  @ApiModelProperty(value = "If true, and this notification supports it, the order will be attached to all notifications of this type")
  public Boolean isIncludeOrder() {
    return includeOrder;
  }

  public void setIncludeOrder(Boolean includeOrder) {
    this.includeOrder = includeOrder;
  }

  public Notification includeOrderPlainText(Boolean includeOrderPlainText) {
    this.includeOrderPlainText = includeOrderPlainText;
    return this;
  }

   /**
   * If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type
   * @return includeOrderPlainText
  **/
  @ApiModelProperty(value = "If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type")
  public Boolean isIncludeOrderPlainText() {
    return includeOrderPlainText;
  }

  public void setIncludeOrderPlainText(Boolean includeOrderPlainText) {
    this.includeOrderPlainText = includeOrderPlainText;
  }

  public Notification name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this notification.
   * @return name
  **/
  @ApiModelProperty(value = "The name of this notification.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Notification notificationGroup(String notificationGroup) {
    this.notificationGroup = notificationGroup;
    return this;
  }

   /**
   * A group for this notification.  This name is only used for visual grouping within interfaces.
   * @return notificationGroup
  **/
  @ApiModelProperty(value = "A group for this notification.  This name is only used for visual grouping within interfaces.")
  public String getNotificationGroup() {
    return notificationGroup;
  }

  public void setNotificationGroup(String notificationGroup) {
    this.notificationGroup = notificationGroup;
  }

  public Notification selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

   /**
   * True if this user wishes to receive this email notification.
   * @return selected
  **/
  @ApiModelProperty(value = "True if this user wishes to receive this email notification.")
  public Boolean isSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.canFilterByDistributionCenters, notification.canFilterByDistributionCenters) &&
        Objects.equals(this.canIncludeAffiliate, notification.canIncludeAffiliate) &&
        Objects.equals(this.canIncludeOrder, notification.canIncludeOrder) &&
        Objects.equals(this.canIncludeOrderPlainText, notification.canIncludeOrderPlainText) &&
        Objects.equals(this.distributionCenterFilters, notification.distributionCenterFilters) &&
        Objects.equals(this.includeAffiliate, notification.includeAffiliate) &&
        Objects.equals(this.includeOrder, notification.includeOrder) &&
        Objects.equals(this.includeOrderPlainText, notification.includeOrderPlainText) &&
        Objects.equals(this.name, notification.name) &&
        Objects.equals(this.notificationGroup, notification.notificationGroup) &&
        Objects.equals(this.selected, notification.selected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canFilterByDistributionCenters, canIncludeAffiliate, canIncludeOrder, canIncludeOrderPlainText, distributionCenterFilters, includeAffiliate, includeOrder, includeOrderPlainText, name, notificationGroup, selected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    
    sb.append("    canFilterByDistributionCenters: ").append(toIndentedString(canFilterByDistributionCenters)).append("\n");
    sb.append("    canIncludeAffiliate: ").append(toIndentedString(canIncludeAffiliate)).append("\n");
    sb.append("    canIncludeOrder: ").append(toIndentedString(canIncludeOrder)).append("\n");
    sb.append("    canIncludeOrderPlainText: ").append(toIndentedString(canIncludeOrderPlainText)).append("\n");
    sb.append("    distributionCenterFilters: ").append(toIndentedString(distributionCenterFilters)).append("\n");
    sb.append("    includeAffiliate: ").append(toIndentedString(includeAffiliate)).append("\n");
    sb.append("    includeOrder: ").append(toIndentedString(includeOrder)).append("\n");
    sb.append("    includeOrderPlainText: ").append(toIndentedString(includeOrderPlainText)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationGroup: ").append(toIndentedString(notificationGroup)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


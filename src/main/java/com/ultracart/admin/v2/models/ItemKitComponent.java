/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemKitComponent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T10:43:53.313-05:00[America/Indianapolis]")
public class ItemKitComponent {
  public static final String SERIALIZED_NAME_COMPONENT_COST = "component_cost";
  @SerializedName(SERIALIZED_NAME_COMPONENT_COST)
  private BigDecimal componentCost;

  public static final String SERIALIZED_NAME_COMPONENT_DESCRIPTION = "component_description";
  @SerializedName(SERIALIZED_NAME_COMPONENT_DESCRIPTION)
  private String componentDescription;

  public static final String SERIALIZED_NAME_COMPONENT_MERCHANT_ITEM_ID = "component_merchant_item_id";
  @SerializedName(SERIALIZED_NAME_COMPONENT_MERCHANT_ITEM_ID)
  private String componentMerchantItemId;

  public static final String SERIALIZED_NAME_COMPONENT_MERCHANT_ITEM_OID = "component_merchant_item_oid";
  @SerializedName(SERIALIZED_NAME_COMPONENT_MERCHANT_ITEM_OID)
  private Integer componentMerchantItemOid;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public ItemKitComponent() { 
  }

  public ItemKitComponent componentCost(BigDecimal componentCost) {
    
    this.componentCost = componentCost;
    return this;
  }

   /**
   * Component item cost
   * @return componentCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Component item cost")

  public BigDecimal getComponentCost() {
    return componentCost;
  }


  public void setComponentCost(BigDecimal componentCost) {
    this.componentCost = componentCost;
  }


  public ItemKitComponent componentDescription(String componentDescription) {
    
    this.componentDescription = componentDescription;
    return this;
  }

   /**
   * Component item description
   * @return componentDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Component item description")

  public String getComponentDescription() {
    return componentDescription;
  }


  public void setComponentDescription(String componentDescription) {
    this.componentDescription = componentDescription;
  }


  public ItemKitComponent componentMerchantItemId(String componentMerchantItemId) {
    
    this.componentMerchantItemId = componentMerchantItemId;
    return this;
  }

   /**
   * Component item ID
   * @return componentMerchantItemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Component item ID")

  public String getComponentMerchantItemId() {
    return componentMerchantItemId;
  }


  public void setComponentMerchantItemId(String componentMerchantItemId) {
    this.componentMerchantItemId = componentMerchantItemId;
  }


  public ItemKitComponent componentMerchantItemOid(Integer componentMerchantItemOid) {
    
    this.componentMerchantItemOid = componentMerchantItemOid;
    return this;
  }

   /**
   * Component item object identifier
   * @return componentMerchantItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Component item object identifier")

  public Integer getComponentMerchantItemOid() {
    return componentMerchantItemOid;
  }


  public void setComponentMerchantItemOid(Integer componentMerchantItemOid) {
    this.componentMerchantItemOid = componentMerchantItemOid;
  }


  public ItemKitComponent quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Quantity")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemKitComponent itemKitComponent = (ItemKitComponent) o;
    return Objects.equals(this.componentCost, itemKitComponent.componentCost) &&
        Objects.equals(this.componentDescription, itemKitComponent.componentDescription) &&
        Objects.equals(this.componentMerchantItemId, itemKitComponent.componentMerchantItemId) &&
        Objects.equals(this.componentMerchantItemOid, itemKitComponent.componentMerchantItemOid) &&
        Objects.equals(this.quantity, itemKitComponent.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentCost, componentDescription, componentMerchantItemId, componentMerchantItemOid, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemKitComponent {\n");
    sb.append("    componentCost: ").append(toIndentedString(componentCost)).append("\n");
    sb.append("    componentDescription: ").append(toIndentedString(componentDescription)).append("\n");
    sb.append("    componentMerchantItemId: ").append(toIndentedString(componentMerchantItemId)).append("\n");
    sb.append("    componentMerchantItemOid: ").append(toIndentedString(componentMerchantItemOid)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component_cost");
    openapiFields.add("component_description");
    openapiFields.add("component_merchant_item_id");
    openapiFields.add("component_merchant_item_oid");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemKitComponent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemKitComponent.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemKitComponent is not found in the empty JSON string", ItemKitComponent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemKitComponent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemKitComponent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("component_description") != null && !jsonObj.get("component_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component_description").toString()));
      }
      if (jsonObj.get("component_merchant_item_id") != null && !jsonObj.get("component_merchant_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component_merchant_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component_merchant_item_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemKitComponent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemKitComponent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemKitComponent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemKitComponent.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemKitComponent>() {
           @Override
           public void write(JsonWriter out, ItemKitComponent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemKitComponent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemKitComponent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemKitComponent
  * @throws IOException if the JSON string is invalid with respect to ItemKitComponent
  */
  public static ItemKitComponent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemKitComponent.class);
  }

 /**
  * Convert an instance of ItemKitComponent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


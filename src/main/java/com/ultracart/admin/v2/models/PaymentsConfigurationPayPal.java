/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.PaymentsConfigurationRestrictions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PaymentsConfigurationPayPal
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-04-04T16:07:33.190-04:00")



public class PaymentsConfigurationPayPal {
  @SerializedName("accept_paypal")
  private Boolean acceptPaypal = null;

  @SerializedName("accounting_code")
  private String accountingCode = null;

  @SerializedName("api_password")
  private String apiPassword = null;

  @SerializedName("api_username")
  private String apiUsername = null;

  @SerializedName("certificate_on_file")
  private Boolean certificateOnFile = null;

  @SerializedName("deposit_to_account")
  private String depositToAccount = null;

  @SerializedName("email")
  private String email = null;

  /**
   * PayPal configuration, live or sandbox
   */
  @JsonAdapter(EnvironmentEnum.Adapter.class)
  public enum EnvironmentEnum {
    LIVE("Live"),
    
    SANDBOX("Sandbox");

    private String value;

    EnvironmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnvironmentEnum fromValue(String text) {
      for (EnvironmentEnum b : EnvironmentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnvironmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnvironmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnvironmentEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnvironmentEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("environment")
  private EnvironmentEnum environment = null;

  @SerializedName("header_image_url")
  private String headerImageUrl = null;

  @SerializedName("hide_bill_me_later")
  private Boolean hideBillMeLater = null;

  @SerializedName("hide_express_checkout_on_view_cart")
  private Boolean hideExpressCheckoutOnViewCart = null;

  @SerializedName("hide_for_unshipped_orders")
  private Boolean hideForUnshippedOrders = null;

  @SerializedName("hold_in_ar")
  private Boolean holdInAr = null;

  /**
   * PayPal landing page
   */
  @JsonAdapter(LandingPageEnum.Adapter.class)
  public enum LandingPageEnum {
    BILLING("Billing"),
    
    LOGIN("Login");

    private String value;

    LandingPageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LandingPageEnum fromValue(String text) {
      for (LandingPageEnum b : LandingPageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LandingPageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LandingPageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LandingPageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LandingPageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("landing_page")
  private LandingPageEnum landingPage = null;

  /**
   * The PayPal mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    WPPECO("WPPECO"),
    
    WPPECDP("WPPECDP");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("private_key_password")
  private String privateKeyPassword = null;

  @SerializedName("processing_fee")
  private BigDecimal processingFee = null;

  @SerializedName("processing_percentage")
  private BigDecimal processingPercentage = null;

  @SerializedName("push_paypal")
  private Boolean pushPaypal = null;

  @SerializedName("restrictions")
  private PaymentsConfigurationRestrictions restrictions = null;

  @SerializedName("send_recurring")
  private Boolean sendRecurring = null;

  @SerializedName("short_paypal_marketing_text")
  private Boolean shortPaypalMarketingText = null;

  @SerializedName("show_card_logos_not_directly_supported")
  private Boolean showCardLogosNotDirectlySupported = null;

  @SerializedName("show_signature")
  private Boolean showSignature = null;

  @SerializedName("signature")
  private String signature = null;

  /**
   * PayPal solution type
   */
  @JsonAdapter(SolutionTypeEnum.Adapter.class)
  public enum SolutionTypeEnum {
    SOLE("Sole"),
    
    MARK("Mark");

    private String value;

    SolutionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SolutionTypeEnum fromValue(String text) {
      for (SolutionTypeEnum b : SolutionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SolutionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SolutionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SolutionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SolutionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("solution_type")
  private SolutionTypeEnum solutionType = null;

  @SerializedName("summary_email")
  private String summaryEmail = null;

  @SerializedName("summary_mode")
  private String summaryMode = null;

  @SerializedName("zero_dollar_penny")
  private Boolean zeroDollarPenny = null;

  public PaymentsConfigurationPayPal acceptPaypal(Boolean acceptPaypal) {
    this.acceptPaypal = acceptPaypal;
    return this;
  }

   /**
   * Master flag that determine if PayPal is an active payment for this account
   * @return acceptPaypal
  **/
  @ApiModelProperty(value = "Master flag that determine if PayPal is an active payment for this account")
  public Boolean isAcceptPaypal() {
    return acceptPaypal;
  }

  public void setAcceptPaypal(Boolean acceptPaypal) {
    this.acceptPaypal = acceptPaypal;
  }

  public PaymentsConfigurationPayPal accountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Optional accounting code that is set to Quickbooks when an order uses this payment method.
   * @return accountingCode
  **/
  @ApiModelProperty(value = "Optional accounting code that is set to Quickbooks when an order uses this payment method.")
  public String getAccountingCode() {
    return accountingCode;
  }

  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }

  public PaymentsConfigurationPayPal apiPassword(String apiPassword) {
    this.apiPassword = apiPassword;
    return this;
  }

   /**
   * PayPal API password
   * @return apiPassword
  **/
  @ApiModelProperty(value = "PayPal API password")
  public String getApiPassword() {
    return apiPassword;
  }

  public void setApiPassword(String apiPassword) {
    this.apiPassword = apiPassword;
  }

  public PaymentsConfigurationPayPal apiUsername(String apiUsername) {
    this.apiUsername = apiUsername;
    return this;
  }

   /**
   * PayPal API username
   * @return apiUsername
  **/
  @ApiModelProperty(value = "PayPal API username")
  public String getApiUsername() {
    return apiUsername;
  }

  public void setApiUsername(String apiUsername) {
    this.apiUsername = apiUsername;
  }

  public PaymentsConfigurationPayPal certificateOnFile(Boolean certificateOnFile) {
    this.certificateOnFile = certificateOnFile;
    return this;
  }

   /**
   * (Legacy) true if there is a PayPal certificate already on file. Used to manage the internal UI
   * @return certificateOnFile
  **/
  @ApiModelProperty(value = "(Legacy) true if there is a PayPal certificate already on file. Used to manage the internal UI")
  public Boolean isCertificateOnFile() {
    return certificateOnFile;
  }

  public void setCertificateOnFile(Boolean certificateOnFile) {
    this.certificateOnFile = certificateOnFile;
  }

  public PaymentsConfigurationPayPal depositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
    return this;
  }

   /**
   * The account to deposit funds
   * @return depositToAccount
  **/
  @ApiModelProperty(value = "The account to deposit funds")
  public String getDepositToAccount() {
    return depositToAccount;
  }

  public void setDepositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
  }

  public PaymentsConfigurationPayPal email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The main PayPal email address
   * @return email
  **/
  @ApiModelProperty(value = "The main PayPal email address")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public PaymentsConfigurationPayPal environment(EnvironmentEnum environment) {
    this.environment = environment;
    return this;
  }

   /**
   * PayPal configuration, live or sandbox
   * @return environment
  **/
  @ApiModelProperty(value = "PayPal configuration, live or sandbox")
  public EnvironmentEnum getEnvironment() {
    return environment;
  }

  public void setEnvironment(EnvironmentEnum environment) {
    this.environment = environment;
  }

  public PaymentsConfigurationPayPal headerImageUrl(String headerImageUrl) {
    this.headerImageUrl = headerImageUrl;
    return this;
  }

   /**
   * The URL for the PayPal header
   * @return headerImageUrl
  **/
  @ApiModelProperty(value = "The URL for the PayPal header")
  public String getHeaderImageUrl() {
    return headerImageUrl;
  }

  public void setHeaderImageUrl(String headerImageUrl) {
    this.headerImageUrl = headerImageUrl;
  }

  public PaymentsConfigurationPayPal hideBillMeLater(Boolean hideBillMeLater) {
    this.hideBillMeLater = hideBillMeLater;
    return this;
  }

   /**
   * True if the Bill Me Later button should be hidden during checkout
   * @return hideBillMeLater
  **/
  @ApiModelProperty(value = "True if the Bill Me Later button should be hidden during checkout")
  public Boolean isHideBillMeLater() {
    return hideBillMeLater;
  }

  public void setHideBillMeLater(Boolean hideBillMeLater) {
    this.hideBillMeLater = hideBillMeLater;
  }

  public PaymentsConfigurationPayPal hideExpressCheckoutOnViewCart(Boolean hideExpressCheckoutOnViewCart) {
    this.hideExpressCheckoutOnViewCart = hideExpressCheckoutOnViewCart;
    return this;
  }

   /**
   * True if the PayPal express checkout button should be hidden on the view cart page.  This will force the customer to enter address information before being able to checkout with PayPal
   * @return hideExpressCheckoutOnViewCart
  **/
  @ApiModelProperty(value = "True if the PayPal express checkout button should be hidden on the view cart page.  This will force the customer to enter address information before being able to checkout with PayPal")
  public Boolean isHideExpressCheckoutOnViewCart() {
    return hideExpressCheckoutOnViewCart;
  }

  public void setHideExpressCheckoutOnViewCart(Boolean hideExpressCheckoutOnViewCart) {
    this.hideExpressCheckoutOnViewCart = hideExpressCheckoutOnViewCart;
  }

  public PaymentsConfigurationPayPal hideForUnshippedOrders(Boolean hideForUnshippedOrders) {
    this.hideForUnshippedOrders = hideForUnshippedOrders;
    return this;
  }

   /**
   * True if PayPal should be hidden for orders with no shippable product, such as digital orders
   * @return hideForUnshippedOrders
  **/
  @ApiModelProperty(value = "True if PayPal should be hidden for orders with no shippable product, such as digital orders")
  public Boolean isHideForUnshippedOrders() {
    return hideForUnshippedOrders;
  }

  public void setHideForUnshippedOrders(Boolean hideForUnshippedOrders) {
    this.hideForUnshippedOrders = hideForUnshippedOrders;
  }

  public PaymentsConfigurationPayPal holdInAr(Boolean holdInAr) {
    this.holdInAr = holdInAr;
    return this;
  }

   /**
   * If true, PayPal orders are held in Accounts Receivable for review
   * @return holdInAr
  **/
  @ApiModelProperty(value = "If true, PayPal orders are held in Accounts Receivable for review")
  public Boolean isHoldInAr() {
    return holdInAr;
  }

  public void setHoldInAr(Boolean holdInAr) {
    this.holdInAr = holdInAr;
  }

  public PaymentsConfigurationPayPal landingPage(LandingPageEnum landingPage) {
    this.landingPage = landingPage;
    return this;
  }

   /**
   * PayPal landing page
   * @return landingPage
  **/
  @ApiModelProperty(value = "PayPal landing page")
  public LandingPageEnum getLandingPage() {
    return landingPage;
  }

  public void setLandingPage(LandingPageEnum landingPage) {
    this.landingPage = landingPage;
  }

  public PaymentsConfigurationPayPal mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The PayPal mode
   * @return mode
  **/
  @ApiModelProperty(value = "The PayPal mode")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public PaymentsConfigurationPayPal privateKeyPassword(String privateKeyPassword) {
    this.privateKeyPassword = privateKeyPassword;
    return this;
  }

   /**
   * PayPal API private key password
   * @return privateKeyPassword
  **/
  @ApiModelProperty(value = "PayPal API private key password")
  public String getPrivateKeyPassword() {
    return privateKeyPassword;
  }

  public void setPrivateKeyPassword(String privateKeyPassword) {
    this.privateKeyPassword = privateKeyPassword;
  }

  public PaymentsConfigurationPayPal processingFee(BigDecimal processingFee) {
    this.processingFee = processingFee;
    return this;
  }

   /**
   * Optional additional fee to charge if PayPal is used.  It is rare for this to be used.
   * @return processingFee
  **/
  @ApiModelProperty(value = "Optional additional fee to charge if PayPal is used.  It is rare for this to be used.")
  public BigDecimal getProcessingFee() {
    return processingFee;
  }

  public void setProcessingFee(BigDecimal processingFee) {
    this.processingFee = processingFee;
  }

  public PaymentsConfigurationPayPal processingPercentage(BigDecimal processingPercentage) {
    this.processingPercentage = processingPercentage;
    return this;
  }

   /**
   * The processing percentage charged by PayPal
   * @return processingPercentage
  **/
  @ApiModelProperty(value = "The processing percentage charged by PayPal")
  public BigDecimal getProcessingPercentage() {
    return processingPercentage;
  }

  public void setProcessingPercentage(BigDecimal processingPercentage) {
    this.processingPercentage = processingPercentage;
  }

  public PaymentsConfigurationPayPal pushPaypal(Boolean pushPaypal) {
    this.pushPaypal = pushPaypal;
    return this;
  }

   /**
   * True if the internal UI should recommend opening a PayPal account
   * @return pushPaypal
  **/
  @ApiModelProperty(value = "True if the internal UI should recommend opening a PayPal account")
  public Boolean isPushPaypal() {
    return pushPaypal;
  }

  public void setPushPaypal(Boolean pushPaypal) {
    this.pushPaypal = pushPaypal;
  }

  public PaymentsConfigurationPayPal restrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @ApiModelProperty(value = "")
  public PaymentsConfigurationRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public PaymentsConfigurationPayPal sendRecurring(Boolean sendRecurring) {
    this.sendRecurring = sendRecurring;
    return this;
  }

   /**
   * True if UltraCart should send recurring orders to PayPal.  There are restrictions to what PayPal will accept for recurring orders.  Be careful.
   * @return sendRecurring
  **/
  @ApiModelProperty(value = "True if UltraCart should send recurring orders to PayPal.  There are restrictions to what PayPal will accept for recurring orders.  Be careful.")
  public Boolean isSendRecurring() {
    return sendRecurring;
  }

  public void setSendRecurring(Boolean sendRecurring) {
    this.sendRecurring = sendRecurring;
  }

  public PaymentsConfigurationPayPal shortPaypalMarketingText(Boolean shortPaypalMarketingText) {
    this.shortPaypalMarketingText = shortPaypalMarketingText;
    return this;
  }

   /**
   * Short marketing text
   * @return shortPaypalMarketingText
  **/
  @ApiModelProperty(value = "Short marketing text")
  public Boolean isShortPaypalMarketingText() {
    return shortPaypalMarketingText;
  }

  public void setShortPaypalMarketingText(Boolean shortPaypalMarketingText) {
    this.shortPaypalMarketingText = shortPaypalMarketingText;
  }

  public PaymentsConfigurationPayPal showCardLogosNotDirectlySupported(Boolean showCardLogosNotDirectlySupported) {
    this.showCardLogosNotDirectlySupported = showCardLogosNotDirectlySupported;
    return this;
  }

   /**
   * internal ui flag
   * @return showCardLogosNotDirectlySupported
  **/
  @ApiModelProperty(value = "internal ui flag")
  public Boolean isShowCardLogosNotDirectlySupported() {
    return showCardLogosNotDirectlySupported;
  }

  public void setShowCardLogosNotDirectlySupported(Boolean showCardLogosNotDirectlySupported) {
    this.showCardLogosNotDirectlySupported = showCardLogosNotDirectlySupported;
  }

  public PaymentsConfigurationPayPal showSignature(Boolean showSignature) {
    this.showSignature = showSignature;
    return this;
  }

   /**
   * Internal flag used to manage UI
   * @return showSignature
  **/
  @ApiModelProperty(value = "Internal flag used to manage UI")
  public Boolean isShowSignature() {
    return showSignature;
  }

  public void setShowSignature(Boolean showSignature) {
    this.showSignature = showSignature;
  }

  public PaymentsConfigurationPayPal signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * PayPal signature
   * @return signature
  **/
  @ApiModelProperty(value = "PayPal signature")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public PaymentsConfigurationPayPal solutionType(SolutionTypeEnum solutionType) {
    this.solutionType = solutionType;
    return this;
  }

   /**
   * PayPal solution type
   * @return solutionType
  **/
  @ApiModelProperty(value = "PayPal solution type")
  public SolutionTypeEnum getSolutionType() {
    return solutionType;
  }

  public void setSolutionType(SolutionTypeEnum solutionType) {
    this.solutionType = solutionType;
  }

  public PaymentsConfigurationPayPal summaryEmail(String summaryEmail) {
    this.summaryEmail = summaryEmail;
    return this;
  }

   /**
   * The email where PayPal summaries should be sent
   * @return summaryEmail
  **/
  @ApiModelProperty(value = "The email where PayPal summaries should be sent")
  public String getSummaryEmail() {
    return summaryEmail;
  }

  public void setSummaryEmail(String summaryEmail) {
    this.summaryEmail = summaryEmail;
  }

  public PaymentsConfigurationPayPal summaryMode(String summaryMode) {
    this.summaryMode = summaryMode;
    return this;
  }

   /**
   * Description of what mode PayPal is operating
   * @return summaryMode
  **/
  @ApiModelProperty(value = "Description of what mode PayPal is operating")
  public String getSummaryMode() {
    return summaryMode;
  }

  public void setSummaryMode(String summaryMode) {
    this.summaryMode = summaryMode;
  }

  public PaymentsConfigurationPayPal zeroDollarPenny(Boolean zeroDollarPenny) {
    this.zeroDollarPenny = zeroDollarPenny;
    return this;
  }

   /**
   * Send free items to PayPal as one cent items and subtract this penny from shipping.  PayPal does not allow the sale of free items.
   * @return zeroDollarPenny
  **/
  @ApiModelProperty(value = "Send free items to PayPal as one cent items and subtract this penny from shipping.  PayPal does not allow the sale of free items.")
  public Boolean isZeroDollarPenny() {
    return zeroDollarPenny;
  }

  public void setZeroDollarPenny(Boolean zeroDollarPenny) {
    this.zeroDollarPenny = zeroDollarPenny;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsConfigurationPayPal paymentsConfigurationPayPal = (PaymentsConfigurationPayPal) o;
    return Objects.equals(this.acceptPaypal, paymentsConfigurationPayPal.acceptPaypal) &&
        Objects.equals(this.accountingCode, paymentsConfigurationPayPal.accountingCode) &&
        Objects.equals(this.apiPassword, paymentsConfigurationPayPal.apiPassword) &&
        Objects.equals(this.apiUsername, paymentsConfigurationPayPal.apiUsername) &&
        Objects.equals(this.certificateOnFile, paymentsConfigurationPayPal.certificateOnFile) &&
        Objects.equals(this.depositToAccount, paymentsConfigurationPayPal.depositToAccount) &&
        Objects.equals(this.email, paymentsConfigurationPayPal.email) &&
        Objects.equals(this.environment, paymentsConfigurationPayPal.environment) &&
        Objects.equals(this.headerImageUrl, paymentsConfigurationPayPal.headerImageUrl) &&
        Objects.equals(this.hideBillMeLater, paymentsConfigurationPayPal.hideBillMeLater) &&
        Objects.equals(this.hideExpressCheckoutOnViewCart, paymentsConfigurationPayPal.hideExpressCheckoutOnViewCart) &&
        Objects.equals(this.hideForUnshippedOrders, paymentsConfigurationPayPal.hideForUnshippedOrders) &&
        Objects.equals(this.holdInAr, paymentsConfigurationPayPal.holdInAr) &&
        Objects.equals(this.landingPage, paymentsConfigurationPayPal.landingPage) &&
        Objects.equals(this.mode, paymentsConfigurationPayPal.mode) &&
        Objects.equals(this.privateKeyPassword, paymentsConfigurationPayPal.privateKeyPassword) &&
        Objects.equals(this.processingFee, paymentsConfigurationPayPal.processingFee) &&
        Objects.equals(this.processingPercentage, paymentsConfigurationPayPal.processingPercentage) &&
        Objects.equals(this.pushPaypal, paymentsConfigurationPayPal.pushPaypal) &&
        Objects.equals(this.restrictions, paymentsConfigurationPayPal.restrictions) &&
        Objects.equals(this.sendRecurring, paymentsConfigurationPayPal.sendRecurring) &&
        Objects.equals(this.shortPaypalMarketingText, paymentsConfigurationPayPal.shortPaypalMarketingText) &&
        Objects.equals(this.showCardLogosNotDirectlySupported, paymentsConfigurationPayPal.showCardLogosNotDirectlySupported) &&
        Objects.equals(this.showSignature, paymentsConfigurationPayPal.showSignature) &&
        Objects.equals(this.signature, paymentsConfigurationPayPal.signature) &&
        Objects.equals(this.solutionType, paymentsConfigurationPayPal.solutionType) &&
        Objects.equals(this.summaryEmail, paymentsConfigurationPayPal.summaryEmail) &&
        Objects.equals(this.summaryMode, paymentsConfigurationPayPal.summaryMode) &&
        Objects.equals(this.zeroDollarPenny, paymentsConfigurationPayPal.zeroDollarPenny);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptPaypal, accountingCode, apiPassword, apiUsername, certificateOnFile, depositToAccount, email, environment, headerImageUrl, hideBillMeLater, hideExpressCheckoutOnViewCart, hideForUnshippedOrders, holdInAr, landingPage, mode, privateKeyPassword, processingFee, processingPercentage, pushPaypal, restrictions, sendRecurring, shortPaypalMarketingText, showCardLogosNotDirectlySupported, showSignature, signature, solutionType, summaryEmail, summaryMode, zeroDollarPenny);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsConfigurationPayPal {\n");
    
    sb.append("    acceptPaypal: ").append(toIndentedString(acceptPaypal)).append("\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    apiPassword: ").append(toIndentedString(apiPassword)).append("\n");
    sb.append("    apiUsername: ").append(toIndentedString(apiUsername)).append("\n");
    sb.append("    certificateOnFile: ").append(toIndentedString(certificateOnFile)).append("\n");
    sb.append("    depositToAccount: ").append(toIndentedString(depositToAccount)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    headerImageUrl: ").append(toIndentedString(headerImageUrl)).append("\n");
    sb.append("    hideBillMeLater: ").append(toIndentedString(hideBillMeLater)).append("\n");
    sb.append("    hideExpressCheckoutOnViewCart: ").append(toIndentedString(hideExpressCheckoutOnViewCart)).append("\n");
    sb.append("    hideForUnshippedOrders: ").append(toIndentedString(hideForUnshippedOrders)).append("\n");
    sb.append("    holdInAr: ").append(toIndentedString(holdInAr)).append("\n");
    sb.append("    landingPage: ").append(toIndentedString(landingPage)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    privateKeyPassword: ").append(toIndentedString(privateKeyPassword)).append("\n");
    sb.append("    processingFee: ").append(toIndentedString(processingFee)).append("\n");
    sb.append("    processingPercentage: ").append(toIndentedString(processingPercentage)).append("\n");
    sb.append("    pushPaypal: ").append(toIndentedString(pushPaypal)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    sendRecurring: ").append(toIndentedString(sendRecurring)).append("\n");
    sb.append("    shortPaypalMarketingText: ").append(toIndentedString(shortPaypalMarketingText)).append("\n");
    sb.append("    showCardLogosNotDirectlySupported: ").append(toIndentedString(showCardLogosNotDirectlySupported)).append("\n");
    sb.append("    showSignature: ").append(toIndentedString(showSignature)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    solutionType: ").append(toIndentedString(solutionType)).append("\n");
    sb.append("    summaryEmail: ").append(toIndentedString(summaryEmail)).append("\n");
    sb.append("    summaryMode: ").append(toIndentedString(summaryMode)).append("\n");
    sb.append("    zeroDollarPenny: ").append(toIndentedString(zeroDollarPenny)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


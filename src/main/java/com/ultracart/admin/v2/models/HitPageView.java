/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.HitPageViewMetaData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * HitPageView
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-10T10:31:33.025-05:00")



public class HitPageView {
  @SerializedName("bounce")
  private Boolean bounce = null;

  @SerializedName("meta_data")
  private List<HitPageViewMetaData> metaData = null;

  @SerializedName("method")
  private String method = null;

  @SerializedName("prefetch")
  private Boolean prefetch = null;

  @SerializedName("query")
  private String query = null;

  @SerializedName("recording")
  private Boolean recording = null;

  @SerializedName("redirect")
  private Boolean redirect = null;

  @SerializedName("referrer")
  private String referrer = null;

  @SerializedName("time_on_page")
  private BigDecimal timeOnPage = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("url")
  private String url = null;

  public HitPageView bounce(Boolean bounce) {
    this.bounce = bounce;
    return this;
  }

   /**
   * Get bounce
   * @return bounce
  **/
  @ApiModelProperty(value = "")
  public Boolean isBounce() {
    return bounce;
  }

  public void setBounce(Boolean bounce) {
    this.bounce = bounce;
  }

  public HitPageView metaData(List<HitPageViewMetaData> metaData) {
    this.metaData = metaData;
    return this;
  }

  public HitPageView addMetaDataItem(HitPageViewMetaData metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new ArrayList<HitPageViewMetaData>();
    }
    this.metaData.add(metaDataItem);
    return this;
  }

   /**
   * Get metaData
   * @return metaData
  **/
  @ApiModelProperty(value = "")
  public List<HitPageViewMetaData> getMetaData() {
    return metaData;
  }

  public void setMetaData(List<HitPageViewMetaData> metaData) {
    this.metaData = metaData;
  }

  public HitPageView method(String method) {
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @ApiModelProperty(value = "")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }

  public HitPageView prefetch(Boolean prefetch) {
    this.prefetch = prefetch;
    return this;
  }

   /**
   * Get prefetch
   * @return prefetch
  **/
  @ApiModelProperty(value = "")
  public Boolean isPrefetch() {
    return prefetch;
  }

  public void setPrefetch(Boolean prefetch) {
    this.prefetch = prefetch;
  }

  public HitPageView query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @ApiModelProperty(value = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public HitPageView recording(Boolean recording) {
    this.recording = recording;
    return this;
  }

   /**
   * Get recording
   * @return recording
  **/
  @ApiModelProperty(value = "")
  public Boolean isRecording() {
    return recording;
  }

  public void setRecording(Boolean recording) {
    this.recording = recording;
  }

  public HitPageView redirect(Boolean redirect) {
    this.redirect = redirect;
    return this;
  }

   /**
   * Get redirect
   * @return redirect
  **/
  @ApiModelProperty(value = "")
  public Boolean isRedirect() {
    return redirect;
  }

  public void setRedirect(Boolean redirect) {
    this.redirect = redirect;
  }

  public HitPageView referrer(String referrer) {
    this.referrer = referrer;
    return this;
  }

   /**
   * Get referrer
   * @return referrer
  **/
  @ApiModelProperty(value = "")
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }

  public HitPageView timeOnPage(BigDecimal timeOnPage) {
    this.timeOnPage = timeOnPage;
    return this;
  }

   /**
   * Get timeOnPage
   * @return timeOnPage
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getTimeOnPage() {
    return timeOnPage;
  }

  public void setTimeOnPage(BigDecimal timeOnPage) {
    this.timeOnPage = timeOnPage;
  }

  public HitPageView title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public HitPageView url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HitPageView hitPageView = (HitPageView) o;
    return Objects.equals(this.bounce, hitPageView.bounce) &&
        Objects.equals(this.metaData, hitPageView.metaData) &&
        Objects.equals(this.method, hitPageView.method) &&
        Objects.equals(this.prefetch, hitPageView.prefetch) &&
        Objects.equals(this.query, hitPageView.query) &&
        Objects.equals(this.recording, hitPageView.recording) &&
        Objects.equals(this.redirect, hitPageView.redirect) &&
        Objects.equals(this.referrer, hitPageView.referrer) &&
        Objects.equals(this.timeOnPage, hitPageView.timeOnPage) &&
        Objects.equals(this.title, hitPageView.title) &&
        Objects.equals(this.url, hitPageView.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bounce, metaData, method, prefetch, query, recording, redirect, referrer, timeOnPage, title, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HitPageView {\n");
    
    sb.append("    bounce: ").append(toIndentedString(bounce)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    prefetch: ").append(toIndentedString(prefetch)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    timeOnPage: ").append(toIndentedString(timeOnPage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


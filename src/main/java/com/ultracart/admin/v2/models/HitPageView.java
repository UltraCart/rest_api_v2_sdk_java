/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.HitPageViewMetaData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * HitPageView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-02T15:02:29.645-05:00[America/Indianapolis]")
public class HitPageView {
  public static final String SERIALIZED_NAME_BOUNCE = "bounce";
  @SerializedName(SERIALIZED_NAME_BOUNCE)
  private Boolean bounce;

  public static final String SERIALIZED_NAME_META_DATA = "meta_data";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private List<HitPageViewMetaData> metaData = null;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PREFETCH = "prefetch";
  @SerializedName(SERIALIZED_NAME_PREFETCH)
  private Boolean prefetch;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_RECORDING = "recording";
  @SerializedName(SERIALIZED_NAME_RECORDING)
  private Boolean recording;

  public static final String SERIALIZED_NAME_REDIRECT = "redirect";
  @SerializedName(SERIALIZED_NAME_REDIRECT)
  private Boolean redirect;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private String referrer;

  public static final String SERIALIZED_NAME_TIME_ON_PAGE = "time_on_page";
  @SerializedName(SERIALIZED_NAME_TIME_ON_PAGE)
  private BigDecimal timeOnPage;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public HitPageView() { 
  }

  public HitPageView bounce(Boolean bounce) {
    
    this.bounce = bounce;
    return this;
  }

   /**
   * Get bounce
   * @return bounce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBounce() {
    return bounce;
  }


  public void setBounce(Boolean bounce) {
    this.bounce = bounce;
  }


  public HitPageView metaData(List<HitPageViewMetaData> metaData) {
    
    this.metaData = metaData;
    return this;
  }

  public HitPageView addMetaDataItem(HitPageViewMetaData metaDataItem) {
    if (this.metaData == null) {
      this.metaData = new ArrayList<>();
    }
    this.metaData.add(metaDataItem);
    return this;
  }

   /**
   * Get metaData
   * @return metaData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<HitPageViewMetaData> getMetaData() {
    return metaData;
  }


  public void setMetaData(List<HitPageViewMetaData> metaData) {
    this.metaData = metaData;
  }


  public HitPageView method(String method) {
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    this.method = method;
  }


  public HitPageView prefetch(Boolean prefetch) {
    
    this.prefetch = prefetch;
    return this;
  }

   /**
   * Get prefetch
   * @return prefetch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPrefetch() {
    return prefetch;
  }


  public void setPrefetch(Boolean prefetch) {
    this.prefetch = prefetch;
  }


  public HitPageView query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public HitPageView recording(Boolean recording) {
    
    this.recording = recording;
    return this;
  }

   /**
   * Get recording
   * @return recording
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRecording() {
    return recording;
  }


  public void setRecording(Boolean recording) {
    this.recording = recording;
  }


  public HitPageView redirect(Boolean redirect) {
    
    this.redirect = redirect;
    return this;
  }

   /**
   * Get redirect
   * @return redirect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRedirect() {
    return redirect;
  }


  public void setRedirect(Boolean redirect) {
    this.redirect = redirect;
  }


  public HitPageView referrer(String referrer) {
    
    this.referrer = referrer;
    return this;
  }

   /**
   * Get referrer
   * @return referrer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReferrer() {
    return referrer;
  }


  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }


  public HitPageView timeOnPage(BigDecimal timeOnPage) {
    
    this.timeOnPage = timeOnPage;
    return this;
  }

   /**
   * Get timeOnPage
   * @return timeOnPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BigDecimal getTimeOnPage() {
    return timeOnPage;
  }


  public void setTimeOnPage(BigDecimal timeOnPage) {
    this.timeOnPage = timeOnPage;
  }


  public HitPageView title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public HitPageView url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HitPageView hitPageView = (HitPageView) o;
    return Objects.equals(this.bounce, hitPageView.bounce) &&
        Objects.equals(this.metaData, hitPageView.metaData) &&
        Objects.equals(this.method, hitPageView.method) &&
        Objects.equals(this.prefetch, hitPageView.prefetch) &&
        Objects.equals(this.query, hitPageView.query) &&
        Objects.equals(this.recording, hitPageView.recording) &&
        Objects.equals(this.redirect, hitPageView.redirect) &&
        Objects.equals(this.referrer, hitPageView.referrer) &&
        Objects.equals(this.timeOnPage, hitPageView.timeOnPage) &&
        Objects.equals(this.title, hitPageView.title) &&
        Objects.equals(this.url, hitPageView.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bounce, metaData, method, prefetch, query, recording, redirect, referrer, timeOnPage, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HitPageView {\n");
    sb.append("    bounce: ").append(toIndentedString(bounce)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    prefetch: ").append(toIndentedString(prefetch)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    timeOnPage: ").append(toIndentedString(timeOnPage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bounce");
    openapiFields.add("meta_data");
    openapiFields.add("method");
    openapiFields.add("prefetch");
    openapiFields.add("query");
    openapiFields.add("recording");
    openapiFields.add("redirect");
    openapiFields.add("referrer");
    openapiFields.add("time_on_page");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HitPageView
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (HitPageView.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in HitPageView is not found in the empty JSON string", HitPageView.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HitPageView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HitPageView` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraymetaData = jsonObj.getAsJsonArray("meta_data");
      if (jsonArraymetaData != null) {
        // ensure the json data is an array
        if (!jsonObj.get("meta_data").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `meta_data` to be an array in the JSON string but got `%s`", jsonObj.get("meta_data").toString()));
        }

        // validate the optional field `meta_data` (array)
        for (int i = 0; i < jsonArraymetaData.size(); i++) {
          HitPageViewMetaData.validateJsonObject(jsonArraymetaData.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("referrer") != null && !jsonObj.get("referrer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer").toString()));
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HitPageView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HitPageView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HitPageView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HitPageView.class));

       return (TypeAdapter<T>) new TypeAdapter<HitPageView>() {
           @Override
           public void write(JsonWriter out, HitPageView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HitPageView read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HitPageView given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HitPageView
  * @throws IOException if the JSON string is invalid with respect to HitPageView
  */
  public static HitPageView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HitPageView.class);
  }

 /**
  * Convert an instance of HitPageView to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


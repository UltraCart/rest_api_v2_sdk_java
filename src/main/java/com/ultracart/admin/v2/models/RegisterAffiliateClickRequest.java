/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * RegisterAffiliateClickRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-19T12:15:47.119-04:00[America/Indianapolis]")
public class RegisterAffiliateClickRequest {
  public static final String SERIALIZED_NAME_AFFID = "affid";
  @SerializedName(SERIALIZED_NAME_AFFID)
  private Integer affid;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LANDING_PAGE_URL = "landing_page_url";
  @SerializedName(SERIALIZED_NAME_LANDING_PAGE_URL)
  private String landingPageUrl;

  public static final String SERIALIZED_NAME_REFERRER_URL = "referrer_url";
  @SerializedName(SERIALIZED_NAME_REFERRER_URL)
  private String referrerUrl;

  public static final String SERIALIZED_NAME_SUBID = "subid";
  @SerializedName(SERIALIZED_NAME_SUBID)
  private String subid;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public RegisterAffiliateClickRequest() { 
  }

  public RegisterAffiliateClickRequest affid(Integer affid) {
    
    this.affid = affid;
    return this;
  }

   /**
   * Affiliate Id (must be specified if landing_page_url is not)
   * @return affid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate Id (must be specified if landing_page_url is not)")

  public Integer getAffid() {
    return affid;
  }


  public void setAffid(Integer affid) {
    this.affid = affid;
  }


  public RegisterAffiliateClickRequest ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP Address (must be specified for non-browser key authenticated)
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP Address (must be specified for non-browser key authenticated)")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public RegisterAffiliateClickRequest landingPageUrl(String landingPageUrl) {
    
    this.landingPageUrl = landingPageUrl;
    return this;
  }

   /**
   * Landing Page URL
   * @return landingPageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Landing Page URL")

  public String getLandingPageUrl() {
    return landingPageUrl;
  }


  public void setLandingPageUrl(String landingPageUrl) {
    this.landingPageUrl = landingPageUrl;
  }


  public RegisterAffiliateClickRequest referrerUrl(String referrerUrl) {
    
    this.referrerUrl = referrerUrl;
    return this;
  }

   /**
   * Referrer URL (used for detecting invisible linking)
   * @return referrerUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Referrer URL (used for detecting invisible linking)")

  public String getReferrerUrl() {
    return referrerUrl;
  }


  public void setReferrerUrl(String referrerUrl) {
    this.referrerUrl = referrerUrl;
  }


  public RegisterAffiliateClickRequest subid(String subid) {
    
    this.subid = subid;
    return this;
  }

   /**
   * Sub Id (optional value if affid is specified.
   * @return subid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub Id (optional value if affid is specified.")

  public String getSubid() {
    return subid;
  }


  public void setSubid(String subid) {
    this.subid = subid;
  }


  public RegisterAffiliateClickRequest userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

   /**
   * User agent of the browser (must be specified for non-browser key authenticated)
   * @return userAgent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User agent of the browser (must be specified for non-browser key authenticated)")

  public String getUserAgent() {
    return userAgent;
  }


  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAffiliateClickRequest registerAffiliateClickRequest = (RegisterAffiliateClickRequest) o;
    return Objects.equals(this.affid, registerAffiliateClickRequest.affid) &&
        Objects.equals(this.ipAddress, registerAffiliateClickRequest.ipAddress) &&
        Objects.equals(this.landingPageUrl, registerAffiliateClickRequest.landingPageUrl) &&
        Objects.equals(this.referrerUrl, registerAffiliateClickRequest.referrerUrl) &&
        Objects.equals(this.subid, registerAffiliateClickRequest.subid) &&
        Objects.equals(this.userAgent, registerAffiliateClickRequest.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affid, ipAddress, landingPageUrl, referrerUrl, subid, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAffiliateClickRequest {\n");
    sb.append("    affid: ").append(toIndentedString(affid)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    landingPageUrl: ").append(toIndentedString(landingPageUrl)).append("\n");
    sb.append("    referrerUrl: ").append(toIndentedString(referrerUrl)).append("\n");
    sb.append("    subid: ").append(toIndentedString(subid)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affid");
    openapiFields.add("ip_address");
    openapiFields.add("landing_page_url");
    openapiFields.add("referrer_url");
    openapiFields.add("subid");
    openapiFields.add("user_agent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegisterAffiliateClickRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RegisterAffiliateClickRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterAffiliateClickRequest is not found in the empty JSON string", RegisterAffiliateClickRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegisterAffiliateClickRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterAffiliateClickRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if (jsonObj.get("landing_page_url") != null && !jsonObj.get("landing_page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `landing_page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("landing_page_url").toString()));
      }
      if (jsonObj.get("referrer_url") != null && !jsonObj.get("referrer_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referrer_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referrer_url").toString()));
      }
      if (jsonObj.get("subid") != null && !jsonObj.get("subid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subid").toString()));
      }
      if (jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterAffiliateClickRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterAffiliateClickRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterAffiliateClickRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterAffiliateClickRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterAffiliateClickRequest>() {
           @Override
           public void write(JsonWriter out, RegisterAffiliateClickRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterAffiliateClickRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisterAffiliateClickRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisterAffiliateClickRequest
  * @throws IOException if the JSON string is invalid with respect to RegisterAffiliateClickRequest
  */
  public static RegisterAffiliateClickRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterAffiliateClickRequest.class);
  }

 /**
  * Convert an instance of RegisterAffiliateClickRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


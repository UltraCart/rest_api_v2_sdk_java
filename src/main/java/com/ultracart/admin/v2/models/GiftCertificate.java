/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.GiftCertificateLedgerEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * GiftCertificate
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-06T11:07:46.503-05:00")



public class GiftCertificate {
  @SerializedName("activated")
  private Boolean activated = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("customer_profile_oid")
  private Integer customerProfileOid = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("expiration_dts")
  private String expirationDts = null;

  @SerializedName("gift_certificate_oid")
  private Integer giftCertificateOid = null;

  @SerializedName("internal")
  private Boolean internal = null;

  @SerializedName("ledger_entries")
  private List<GiftCertificateLedgerEntry> ledgerEntries = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("merchant_note")
  private String merchantNote = null;

  @SerializedName("original_balance")
  private BigDecimal originalBalance = null;

  @SerializedName("reference_order_id")
  private String referenceOrderId = null;

  @SerializedName("remaining_balance")
  private BigDecimal remainingBalance = null;

  public GiftCertificate activated(Boolean activated) {
    this.activated = activated;
    return this;
  }

   /**
   * True if this gift certificate is activated and ready to apply to purchases.
   * @return activated
  **/
  @ApiModelProperty(value = "True if this gift certificate is activated and ready to apply to purchases.")
  public Boolean isActivated() {
    return activated;
  }

  public void setActivated(Boolean activated) {
    this.activated = activated;
  }

  public GiftCertificate code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The code used by the customer to purchase against this gift certificate.
   * @return code
  **/
  @ApiModelProperty(value = "The code used by the customer to purchase against this gift certificate.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public GiftCertificate customerProfileOid(Integer customerProfileOid) {
    this.customerProfileOid = customerProfileOid;
    return this;
  }

   /**
   * This is the customer profile oid associated with this internally managed gift certificate.
   * @return customerProfileOid
  **/
  @ApiModelProperty(value = "This is the customer profile oid associated with this internally managed gift certificate.")
  public Integer getCustomerProfileOid() {
    return customerProfileOid;
  }

  public void setCustomerProfileOid(Integer customerProfileOid) {
    this.customerProfileOid = customerProfileOid;
  }

  public GiftCertificate deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * True if this gift certificate was deleted.
   * @return deleted
  **/
  @ApiModelProperty(value = "True if this gift certificate was deleted.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public GiftCertificate email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Email of the customer associated with this gift certificate.
   * @return email
  **/
  @ApiModelProperty(value = "Email of the customer associated with this gift certificate.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public GiftCertificate expirationDts(String expirationDts) {
    this.expirationDts = expirationDts;
    return this;
  }

   /**
   * Expiration date time.
   * @return expirationDts
  **/
  @ApiModelProperty(value = "Expiration date time.")
  public String getExpirationDts() {
    return expirationDts;
  }

  public void setExpirationDts(String expirationDts) {
    this.expirationDts = expirationDts;
  }

  public GiftCertificate giftCertificateOid(Integer giftCertificateOid) {
    this.giftCertificateOid = giftCertificateOid;
    return this;
  }

   /**
   * Gift certificate oid.
   * @return giftCertificateOid
  **/
  @ApiModelProperty(value = "Gift certificate oid.")
  public Integer getGiftCertificateOid() {
    return giftCertificateOid;
  }

  public void setGiftCertificateOid(Integer giftCertificateOid) {
    this.giftCertificateOid = giftCertificateOid;
  }

  public GiftCertificate internal(Boolean internal) {
    this.internal = internal;
    return this;
  }

   /**
   * This is an internally managed gift certificate associated with the loyalty cash rewards program.
   * @return internal
  **/
  @ApiModelProperty(value = "This is an internally managed gift certificate associated with the loyalty cash rewards program.")
  public Boolean isInternal() {
    return internal;
  }

  public void setInternal(Boolean internal) {
    this.internal = internal;
  }

  public GiftCertificate ledgerEntries(List<GiftCertificateLedgerEntry> ledgerEntries) {
    this.ledgerEntries = ledgerEntries;
    return this;
  }

  public GiftCertificate addLedgerEntriesItem(GiftCertificateLedgerEntry ledgerEntriesItem) {
    if (this.ledgerEntries == null) {
      this.ledgerEntries = new ArrayList<GiftCertificateLedgerEntry>();
    }
    this.ledgerEntries.add(ledgerEntriesItem);
    return this;
  }

   /**
   * A list of all ledger activity for this gift certificate.
   * @return ledgerEntries
  **/
  @ApiModelProperty(value = "A list of all ledger activity for this gift certificate.")
  public List<GiftCertificateLedgerEntry> getLedgerEntries() {
    return ledgerEntries;
  }

  public void setLedgerEntries(List<GiftCertificateLedgerEntry> ledgerEntries) {
    this.ledgerEntries = ledgerEntries;
  }

  public GiftCertificate merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant Id
   * @return merchantId
  **/
  @ApiModelProperty(value = "Merchant Id")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public GiftCertificate merchantNote(String merchantNote) {
    this.merchantNote = merchantNote;
    return this;
  }

   /**
   * A list of all ledger activity for this gift certificate.
   * @return merchantNote
  **/
  @ApiModelProperty(value = "A list of all ledger activity for this gift certificate.")
  public String getMerchantNote() {
    return merchantNote;
  }

  public void setMerchantNote(String merchantNote) {
    this.merchantNote = merchantNote;
  }

  public GiftCertificate originalBalance(BigDecimal originalBalance) {
    this.originalBalance = originalBalance;
    return this;
  }

   /**
   * Original balance of the gift certificate.
   * @return originalBalance
  **/
  @ApiModelProperty(value = "Original balance of the gift certificate.")
  public BigDecimal getOriginalBalance() {
    return originalBalance;
  }

  public void setOriginalBalance(BigDecimal originalBalance) {
    this.originalBalance = originalBalance;
  }

  public GiftCertificate referenceOrderId(String referenceOrderId) {
    this.referenceOrderId = referenceOrderId;
    return this;
  }

   /**
   * The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger
   * @return referenceOrderId
  **/
  @ApiModelProperty(value = "The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger")
  public String getReferenceOrderId() {
    return referenceOrderId;
  }

  public void setReferenceOrderId(String referenceOrderId) {
    this.referenceOrderId = referenceOrderId;
  }

  public GiftCertificate remainingBalance(BigDecimal remainingBalance) {
    this.remainingBalance = remainingBalance;
    return this;
  }

   /**
   * The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.
   * @return remainingBalance
  **/
  @ApiModelProperty(value = "The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.")
  public BigDecimal getRemainingBalance() {
    return remainingBalance;
  }

  public void setRemainingBalance(BigDecimal remainingBalance) {
    this.remainingBalance = remainingBalance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCertificate giftCertificate = (GiftCertificate) o;
    return Objects.equals(this.activated, giftCertificate.activated) &&
        Objects.equals(this.code, giftCertificate.code) &&
        Objects.equals(this.customerProfileOid, giftCertificate.customerProfileOid) &&
        Objects.equals(this.deleted, giftCertificate.deleted) &&
        Objects.equals(this.email, giftCertificate.email) &&
        Objects.equals(this.expirationDts, giftCertificate.expirationDts) &&
        Objects.equals(this.giftCertificateOid, giftCertificate.giftCertificateOid) &&
        Objects.equals(this.internal, giftCertificate.internal) &&
        Objects.equals(this.ledgerEntries, giftCertificate.ledgerEntries) &&
        Objects.equals(this.merchantId, giftCertificate.merchantId) &&
        Objects.equals(this.merchantNote, giftCertificate.merchantNote) &&
        Objects.equals(this.originalBalance, giftCertificate.originalBalance) &&
        Objects.equals(this.referenceOrderId, giftCertificate.referenceOrderId) &&
        Objects.equals(this.remainingBalance, giftCertificate.remainingBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activated, code, customerProfileOid, deleted, email, expirationDts, giftCertificateOid, internal, ledgerEntries, merchantId, merchantNote, originalBalance, referenceOrderId, remainingBalance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCertificate {\n");
    
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    customerProfileOid: ").append(toIndentedString(customerProfileOid)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expirationDts: ").append(toIndentedString(expirationDts)).append("\n");
    sb.append("    giftCertificateOid: ").append(toIndentedString(giftCertificateOid)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    ledgerEntries: ").append(toIndentedString(ledgerEntries)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantNote: ").append(toIndentedString(merchantNote)).append("\n");
    sb.append("    originalBalance: ").append(toIndentedString(originalBalance)).append("\n");
    sb.append("    referenceOrderId: ").append(toIndentedString(referenceOrderId)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.GiftCertificateLedgerEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * GiftCertificate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-05T15:29:49.672-04:00[America/Indianapolis]")
public class GiftCertificate {
  public static final String SERIALIZED_NAME_ACTIVATED = "activated";
  @SerializedName(SERIALIZED_NAME_ACTIVATED)
  private Boolean activated;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILE_OID = "customer_profile_oid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILE_OID)
  private Integer customerProfileOid;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION_DTS = "expiration_dts";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DTS)
  private String expirationDts;

  public static final String SERIALIZED_NAME_GIFT_CERTIFICATE_OID = "gift_certificate_oid";
  @SerializedName(SERIALIZED_NAME_GIFT_CERTIFICATE_OID)
  private Integer giftCertificateOid;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private Boolean internal;

  public static final String SERIALIZED_NAME_LEDGER_ENTRIES = "ledger_entries";
  @SerializedName(SERIALIZED_NAME_LEDGER_ENTRIES)
  private List<GiftCertificateLedgerEntry> ledgerEntries = null;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MERCHANT_NOTE = "merchant_note";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NOTE)
  private String merchantNote;

  public static final String SERIALIZED_NAME_ORIGINAL_BALANCE = "original_balance";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_BALANCE)
  private BigDecimal originalBalance;

  public static final String SERIALIZED_NAME_REFERENCE_ORDER_ID = "reference_order_id";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ORDER_ID)
  private String referenceOrderId;

  public static final String SERIALIZED_NAME_REMAINING_BALANCE = "remaining_balance";
  @SerializedName(SERIALIZED_NAME_REMAINING_BALANCE)
  private BigDecimal remainingBalance;

  public GiftCertificate() { 
  }

  public GiftCertificate activated(Boolean activated) {
    
    this.activated = activated;
    return this;
  }

   /**
   * True if this gift certificate is activated and ready to apply to purchases.
   * @return activated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this gift certificate is activated and ready to apply to purchases.")

  public Boolean getActivated() {
    return activated;
  }


  public void setActivated(Boolean activated) {
    this.activated = activated;
  }


  public GiftCertificate code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * The code used by the customer to purchase against this gift certificate.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The code used by the customer to purchase against this gift certificate.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public GiftCertificate customerProfileOid(Integer customerProfileOid) {
    
    this.customerProfileOid = customerProfileOid;
    return this;
  }

   /**
   * This is the customer profile oid associated with this internally managed gift certificate.
   * @return customerProfileOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the customer profile oid associated with this internally managed gift certificate.")

  public Integer getCustomerProfileOid() {
    return customerProfileOid;
  }


  public void setCustomerProfileOid(Integer customerProfileOid) {
    this.customerProfileOid = customerProfileOid;
  }


  public GiftCertificate deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * True if this gift certificate was deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this gift certificate was deleted.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public GiftCertificate email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email of the customer associated with this gift certificate.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email of the customer associated with this gift certificate.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public GiftCertificate expirationDts(String expirationDts) {
    
    this.expirationDts = expirationDts;
    return this;
  }

   /**
   * Expiration date time.
   * @return expirationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date time.")

  public String getExpirationDts() {
    return expirationDts;
  }


  public void setExpirationDts(String expirationDts) {
    this.expirationDts = expirationDts;
  }


  public GiftCertificate giftCertificateOid(Integer giftCertificateOid) {
    
    this.giftCertificateOid = giftCertificateOid;
    return this;
  }

   /**
   * Gift certificate oid.
   * @return giftCertificateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gift certificate oid.")

  public Integer getGiftCertificateOid() {
    return giftCertificateOid;
  }


  public void setGiftCertificateOid(Integer giftCertificateOid) {
    this.giftCertificateOid = giftCertificateOid;
  }


  public GiftCertificate internal(Boolean internal) {
    
    this.internal = internal;
    return this;
  }

   /**
   * This is an internally managed gift certificate associated with the loyalty cash rewards program.
   * @return internal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is an internally managed gift certificate associated with the loyalty cash rewards program.")

  public Boolean getInternal() {
    return internal;
  }


  public void setInternal(Boolean internal) {
    this.internal = internal;
  }


  public GiftCertificate ledgerEntries(List<GiftCertificateLedgerEntry> ledgerEntries) {
    
    this.ledgerEntries = ledgerEntries;
    return this;
  }

  public GiftCertificate addLedgerEntriesItem(GiftCertificateLedgerEntry ledgerEntriesItem) {
    if (this.ledgerEntries == null) {
      this.ledgerEntries = new ArrayList<>();
    }
    this.ledgerEntries.add(ledgerEntriesItem);
    return this;
  }

   /**
   * A list of all ledger activity for this gift certificate.
   * @return ledgerEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of all ledger activity for this gift certificate.")

  public List<GiftCertificateLedgerEntry> getLedgerEntries() {
    return ledgerEntries;
  }


  public void setLedgerEntries(List<GiftCertificateLedgerEntry> ledgerEntries) {
    this.ledgerEntries = ledgerEntries;
  }


  public GiftCertificate merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant Id
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant Id")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public GiftCertificate merchantNote(String merchantNote) {
    
    this.merchantNote = merchantNote;
    return this;
  }

   /**
   * A list of all ledger activity for this gift certificate.
   * @return merchantNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of all ledger activity for this gift certificate.")

  public String getMerchantNote() {
    return merchantNote;
  }


  public void setMerchantNote(String merchantNote) {
    this.merchantNote = merchantNote;
  }


  public GiftCertificate originalBalance(BigDecimal originalBalance) {
    
    this.originalBalance = originalBalance;
    return this;
  }

   /**
   * Original balance of the gift certificate.
   * @return originalBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Original balance of the gift certificate.")

  public BigDecimal getOriginalBalance() {
    return originalBalance;
  }


  public void setOriginalBalance(BigDecimal originalBalance) {
    this.originalBalance = originalBalance;
  }


  public GiftCertificate referenceOrderId(String referenceOrderId) {
    
    this.referenceOrderId = referenceOrderId;
    return this;
  }

   /**
   * The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger
   * @return referenceOrderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger")

  public String getReferenceOrderId() {
    return referenceOrderId;
  }


  public void setReferenceOrderId(String referenceOrderId) {
    this.referenceOrderId = referenceOrderId;
  }


  public GiftCertificate remainingBalance(BigDecimal remainingBalance) {
    
    this.remainingBalance = remainingBalance;
    return this;
  }

   /**
   * The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.
   * @return remainingBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.")

  public BigDecimal getRemainingBalance() {
    return remainingBalance;
  }


  public void setRemainingBalance(BigDecimal remainingBalance) {
    this.remainingBalance = remainingBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCertificate giftCertificate = (GiftCertificate) o;
    return Objects.equals(this.activated, giftCertificate.activated) &&
        Objects.equals(this.code, giftCertificate.code) &&
        Objects.equals(this.customerProfileOid, giftCertificate.customerProfileOid) &&
        Objects.equals(this.deleted, giftCertificate.deleted) &&
        Objects.equals(this.email, giftCertificate.email) &&
        Objects.equals(this.expirationDts, giftCertificate.expirationDts) &&
        Objects.equals(this.giftCertificateOid, giftCertificate.giftCertificateOid) &&
        Objects.equals(this.internal, giftCertificate.internal) &&
        Objects.equals(this.ledgerEntries, giftCertificate.ledgerEntries) &&
        Objects.equals(this.merchantId, giftCertificate.merchantId) &&
        Objects.equals(this.merchantNote, giftCertificate.merchantNote) &&
        Objects.equals(this.originalBalance, giftCertificate.originalBalance) &&
        Objects.equals(this.referenceOrderId, giftCertificate.referenceOrderId) &&
        Objects.equals(this.remainingBalance, giftCertificate.remainingBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activated, code, customerProfileOid, deleted, email, expirationDts, giftCertificateOid, internal, ledgerEntries, merchantId, merchantNote, originalBalance, referenceOrderId, remainingBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCertificate {\n");
    sb.append("    activated: ").append(toIndentedString(activated)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    customerProfileOid: ").append(toIndentedString(customerProfileOid)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expirationDts: ").append(toIndentedString(expirationDts)).append("\n");
    sb.append("    giftCertificateOid: ").append(toIndentedString(giftCertificateOid)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    ledgerEntries: ").append(toIndentedString(ledgerEntries)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    merchantNote: ").append(toIndentedString(merchantNote)).append("\n");
    sb.append("    originalBalance: ").append(toIndentedString(originalBalance)).append("\n");
    sb.append("    referenceOrderId: ").append(toIndentedString(referenceOrderId)).append("\n");
    sb.append("    remainingBalance: ").append(toIndentedString(remainingBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activated");
    openapiFields.add("code");
    openapiFields.add("customer_profile_oid");
    openapiFields.add("deleted");
    openapiFields.add("email");
    openapiFields.add("expiration_dts");
    openapiFields.add("gift_certificate_oid");
    openapiFields.add("internal");
    openapiFields.add("ledger_entries");
    openapiFields.add("merchant_id");
    openapiFields.add("merchant_note");
    openapiFields.add("original_balance");
    openapiFields.add("reference_order_id");
    openapiFields.add("remaining_balance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GiftCertificate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GiftCertificate.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftCertificate is not found in the empty JSON string", GiftCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GiftCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftCertificate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("expiration_dts") != null && !jsonObj.get("expiration_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_dts").toString()));
      }
      JsonArray jsonArrayledgerEntries = jsonObj.getAsJsonArray("ledger_entries");
      if (jsonArrayledgerEntries != null) {
        // ensure the json data is an array
        if (!jsonObj.get("ledger_entries").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `ledger_entries` to be an array in the JSON string but got `%s`", jsonObj.get("ledger_entries").toString()));
        }

        // validate the optional field `ledger_entries` (array)
        for (int i = 0; i < jsonArrayledgerEntries.size(); i++) {
          GiftCertificateLedgerEntry.validateJsonObject(jsonArrayledgerEntries.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("merchant_note") != null && !jsonObj.get("merchant_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_note").toString()));
      }
      if (jsonObj.get("reference_order_id") != null && !jsonObj.get("reference_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_order_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftCertificate>() {
           @Override
           public void write(JsonWriter out, GiftCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftCertificate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GiftCertificate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GiftCertificate
  * @throws IOException if the JSON string is invalid with respect to GiftCertificate
  */
  public static GiftCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftCertificate.class);
  }

 /**
  * Convert an instance of GiftCertificate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


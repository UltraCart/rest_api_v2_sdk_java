/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.LinkedAccount;
import com.ultracart.admin.v2.models.Notification;
import com.ultracart.admin.v2.models.Permission;
import com.ultracart.admin.v2.models.UserGroupMembership;
import com.ultracart.admin.v2.models.UserLogin;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-05T15:48:24.518-04:00[America/Indianapolis]")
public class User {
  public static final String SERIALIZED_NAME_API_IP_ADDRESS_MASKS = "api_ip_address_masks";
  @SerializedName(SERIALIZED_NAME_API_IP_ADDRESS_MASKS)
  private List<String> apiIpAddressMasks = null;

  public static final String SERIALIZED_NAME_CHANGE_FTP_PASSWORD_TO = "change_ftp_password_to";
  @SerializedName(SERIALIZED_NAME_CHANGE_FTP_PASSWORD_TO)
  private String changeFtpPasswordTo;

  public static final String SERIALIZED_NAME_CHANGE_PASSWORD_TO = "change_password_to";
  @SerializedName(SERIALIZED_NAME_CHANGE_PASSWORD_TO)
  private String changePasswordTo;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<UserGroupMembership> groups = null;

  public static final String SERIALIZED_NAME_LINKED_ACCOUNTS = "linked_accounts";
  @SerializedName(SERIALIZED_NAME_LINKED_ACCOUNTS)
  private List<LinkedAccount> linkedAccounts = null;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_LOGIN_HISTORIES = "login_histories";
  @SerializedName(SERIALIZED_NAME_LOGIN_HISTORIES)
  private List<UserLogin> loginHistories = null;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<Notification> notifications = null;

  public static final String SERIALIZED_NAME_OTP_SERIAL_NUMBER = "otp_serial_number";
  @SerializedName(SERIALIZED_NAME_OTP_SERIAL_NUMBER)
  private String otpSerialNumber;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<Permission> permissions = null;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public User() { 
  }

  public User apiIpAddressMasks(List<String> apiIpAddressMasks) {
    
    this.apiIpAddressMasks = apiIpAddressMasks;
    return this;
  }

  public User addApiIpAddressMasksItem(String apiIpAddressMasksItem) {
    if (this.apiIpAddressMasks == null) {
      this.apiIpAddressMasks = new ArrayList<>();
    }
    this.apiIpAddressMasks.add(apiIpAddressMasksItem);
    return this;
  }

   /**
   * A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.
   * @return apiIpAddressMasks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.")

  public List<String> getApiIpAddressMasks() {
    return apiIpAddressMasks;
  }


  public void setApiIpAddressMasks(List<String> apiIpAddressMasks) {
    this.apiIpAddressMasks = apiIpAddressMasks;
  }


  public User changeFtpPasswordTo(String changeFtpPasswordTo) {
    
    this.changeFtpPasswordTo = changeFtpPasswordTo;
    return this;
  }

   /**
   * Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.
   * @return changeFtpPasswordTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.")

  public String getChangeFtpPasswordTo() {
    return changeFtpPasswordTo;
  }


  public void setChangeFtpPasswordTo(String changeFtpPasswordTo) {
    this.changeFtpPasswordTo = changeFtpPasswordTo;
  }


  public User changePasswordTo(String changePasswordTo) {
    
    this.changePasswordTo = changePasswordTo;
    return this;
  }

   /**
   * Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.
   * @return changePasswordTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.")

  public String getChangePasswordTo() {
    return changePasswordTo;
  }


  public void setChangePasswordTo(String changePasswordTo) {
    this.changePasswordTo = changePasswordTo;
  }


  public User email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email address of user
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address of user")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public User fullName(String fullName) {
    
    this.fullName = fullName;
    return this;
  }

   /**
   * Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public User groups(List<UserGroupMembership> groups) {
    
    this.groups = groups;
    return this;
  }

  public User addGroupsItem(UserGroupMembership groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * A list of groups for this merchant and whether or not this user is a member of those groups.
   * @return groups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of groups for this merchant and whether or not this user is a member of those groups.")

  public List<UserGroupMembership> getGroups() {
    return groups;
  }


  public void setGroups(List<UserGroupMembership> groups) {
    this.groups = groups;
  }


  public User linkedAccounts(List<LinkedAccount> linkedAccounts) {
    
    this.linkedAccounts = linkedAccounts;
    return this;
  }

  public User addLinkedAccountsItem(LinkedAccount linkedAccountsItem) {
    if (this.linkedAccounts == null) {
      this.linkedAccounts = new ArrayList<>();
    }
    this.linkedAccounts.add(linkedAccountsItem);
    return this;
  }

   /**
   * A list of linked accounts and whether or not this user is mirrored to any of those accounts.
   * @return linkedAccounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of linked accounts and whether or not this user is mirrored to any of those accounts.")

  public List<LinkedAccount> getLinkedAccounts() {
    return linkedAccounts;
  }


  public void setLinkedAccounts(List<LinkedAccount> linkedAccounts) {
    this.linkedAccounts = linkedAccounts;
  }


  public User login(String login) {
    
    this.login = login;
    return this;
  }

   /**
   * User name of user.  Must be unique across a merchant account.
   * @return login
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User name of user.  Must be unique across a merchant account.")

  public String getLogin() {
    return login;
  }


  public void setLogin(String login) {
    this.login = login;
  }


  public User loginHistories(List<UserLogin> loginHistories) {
    
    this.loginHistories = loginHistories;
    return this;
  }

  public User addLoginHistoriesItem(UserLogin loginHistoriesItem) {
    if (this.loginHistories == null) {
      this.loginHistories = new ArrayList<>();
    }
    this.loginHistories.add(loginHistoriesItem);
    return this;
  }

   /**
   * A list of user logins over the past 90 days
   * @return loginHistories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of user logins over the past 90 days")

  public List<UserLogin> getLoginHistories() {
    return loginHistories;
  }


  public void setLoginHistories(List<UserLogin> loginHistories) {
    this.loginHistories = loginHistories;
  }


  public User notifications(List<Notification> notifications) {
    
    this.notifications = notifications;
    return this;
  }

  public User addNotificationsItem(Notification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * A list of notifications the user receives.
   * @return notifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of notifications the user receives.")

  public List<Notification> getNotifications() {
    return notifications;
  }


  public void setNotifications(List<Notification> notifications) {
    this.notifications = notifications;
  }


  public User otpSerialNumber(String otpSerialNumber) {
    
    this.otpSerialNumber = otpSerialNumber;
    return this;
  }

   /**
   * OTP Serial Number such as Google Authenticator or Crypto Card.
   * @return otpSerialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OTP Serial Number such as Google Authenticator or Crypto Card.")

  public String getOtpSerialNumber() {
    return otpSerialNumber;
  }


  public void setOtpSerialNumber(String otpSerialNumber) {
    this.otpSerialNumber = otpSerialNumber;
  }


  public User permissions(List<Permission> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public User addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * A list of permissions the user enjoys for accessing the backend of UltraCart.
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of permissions the user enjoys for accessing the backend of UltraCart.")

  public List<Permission> getPermissions() {
    return permissions;
  }


  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }


  public User phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public User userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User id is a unique identifier for this user
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User id is a unique identifier for this user")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.apiIpAddressMasks, user.apiIpAddressMasks) &&
        Objects.equals(this.changeFtpPasswordTo, user.changeFtpPasswordTo) &&
        Objects.equals(this.changePasswordTo, user.changePasswordTo) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.fullName, user.fullName) &&
        Objects.equals(this.groups, user.groups) &&
        Objects.equals(this.linkedAccounts, user.linkedAccounts) &&
        Objects.equals(this.login, user.login) &&
        Objects.equals(this.loginHistories, user.loginHistories) &&
        Objects.equals(this.notifications, user.notifications) &&
        Objects.equals(this.otpSerialNumber, user.otpSerialNumber) &&
        Objects.equals(this.permissions, user.permissions) &&
        Objects.equals(this.phone, user.phone) &&
        Objects.equals(this.userId, user.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiIpAddressMasks, changeFtpPasswordTo, changePasswordTo, email, fullName, groups, linkedAccounts, login, loginHistories, notifications, otpSerialNumber, permissions, phone, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    apiIpAddressMasks: ").append(toIndentedString(apiIpAddressMasks)).append("\n");
    sb.append("    changeFtpPasswordTo: ").append(toIndentedString(changeFtpPasswordTo)).append("\n");
    sb.append("    changePasswordTo: ").append(toIndentedString(changePasswordTo)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    linkedAccounts: ").append(toIndentedString(linkedAccounts)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    loginHistories: ").append(toIndentedString(loginHistories)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    otpSerialNumber: ").append(toIndentedString(otpSerialNumber)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_ip_address_masks");
    openapiFields.add("change_ftp_password_to");
    openapiFields.add("change_password_to");
    openapiFields.add("email");
    openapiFields.add("full_name");
    openapiFields.add("groups");
    openapiFields.add("linked_accounts");
    openapiFields.add("login");
    openapiFields.add("login_histories");
    openapiFields.add("notifications");
    openapiFields.add("otp_serial_number");
    openapiFields.add("permissions");
    openapiFields.add("phone");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (User.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("api_ip_address_masks") != null && !jsonObj.get("api_ip_address_masks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_ip_address_masks` to be an array in the JSON string but got `%s`", jsonObj.get("api_ip_address_masks").toString()));
      }
      if (jsonObj.get("change_ftp_password_to") != null && !jsonObj.get("change_ftp_password_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_ftp_password_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_ftp_password_to").toString()));
      }
      if (jsonObj.get("change_password_to") != null && !jsonObj.get("change_password_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_password_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_password_to").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      if (jsonArraygroups != null) {
        // ensure the json data is an array
        if (!jsonObj.get("groups").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
        }

        // validate the optional field `groups` (array)
        for (int i = 0; i < jsonArraygroups.size(); i++) {
          UserGroupMembership.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraylinkedAccounts = jsonObj.getAsJsonArray("linked_accounts");
      if (jsonArraylinkedAccounts != null) {
        // ensure the json data is an array
        if (!jsonObj.get("linked_accounts").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `linked_accounts` to be an array in the JSON string but got `%s`", jsonObj.get("linked_accounts").toString()));
        }

        // validate the optional field `linked_accounts` (array)
        for (int i = 0; i < jsonArraylinkedAccounts.size(); i++) {
          LinkedAccount.validateJsonObject(jsonArraylinkedAccounts.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("login") != null && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      JsonArray jsonArrayloginHistories = jsonObj.getAsJsonArray("login_histories");
      if (jsonArrayloginHistories != null) {
        // ensure the json data is an array
        if (!jsonObj.get("login_histories").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `login_histories` to be an array in the JSON string but got `%s`", jsonObj.get("login_histories").toString()));
        }

        // validate the optional field `login_histories` (array)
        for (int i = 0; i < jsonArrayloginHistories.size(); i++) {
          UserLogin.validateJsonObject(jsonArrayloginHistories.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
      if (jsonArraynotifications != null) {
        // ensure the json data is an array
        if (!jsonObj.get("notifications").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
        }

        // validate the optional field `notifications` (array)
        for (int i = 0; i < jsonArraynotifications.size(); i++) {
          Notification.validateJsonObject(jsonArraynotifications.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("otp_serial_number") != null && !jsonObj.get("otp_serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otp_serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otp_serial_number").toString()));
      }
      JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
      if (jsonArraypermissions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("permissions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
        }

        // validate the optional field `permissions` (array)
        for (int i = 0; i < jsonArraypermissions.size(); i++) {
          Permission.validateJsonObject(jsonArraypermissions.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User
  * @throws IOException if the JSON string is invalid with respect to User
  */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

 /**
  * Convert an instance of User to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportDataSourceSchema;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportDataSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:19:33.697-04:00[America/Indianapolis]")
public class ReportDataSource {
  public static final String SERIALIZED_NAME_DATA_SOURCE_UUID = "data_source_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_UUID)
  private String dataSourceUuid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTITION_DATE_COLUMN = "partition_date_column";
  @SerializedName(SERIALIZED_NAME_PARTITION_DATE_COLUMN)
  private String partitionDateColumn;

  public static final String SERIALIZED_NAME_PARTITION_DATE_SAFETY_DAYS = "partition_date_safety_days";
  @SerializedName(SERIALIZED_NAME_PARTITION_DATE_SAFETY_DAYS)
  private Integer partitionDateSafetyDays;

  public static final String SERIALIZED_NAME_PARTITION_DATE_STRATEGY = "partition_date_strategy";
  @SerializedName(SERIALIZED_NAME_PARTITION_DATE_STRATEGY)
  private String partitionDateStrategy;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private List<ReportDataSourceSchema> schema = null;

  public static final String SERIALIZED_NAME_SQL = "sql";
  @SerializedName(SERIALIZED_NAME_SQL)
  private String sql;

  public ReportDataSource() { 
  }

  public ReportDataSource dataSourceUuid(String dataSourceUuid) {
    
    this.dataSourceUuid = dataSourceUuid;
    return this;
  }

   /**
   * A unique identifier assigned to the data source.
   * @return dataSourceUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique identifier assigned to the data source.")

  public String getDataSourceUuid() {
    return dataSourceUuid;
  }


  public void setDataSourceUuid(String dataSourceUuid) {
    this.dataSourceUuid = dataSourceUuid;
  }


  public ReportDataSource name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ReportDataSource partitionDateColumn(String partitionDateColumn) {
    
    this.partitionDateColumn = partitionDateColumn;
    return this;
  }

   /**
   * Get partitionDateColumn
   * @return partitionDateColumn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPartitionDateColumn() {
    return partitionDateColumn;
  }


  public void setPartitionDateColumn(String partitionDateColumn) {
    this.partitionDateColumn = partitionDateColumn;
  }


  public ReportDataSource partitionDateSafetyDays(Integer partitionDateSafetyDays) {
    
    this.partitionDateSafetyDays = partitionDateSafetyDays;
    return this;
  }

   /**
   * Get partitionDateSafetyDays
   * @return partitionDateSafetyDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPartitionDateSafetyDays() {
    return partitionDateSafetyDays;
  }


  public void setPartitionDateSafetyDays(Integer partitionDateSafetyDays) {
    this.partitionDateSafetyDays = partitionDateSafetyDays;
  }


  public ReportDataSource partitionDateStrategy(String partitionDateStrategy) {
    
    this.partitionDateStrategy = partitionDateStrategy;
    return this;
  }

   /**
   * The partition date strategy, defaults to weekly sunday
   * @return partitionDateStrategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The partition date strategy, defaults to weekly sunday")

  public String getPartitionDateStrategy() {
    return partitionDateStrategy;
  }


  public void setPartitionDateStrategy(String partitionDateStrategy) {
    this.partitionDateStrategy = partitionDateStrategy;
  }


  public ReportDataSource schema(List<ReportDataSourceSchema> schema) {
    
    this.schema = schema;
    return this;
  }

  public ReportDataSource addSchemaItem(ReportDataSourceSchema schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<>();
    }
    this.schema.add(schemaItem);
    return this;
  }

   /**
   * Get schema
   * @return schema
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportDataSourceSchema> getSchema() {
    return schema;
  }


  public void setSchema(List<ReportDataSourceSchema> schema) {
    this.schema = schema;
  }


  public ReportDataSource sql(String sql) {
    
    this.sql = sql;
    return this;
  }

   /**
   * Get sql
   * @return sql
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSql() {
    return sql;
  }


  public void setSql(String sql) {
    this.sql = sql;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportDataSource reportDataSource = (ReportDataSource) o;
    return Objects.equals(this.dataSourceUuid, reportDataSource.dataSourceUuid) &&
        Objects.equals(this.name, reportDataSource.name) &&
        Objects.equals(this.partitionDateColumn, reportDataSource.partitionDateColumn) &&
        Objects.equals(this.partitionDateSafetyDays, reportDataSource.partitionDateSafetyDays) &&
        Objects.equals(this.partitionDateStrategy, reportDataSource.partitionDateStrategy) &&
        Objects.equals(this.schema, reportDataSource.schema) &&
        Objects.equals(this.sql, reportDataSource.sql);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceUuid, name, partitionDateColumn, partitionDateSafetyDays, partitionDateStrategy, schema, sql);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportDataSource {\n");
    sb.append("    dataSourceUuid: ").append(toIndentedString(dataSourceUuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partitionDateColumn: ").append(toIndentedString(partitionDateColumn)).append("\n");
    sb.append("    partitionDateSafetyDays: ").append(toIndentedString(partitionDateSafetyDays)).append("\n");
    sb.append("    partitionDateStrategy: ").append(toIndentedString(partitionDateStrategy)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data_source_uuid");
    openapiFields.add("name");
    openapiFields.add("partition_date_column");
    openapiFields.add("partition_date_safety_days");
    openapiFields.add("partition_date_strategy");
    openapiFields.add("schema");
    openapiFields.add("sql");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportDataSource
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportDataSource.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportDataSource is not found in the empty JSON string", ReportDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportDataSource` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("data_source_uuid") != null && !jsonObj.get("data_source_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_source_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_source_uuid").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("partition_date_column") != null && !jsonObj.get("partition_date_column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition_date_column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition_date_column").toString()));
      }
      if (jsonObj.get("partition_date_strategy") != null && !jsonObj.get("partition_date_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partition_date_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partition_date_strategy").toString()));
      }
      JsonArray jsonArrayschema = jsonObj.getAsJsonArray("schema");
      if (jsonArrayschema != null) {
        // ensure the json data is an array
        if (!jsonObj.get("schema").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `schema` to be an array in the JSON string but got `%s`", jsonObj.get("schema").toString()));
        }

        // validate the optional field `schema` (array)
        for (int i = 0; i < jsonArrayschema.size(); i++) {
          ReportDataSourceSchema.validateJsonObject(jsonArrayschema.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("sql") != null && !jsonObj.get("sql").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportDataSource>() {
           @Override
           public void write(JsonWriter out, ReportDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportDataSource read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportDataSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportDataSource
  * @throws IOException if the JSON string is invalid with respect to ReportDataSource
  */
  public static ReportDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportDataSource.class);
  }

 /**
  * Convert an instance of ReportDataSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


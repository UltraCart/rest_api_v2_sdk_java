/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Mailgun;
import com.ultracart.admin.v2.models.VerificationRecord;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailDomain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-15T09:34:56.995-05:00[America/Indianapolis]")
public class EmailDomain {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_DKIM = "dkim";
  @SerializedName(SERIALIZED_NAME_DKIM)
  private List<VerificationRecord> dkim = null;

  public static final String SERIALIZED_NAME_DKIM_STATUS = "dkim_status";
  @SerializedName(SERIALIZED_NAME_DKIM_STATUS)
  private String dkimStatus;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ESP_DOMAIN_UUID = "esp_domain_uuid";
  @SerializedName(SERIALIZED_NAME_ESP_DOMAIN_UUID)
  private String espDomainUuid;

  public static final String SERIALIZED_NAME_IDENTITY_STATUS = "identity_status";
  @SerializedName(SERIALIZED_NAME_IDENTITY_STATUS)
  private String identityStatus;

  public static final String SERIALIZED_NAME_MAILGUN = "mailgun";
  @SerializedName(SERIALIZED_NAME_MAILGUN)
  private Mailgun mailgun;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_SPF = "spf";
  @SerializedName(SERIALIZED_NAME_SPF)
  private VerificationRecord spf;

  public static final String SERIALIZED_NAME_START_DKIM_DTS = "start_dkim_dts";
  @SerializedName(SERIALIZED_NAME_START_DKIM_DTS)
  private String startDkimDts;

  public static final String SERIALIZED_NAME_START_IDENTITY_DTS = "start_identity_dts";
  @SerializedName(SERIALIZED_NAME_START_IDENTITY_DTS)
  private String startIdentityDts;

  public static final String SERIALIZED_NAME_VERIFICATION = "verification";
  @SerializedName(SERIALIZED_NAME_VERIFICATION)
  private VerificationRecord verification;

  public EmailDomain() { 
  }

  public EmailDomain comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public EmailDomain dkim(List<VerificationRecord> dkim) {
    
    this.dkim = dkim;
    return this;
  }

  public EmailDomain addDkimItem(VerificationRecord dkimItem) {
    if (this.dkim == null) {
      this.dkim = new ArrayList<>();
    }
    this.dkim.add(dkimItem);
    return this;
  }

   /**
   * Get dkim
   * @return dkim
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<VerificationRecord> getDkim() {
    return dkim;
  }


  public void setDkim(List<VerificationRecord> dkim) {
    this.dkim = dkim;
  }


  public EmailDomain dkimStatus(String dkimStatus) {
    
    this.dkimStatus = dkimStatus;
    return this;
  }

   /**
   * Get dkimStatus
   * @return dkimStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDkimStatus() {
    return dkimStatus;
  }


  public void setDkimStatus(String dkimStatus) {
    this.dkimStatus = dkimStatus;
  }


  public EmailDomain domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public EmailDomain espDomainUuid(String espDomainUuid) {
    
    this.espDomainUuid = espDomainUuid;
    return this;
  }

   /**
   * Get espDomainUuid
   * @return espDomainUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEspDomainUuid() {
    return espDomainUuid;
  }


  public void setEspDomainUuid(String espDomainUuid) {
    this.espDomainUuid = espDomainUuid;
  }


  public EmailDomain identityStatus(String identityStatus) {
    
    this.identityStatus = identityStatus;
    return this;
  }

   /**
   * Get identityStatus
   * @return identityStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIdentityStatus() {
    return identityStatus;
  }


  public void setIdentityStatus(String identityStatus) {
    this.identityStatus = identityStatus;
  }


  public EmailDomain mailgun(Mailgun mailgun) {
    
    this.mailgun = mailgun;
    return this;
  }

   /**
   * Get mailgun
   * @return mailgun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Mailgun getMailgun() {
    return mailgun;
  }


  public void setMailgun(Mailgun mailgun) {
    this.mailgun = mailgun;
  }


  public EmailDomain merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public EmailDomain provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * Get provider
   * @return provider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public EmailDomain spf(VerificationRecord spf) {
    
    this.spf = spf;
    return this;
  }

   /**
   * Get spf
   * @return spf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VerificationRecord getSpf() {
    return spf;
  }


  public void setSpf(VerificationRecord spf) {
    this.spf = spf;
  }


  public EmailDomain startDkimDts(String startDkimDts) {
    
    this.startDkimDts = startDkimDts;
    return this;
  }

   /**
   * Get startDkimDts
   * @return startDkimDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartDkimDts() {
    return startDkimDts;
  }


  public void setStartDkimDts(String startDkimDts) {
    this.startDkimDts = startDkimDts;
  }


  public EmailDomain startIdentityDts(String startIdentityDts) {
    
    this.startIdentityDts = startIdentityDts;
    return this;
  }

   /**
   * Get startIdentityDts
   * @return startIdentityDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStartIdentityDts() {
    return startIdentityDts;
  }


  public void setStartIdentityDts(String startIdentityDts) {
    this.startIdentityDts = startIdentityDts;
  }


  public EmailDomain verification(VerificationRecord verification) {
    
    this.verification = verification;
    return this;
  }

   /**
   * Get verification
   * @return verification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VerificationRecord getVerification() {
    return verification;
  }


  public void setVerification(VerificationRecord verification) {
    this.verification = verification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailDomain emailDomain = (EmailDomain) o;
    return Objects.equals(this.comment, emailDomain.comment) &&
        Objects.equals(this.dkim, emailDomain.dkim) &&
        Objects.equals(this.dkimStatus, emailDomain.dkimStatus) &&
        Objects.equals(this.domain, emailDomain.domain) &&
        Objects.equals(this.espDomainUuid, emailDomain.espDomainUuid) &&
        Objects.equals(this.identityStatus, emailDomain.identityStatus) &&
        Objects.equals(this.mailgun, emailDomain.mailgun) &&
        Objects.equals(this.merchantId, emailDomain.merchantId) &&
        Objects.equals(this.provider, emailDomain.provider) &&
        Objects.equals(this.spf, emailDomain.spf) &&
        Objects.equals(this.startDkimDts, emailDomain.startDkimDts) &&
        Objects.equals(this.startIdentityDts, emailDomain.startIdentityDts) &&
        Objects.equals(this.verification, emailDomain.verification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, dkim, dkimStatus, domain, espDomainUuid, identityStatus, mailgun, merchantId, provider, spf, startDkimDts, startIdentityDts, verification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailDomain {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    dkim: ").append(toIndentedString(dkim)).append("\n");
    sb.append("    dkimStatus: ").append(toIndentedString(dkimStatus)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    espDomainUuid: ").append(toIndentedString(espDomainUuid)).append("\n");
    sb.append("    identityStatus: ").append(toIndentedString(identityStatus)).append("\n");
    sb.append("    mailgun: ").append(toIndentedString(mailgun)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    spf: ").append(toIndentedString(spf)).append("\n");
    sb.append("    startDkimDts: ").append(toIndentedString(startDkimDts)).append("\n");
    sb.append("    startIdentityDts: ").append(toIndentedString(startIdentityDts)).append("\n");
    sb.append("    verification: ").append(toIndentedString(verification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("dkim");
    openapiFields.add("dkim_status");
    openapiFields.add("domain");
    openapiFields.add("esp_domain_uuid");
    openapiFields.add("identity_status");
    openapiFields.add("mailgun");
    openapiFields.add("merchant_id");
    openapiFields.add("provider");
    openapiFields.add("spf");
    openapiFields.add("start_dkim_dts");
    openapiFields.add("start_identity_dts");
    openapiFields.add("verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailDomain
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailDomain.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailDomain is not found in the empty JSON string", EmailDomain.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailDomain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailDomain` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      JsonArray jsonArraydkim = jsonObj.getAsJsonArray("dkim");
      if (jsonArraydkim != null) {
        // ensure the json data is an array
        if (!jsonObj.get("dkim").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `dkim` to be an array in the JSON string but got `%s`", jsonObj.get("dkim").toString()));
        }

        // validate the optional field `dkim` (array)
        for (int i = 0; i < jsonArraydkim.size(); i++) {
          VerificationRecord.validateJsonObject(jsonArraydkim.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("dkim_status") != null && !jsonObj.get("dkim_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dkim_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dkim_status").toString()));
      }
      if (jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (jsonObj.get("esp_domain_uuid") != null && !jsonObj.get("esp_domain_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_domain_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_domain_uuid").toString()));
      }
      if (jsonObj.get("identity_status") != null && !jsonObj.get("identity_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_status").toString()));
      }
      // validate the optional field `mailgun`
      if (jsonObj.getAsJsonObject("mailgun") != null) {
        Mailgun.validateJsonObject(jsonObj.getAsJsonObject("mailgun"));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      // validate the optional field `spf`
      if (jsonObj.getAsJsonObject("spf") != null) {
        VerificationRecord.validateJsonObject(jsonObj.getAsJsonObject("spf"));
      }
      if (jsonObj.get("start_dkim_dts") != null && !jsonObj.get("start_dkim_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_dkim_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_dkim_dts").toString()));
      }
      if (jsonObj.get("start_identity_dts") != null && !jsonObj.get("start_identity_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_identity_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_identity_dts").toString()));
      }
      // validate the optional field `verification`
      if (jsonObj.getAsJsonObject("verification") != null) {
        VerificationRecord.validateJsonObject(jsonObj.getAsJsonObject("verification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailDomain>() {
           @Override
           public void write(JsonWriter out, EmailDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailDomain read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailDomain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailDomain
  * @throws IOException if the JSON string is invalid with respect to EmailDomain
  */
  public static EmailDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailDomain.class);
  }

 /**
  * Convert an instance of EmailDomain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


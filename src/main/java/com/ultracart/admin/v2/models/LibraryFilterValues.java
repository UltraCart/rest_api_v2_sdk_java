/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * LibraryFilterValues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-20T11:18:45.077-04:00[America/Indianapolis]")
public class LibraryFilterValues {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = null;

  public static final String SERIALIZED_NAME_INDUSTRIES = "industries";
  @SerializedName(SERIALIZED_NAME_INDUSTRIES)
  private List<String> industries = null;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private List<String> styles = null;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = null;

  public LibraryFilterValues() { 
  }

  public LibraryFilterValues categories(List<String> categories) {
    
    this.categories = categories;
    return this;
  }

  public LibraryFilterValues addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCategories() {
    return categories;
  }


  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public LibraryFilterValues industries(List<String> industries) {
    
    this.industries = industries;
    return this;
  }

  public LibraryFilterValues addIndustriesItem(String industriesItem) {
    if (this.industries == null) {
      this.industries = new ArrayList<>();
    }
    this.industries.add(industriesItem);
    return this;
  }

   /**
   * Get industries
   * @return industries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getIndustries() {
    return industries;
  }


  public void setIndustries(List<String> industries) {
    this.industries = industries;
  }


  public LibraryFilterValues styles(List<String> styles) {
    
    this.styles = styles;
    return this;
  }

  public LibraryFilterValues addStylesItem(String stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

   /**
   * Get styles
   * @return styles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getStyles() {
    return styles;
  }


  public void setStyles(List<String> styles) {
    this.styles = styles;
  }


  public LibraryFilterValues types(List<String> types) {
    
    this.types = types;
    return this;
  }

  public LibraryFilterValues addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTypes() {
    return types;
  }


  public void setTypes(List<String> types) {
    this.types = types;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryFilterValues libraryFilterValues = (LibraryFilterValues) o;
    return Objects.equals(this.categories, libraryFilterValues.categories) &&
        Objects.equals(this.industries, libraryFilterValues.industries) &&
        Objects.equals(this.styles, libraryFilterValues.styles) &&
        Objects.equals(this.types, libraryFilterValues.types);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, industries, styles, types);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryFilterValues {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    industries: ").append(toIndentedString(industries)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("industries");
    openapiFields.add("styles");
    openapiFields.add("types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LibraryFilterValues
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LibraryFilterValues.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LibraryFilterValues is not found in the empty JSON string", LibraryFilterValues.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LibraryFilterValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LibraryFilterValues` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("industries") != null && !jsonObj.get("industries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `industries` to be an array in the JSON string but got `%s`", jsonObj.get("industries").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("styles") != null && !jsonObj.get("styles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `styles` to be an array in the JSON string but got `%s`", jsonObj.get("styles").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LibraryFilterValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LibraryFilterValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LibraryFilterValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LibraryFilterValues.class));

       return (TypeAdapter<T>) new TypeAdapter<LibraryFilterValues>() {
           @Override
           public void write(JsonWriter out, LibraryFilterValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LibraryFilterValues read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LibraryFilterValues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LibraryFilterValues
  * @throws IOException if the JSON string is invalid with respect to LibraryFilterValues
  */
  public static LibraryFilterValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LibraryFilterValues.class);
  }

 /**
  * Convert an instance of LibraryFilterValues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


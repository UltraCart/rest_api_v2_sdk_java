/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T14:49:21.142-05:00[America/Indianapolis]")
public class EmailTemplate {
  public static final String SERIALIZED_NAME_CONTAINER_CJSON = "container_cjson";
  @SerializedName(SERIALIZED_NAME_CONTAINER_CJSON)
  private String containerCjson;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE_OID = "email_template_oid";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE_OID)
  private Integer emailTemplateOid;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE_VM_PATH = "email_template_vm_path";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE_VM_PATH)
  private String emailTemplateVmPath;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIEW_AMAZON_LISTING_KEY = "preview_amazon_listing_key";
  @SerializedName(SERIALIZED_NAME_PREVIEW_AMAZON_LISTING_KEY)
  private String previewAmazonListingKey;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private Boolean system;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "trigger_type";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private String triggerType;

  public EmailTemplate() { 
  }

  public EmailTemplate containerCjson(String containerCjson) {
    
    this.containerCjson = containerCjson;
    return this;
  }

   /**
   * Container cjson
   * @return containerCjson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Container cjson")

  public String getContainerCjson() {
    return containerCjson;
  }


  public void setContainerCjson(String containerCjson) {
    this.containerCjson = containerCjson;
  }


  public EmailTemplate description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of email template
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of email template")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EmailTemplate emailTemplateOid(Integer emailTemplateOid) {
    
    this.emailTemplateOid = emailTemplateOid;
    return this;
  }

   /**
   * Email template oid
   * @return emailTemplateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email template oid")

  public Integer getEmailTemplateOid() {
    return emailTemplateOid;
  }


  public void setEmailTemplateOid(Integer emailTemplateOid) {
    this.emailTemplateOid = emailTemplateOid;
  }


  public EmailTemplate emailTemplateVmPath(String emailTemplateVmPath) {
    
    this.emailTemplateVmPath = emailTemplateVmPath;
    return this;
  }

   /**
   * Email Template VM Path
   * @return emailTemplateVmPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email Template VM Path")

  public String getEmailTemplateVmPath() {
    return emailTemplateVmPath;
  }


  public void setEmailTemplateVmPath(String emailTemplateVmPath) {
    this.emailTemplateVmPath = emailTemplateVmPath;
  }


  public EmailTemplate merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public EmailTemplate name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of email template
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of email template")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EmailTemplate previewAmazonListingKey(String previewAmazonListingKey) {
    
    this.previewAmazonListingKey = previewAmazonListingKey;
    return this;
  }

   /**
   * Amazon key for preview png image
   * @return previewAmazonListingKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amazon key for preview png image")

  public String getPreviewAmazonListingKey() {
    return previewAmazonListingKey;
  }


  public void setPreviewAmazonListingKey(String previewAmazonListingKey) {
    this.previewAmazonListingKey = previewAmazonListingKey;
  }


  public EmailTemplate sortOrder(Integer sortOrder) {
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Sort order (optional)
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sort order (optional)")

  public Integer getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public EmailTemplate storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * StoreFront oid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "StoreFront oid")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public EmailTemplate system(Boolean system) {
    
    this.system = system;
    return this;
  }

   /**
   * True if this email template is system-wide,false if merchant specific
   * @return system
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this email template is system-wide,false if merchant specific")

  public Boolean getSystem() {
    return system;
  }


  public void setSystem(Boolean system) {
    this.system = system;
  }


  public EmailTemplate triggerType(String triggerType) {
    
    this.triggerType = triggerType;
    return this;
  }

   /**
   * Trigger type
   * @return triggerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trigger type")

  public String getTriggerType() {
    return triggerType;
  }


  public void setTriggerType(String triggerType) {
    this.triggerType = triggerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailTemplate emailTemplate = (EmailTemplate) o;
    return Objects.equals(this.containerCjson, emailTemplate.containerCjson) &&
        Objects.equals(this.description, emailTemplate.description) &&
        Objects.equals(this.emailTemplateOid, emailTemplate.emailTemplateOid) &&
        Objects.equals(this.emailTemplateVmPath, emailTemplate.emailTemplateVmPath) &&
        Objects.equals(this.merchantId, emailTemplate.merchantId) &&
        Objects.equals(this.name, emailTemplate.name) &&
        Objects.equals(this.previewAmazonListingKey, emailTemplate.previewAmazonListingKey) &&
        Objects.equals(this.sortOrder, emailTemplate.sortOrder) &&
        Objects.equals(this.storefrontOid, emailTemplate.storefrontOid) &&
        Objects.equals(this.system, emailTemplate.system) &&
        Objects.equals(this.triggerType, emailTemplate.triggerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerCjson, description, emailTemplateOid, emailTemplateVmPath, merchantId, name, previewAmazonListingKey, sortOrder, storefrontOid, system, triggerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailTemplate {\n");
    sb.append("    containerCjson: ").append(toIndentedString(containerCjson)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emailTemplateOid: ").append(toIndentedString(emailTemplateOid)).append("\n");
    sb.append("    emailTemplateVmPath: ").append(toIndentedString(emailTemplateVmPath)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previewAmazonListingKey: ").append(toIndentedString(previewAmazonListingKey)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container_cjson");
    openapiFields.add("description");
    openapiFields.add("email_template_oid");
    openapiFields.add("email_template_vm_path");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("preview_amazon_listing_key");
    openapiFields.add("sort_order");
    openapiFields.add("storefront_oid");
    openapiFields.add("system");
    openapiFields.add("trigger_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailTemplate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailTemplate.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailTemplate is not found in the empty JSON string", EmailTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailTemplate` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("container_cjson") != null && !jsonObj.get("container_cjson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_cjson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_cjson").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("email_template_vm_path") != null && !jsonObj.get("email_template_vm_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_template_vm_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_template_vm_path").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("preview_amazon_listing_key") != null && !jsonObj.get("preview_amazon_listing_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preview_amazon_listing_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preview_amazon_listing_key").toString()));
      }
      if (jsonObj.get("trigger_type") != null && !jsonObj.get("trigger_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailTemplate>() {
           @Override
           public void write(JsonWriter out, EmailTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailTemplate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailTemplate
  * @throws IOException if the JSON string is invalid with respect to EmailTemplate
  */
  public static EmailTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailTemplate.class);
  }

 /**
  * Convert an instance of EmailTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


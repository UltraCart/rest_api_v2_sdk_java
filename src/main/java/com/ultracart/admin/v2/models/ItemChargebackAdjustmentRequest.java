/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemChargebackAdjustmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-20T10:38:24.317-05:00[America/Indianapolis]")
public class ItemChargebackAdjustmentRequest {
  public static final String SERIALIZED_NAME_CHARGEBACK_ADJUSTMENT_REQUEST_OID = "chargeback_adjustment_request_oid";
  @SerializedName(SERIALIZED_NAME_CHARGEBACK_ADJUSTMENT_REQUEST_OID)
  private Integer chargebackAdjustmentRequestOid;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REASON_CODE = "reason_code";
  @SerializedName(SERIALIZED_NAME_REASON_CODE)
  private String reasonCode;

  public ItemChargebackAdjustmentRequest() { 
  }

  public ItemChargebackAdjustmentRequest chargebackAdjustmentRequestOid(Integer chargebackAdjustmentRequestOid) {
    
    this.chargebackAdjustmentRequestOid = chargebackAdjustmentRequestOid;
    return this;
  }

   /**
   * Chargeback adjustment request object identifier
   * @return chargebackAdjustmentRequestOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Chargeback adjustment request object identifier")

  public Integer getChargebackAdjustmentRequestOid() {
    return chargebackAdjustmentRequestOid;
  }


  public void setChargebackAdjustmentRequestOid(Integer chargebackAdjustmentRequestOid) {
    this.chargebackAdjustmentRequestOid = chargebackAdjustmentRequestOid;
  }


  public ItemChargebackAdjustmentRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ItemChargebackAdjustmentRequest reasonCode(String reasonCode) {
    
    this.reasonCode = reasonCode;
    return this;
  }

   /**
   * Reason code
   * @return reasonCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reason code")

  public String getReasonCode() {
    return reasonCode;
  }


  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemChargebackAdjustmentRequest itemChargebackAdjustmentRequest = (ItemChargebackAdjustmentRequest) o;
    return Objects.equals(this.chargebackAdjustmentRequestOid, itemChargebackAdjustmentRequest.chargebackAdjustmentRequestOid) &&
        Objects.equals(this.description, itemChargebackAdjustmentRequest.description) &&
        Objects.equals(this.reasonCode, itemChargebackAdjustmentRequest.reasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargebackAdjustmentRequestOid, description, reasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemChargebackAdjustmentRequest {\n");
    sb.append("    chargebackAdjustmentRequestOid: ").append(toIndentedString(chargebackAdjustmentRequestOid)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reasonCode: ").append(toIndentedString(reasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chargeback_adjustment_request_oid");
    openapiFields.add("description");
    openapiFields.add("reason_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemChargebackAdjustmentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemChargebackAdjustmentRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemChargebackAdjustmentRequest is not found in the empty JSON string", ItemChargebackAdjustmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemChargebackAdjustmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemChargebackAdjustmentRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("reason_code") != null && !jsonObj.get("reason_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemChargebackAdjustmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemChargebackAdjustmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemChargebackAdjustmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemChargebackAdjustmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemChargebackAdjustmentRequest>() {
           @Override
           public void write(JsonWriter out, ItemChargebackAdjustmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemChargebackAdjustmentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemChargebackAdjustmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemChargebackAdjustmentRequest
  * @throws IOException if the JSON string is invalid with respect to ItemChargebackAdjustmentRequest
  */
  public static ItemChargebackAdjustmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemChargebackAdjustmentRequest.class);
  }

 /**
  * Convert an instance of ItemChargebackAdjustmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


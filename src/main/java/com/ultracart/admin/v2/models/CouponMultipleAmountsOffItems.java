/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CouponTierItemDiscount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.swagger.JSON;

/**
 * CouponMultipleAmountsOffItems
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-22T22:27:43.239-04:00[America/Indianapolis]")
public class CouponMultipleAmountsOffItems {
  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private List<CouponTierItemDiscount> discounts = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public CouponMultipleAmountsOffItems() { 
  }

  public CouponMultipleAmountsOffItems discounts(List<CouponTierItemDiscount> discounts) {
    
    this.discounts = discounts;
    return this;
  }

  public CouponMultipleAmountsOffItems addDiscountsItem(CouponTierItemDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

   /**
   * A list of item discounts.
   * @return discounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of item discounts.")

  public List<CouponTierItemDiscount> getDiscounts() {
    return discounts;
  }


  public void setDiscounts(List<CouponTierItemDiscount> discounts) {
    this.discounts = discounts;
  }


  public CouponMultipleAmountsOffItems limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * The (optional) maximum quantity of items that may receive a discount.
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The (optional) maximum quantity of items that may receive a discount.")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponMultipleAmountsOffItems couponMultipleAmountsOffItems = (CouponMultipleAmountsOffItems) o;
    return Objects.equals(this.discounts, couponMultipleAmountsOffItems.discounts) &&
        Objects.equals(this.limit, couponMultipleAmountsOffItems.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discounts, limit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponMultipleAmountsOffItems {\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discounts");
    openapiFields.add("limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponMultipleAmountsOffItems
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CouponMultipleAmountsOffItems.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponMultipleAmountsOffItems is not found in the empty JSON string", CouponMultipleAmountsOffItems.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponMultipleAmountsOffItems.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponMultipleAmountsOffItems` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
      if (jsonArraydiscounts != null) {
        // ensure the json data is an array
        if (!jsonObj.get("discounts").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
        }

        // validate the optional field `discounts` (array)
        for (int i = 0; i < jsonArraydiscounts.size(); i++) {
          CouponTierItemDiscount.validateJsonObject(jsonArraydiscounts.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponMultipleAmountsOffItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponMultipleAmountsOffItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponMultipleAmountsOffItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponMultipleAmountsOffItems.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponMultipleAmountsOffItems>() {
           @Override
           public void write(JsonWriter out, CouponMultipleAmountsOffItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponMultipleAmountsOffItems read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponMultipleAmountsOffItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponMultipleAmountsOffItems
  * @throws IOException if the JSON string is invalid with respect to CouponMultipleAmountsOffItems
  */
  public static CouponMultipleAmountsOffItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponMultipleAmountsOffItems.class);
  }

 /**
  * Convert an instance of CouponMultipleAmountsOffItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


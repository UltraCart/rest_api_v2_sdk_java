/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * WebhookEventSubscription
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-08T14:27:27.314-04:00")



public class WebhookEventSubscription {
  @SerializedName("comments")
  private String comments = null;

  @SerializedName("deprecated_flag")
  private Boolean deprecatedFlag = null;

  @SerializedName("discontinued_flag")
  private Boolean discontinuedFlag = null;

  @SerializedName("event_description")
  private String eventDescription = null;

  @SerializedName("event_name")
  private String eventName = null;

  @SerializedName("expansion")
  private String expansion = null;

  @SerializedName("subscribed")
  private Boolean subscribed = null;

  @SerializedName("supports_reflow")
  private Boolean supportsReflow = null;

  @SerializedName("webhook_event_oid")
  private Integer webhookEventOid = null;

  public WebhookEventSubscription comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Comment about the event to provide further clarification to the end user
   * @return comments
  **/
  @ApiModelProperty(value = "Comment about the event to provide further clarification to the end user")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public WebhookEventSubscription deprecatedFlag(Boolean deprecatedFlag) {
    this.deprecatedFlag = deprecatedFlag;
    return this;
  }

   /**
   * True if the event is deprecated.  See the API change log for details on when it will be discontinued.
   * @return deprecatedFlag
  **/
  @ApiModelProperty(value = "True if the event is deprecated.  See the API change log for details on when it will be discontinued.")
  public Boolean isDeprecatedFlag() {
    return deprecatedFlag;
  }

  public void setDeprecatedFlag(Boolean deprecatedFlag) {
    this.deprecatedFlag = deprecatedFlag;
  }

  public WebhookEventSubscription discontinuedFlag(Boolean discontinuedFlag) {
    this.discontinuedFlag = discontinuedFlag;
    return this;
  }

   /**
   * True if the event is discontinued.  See the API change log for details on migration details.
   * @return discontinuedFlag
  **/
  @ApiModelProperty(value = "True if the event is discontinued.  See the API change log for details on migration details.")
  public Boolean isDiscontinuedFlag() {
    return discontinuedFlag;
  }

  public void setDiscontinuedFlag(Boolean discontinuedFlag) {
    this.discontinuedFlag = discontinuedFlag;
  }

  public WebhookEventSubscription eventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
    return this;
  }

   /**
   * Description of the event
   * @return eventDescription
  **/
  @ApiModelProperty(value = "Description of the event")
  public String getEventDescription() {
    return eventDescription;
  }

  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }

  public WebhookEventSubscription eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

   /**
   * Event name
   * @return eventName
  **/
  @ApiModelProperty(value = "Event name")
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }

  public WebhookEventSubscription expansion(String expansion) {
    this.expansion = expansion;
    return this;
  }

   /**
   * The expand string for the notification object.  See the individual resource _expand documentation for valid values.
   * @return expansion
  **/
  @ApiModelProperty(value = "The expand string for the notification object.  See the individual resource _expand documentation for valid values.")
  public String getExpansion() {
    return expansion;
  }

  public void setExpansion(String expansion) {
    this.expansion = expansion;
  }

  public WebhookEventSubscription subscribed(Boolean subscribed) {
    this.subscribed = subscribed;
    return this;
  }

   /**
   * True if this is event is subscribed to
   * @return subscribed
  **/
  @ApiModelProperty(value = "True if this is event is subscribed to")
  public Boolean isSubscribed() {
    return subscribed;
  }

  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }

  public WebhookEventSubscription supportsReflow(Boolean supportsReflow) {
    this.supportsReflow = supportsReflow;
    return this;
  }

   /**
   * True if the event can be triggered to reflow existing records
   * @return supportsReflow
  **/
  @ApiModelProperty(value = "True if the event can be triggered to reflow existing records")
  public Boolean isSupportsReflow() {
    return supportsReflow;
  }

  public void setSupportsReflow(Boolean supportsReflow) {
    this.supportsReflow = supportsReflow;
  }

  public WebhookEventSubscription webhookEventOid(Integer webhookEventOid) {
    this.webhookEventOid = webhookEventOid;
    return this;
  }

   /**
   * The webhook event object identifier
   * @return webhookEventOid
  **/
  @ApiModelProperty(value = "The webhook event object identifier")
  public Integer getWebhookEventOid() {
    return webhookEventOid;
  }

  public void setWebhookEventOid(Integer webhookEventOid) {
    this.webhookEventOid = webhookEventOid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEventSubscription webhookEventSubscription = (WebhookEventSubscription) o;
    return Objects.equals(this.comments, webhookEventSubscription.comments) &&
        Objects.equals(this.deprecatedFlag, webhookEventSubscription.deprecatedFlag) &&
        Objects.equals(this.discontinuedFlag, webhookEventSubscription.discontinuedFlag) &&
        Objects.equals(this.eventDescription, webhookEventSubscription.eventDescription) &&
        Objects.equals(this.eventName, webhookEventSubscription.eventName) &&
        Objects.equals(this.expansion, webhookEventSubscription.expansion) &&
        Objects.equals(this.subscribed, webhookEventSubscription.subscribed) &&
        Objects.equals(this.supportsReflow, webhookEventSubscription.supportsReflow) &&
        Objects.equals(this.webhookEventOid, webhookEventSubscription.webhookEventOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, deprecatedFlag, discontinuedFlag, eventDescription, eventName, expansion, subscribed, supportsReflow, webhookEventOid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEventSubscription {\n");
    
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    deprecatedFlag: ").append(toIndentedString(deprecatedFlag)).append("\n");
    sb.append("    discontinuedFlag: ").append(toIndentedString(discontinuedFlag)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    expansion: ").append(toIndentedString(expansion)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    supportsReflow: ").append(toIndentedString(supportsReflow)).append("\n");
    sb.append("    webhookEventOid: ").append(toIndentedString(webhookEventOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


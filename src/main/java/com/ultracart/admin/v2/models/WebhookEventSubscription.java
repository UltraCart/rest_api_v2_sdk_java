/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WebhookEventSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-22T10:25:24.226-04:00[America/Indianapolis]")
public class WebhookEventSubscription {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_DEPRECATED_FLAG = "deprecated_flag";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_FLAG)
  private Boolean deprecatedFlag;

  public static final String SERIALIZED_NAME_DISCONTINUED_FLAG = "discontinued_flag";
  @SerializedName(SERIALIZED_NAME_DISCONTINUED_FLAG)
  private Boolean discontinuedFlag;

  public static final String SERIALIZED_NAME_EVENT_DESCRIPTION = "event_description";
  @SerializedName(SERIALIZED_NAME_EVENT_DESCRIPTION)
  private String eventDescription;

  public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EXPANSION = "expansion";
  @SerializedName(SERIALIZED_NAME_EXPANSION)
  private String expansion;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private Boolean subscribed;

  public static final String SERIALIZED_NAME_SUPPORTS_REFLOW = "supports_reflow";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_REFLOW)
  private Boolean supportsReflow;

  public static final String SERIALIZED_NAME_WEBHOOK_EVENT_OID = "webhook_event_oid";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_EVENT_OID)
  private Integer webhookEventOid;

  public WebhookEventSubscription() { 
  }

  public WebhookEventSubscription comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * Comment about the event to provide further clarification to the end user
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comment about the event to provide further clarification to the end user")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public WebhookEventSubscription deprecatedFlag(Boolean deprecatedFlag) {
    
    this.deprecatedFlag = deprecatedFlag;
    return this;
  }

   /**
   * True if the event is deprecated.  See the API change log for details on when it will be discontinued.
   * @return deprecatedFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the event is deprecated.  See the API change log for details on when it will be discontinued.")

  public Boolean getDeprecatedFlag() {
    return deprecatedFlag;
  }


  public void setDeprecatedFlag(Boolean deprecatedFlag) {
    this.deprecatedFlag = deprecatedFlag;
  }


  public WebhookEventSubscription discontinuedFlag(Boolean discontinuedFlag) {
    
    this.discontinuedFlag = discontinuedFlag;
    return this;
  }

   /**
   * True if the event is discontinued.  See the API change log for details on migration details.
   * @return discontinuedFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the event is discontinued.  See the API change log for details on migration details.")

  public Boolean getDiscontinuedFlag() {
    return discontinuedFlag;
  }


  public void setDiscontinuedFlag(Boolean discontinuedFlag) {
    this.discontinuedFlag = discontinuedFlag;
  }


  public WebhookEventSubscription eventDescription(String eventDescription) {
    
    this.eventDescription = eventDescription;
    return this;
  }

   /**
   * Description of the event
   * @return eventDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the event")

  public String getEventDescription() {
    return eventDescription;
  }


  public void setEventDescription(String eventDescription) {
    this.eventDescription = eventDescription;
  }


  public WebhookEventSubscription eventName(String eventName) {
    
    this.eventName = eventName;
    return this;
  }

   /**
   * Event name
   * @return eventName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event name")

  public String getEventName() {
    return eventName;
  }


  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public WebhookEventSubscription expansion(String expansion) {
    
    this.expansion = expansion;
    return this;
  }

   /**
   * The expand string for the notification object.  See the individual resource _expand documentation for valid values.
   * @return expansion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The expand string for the notification object.  See the individual resource _expand documentation for valid values.")

  public String getExpansion() {
    return expansion;
  }


  public void setExpansion(String expansion) {
    this.expansion = expansion;
  }


  public WebhookEventSubscription subscribed(Boolean subscribed) {
    
    this.subscribed = subscribed;
    return this;
  }

   /**
   * True if this is event is subscribed to
   * @return subscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this is event is subscribed to")

  public Boolean getSubscribed() {
    return subscribed;
  }


  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }


  public WebhookEventSubscription supportsReflow(Boolean supportsReflow) {
    
    this.supportsReflow = supportsReflow;
    return this;
  }

   /**
   * True if the event can be triggered to reflow existing records
   * @return supportsReflow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the event can be triggered to reflow existing records")

  public Boolean getSupportsReflow() {
    return supportsReflow;
  }


  public void setSupportsReflow(Boolean supportsReflow) {
    this.supportsReflow = supportsReflow;
  }


  public WebhookEventSubscription webhookEventOid(Integer webhookEventOid) {
    
    this.webhookEventOid = webhookEventOid;
    return this;
  }

   /**
   * The webhook event object identifier
   * @return webhookEventOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The webhook event object identifier")

  public Integer getWebhookEventOid() {
    return webhookEventOid;
  }


  public void setWebhookEventOid(Integer webhookEventOid) {
    this.webhookEventOid = webhookEventOid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEventSubscription webhookEventSubscription = (WebhookEventSubscription) o;
    return Objects.equals(this.comments, webhookEventSubscription.comments) &&
        Objects.equals(this.deprecatedFlag, webhookEventSubscription.deprecatedFlag) &&
        Objects.equals(this.discontinuedFlag, webhookEventSubscription.discontinuedFlag) &&
        Objects.equals(this.eventDescription, webhookEventSubscription.eventDescription) &&
        Objects.equals(this.eventName, webhookEventSubscription.eventName) &&
        Objects.equals(this.expansion, webhookEventSubscription.expansion) &&
        Objects.equals(this.subscribed, webhookEventSubscription.subscribed) &&
        Objects.equals(this.supportsReflow, webhookEventSubscription.supportsReflow) &&
        Objects.equals(this.webhookEventOid, webhookEventSubscription.webhookEventOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, deprecatedFlag, discontinuedFlag, eventDescription, eventName, expansion, subscribed, supportsReflow, webhookEventOid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEventSubscription {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    deprecatedFlag: ").append(toIndentedString(deprecatedFlag)).append("\n");
    sb.append("    discontinuedFlag: ").append(toIndentedString(discontinuedFlag)).append("\n");
    sb.append("    eventDescription: ").append(toIndentedString(eventDescription)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    expansion: ").append(toIndentedString(expansion)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("    supportsReflow: ").append(toIndentedString(supportsReflow)).append("\n");
    sb.append("    webhookEventOid: ").append(toIndentedString(webhookEventOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("deprecated_flag");
    openapiFields.add("discontinued_flag");
    openapiFields.add("event_description");
    openapiFields.add("event_name");
    openapiFields.add("expansion");
    openapiFields.add("subscribed");
    openapiFields.add("supports_reflow");
    openapiFields.add("webhook_event_oid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookEventSubscription
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WebhookEventSubscription.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEventSubscription is not found in the empty JSON string", WebhookEventSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookEventSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEventSubscription` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (jsonObj.get("event_description") != null && !jsonObj.get("event_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_description").toString()));
      }
      if (jsonObj.get("event_name") != null && !jsonObj.get("event_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_name").toString()));
      }
      if (jsonObj.get("expansion") != null && !jsonObj.get("expansion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expansion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expansion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEventSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEventSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEventSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEventSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEventSubscription>() {
           @Override
           public void write(JsonWriter out, WebhookEventSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEventSubscription read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookEventSubscription given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookEventSubscription
  * @throws IOException if the JSON string is invalid with respect to WebhookEventSubscription
  */
  public static WebhookEventSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEventSubscription.class);
  }

 /**
  * Convert an instance of WebhookEventSubscription to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.OrderDigitalItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderDigitalOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-01T11:46:50.322-04:00[America/Indianapolis]")
public class OrderDigitalOrder {
  public static final String SERIALIZED_NAME_CREATION_DTS = "creation_dts";
  @SerializedName(SERIALIZED_NAME_CREATION_DTS)
  private String creationDts;

  public static final String SERIALIZED_NAME_EXPIRATION_DTS = "expiration_dts";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DTS)
  private String expirationDts;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderDigitalItem> items = null;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_ID = "url_id";
  @SerializedName(SERIALIZED_NAME_URL_ID)
  private String urlId;

  public OrderDigitalOrder() { 
  }

  public OrderDigitalOrder creationDts(String creationDts) {
    
    this.creationDts = creationDts;
    return this;
  }

   /**
   * Date/time that the digital order was created
   * @return creationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the digital order was created")

  public String getCreationDts() {
    return creationDts;
  }


  public void setCreationDts(String creationDts) {
    this.creationDts = creationDts;
  }


  public OrderDigitalOrder expirationDts(String expirationDts) {
    
    this.expirationDts = expirationDts;
    return this;
  }

   /**
   * Expiration date/time of the digital order
   * @return expirationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date/time of the digital order")

  public String getExpirationDts() {
    return expirationDts;
  }


  public void setExpirationDts(String expirationDts) {
    this.expirationDts = expirationDts;
  }


  public OrderDigitalOrder items(List<OrderDigitalItem> items) {
    
    this.items = items;
    return this;
  }

  public OrderDigitalOrder addItemsItem(OrderDigitalItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Digital items associated with the digital order
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Digital items associated with the digital order")

  public List<OrderDigitalItem> getItems() {
    return items;
  }


  public void setItems(List<OrderDigitalItem> items) {
    this.items = items;
  }


  public OrderDigitalOrder url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL where the customer can go to and download their digital order content
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL where the customer can go to and download their digital order content")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public OrderDigitalOrder urlId(String urlId) {
    
    this.urlId = urlId;
    return this;
  }

   /**
   * URL ID is a unique code that is part of the URLs
   * @return urlId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL ID is a unique code that is part of the URLs")

  public String getUrlId() {
    return urlId;
  }


  public void setUrlId(String urlId) {
    this.urlId = urlId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDigitalOrder orderDigitalOrder = (OrderDigitalOrder) o;
    return Objects.equals(this.creationDts, orderDigitalOrder.creationDts) &&
        Objects.equals(this.expirationDts, orderDigitalOrder.expirationDts) &&
        Objects.equals(this.items, orderDigitalOrder.items) &&
        Objects.equals(this.url, orderDigitalOrder.url) &&
        Objects.equals(this.urlId, orderDigitalOrder.urlId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDts, expirationDts, items, url, urlId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDigitalOrder {\n");
    sb.append("    creationDts: ").append(toIndentedString(creationDts)).append("\n");
    sb.append("    expirationDts: ").append(toIndentedString(expirationDts)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlId: ").append(toIndentedString(urlId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_dts");
    openapiFields.add("expiration_dts");
    openapiFields.add("items");
    openapiFields.add("url");
    openapiFields.add("url_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderDigitalOrder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderDigitalOrder.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDigitalOrder is not found in the empty JSON string", OrderDigitalOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderDigitalOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDigitalOrder` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("creation_dts") != null && !jsonObj.get("creation_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_dts").toString()));
      }
      if (jsonObj.get("expiration_dts") != null && !jsonObj.get("expiration_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_dts").toString()));
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          OrderDigitalItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("url_id") != null && !jsonObj.get("url_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDigitalOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDigitalOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDigitalOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDigitalOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDigitalOrder>() {
           @Override
           public void write(JsonWriter out, OrderDigitalOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDigitalOrder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderDigitalOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderDigitalOrder
  * @throws IOException if the JSON string is invalid with respect to OrderDigitalOrder
  */
  public static OrderDigitalOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDigitalOrder.class);
  }

 /**
  * Convert an instance of OrderDigitalOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


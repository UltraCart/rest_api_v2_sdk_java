/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPaymentCreditCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T10:48:42.268-05:00[America/Indianapolis]")
public class OrderPaymentCreditCard {
  public static final String SERIALIZED_NAME_CARD_AUTH_TICKET = "card_auth_ticket";
  @SerializedName(SERIALIZED_NAME_CARD_AUTH_TICKET)
  private String cardAuthTicket;

  public static final String SERIALIZED_NAME_CARD_AUTHORIZATION_AMOUNT = "card_authorization_amount";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHORIZATION_AMOUNT)
  private BigDecimal cardAuthorizationAmount;

  public static final String SERIALIZED_NAME_CARD_AUTHORIZATION_DTS = "card_authorization_dts";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHORIZATION_DTS)
  private String cardAuthorizationDts;

  public static final String SERIALIZED_NAME_CARD_AUTHORIZATION_REFERENCE_NUMBER = "card_authorization_reference_number";
  @SerializedName(SERIALIZED_NAME_CARD_AUTHORIZATION_REFERENCE_NUMBER)
  private String cardAuthorizationReferenceNumber;

  public static final String SERIALIZED_NAME_CARD_EXPIRATION_MONTH = "card_expiration_month";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRATION_MONTH)
  private Integer cardExpirationMonth;

  public static final String SERIALIZED_NAME_CARD_EXPIRATION_YEAR = "card_expiration_year";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRATION_YEAR)
  private Integer cardExpirationYear;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "card_number";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_NUMBER_TOKEN = "card_number_token";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_TOKEN)
  private String cardNumberToken;

  public static final String SERIALIZED_NAME_CARD_NUMBER_TRUNCATED = "card_number_truncated";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_TRUNCATED)
  private Boolean cardNumberTruncated;

  /**
   * Card type
   */
  @JsonAdapter(CardTypeEnum.Adapter.class)
  public enum CardTypeEnum {
    AMEX("AMEX"),
    
    DINERS_CLUB("Diners Club"),
    
    DISCOVER("Discover"),
    
    JCB("JCB"),
    
    MASTERCARD("MasterCard"),
    
    VISA("VISA");

    private String value;

    CardTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardTypeEnum fromValue(String value) {
      for (CardTypeEnum b : CardTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CARD_TYPE = "card_type";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private CardTypeEnum cardType;

  public static final String SERIALIZED_NAME_CARD_VERIFICATION_NUMBER_TOKEN = "card_verification_number_token";
  @SerializedName(SERIALIZED_NAME_CARD_VERIFICATION_NUMBER_TOKEN)
  private String cardVerificationNumberToken;

  public OrderPaymentCreditCard() { 
  }

  public OrderPaymentCreditCard cardAuthTicket(String cardAuthTicket) {
    
    this.cardAuthTicket = cardAuthTicket;
    return this;
  }

   /**
   * Card authorization ticket
   * @return cardAuthTicket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card authorization ticket")

  public String getCardAuthTicket() {
    return cardAuthTicket;
  }


  public void setCardAuthTicket(String cardAuthTicket) {
    this.cardAuthTicket = cardAuthTicket;
  }


  public OrderPaymentCreditCard cardAuthorizationAmount(BigDecimal cardAuthorizationAmount) {
    
    this.cardAuthorizationAmount = cardAuthorizationAmount;
    return this;
  }

   /**
   * Card authorization amount
   * @return cardAuthorizationAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card authorization amount")

  public BigDecimal getCardAuthorizationAmount() {
    return cardAuthorizationAmount;
  }


  public void setCardAuthorizationAmount(BigDecimal cardAuthorizationAmount) {
    this.cardAuthorizationAmount = cardAuthorizationAmount;
  }


  public OrderPaymentCreditCard cardAuthorizationDts(String cardAuthorizationDts) {
    
    this.cardAuthorizationDts = cardAuthorizationDts;
    return this;
  }

   /**
   * Card authorization date/time
   * @return cardAuthorizationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card authorization date/time")

  public String getCardAuthorizationDts() {
    return cardAuthorizationDts;
  }


  public void setCardAuthorizationDts(String cardAuthorizationDts) {
    this.cardAuthorizationDts = cardAuthorizationDts;
  }


  public OrderPaymentCreditCard cardAuthorizationReferenceNumber(String cardAuthorizationReferenceNumber) {
    
    this.cardAuthorizationReferenceNumber = cardAuthorizationReferenceNumber;
    return this;
  }

   /**
   * Card authorization reference number
   * @return cardAuthorizationReferenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card authorization reference number")

  public String getCardAuthorizationReferenceNumber() {
    return cardAuthorizationReferenceNumber;
  }


  public void setCardAuthorizationReferenceNumber(String cardAuthorizationReferenceNumber) {
    this.cardAuthorizationReferenceNumber = cardAuthorizationReferenceNumber;
  }


  public OrderPaymentCreditCard cardExpirationMonth(Integer cardExpirationMonth) {
    
    this.cardExpirationMonth = cardExpirationMonth;
    return this;
  }

   /**
   * Card expiration month (1-12)
   * @return cardExpirationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card expiration month (1-12)")

  public Integer getCardExpirationMonth() {
    return cardExpirationMonth;
  }


  public void setCardExpirationMonth(Integer cardExpirationMonth) {
    this.cardExpirationMonth = cardExpirationMonth;
  }


  public OrderPaymentCreditCard cardExpirationYear(Integer cardExpirationYear) {
    
    this.cardExpirationYear = cardExpirationYear;
    return this;
  }

   /**
   * Card expiration year (Four digit year)
   * @return cardExpirationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card expiration year (Four digit year)")

  public Integer getCardExpirationYear() {
    return cardExpirationYear;
  }


  public void setCardExpirationYear(Integer cardExpirationYear) {
    this.cardExpirationYear = cardExpirationYear;
  }


  public OrderPaymentCreditCard cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Card number (masked to last 4)
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card number (masked to last 4)")

  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public OrderPaymentCreditCard cardNumberToken(String cardNumberToken) {
    
    this.cardNumberToken = cardNumberToken;
    return this;
  }

   /**
   * Card number token from hosted fields used to update the card number
   * @return cardNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card number token from hosted fields used to update the card number")

  public String getCardNumberToken() {
    return cardNumberToken;
  }


  public void setCardNumberToken(String cardNumberToken) {
    this.cardNumberToken = cardNumberToken;
  }


  public OrderPaymentCreditCard cardNumberTruncated(Boolean cardNumberTruncated) {
    
    this.cardNumberTruncated = cardNumberTruncated;
    return this;
  }

   /**
   * True if the card has been truncated
   * @return cardNumberTruncated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the card has been truncated")

  public Boolean getCardNumberTruncated() {
    return cardNumberTruncated;
  }


  public void setCardNumberTruncated(Boolean cardNumberTruncated) {
    this.cardNumberTruncated = cardNumberTruncated;
  }


  public OrderPaymentCreditCard cardType(CardTypeEnum cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Card type
   * @return cardType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card type")

  public CardTypeEnum getCardType() {
    return cardType;
  }


  public void setCardType(CardTypeEnum cardType) {
    this.cardType = cardType;
  }


  public OrderPaymentCreditCard cardVerificationNumberToken(String cardVerificationNumberToken) {
    
    this.cardVerificationNumberToken = cardVerificationNumberToken;
    return this;
  }

   /**
   * Card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries
   * @return cardVerificationNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries")

  public String getCardVerificationNumberToken() {
    return cardVerificationNumberToken;
  }


  public void setCardVerificationNumberToken(String cardVerificationNumberToken) {
    this.cardVerificationNumberToken = cardVerificationNumberToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentCreditCard orderPaymentCreditCard = (OrderPaymentCreditCard) o;
    return Objects.equals(this.cardAuthTicket, orderPaymentCreditCard.cardAuthTicket) &&
        Objects.equals(this.cardAuthorizationAmount, orderPaymentCreditCard.cardAuthorizationAmount) &&
        Objects.equals(this.cardAuthorizationDts, orderPaymentCreditCard.cardAuthorizationDts) &&
        Objects.equals(this.cardAuthorizationReferenceNumber, orderPaymentCreditCard.cardAuthorizationReferenceNumber) &&
        Objects.equals(this.cardExpirationMonth, orderPaymentCreditCard.cardExpirationMonth) &&
        Objects.equals(this.cardExpirationYear, orderPaymentCreditCard.cardExpirationYear) &&
        Objects.equals(this.cardNumber, orderPaymentCreditCard.cardNumber) &&
        Objects.equals(this.cardNumberToken, orderPaymentCreditCard.cardNumberToken) &&
        Objects.equals(this.cardNumberTruncated, orderPaymentCreditCard.cardNumberTruncated) &&
        Objects.equals(this.cardType, orderPaymentCreditCard.cardType) &&
        Objects.equals(this.cardVerificationNumberToken, orderPaymentCreditCard.cardVerificationNumberToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAuthTicket, cardAuthorizationAmount, cardAuthorizationDts, cardAuthorizationReferenceNumber, cardExpirationMonth, cardExpirationYear, cardNumber, cardNumberToken, cardNumberTruncated, cardType, cardVerificationNumberToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentCreditCard {\n");
    sb.append("    cardAuthTicket: ").append(toIndentedString(cardAuthTicket)).append("\n");
    sb.append("    cardAuthorizationAmount: ").append(toIndentedString(cardAuthorizationAmount)).append("\n");
    sb.append("    cardAuthorizationDts: ").append(toIndentedString(cardAuthorizationDts)).append("\n");
    sb.append("    cardAuthorizationReferenceNumber: ").append(toIndentedString(cardAuthorizationReferenceNumber)).append("\n");
    sb.append("    cardExpirationMonth: ").append(toIndentedString(cardExpirationMonth)).append("\n");
    sb.append("    cardExpirationYear: ").append(toIndentedString(cardExpirationYear)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardNumberToken: ").append(toIndentedString(cardNumberToken)).append("\n");
    sb.append("    cardNumberTruncated: ").append(toIndentedString(cardNumberTruncated)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardVerificationNumberToken: ").append(toIndentedString(cardVerificationNumberToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_auth_ticket");
    openapiFields.add("card_authorization_amount");
    openapiFields.add("card_authorization_dts");
    openapiFields.add("card_authorization_reference_number");
    openapiFields.add("card_expiration_month");
    openapiFields.add("card_expiration_year");
    openapiFields.add("card_number");
    openapiFields.add("card_number_token");
    openapiFields.add("card_number_truncated");
    openapiFields.add("card_type");
    openapiFields.add("card_verification_number_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPaymentCreditCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPaymentCreditCard.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPaymentCreditCard is not found in the empty JSON string", OrderPaymentCreditCard.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPaymentCreditCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPaymentCreditCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("card_auth_ticket") != null && !jsonObj.get("card_auth_ticket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_auth_ticket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_auth_ticket").toString()));
      }
      if (jsonObj.get("card_authorization_dts") != null && !jsonObj.get("card_authorization_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_authorization_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_authorization_dts").toString()));
      }
      if (jsonObj.get("card_authorization_reference_number") != null && !jsonObj.get("card_authorization_reference_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_authorization_reference_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_authorization_reference_number").toString()));
      }
      if (jsonObj.get("card_number") != null && !jsonObj.get("card_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number").toString()));
      }
      if (jsonObj.get("card_number_token") != null && !jsonObj.get("card_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number_token").toString()));
      }
      if (jsonObj.get("card_type") != null && !jsonObj.get("card_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_type").toString()));
      }
      if (jsonObj.get("card_verification_number_token") != null && !jsonObj.get("card_verification_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_verification_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_verification_number_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPaymentCreditCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPaymentCreditCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPaymentCreditCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPaymentCreditCard.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPaymentCreditCard>() {
           @Override
           public void write(JsonWriter out, OrderPaymentCreditCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPaymentCreditCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPaymentCreditCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPaymentCreditCard
  * @throws IOException if the JSON string is invalid with respect to OrderPaymentCreditCard
  */
  public static OrderPaymentCreditCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPaymentCreditCard.class);
  }

 /**
  * Convert an instance of OrderPaymentCreditCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


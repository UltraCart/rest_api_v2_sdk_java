/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * OrderPaymentCreditCard
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-02-16T15:05:07.594-05:00")



public class OrderPaymentCreditCard {
  @SerializedName("card_auth_ticket")
  private String cardAuthTicket = null;

  @SerializedName("card_authorization_amount")
  private BigDecimal cardAuthorizationAmount = null;

  @SerializedName("card_authorization_dts")
  private String cardAuthorizationDts = null;

  @SerializedName("card_authorization_reference_number")
  private String cardAuthorizationReferenceNumber = null;

  @SerializedName("card_expiration_month")
  private Integer cardExpirationMonth = null;

  @SerializedName("card_expiration_year")
  private Integer cardExpirationYear = null;

  @SerializedName("card_number")
  private String cardNumber = null;

  @SerializedName("card_number_token")
  private String cardNumberToken = null;

  @SerializedName("card_number_truncated")
  private Boolean cardNumberTruncated = null;

  /**
   * Card type
   */
  @JsonAdapter(CardTypeEnum.Adapter.class)
  public enum CardTypeEnum {
    AMEX("AMEX"),
    
    DINERS_CLUB("Diners Club"),
    
    DISCOVER("Discover"),
    
    JCB("JCB"),
    
    MASTERCARD("MasterCard"),
    
    VISA("VISA");

    private String value;

    CardTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardTypeEnum fromValue(String text) {
      for (CardTypeEnum b : CardTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CardTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CardTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("card_type")
  private CardTypeEnum cardType = null;

  @SerializedName("card_verification_number_token")
  private String cardVerificationNumberToken = null;

  public OrderPaymentCreditCard cardAuthTicket(String cardAuthTicket) {
    this.cardAuthTicket = cardAuthTicket;
    return this;
  }

   /**
   * Card authorization ticket
   * @return cardAuthTicket
  **/
  @ApiModelProperty(value = "Card authorization ticket")
  public String getCardAuthTicket() {
    return cardAuthTicket;
  }

  public void setCardAuthTicket(String cardAuthTicket) {
    this.cardAuthTicket = cardAuthTicket;
  }

  public OrderPaymentCreditCard cardAuthorizationAmount(BigDecimal cardAuthorizationAmount) {
    this.cardAuthorizationAmount = cardAuthorizationAmount;
    return this;
  }

   /**
   * Card authorization amount
   * @return cardAuthorizationAmount
  **/
  @ApiModelProperty(value = "Card authorization amount")
  public BigDecimal getCardAuthorizationAmount() {
    return cardAuthorizationAmount;
  }

  public void setCardAuthorizationAmount(BigDecimal cardAuthorizationAmount) {
    this.cardAuthorizationAmount = cardAuthorizationAmount;
  }

  public OrderPaymentCreditCard cardAuthorizationDts(String cardAuthorizationDts) {
    this.cardAuthorizationDts = cardAuthorizationDts;
    return this;
  }

   /**
   * Card authorization date/time
   * @return cardAuthorizationDts
  **/
  @ApiModelProperty(value = "Card authorization date/time")
  public String getCardAuthorizationDts() {
    return cardAuthorizationDts;
  }

  public void setCardAuthorizationDts(String cardAuthorizationDts) {
    this.cardAuthorizationDts = cardAuthorizationDts;
  }

  public OrderPaymentCreditCard cardAuthorizationReferenceNumber(String cardAuthorizationReferenceNumber) {
    this.cardAuthorizationReferenceNumber = cardAuthorizationReferenceNumber;
    return this;
  }

   /**
   * Card authorization reference number
   * @return cardAuthorizationReferenceNumber
  **/
  @ApiModelProperty(value = "Card authorization reference number")
  public String getCardAuthorizationReferenceNumber() {
    return cardAuthorizationReferenceNumber;
  }

  public void setCardAuthorizationReferenceNumber(String cardAuthorizationReferenceNumber) {
    this.cardAuthorizationReferenceNumber = cardAuthorizationReferenceNumber;
  }

  public OrderPaymentCreditCard cardExpirationMonth(Integer cardExpirationMonth) {
    this.cardExpirationMonth = cardExpirationMonth;
    return this;
  }

   /**
   * Card expiration month (1-12)
   * @return cardExpirationMonth
  **/
  @ApiModelProperty(value = "Card expiration month (1-12)")
  public Integer getCardExpirationMonth() {
    return cardExpirationMonth;
  }

  public void setCardExpirationMonth(Integer cardExpirationMonth) {
    this.cardExpirationMonth = cardExpirationMonth;
  }

  public OrderPaymentCreditCard cardExpirationYear(Integer cardExpirationYear) {
    this.cardExpirationYear = cardExpirationYear;
    return this;
  }

   /**
   * Card expiration year (Four digit year)
   * @return cardExpirationYear
  **/
  @ApiModelProperty(value = "Card expiration year (Four digit year)")
  public Integer getCardExpirationYear() {
    return cardExpirationYear;
  }

  public void setCardExpirationYear(Integer cardExpirationYear) {
    this.cardExpirationYear = cardExpirationYear;
  }

  public OrderPaymentCreditCard cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Card number (masked to last 4)
   * @return cardNumber
  **/
  @ApiModelProperty(value = "Card number (masked to last 4)")
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }

  public OrderPaymentCreditCard cardNumberToken(String cardNumberToken) {
    this.cardNumberToken = cardNumberToken;
    return this;
  }

   /**
   * Card number token from hosted fields used to update the card number
   * @return cardNumberToken
  **/
  @ApiModelProperty(value = "Card number token from hosted fields used to update the card number")
  public String getCardNumberToken() {
    return cardNumberToken;
  }

  public void setCardNumberToken(String cardNumberToken) {
    this.cardNumberToken = cardNumberToken;
  }

  public OrderPaymentCreditCard cardNumberTruncated(Boolean cardNumberTruncated) {
    this.cardNumberTruncated = cardNumberTruncated;
    return this;
  }

   /**
   * True if the card has been truncated
   * @return cardNumberTruncated
  **/
  @ApiModelProperty(value = "True if the card has been truncated")
  public Boolean isCardNumberTruncated() {
    return cardNumberTruncated;
  }

  public void setCardNumberTruncated(Boolean cardNumberTruncated) {
    this.cardNumberTruncated = cardNumberTruncated;
  }

  public OrderPaymentCreditCard cardType(CardTypeEnum cardType) {
    this.cardType = cardType;
    return this;
  }

   /**
   * Card type
   * @return cardType
  **/
  @ApiModelProperty(value = "Card type")
  public CardTypeEnum getCardType() {
    return cardType;
  }

  public void setCardType(CardTypeEnum cardType) {
    this.cardType = cardType;
  }

  public OrderPaymentCreditCard cardVerificationNumberToken(String cardVerificationNumberToken) {
    this.cardVerificationNumberToken = cardVerificationNumberToken;
    return this;
  }

   /**
   * Card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries
   * @return cardVerificationNumberToken
  **/
  @ApiModelProperty(value = "Card verification number token from hosted fields, only for import/insert of new orders, completely ignored for updates, and always null/empty for queries")
  public String getCardVerificationNumberToken() {
    return cardVerificationNumberToken;
  }

  public void setCardVerificationNumberToken(String cardVerificationNumberToken) {
    this.cardVerificationNumberToken = cardVerificationNumberToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentCreditCard orderPaymentCreditCard = (OrderPaymentCreditCard) o;
    return Objects.equals(this.cardAuthTicket, orderPaymentCreditCard.cardAuthTicket) &&
        Objects.equals(this.cardAuthorizationAmount, orderPaymentCreditCard.cardAuthorizationAmount) &&
        Objects.equals(this.cardAuthorizationDts, orderPaymentCreditCard.cardAuthorizationDts) &&
        Objects.equals(this.cardAuthorizationReferenceNumber, orderPaymentCreditCard.cardAuthorizationReferenceNumber) &&
        Objects.equals(this.cardExpirationMonth, orderPaymentCreditCard.cardExpirationMonth) &&
        Objects.equals(this.cardExpirationYear, orderPaymentCreditCard.cardExpirationYear) &&
        Objects.equals(this.cardNumber, orderPaymentCreditCard.cardNumber) &&
        Objects.equals(this.cardNumberToken, orderPaymentCreditCard.cardNumberToken) &&
        Objects.equals(this.cardNumberTruncated, orderPaymentCreditCard.cardNumberTruncated) &&
        Objects.equals(this.cardType, orderPaymentCreditCard.cardType) &&
        Objects.equals(this.cardVerificationNumberToken, orderPaymentCreditCard.cardVerificationNumberToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAuthTicket, cardAuthorizationAmount, cardAuthorizationDts, cardAuthorizationReferenceNumber, cardExpirationMonth, cardExpirationYear, cardNumber, cardNumberToken, cardNumberTruncated, cardType, cardVerificationNumberToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentCreditCard {\n");
    
    sb.append("    cardAuthTicket: ").append(toIndentedString(cardAuthTicket)).append("\n");
    sb.append("    cardAuthorizationAmount: ").append(toIndentedString(cardAuthorizationAmount)).append("\n");
    sb.append("    cardAuthorizationDts: ").append(toIndentedString(cardAuthorizationDts)).append("\n");
    sb.append("    cardAuthorizationReferenceNumber: ").append(toIndentedString(cardAuthorizationReferenceNumber)).append("\n");
    sb.append("    cardExpirationMonth: ").append(toIndentedString(cardExpirationMonth)).append("\n");
    sb.append("    cardExpirationYear: ").append(toIndentedString(cardExpirationYear)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardNumberToken: ").append(toIndentedString(cardNumberToken)).append("\n");
    sb.append("    cardNumberTruncated: ").append(toIndentedString(cardNumberTruncated)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardVerificationNumberToken: ").append(toIndentedString(cardVerificationNumberToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


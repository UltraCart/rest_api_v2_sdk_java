/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * LookupRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-07T11:20:57.348-04:00[America/Indianapolis]")
public class LookupRequest {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private String matches;

  public static final String SERIALIZED_NAME_MAX_HITS = "max_hits";
  @SerializedName(SERIALIZED_NAME_MAX_HITS)
  private Integer maxHits;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_SUBCATEGORY = "subcategory";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORY)
  private String subcategory;

  public LookupRequest() { 
  }

  public LookupRequest category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public LookupRequest matches(String matches) {
    
    this.matches = matches;
    return this;
  }

   /**
   * Get matches
   * @return matches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMatches() {
    return matches;
  }


  public void setMatches(String matches) {
    this.matches = matches;
  }


  public LookupRequest maxHits(Integer maxHits) {
    
    this.maxHits = maxHits;
    return this;
  }

   /**
   * Get maxHits
   * @return maxHits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxHits() {
    return maxHits;
  }


  public void setMaxHits(Integer maxHits) {
    this.maxHits = maxHits;
  }


  public LookupRequest storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Get storefrontOid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public LookupRequest subcategory(String subcategory) {
    
    this.subcategory = subcategory;
    return this;
  }

   /**
   * Get subcategory
   * @return subcategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubcategory() {
    return subcategory;
  }


  public void setSubcategory(String subcategory) {
    this.subcategory = subcategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookupRequest lookupRequest = (LookupRequest) o;
    return Objects.equals(this.category, lookupRequest.category) &&
        Objects.equals(this.matches, lookupRequest.matches) &&
        Objects.equals(this.maxHits, lookupRequest.maxHits) &&
        Objects.equals(this.storefrontOid, lookupRequest.storefrontOid) &&
        Objects.equals(this.subcategory, lookupRequest.subcategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, matches, maxHits, storefrontOid, subcategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookupRequest {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    maxHits: ").append(toIndentedString(maxHits)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    subcategory: ").append(toIndentedString(subcategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("matches");
    openapiFields.add("max_hits");
    openapiFields.add("storefront_oid");
    openapiFields.add("subcategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LookupRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LookupRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LookupRequest is not found in the empty JSON string", LookupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LookupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LookupRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matches` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matches").toString()));
      }
      if (jsonObj.get("subcategory") != null && !jsonObj.get("subcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subcategory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LookupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LookupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LookupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LookupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LookupRequest>() {
           @Override
           public void write(JsonWriter out, LookupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LookupRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LookupRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LookupRequest
  * @throws IOException if the JSON string is invalid with respect to LookupRequest
  */
  public static LookupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LookupRequest.class);
  }

 /**
  * Convert an instance of LookupRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


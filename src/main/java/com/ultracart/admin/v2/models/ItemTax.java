/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemTaxExemption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemTax
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-09T15:29:19.921-04:00[America/Indianapolis]")
public class ItemTax {
  public static final String SERIALIZED_NAME_EXEMPTIONS = "exemptions";
  @SerializedName(SERIALIZED_NAME_EXEMPTIONS)
  private List<ItemTaxExemption> exemptions = null;

  public static final String SERIALIZED_NAME_TAX_FREE = "tax_free";
  @SerializedName(SERIALIZED_NAME_TAX_FREE)
  private Boolean taxFree;

  /**
   * Tax product type
   */
  @JsonAdapter(TaxProductTypeEnum.Adapter.class)
  public enum TaxProductTypeEnum {
    EMPTY(""),
    
    DIGITAL("digital"),
    
    PHYSICAL("physical"),
    
    SERVICE("service");

    private String value;

    TaxProductTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxProductTypeEnum fromValue(String value) {
      for (TaxProductTypeEnum b : TaxProductTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxProductTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxProductTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxProductTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxProductTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TAX_PRODUCT_TYPE = "tax_product_type";
  @SerializedName(SERIALIZED_NAME_TAX_PRODUCT_TYPE)
  private TaxProductTypeEnum taxProductType;

  public static final String SERIALIZED_NAME_TAXABLE_COST = "taxable_cost";
  @SerializedName(SERIALIZED_NAME_TAXABLE_COST)
  private BigDecimal taxableCost;

  public ItemTax() { 
  }

  public ItemTax exemptions(List<ItemTaxExemption> exemptions) {
    
    this.exemptions = exemptions;
    return this;
  }

  public ItemTax addExemptionsItem(ItemTaxExemption exemptionsItem) {
    if (this.exemptions == null) {
      this.exemptions = new ArrayList<>();
    }
    this.exemptions.add(exemptionsItem);
    return this;
  }

   /**
   * Exemptions
   * @return exemptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exemptions")

  public List<ItemTaxExemption> getExemptions() {
    return exemptions;
  }


  public void setExemptions(List<ItemTaxExemption> exemptions) {
    this.exemptions = exemptions;
  }


  public ItemTax taxFree(Boolean taxFree) {
    
    this.taxFree = taxFree;
    return this;
  }

   /**
   * True if tax free
   * @return taxFree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if tax free")

  public Boolean getTaxFree() {
    return taxFree;
  }


  public void setTaxFree(Boolean taxFree) {
    this.taxFree = taxFree;
  }


  public ItemTax taxProductType(TaxProductTypeEnum taxProductType) {
    
    this.taxProductType = taxProductType;
    return this;
  }

   /**
   * Tax product type
   * @return taxProductType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax product type")

  public TaxProductTypeEnum getTaxProductType() {
    return taxProductType;
  }


  public void setTaxProductType(TaxProductTypeEnum taxProductType) {
    this.taxProductType = taxProductType;
  }


  public ItemTax taxableCost(BigDecimal taxableCost) {
    
    this.taxableCost = taxableCost;
    return this;
  }

   /**
   * Taxable cost if different than regular cost
   * @return taxableCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Taxable cost if different than regular cost")

  public BigDecimal getTaxableCost() {
    return taxableCost;
  }


  public void setTaxableCost(BigDecimal taxableCost) {
    this.taxableCost = taxableCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemTax itemTax = (ItemTax) o;
    return Objects.equals(this.exemptions, itemTax.exemptions) &&
        Objects.equals(this.taxFree, itemTax.taxFree) &&
        Objects.equals(this.taxProductType, itemTax.taxProductType) &&
        Objects.equals(this.taxableCost, itemTax.taxableCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exemptions, taxFree, taxProductType, taxableCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemTax {\n");
    sb.append("    exemptions: ").append(toIndentedString(exemptions)).append("\n");
    sb.append("    taxFree: ").append(toIndentedString(taxFree)).append("\n");
    sb.append("    taxProductType: ").append(toIndentedString(taxProductType)).append("\n");
    sb.append("    taxableCost: ").append(toIndentedString(taxableCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exemptions");
    openapiFields.add("tax_free");
    openapiFields.add("tax_product_type");
    openapiFields.add("taxable_cost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemTax
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemTax.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemTax is not found in the empty JSON string", ItemTax.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemTax.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemTax` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayexemptions = jsonObj.getAsJsonArray("exemptions");
      if (jsonArrayexemptions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("exemptions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `exemptions` to be an array in the JSON string but got `%s`", jsonObj.get("exemptions").toString()));
        }

        // validate the optional field `exemptions` (array)
        for (int i = 0; i < jsonArrayexemptions.size(); i++) {
          ItemTaxExemption.validateJsonObject(jsonArrayexemptions.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("tax_product_type") != null && !jsonObj.get("tax_product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_product_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemTax.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemTax>() {
           @Override
           public void write(JsonWriter out, ItemTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemTax read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemTax given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemTax
  * @throws IOException if the JSON string is invalid with respect to ItemTax
  */
  public static ItemTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemTax.class);
  }

 /**
  * Convert an instance of ItemTax to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartShipping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-27T09:24:10.452-04:00[America/Indianapolis]")
public class CartShipping {
  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DAY_PHONE = "day_phone";
  @SerializedName(SERIALIZED_NAME_DAY_PHONE)
  private String dayPhone;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "delivery_date";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private String deliveryDate;

  public static final String SERIALIZED_NAME_EVENING_PHONE = "evening_phone";
  @SerializedName(SERIALIZED_NAME_EVENING_PHONE)
  private String eveningPhone;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LIFT_GATE = "lift_gate";
  @SerializedName(SERIALIZED_NAME_LIFT_GATE)
  private Boolean liftGate;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SHIP_ON_DATE = "ship_on_date";
  @SerializedName(SERIALIZED_NAME_SHIP_ON_DATE)
  private String shipOnDate;

  public static final String SERIALIZED_NAME_SHIP_TO_RESIDENTIAL = "ship_to_residential";
  @SerializedName(SERIALIZED_NAME_SHIP_TO_RESIDENTIAL)
  private Boolean shipToResidential;

  public static final String SERIALIZED_NAME_SHIPPING3RD_PARTY_ACCOUNT_NUMBER = "shipping_3rd_party_account_number";
  @SerializedName(SERIALIZED_NAME_SHIPPING3RD_PARTY_ACCOUNT_NUMBER)
  private String shipping3rdPartyAccountNumber;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shipping_method";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SPECIAL_INSTRUCTIONS = "special_instructions";
  @SerializedName(SERIALIZED_NAME_SPECIAL_INSTRUCTIONS)
  private String specialInstructions;

  public static final String SERIALIZED_NAME_STATE_REGION = "state_region";
  @SerializedName(SERIALIZED_NAME_STATE_REGION)
  private String stateRegion;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CartShipping() { 
  }

  public CartShipping address1(String address1) {
    
    this.address1 = address1;
    return this;
  }

   /**
   * Address line 1
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Address line 1")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public CartShipping address2(String address2) {
    
    this.address2 = address2;
    return this;
  }

   /**
   * Address line 2
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Address line 2")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public CartShipping city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public CartShipping company(String company) {
    
    this.company = company;
    return this;
  }

   /**
   * Company
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company")

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    this.company = company;
  }


  public CartShipping countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * ISO-3166 two letter country code
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO-3166 two letter country code")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public CartShipping dayPhone(String dayPhone) {
    
    this.dayPhone = dayPhone;
    return this;
  }

   /**
   * Day time phone
   * @return dayPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Day time phone")

  public String getDayPhone() {
    return dayPhone;
  }


  public void setDayPhone(String dayPhone) {
    this.dayPhone = dayPhone;
  }


  public CartShipping deliveryDate(String deliveryDate) {
    
    this.deliveryDate = deliveryDate;
    return this;
  }

   /**
   * Date the customer is requesting delivery on. Typically used for perishable product delivery.
   * @return deliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the customer is requesting delivery on. Typically used for perishable product delivery.")

  public String getDeliveryDate() {
    return deliveryDate;
  }


  public void setDeliveryDate(String deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public CartShipping eveningPhone(String eveningPhone) {
    
    this.eveningPhone = eveningPhone;
    return this;
  }

   /**
   * Evening phone
   * @return eveningPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Evening phone")

  public String getEveningPhone() {
    return eveningPhone;
  }


  public void setEveningPhone(String eveningPhone) {
    this.eveningPhone = eveningPhone;
  }


  public CartShipping firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public CartShipping lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public CartShipping liftGate(Boolean liftGate) {
    
    this.liftGate = liftGate;
    return this;
  }

   /**
   * Lift gate requested (LTL shipping methods only)
   * @return liftGate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lift gate requested (LTL shipping methods only)")

  public Boolean getLiftGate() {
    return liftGate;
  }


  public void setLiftGate(Boolean liftGate) {
    this.liftGate = liftGate;
  }


  public CartShipping postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal code
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal code")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public CartShipping shipOnDate(String shipOnDate) {
    
    this.shipOnDate = shipOnDate;
    return this;
  }

   /**
   * Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.
   * @return shipOnDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the customer is requesting that the order ship on.  Typically used for perishable product delivery.")

  public String getShipOnDate() {
    return shipOnDate;
  }


  public void setShipOnDate(String shipOnDate) {
    this.shipOnDate = shipOnDate;
  }


  public CartShipping shipToResidential(Boolean shipToResidential) {
    
    this.shipToResidential = shipToResidential;
    return this;
  }

   /**
   * True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.
   * @return shipToResidential
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the shipping adress is residential.  Effects the methods that are available to the customer as well as the price of the shipping method.")

  public Boolean getShipToResidential() {
    return shipToResidential;
  }


  public void setShipToResidential(Boolean shipToResidential) {
    this.shipToResidential = shipToResidential;
  }


  public CartShipping shipping3rdPartyAccountNumber(String shipping3rdPartyAccountNumber) {
    
    this.shipping3rdPartyAccountNumber = shipping3rdPartyAccountNumber;
    return this;
  }

   /**
   * 3rd party account number to ship against for UPS or FedEx
   * @return shipping3rdPartyAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "3rd party account number to ship against for UPS or FedEx")

  public String getShipping3rdPartyAccountNumber() {
    return shipping3rdPartyAccountNumber;
  }


  public void setShipping3rdPartyAccountNumber(String shipping3rdPartyAccountNumber) {
    this.shipping3rdPartyAccountNumber = shipping3rdPartyAccountNumber;
  }


  public CartShipping shippingMethod(String shippingMethod) {
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Shipping method
   * @return shippingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping method")

  public String getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public CartShipping specialInstructions(String specialInstructions) {
    
    this.specialInstructions = specialInstructions;
    return this;
  }

   /**
   * Special instructions from the customer regarding shipping
   * @return specialInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Special instructions from the customer regarding shipping")

  public String getSpecialInstructions() {
    return specialInstructions;
  }


  public void setSpecialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
  }


  public CartShipping stateRegion(String stateRegion) {
    
    this.stateRegion = stateRegion;
    return this;
  }

   /**
   * State/Region
   * @return stateRegion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State/Region")

  public String getStateRegion() {
    return stateRegion;
  }


  public void setStateRegion(String stateRegion) {
    this.stateRegion = stateRegion;
  }


  public CartShipping title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartShipping cartShipping = (CartShipping) o;
    return Objects.equals(this.address1, cartShipping.address1) &&
        Objects.equals(this.address2, cartShipping.address2) &&
        Objects.equals(this.city, cartShipping.city) &&
        Objects.equals(this.company, cartShipping.company) &&
        Objects.equals(this.countryCode, cartShipping.countryCode) &&
        Objects.equals(this.dayPhone, cartShipping.dayPhone) &&
        Objects.equals(this.deliveryDate, cartShipping.deliveryDate) &&
        Objects.equals(this.eveningPhone, cartShipping.eveningPhone) &&
        Objects.equals(this.firstName, cartShipping.firstName) &&
        Objects.equals(this.lastName, cartShipping.lastName) &&
        Objects.equals(this.liftGate, cartShipping.liftGate) &&
        Objects.equals(this.postalCode, cartShipping.postalCode) &&
        Objects.equals(this.shipOnDate, cartShipping.shipOnDate) &&
        Objects.equals(this.shipToResidential, cartShipping.shipToResidential) &&
        Objects.equals(this.shipping3rdPartyAccountNumber, cartShipping.shipping3rdPartyAccountNumber) &&
        Objects.equals(this.shippingMethod, cartShipping.shippingMethod) &&
        Objects.equals(this.specialInstructions, cartShipping.specialInstructions) &&
        Objects.equals(this.stateRegion, cartShipping.stateRegion) &&
        Objects.equals(this.title, cartShipping.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, city, company, countryCode, dayPhone, deliveryDate, eveningPhone, firstName, lastName, liftGate, postalCode, shipOnDate, shipToResidential, shipping3rdPartyAccountNumber, shippingMethod, specialInstructions, stateRegion, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartShipping {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    dayPhone: ").append(toIndentedString(dayPhone)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    eveningPhone: ").append(toIndentedString(eveningPhone)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    liftGate: ").append(toIndentedString(liftGate)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    shipOnDate: ").append(toIndentedString(shipOnDate)).append("\n");
    sb.append("    shipToResidential: ").append(toIndentedString(shipToResidential)).append("\n");
    sb.append("    shipping3rdPartyAccountNumber: ").append(toIndentedString(shipping3rdPartyAccountNumber)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    specialInstructions: ").append(toIndentedString(specialInstructions)).append("\n");
    sb.append("    stateRegion: ").append(toIndentedString(stateRegion)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("country_code");
    openapiFields.add("day_phone");
    openapiFields.add("delivery_date");
    openapiFields.add("evening_phone");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("lift_gate");
    openapiFields.add("postal_code");
    openapiFields.add("ship_on_date");
    openapiFields.add("ship_to_residential");
    openapiFields.add("shipping_3rd_party_account_number");
    openapiFields.add("shipping_method");
    openapiFields.add("special_instructions");
    openapiFields.add("state_region");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartShipping
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartShipping.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartShipping is not found in the empty JSON string", CartShipping.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartShipping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartShipping` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("address1") != null && !jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if (jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if (jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if (jsonObj.get("day_phone") != null && !jsonObj.get("day_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_phone").toString()));
      }
      if (jsonObj.get("delivery_date") != null && !jsonObj.get("delivery_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_date").toString()));
      }
      if (jsonObj.get("evening_phone") != null && !jsonObj.get("evening_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evening_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evening_phone").toString()));
      }
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (jsonObj.get("ship_on_date") != null && !jsonObj.get("ship_on_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ship_on_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ship_on_date").toString()));
      }
      if (jsonObj.get("shipping_3rd_party_account_number") != null && !jsonObj.get("shipping_3rd_party_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_3rd_party_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_3rd_party_account_number").toString()));
      }
      if (jsonObj.get("shipping_method") != null && !jsonObj.get("shipping_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_method").toString()));
      }
      if (jsonObj.get("special_instructions") != null && !jsonObj.get("special_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_instructions").toString()));
      }
      if (jsonObj.get("state_region") != null && !jsonObj.get("state_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_region").toString()));
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartShipping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartShipping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartShipping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartShipping.class));

       return (TypeAdapter<T>) new TypeAdapter<CartShipping>() {
           @Override
           public void write(JsonWriter out, CartShipping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartShipping read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartShipping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartShipping
  * @throws IOException if the JSON string is invalid with respect to CartShipping
  */
  public static CartShipping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartShipping.class);
  }

 /**
  * Convert an instance of CartShipping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


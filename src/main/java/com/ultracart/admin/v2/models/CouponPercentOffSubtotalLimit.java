/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CouponPercentOffSubtotalLimit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-24T10:35:17.654-05:00")



public class CouponPercentOffSubtotalLimit {
  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("discount_percent")
  private BigDecimal discountPercent = null;

  @SerializedName("limit")
  private BigDecimal limit = null;

  public CouponPercentOffSubtotalLimit currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter currency code the customer is viewing prices in
   * @return currencyCode
  **/
  @ApiModelProperty(value = "The ISO-4217 three letter currency code the customer is viewing prices in")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public CouponPercentOffSubtotalLimit discountPercent(BigDecimal discountPercent) {
    this.discountPercent = discountPercent;
    return this;
  }

   /**
   * The percentage of subtotal discount
   * @return discountPercent
  **/
  @ApiModelProperty(value = "The percentage of subtotal discount")
  public BigDecimal getDiscountPercent() {
    return discountPercent;
  }

  public void setDiscountPercent(BigDecimal discountPercent) {
    this.discountPercent = discountPercent;
  }

  public CouponPercentOffSubtotalLimit limit(BigDecimal limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum amount of subtotal used to determine discount.
   * @return limit
  **/
  @ApiModelProperty(value = "The maximum amount of subtotal used to determine discount.")
  public BigDecimal getLimit() {
    return limit;
  }

  public void setLimit(BigDecimal limit) {
    this.limit = limit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponPercentOffSubtotalLimit couponPercentOffSubtotalLimit = (CouponPercentOffSubtotalLimit) o;
    return Objects.equals(this.currencyCode, couponPercentOffSubtotalLimit.currencyCode) &&
        Objects.equals(this.discountPercent, couponPercentOffSubtotalLimit.discountPercent) &&
        Objects.equals(this.limit, couponPercentOffSubtotalLimit.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, discountPercent, limit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponPercentOffSubtotalLimit {\n");
    
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartPaymentCreditCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:19:44.125-04:00[America/Indianapolis]")
public class CartPaymentCreditCard {
  public static final String SERIALIZED_NAME_CARD_EXPIRATION_MONTH = "card_expiration_month";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRATION_MONTH)
  private Integer cardExpirationMonth;

  public static final String SERIALIZED_NAME_CARD_EXPIRATION_YEAR = "card_expiration_year";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRATION_YEAR)
  private Integer cardExpirationYear;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "card_number";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_NUMBER_TOKEN = "card_number_token";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_TOKEN)
  private String cardNumberToken;

  public static final String SERIALIZED_NAME_CARD_TYPE = "card_type";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CARD_VERIFICATION_NUMBER = "card_verification_number";
  @SerializedName(SERIALIZED_NAME_CARD_VERIFICATION_NUMBER)
  private String cardVerificationNumber;

  public static final String SERIALIZED_NAME_CARD_VERIFICATION_NUMBER_TOKEN = "card_verification_number_token";
  @SerializedName(SERIALIZED_NAME_CARD_VERIFICATION_NUMBER_TOKEN)
  private String cardVerificationNumberToken;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILE_CREDIT_CARD_ID = "customer_profile_credit_card_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILE_CREDIT_CARD_ID)
  private Integer customerProfileCreditCardId;

  public static final String SERIALIZED_NAME_STORE_CREDIT_CARD = "store_credit_card";
  @SerializedName(SERIALIZED_NAME_STORE_CREDIT_CARD)
  private Boolean storeCreditCard;

  public CartPaymentCreditCard() { 
  }

  public CartPaymentCreditCard cardExpirationMonth(Integer cardExpirationMonth) {
    
    this.cardExpirationMonth = cardExpirationMonth;
    return this;
  }

   /**
   * Card expiration month (1-12)
   * @return cardExpirationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card expiration month (1-12)")

  public Integer getCardExpirationMonth() {
    return cardExpirationMonth;
  }


  public void setCardExpirationMonth(Integer cardExpirationMonth) {
    this.cardExpirationMonth = cardExpirationMonth;
  }


  public CartPaymentCreditCard cardExpirationYear(Integer cardExpirationYear) {
    
    this.cardExpirationYear = cardExpirationYear;
    return this;
  }

   /**
   * Card expiration year (four digit year)
   * @return cardExpirationYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card expiration year (four digit year)")

  public Integer getCardExpirationYear() {
    return cardExpirationYear;
  }


  public void setCardExpirationYear(Integer cardExpirationYear) {
    this.cardExpirationYear = cardExpirationYear;
  }


  public CartPaymentCreditCard cardNumber(String cardNumber) {
    
    this.cardNumber = cardNumber;
    return this;
  }

   /**
   * Card number (masked to the last 4)
   * @return cardNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card number (masked to the last 4)")

  public String getCardNumber() {
    return cardNumber;
  }


  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public CartPaymentCreditCard cardNumberToken(String cardNumberToken) {
    
    this.cardNumberToken = cardNumberToken;
    return this;
  }

   /**
   * Hosted field token for the card number
   * @return cardNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hosted field token for the card number")

  public String getCardNumberToken() {
    return cardNumberToken;
  }


  public void setCardNumberToken(String cardNumberToken) {
    this.cardNumberToken = cardNumberToken;
  }


  public CartPaymentCreditCard cardType(String cardType) {
    
    this.cardType = cardType;
    return this;
  }

   /**
   * Card type
   * @return cardType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card type")

  public String getCardType() {
    return cardType;
  }


  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public CartPaymentCreditCard cardVerificationNumber(String cardVerificationNumber) {
    
    this.cardVerificationNumber = cardVerificationNumber;
    return this;
  }

   /**
   * Card verification number (masked)
   * @return cardVerificationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Card verification number (masked)")

  public String getCardVerificationNumber() {
    return cardVerificationNumber;
  }


  public void setCardVerificationNumber(String cardVerificationNumber) {
    this.cardVerificationNumber = cardVerificationNumber;
  }


  public CartPaymentCreditCard cardVerificationNumberToken(String cardVerificationNumberToken) {
    
    this.cardVerificationNumberToken = cardVerificationNumberToken;
    return this;
  }

   /**
   * Hosted field token for the card verification number
   * @return cardVerificationNumberToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hosted field token for the card verification number")

  public String getCardVerificationNumberToken() {
    return cardVerificationNumberToken;
  }


  public void setCardVerificationNumberToken(String cardVerificationNumberToken) {
    this.cardVerificationNumberToken = cardVerificationNumberToken;
  }


  public CartPaymentCreditCard customerProfileCreditCardId(Integer customerProfileCreditCardId) {
    
    this.customerProfileCreditCardId = customerProfileCreditCardId;
    return this;
  }

   /**
   * ID of the stored credit card to use
   * @return customerProfileCreditCardId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the stored credit card to use")

  public Integer getCustomerProfileCreditCardId() {
    return customerProfileCreditCardId;
  }


  public void setCustomerProfileCreditCardId(Integer customerProfileCreditCardId) {
    this.customerProfileCreditCardId = customerProfileCreditCardId;
  }


  public CartPaymentCreditCard storeCreditCard(Boolean storeCreditCard) {
    
    this.storeCreditCard = storeCreditCard;
    return this;
  }

   /**
   * True if the customer wants to store the card on their profile for future re-use
   * @return storeCreditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer wants to store the card on their profile for future re-use")

  public Boolean getStoreCreditCard() {
    return storeCreditCard;
  }


  public void setStoreCreditCard(Boolean storeCreditCard) {
    this.storeCreditCard = storeCreditCard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartPaymentCreditCard cartPaymentCreditCard = (CartPaymentCreditCard) o;
    return Objects.equals(this.cardExpirationMonth, cartPaymentCreditCard.cardExpirationMonth) &&
        Objects.equals(this.cardExpirationYear, cartPaymentCreditCard.cardExpirationYear) &&
        Objects.equals(this.cardNumber, cartPaymentCreditCard.cardNumber) &&
        Objects.equals(this.cardNumberToken, cartPaymentCreditCard.cardNumberToken) &&
        Objects.equals(this.cardType, cartPaymentCreditCard.cardType) &&
        Objects.equals(this.cardVerificationNumber, cartPaymentCreditCard.cardVerificationNumber) &&
        Objects.equals(this.cardVerificationNumberToken, cartPaymentCreditCard.cardVerificationNumberToken) &&
        Objects.equals(this.customerProfileCreditCardId, cartPaymentCreditCard.customerProfileCreditCardId) &&
        Objects.equals(this.storeCreditCard, cartPaymentCreditCard.storeCreditCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardExpirationMonth, cardExpirationYear, cardNumber, cardNumberToken, cardType, cardVerificationNumber, cardVerificationNumberToken, customerProfileCreditCardId, storeCreditCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartPaymentCreditCard {\n");
    sb.append("    cardExpirationMonth: ").append(toIndentedString(cardExpirationMonth)).append("\n");
    sb.append("    cardExpirationYear: ").append(toIndentedString(cardExpirationYear)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardNumberToken: ").append(toIndentedString(cardNumberToken)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardVerificationNumber: ").append(toIndentedString(cardVerificationNumber)).append("\n");
    sb.append("    cardVerificationNumberToken: ").append(toIndentedString(cardVerificationNumberToken)).append("\n");
    sb.append("    customerProfileCreditCardId: ").append(toIndentedString(customerProfileCreditCardId)).append("\n");
    sb.append("    storeCreditCard: ").append(toIndentedString(storeCreditCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_expiration_month");
    openapiFields.add("card_expiration_year");
    openapiFields.add("card_number");
    openapiFields.add("card_number_token");
    openapiFields.add("card_type");
    openapiFields.add("card_verification_number");
    openapiFields.add("card_verification_number_token");
    openapiFields.add("customer_profile_credit_card_id");
    openapiFields.add("store_credit_card");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartPaymentCreditCard
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartPaymentCreditCard.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartPaymentCreditCard is not found in the empty JSON string", CartPaymentCreditCard.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartPaymentCreditCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartPaymentCreditCard` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("card_number") != null && !jsonObj.get("card_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number").toString()));
      }
      if (jsonObj.get("card_number_token") != null && !jsonObj.get("card_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number_token").toString()));
      }
      if (jsonObj.get("card_type") != null && !jsonObj.get("card_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_type").toString()));
      }
      if (jsonObj.get("card_verification_number") != null && !jsonObj.get("card_verification_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_verification_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_verification_number").toString()));
      }
      if (jsonObj.get("card_verification_number_token") != null && !jsonObj.get("card_verification_number_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_verification_number_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_verification_number_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartPaymentCreditCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartPaymentCreditCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartPaymentCreditCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartPaymentCreditCard.class));

       return (TypeAdapter<T>) new TypeAdapter<CartPaymentCreditCard>() {
           @Override
           public void write(JsonWriter out, CartPaymentCreditCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartPaymentCreditCard read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartPaymentCreditCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartPaymentCreditCard
  * @throws IOException if the JSON string is invalid with respect to CartPaymentCreditCard
  */
  public static CartPaymentCreditCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartPaymentCreditCard.class);
  }

 /**
  * Convert an instance of CartPaymentCreditCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


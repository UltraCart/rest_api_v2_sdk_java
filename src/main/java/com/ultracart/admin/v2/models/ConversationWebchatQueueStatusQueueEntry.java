/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationWebchatQueueStatusQueueEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-12T09:21:23.610-04:00[America/Indianapolis]")
public class ConversationWebchatQueueStatusQueueEntry {
  public static final String SERIALIZED_NAME_CONVERSATION_PARTICIPANT_ARN = "conversation_participant_arn";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_PARTICIPANT_ARN)
  private String conversationParticipantArn;

  public static final String SERIALIZED_NAME_CONVERSATION_PARTICIPANT_NAME = "conversation_participant_name";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_PARTICIPANT_NAME)
  private String conversationParticipantName;

  public static final String SERIALIZED_NAME_CONVERSATION_WEBCHAT_QUEUE_UUID = "conversation_webchat_queue_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_WEBCHAT_QUEUE_UUID)
  private String conversationWebchatQueueUuid;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_JOIN_DTS = "join_dts";
  @SerializedName(SERIALIZED_NAME_JOIN_DTS)
  private String joinDts;

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public ConversationWebchatQueueStatusQueueEntry() { 
  }

  public ConversationWebchatQueueStatusQueueEntry conversationParticipantArn(String conversationParticipantArn) {
    
    this.conversationParticipantArn = conversationParticipantArn;
    return this;
  }

   /**
   * Get conversationParticipantArn
   * @return conversationParticipantArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationParticipantArn() {
    return conversationParticipantArn;
  }


  public void setConversationParticipantArn(String conversationParticipantArn) {
    this.conversationParticipantArn = conversationParticipantArn;
  }


  public ConversationWebchatQueueStatusQueueEntry conversationParticipantName(String conversationParticipantName) {
    
    this.conversationParticipantName = conversationParticipantName;
    return this;
  }

   /**
   * Get conversationParticipantName
   * @return conversationParticipantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationParticipantName() {
    return conversationParticipantName;
  }


  public void setConversationParticipantName(String conversationParticipantName) {
    this.conversationParticipantName = conversationParticipantName;
  }


  public ConversationWebchatQueueStatusQueueEntry conversationWebchatQueueUuid(String conversationWebchatQueueUuid) {
    
    this.conversationWebchatQueueUuid = conversationWebchatQueueUuid;
    return this;
  }

   /**
   * Get conversationWebchatQueueUuid
   * @return conversationWebchatQueueUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConversationWebchatQueueUuid() {
    return conversationWebchatQueueUuid;
  }


  public void setConversationWebchatQueueUuid(String conversationWebchatQueueUuid) {
    this.conversationWebchatQueueUuid = conversationWebchatQueueUuid;
  }


  public ConversationWebchatQueueStatusQueueEntry email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public ConversationWebchatQueueStatusQueueEntry joinDts(String joinDts) {
    
    this.joinDts = joinDts;
    return this;
  }

   /**
   * Date/time the customer joined the queue
   * @return joinDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time the customer joined the queue")

  public String getJoinDts() {
    return joinDts;
  }


  public void setJoinDts(String joinDts) {
    this.joinDts = joinDts;
  }


  public ConversationWebchatQueueStatusQueueEntry question(String question) {
    
    this.question = question;
    return this;
  }

   /**
   * Get question
   * @return question
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQuestion() {
    return question;
  }


  public void setQuestion(String question) {
    this.question = question;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationWebchatQueueStatusQueueEntry conversationWebchatQueueStatusQueueEntry = (ConversationWebchatQueueStatusQueueEntry) o;
    return Objects.equals(this.conversationParticipantArn, conversationWebchatQueueStatusQueueEntry.conversationParticipantArn) &&
        Objects.equals(this.conversationParticipantName, conversationWebchatQueueStatusQueueEntry.conversationParticipantName) &&
        Objects.equals(this.conversationWebchatQueueUuid, conversationWebchatQueueStatusQueueEntry.conversationWebchatQueueUuid) &&
        Objects.equals(this.email, conversationWebchatQueueStatusQueueEntry.email) &&
        Objects.equals(this.joinDts, conversationWebchatQueueStatusQueueEntry.joinDts) &&
        Objects.equals(this.question, conversationWebchatQueueStatusQueueEntry.question);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationParticipantArn, conversationParticipantName, conversationWebchatQueueUuid, email, joinDts, question);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationWebchatQueueStatusQueueEntry {\n");
    sb.append("    conversationParticipantArn: ").append(toIndentedString(conversationParticipantArn)).append("\n");
    sb.append("    conversationParticipantName: ").append(toIndentedString(conversationParticipantName)).append("\n");
    sb.append("    conversationWebchatQueueUuid: ").append(toIndentedString(conversationWebchatQueueUuid)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    joinDts: ").append(toIndentedString(joinDts)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversation_participant_arn");
    openapiFields.add("conversation_participant_name");
    openapiFields.add("conversation_webchat_queue_uuid");
    openapiFields.add("email");
    openapiFields.add("join_dts");
    openapiFields.add("question");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationWebchatQueueStatusQueueEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationWebchatQueueStatusQueueEntry.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationWebchatQueueStatusQueueEntry is not found in the empty JSON string", ConversationWebchatQueueStatusQueueEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationWebchatQueueStatusQueueEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationWebchatQueueStatusQueueEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("conversation_participant_arn") != null && !jsonObj.get("conversation_participant_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_participant_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_participant_arn").toString()));
      }
      if (jsonObj.get("conversation_participant_name") != null && !jsonObj.get("conversation_participant_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_participant_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_participant_name").toString()));
      }
      if (jsonObj.get("conversation_webchat_queue_uuid") != null && !jsonObj.get("conversation_webchat_queue_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_webchat_queue_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_webchat_queue_uuid").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("join_dts") != null && !jsonObj.get("join_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_dts").toString()));
      }
      if (jsonObj.get("question") != null && !jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationWebchatQueueStatusQueueEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationWebchatQueueStatusQueueEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationWebchatQueueStatusQueueEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationWebchatQueueStatusQueueEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationWebchatQueueStatusQueueEntry>() {
           @Override
           public void write(JsonWriter out, ConversationWebchatQueueStatusQueueEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationWebchatQueueStatusQueueEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationWebchatQueueStatusQueueEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationWebchatQueueStatusQueueEntry
  * @throws IOException if the JSON string is invalid with respect to ConversationWebchatQueueStatusQueueEntry
  */
  public static ConversationWebchatQueueStatusQueueEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationWebchatQueueStatusQueueEntry.class);
  }

 /**
  * Convert an instance of ConversationWebchatQueueStatusQueueEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


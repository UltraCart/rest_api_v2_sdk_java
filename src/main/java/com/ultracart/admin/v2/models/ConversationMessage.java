/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationMessageTransportStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-21T16:45:37.861-04:00[America/Indianapolis]")
public class ConversationMessage {
  public static final String SERIALIZED_NAME_AUTHOR_CONVERSATION_PARTICIPANT_ARN = "author_conversation_participant_arn";
  @SerializedName(SERIALIZED_NAME_AUTHOR_CONVERSATION_PARTICIPANT_ARN)
  private String authorConversationParticipantArn;

  public static final String SERIALIZED_NAME_AUTHOR_CONVERSATION_PARTICIPANT_NAME = "author_conversation_participant_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_CONVERSATION_PARTICIPANT_NAME)
  private String authorConversationParticipantName;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_MEDIA_URLS = "media_urls";
  @SerializedName(SERIALIZED_NAME_MEDIA_URLS)
  private List<String> mediaUrls = null;

  public static final String SERIALIZED_NAME_MESSAGE_DTS = "message_dts";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DTS)
  private String messageDts;

  public static final String SERIALIZED_NAME_TRANSPORT_STATUSES = "transport_statuses";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_STATUSES)
  private List<ConversationMessageTransportStatus> transportStatuses = null;

  public ConversationMessage() { 
  }

  public ConversationMessage authorConversationParticipantArn(String authorConversationParticipantArn) {
    
    this.authorConversationParticipantArn = authorConversationParticipantArn;
    return this;
  }

   /**
   * Get authorConversationParticipantArn
   * @return authorConversationParticipantArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorConversationParticipantArn() {
    return authorConversationParticipantArn;
  }


  public void setAuthorConversationParticipantArn(String authorConversationParticipantArn) {
    this.authorConversationParticipantArn = authorConversationParticipantArn;
  }


  public ConversationMessage authorConversationParticipantName(String authorConversationParticipantName) {
    
    this.authorConversationParticipantName = authorConversationParticipantName;
    return this;
  }

   /**
   * Get authorConversationParticipantName
   * @return authorConversationParticipantName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAuthorConversationParticipantName() {
    return authorConversationParticipantName;
  }


  public void setAuthorConversationParticipantName(String authorConversationParticipantName) {
    this.authorConversationParticipantName = authorConversationParticipantName;
  }


  public ConversationMessage body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public ConversationMessage mediaUrls(List<String> mediaUrls) {
    
    this.mediaUrls = mediaUrls;
    return this;
  }

  public ConversationMessage addMediaUrlsItem(String mediaUrlsItem) {
    if (this.mediaUrls == null) {
      this.mediaUrls = new ArrayList<>();
    }
    this.mediaUrls.add(mediaUrlsItem);
    return this;
  }

   /**
   * Get mediaUrls
   * @return mediaUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getMediaUrls() {
    return mediaUrls;
  }


  public void setMediaUrls(List<String> mediaUrls) {
    this.mediaUrls = mediaUrls;
  }


  public ConversationMessage messageDts(String messageDts) {
    
    this.messageDts = messageDts;
    return this;
  }

   /**
   * Message date/time
   * @return messageDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message date/time")

  public String getMessageDts() {
    return messageDts;
  }


  public void setMessageDts(String messageDts) {
    this.messageDts = messageDts;
  }


  public ConversationMessage transportStatuses(List<ConversationMessageTransportStatus> transportStatuses) {
    
    this.transportStatuses = transportStatuses;
    return this;
  }

  public ConversationMessage addTransportStatusesItem(ConversationMessageTransportStatus transportStatusesItem) {
    if (this.transportStatuses == null) {
      this.transportStatuses = new ArrayList<>();
    }
    this.transportStatuses.add(transportStatusesItem);
    return this;
  }

   /**
   * Get transportStatuses
   * @return transportStatuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationMessageTransportStatus> getTransportStatuses() {
    return transportStatuses;
  }


  public void setTransportStatuses(List<ConversationMessageTransportStatus> transportStatuses) {
    this.transportStatuses = transportStatuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationMessage conversationMessage = (ConversationMessage) o;
    return Objects.equals(this.authorConversationParticipantArn, conversationMessage.authorConversationParticipantArn) &&
        Objects.equals(this.authorConversationParticipantName, conversationMessage.authorConversationParticipantName) &&
        Objects.equals(this.body, conversationMessage.body) &&
        Objects.equals(this.mediaUrls, conversationMessage.mediaUrls) &&
        Objects.equals(this.messageDts, conversationMessage.messageDts) &&
        Objects.equals(this.transportStatuses, conversationMessage.transportStatuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorConversationParticipantArn, authorConversationParticipantName, body, mediaUrls, messageDts, transportStatuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationMessage {\n");
    sb.append("    authorConversationParticipantArn: ").append(toIndentedString(authorConversationParticipantArn)).append("\n");
    sb.append("    authorConversationParticipantName: ").append(toIndentedString(authorConversationParticipantName)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    mediaUrls: ").append(toIndentedString(mediaUrls)).append("\n");
    sb.append("    messageDts: ").append(toIndentedString(messageDts)).append("\n");
    sb.append("    transportStatuses: ").append(toIndentedString(transportStatuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author_conversation_participant_arn");
    openapiFields.add("author_conversation_participant_name");
    openapiFields.add("body");
    openapiFields.add("media_urls");
    openapiFields.add("message_dts");
    openapiFields.add("transport_statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationMessage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationMessage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationMessage is not found in the empty JSON string", ConversationMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationMessage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("author_conversation_participant_arn") != null && !jsonObj.get("author_conversation_participant_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_conversation_participant_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_conversation_participant_arn").toString()));
      }
      if (jsonObj.get("author_conversation_participant_name") != null && !jsonObj.get("author_conversation_participant_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_conversation_participant_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_conversation_participant_name").toString()));
      }
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("media_urls") != null && !jsonObj.get("media_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_urls` to be an array in the JSON string but got `%s`", jsonObj.get("media_urls").toString()));
      }
      if (jsonObj.get("message_dts") != null && !jsonObj.get("message_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_dts").toString()));
      }
      JsonArray jsonArraytransportStatuses = jsonObj.getAsJsonArray("transport_statuses");
      if (jsonArraytransportStatuses != null) {
        // ensure the json data is an array
        if (!jsonObj.get("transport_statuses").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `transport_statuses` to be an array in the JSON string but got `%s`", jsonObj.get("transport_statuses").toString()));
        }

        // validate the optional field `transport_statuses` (array)
        for (int i = 0; i < jsonArraytransportStatuses.size(); i++) {
          ConversationMessageTransportStatus.validateJsonObject(jsonArraytransportStatuses.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationMessage>() {
           @Override
           public void write(JsonWriter out, ConversationMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationMessage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationMessage
  * @throws IOException if the JSON string is invalid with respect to ConversationMessage
  */
  public static ConversationMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationMessage.class);
  }

 /**
  * Convert an instance of ConversationMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationAgentProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T16:39:09.029-04:00[America/Indianapolis]")
public class ConversationAgentProfile {
  public static final String SERIALIZED_NAME_AI = "ai";
  @SerializedName(SERIALIZED_NAME_AI)
  private Boolean ai;

  public static final String SERIALIZED_NAME_AI_CHAT_INSTRUCTIONS = "ai_chat_instructions";
  @SerializedName(SERIALIZED_NAME_AI_CHAT_INSTRUCTIONS)
  private String aiChatInstructions;

  public static final String SERIALIZED_NAME_AI_PERSONA = "ai_persona";
  @SerializedName(SERIALIZED_NAME_AI_PERSONA)
  private String aiPersona;

  public static final String SERIALIZED_NAME_AI_SMS_INSTRUCTIONS = "ai_sms_instructions";
  @SerializedName(SERIALIZED_NAME_AI_SMS_INSTRUCTIONS)
  private String aiSmsInstructions;

  public static final String SERIALIZED_NAME_CHAT_LIMIT = "chat_limit";
  @SerializedName(SERIALIZED_NAME_CHAT_LIMIT)
  private Integer chatLimit;

  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE_ISO_CODE = "default_language_iso_code";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE_ISO_CODE)
  private String defaultLanguageIsoCode;

  /**
   * Default status when the agent loads conversations app.
   */
  @JsonAdapter(DefaultStatusEnum.Adapter.class)
  public enum DefaultStatusEnum {
    AVAILABLE("available"),
    
    BUSY("busy"),
    
    UNAVAILABLE("unavailable");

    private String value;

    DefaultStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultStatusEnum fromValue(String value) {
      for (DefaultStatusEnum b : DefaultStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_STATUS = "default_status";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STATUS)
  private DefaultStatusEnum defaultStatus;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_UPLOAD_KEY = "profile_image_upload_key";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_UPLOAD_KEY)
  private String profileImageUploadKey;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_URL = "profile_image_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_URL)
  private String profileImageUrl;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public ConversationAgentProfile() { 
  }

  public ConversationAgentProfile ai(Boolean ai) {
    
    this.ai = ai;
    return this;
  }

   /**
   * AI powered chat bot
   * @return ai
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "AI powered chat bot")

  public Boolean getAi() {
    return ai;
  }


  public void setAi(Boolean ai) {
    this.ai = ai;
  }


  public ConversationAgentProfile aiChatInstructions(String aiChatInstructions) {
    
    this.aiChatInstructions = aiChatInstructions;
    return this;
  }

   /**
   * Additional instructions for this AI when handle web chats
   * @return aiChatInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional instructions for this AI when handle web chats")

  public String getAiChatInstructions() {
    return aiChatInstructions;
  }


  public void setAiChatInstructions(String aiChatInstructions) {
    this.aiChatInstructions = aiChatInstructions;
  }


  public ConversationAgentProfile aiPersona(String aiPersona) {
    
    this.aiPersona = aiPersona;
    return this;
  }

   /**
   * Persona of this AI agent
   * @return aiPersona
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Persona of this AI agent")

  public String getAiPersona() {
    return aiPersona;
  }


  public void setAiPersona(String aiPersona) {
    this.aiPersona = aiPersona;
  }


  public ConversationAgentProfile aiSmsInstructions(String aiSmsInstructions) {
    
    this.aiSmsInstructions = aiSmsInstructions;
    return this;
  }

   /**
   * Additional instructions for this AI when handle SMS messages
   * @return aiSmsInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional instructions for this AI when handle SMS messages")

  public String getAiSmsInstructions() {
    return aiSmsInstructions;
  }


  public void setAiSmsInstructions(String aiSmsInstructions) {
    this.aiSmsInstructions = aiSmsInstructions;
  }


  public ConversationAgentProfile chatLimit(Integer chatLimit) {
    
    this.chatLimit = chatLimit;
    return this;
  }

   /**
   * The number of engagement chats that can be pushed on them at any given time.
   * @return chatLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of engagement chats that can be pushed on them at any given time.")

  public Integer getChatLimit() {
    return chatLimit;
  }


  public void setChatLimit(Integer chatLimit) {
    this.chatLimit = chatLimit;
  }


  public ConversationAgentProfile defaultLanguageIsoCode(String defaultLanguageIsoCode) {
    
    this.defaultLanguageIsoCode = defaultLanguageIsoCode;
    return this;
  }

   /**
   * The default language the agent is chatting in
   * @return defaultLanguageIsoCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The default language the agent is chatting in")

  public String getDefaultLanguageIsoCode() {
    return defaultLanguageIsoCode;
  }


  public void setDefaultLanguageIsoCode(String defaultLanguageIsoCode) {
    this.defaultLanguageIsoCode = defaultLanguageIsoCode;
  }


  public ConversationAgentProfile defaultStatus(DefaultStatusEnum defaultStatus) {
    
    this.defaultStatus = defaultStatus;
    return this;
  }

   /**
   * Default status when the agent loads conversations app.
   * @return defaultStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default status when the agent loads conversations app.")

  public DefaultStatusEnum getDefaultStatus() {
    return defaultStatus;
  }


  public void setDefaultStatus(DefaultStatusEnum defaultStatus) {
    this.defaultStatus = defaultStatus;
  }


  public ConversationAgentProfile displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * An alternate name that the agent wants to use in chat.
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An alternate name that the agent wants to use in chat.")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConversationAgentProfile name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Their actual user name for profile settings display as placeholder test
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Their actual user name for profile settings display as placeholder test")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConversationAgentProfile profileImageUploadKey(String profileImageUploadKey) {
    
    this.profileImageUploadKey = profileImageUploadKey;
    return this;
  }

   /**
   * An upload key used to update the profile image.
   * @return profileImageUploadKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An upload key used to update the profile image.")

  public String getProfileImageUploadKey() {
    return profileImageUploadKey;
  }


  public void setProfileImageUploadKey(String profileImageUploadKey) {
    this.profileImageUploadKey = profileImageUploadKey;
  }


  public ConversationAgentProfile profileImageUrl(String profileImageUrl) {
    
    this.profileImageUrl = profileImageUrl;
    return this;
  }

   /**
   * Their current profile image URL
   * @return profileImageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Their current profile image URL")

  public String getProfileImageUrl() {
    return profileImageUrl;
  }


  public void setProfileImageUrl(String profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
  }


  public ConversationAgentProfile userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID associated with the agent.  Populated by getAgentProfiles call only.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User ID associated with the agent.  Populated by getAgentProfiles call only.")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationAgentProfile conversationAgentProfile = (ConversationAgentProfile) o;
    return Objects.equals(this.ai, conversationAgentProfile.ai) &&
        Objects.equals(this.aiChatInstructions, conversationAgentProfile.aiChatInstructions) &&
        Objects.equals(this.aiPersona, conversationAgentProfile.aiPersona) &&
        Objects.equals(this.aiSmsInstructions, conversationAgentProfile.aiSmsInstructions) &&
        Objects.equals(this.chatLimit, conversationAgentProfile.chatLimit) &&
        Objects.equals(this.defaultLanguageIsoCode, conversationAgentProfile.defaultLanguageIsoCode) &&
        Objects.equals(this.defaultStatus, conversationAgentProfile.defaultStatus) &&
        Objects.equals(this.displayName, conversationAgentProfile.displayName) &&
        Objects.equals(this.name, conversationAgentProfile.name) &&
        Objects.equals(this.profileImageUploadKey, conversationAgentProfile.profileImageUploadKey) &&
        Objects.equals(this.profileImageUrl, conversationAgentProfile.profileImageUrl) &&
        Objects.equals(this.userId, conversationAgentProfile.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ai, aiChatInstructions, aiPersona, aiSmsInstructions, chatLimit, defaultLanguageIsoCode, defaultStatus, displayName, name, profileImageUploadKey, profileImageUrl, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationAgentProfile {\n");
    sb.append("    ai: ").append(toIndentedString(ai)).append("\n");
    sb.append("    aiChatInstructions: ").append(toIndentedString(aiChatInstructions)).append("\n");
    sb.append("    aiPersona: ").append(toIndentedString(aiPersona)).append("\n");
    sb.append("    aiSmsInstructions: ").append(toIndentedString(aiSmsInstructions)).append("\n");
    sb.append("    chatLimit: ").append(toIndentedString(chatLimit)).append("\n");
    sb.append("    defaultLanguageIsoCode: ").append(toIndentedString(defaultLanguageIsoCode)).append("\n");
    sb.append("    defaultStatus: ").append(toIndentedString(defaultStatus)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    profileImageUploadKey: ").append(toIndentedString(profileImageUploadKey)).append("\n");
    sb.append("    profileImageUrl: ").append(toIndentedString(profileImageUrl)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ai");
    openapiFields.add("ai_chat_instructions");
    openapiFields.add("ai_persona");
    openapiFields.add("ai_sms_instructions");
    openapiFields.add("chat_limit");
    openapiFields.add("default_language_iso_code");
    openapiFields.add("default_status");
    openapiFields.add("display_name");
    openapiFields.add("name");
    openapiFields.add("profile_image_upload_key");
    openapiFields.add("profile_image_url");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationAgentProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationAgentProfile.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationAgentProfile is not found in the empty JSON string", ConversationAgentProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationAgentProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationAgentProfile` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ai_chat_instructions") != null && !jsonObj.get("ai_chat_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ai_chat_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ai_chat_instructions").toString()));
      }
      if (jsonObj.get("ai_persona") != null && !jsonObj.get("ai_persona").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ai_persona` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ai_persona").toString()));
      }
      if (jsonObj.get("ai_sms_instructions") != null && !jsonObj.get("ai_sms_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ai_sms_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ai_sms_instructions").toString()));
      }
      if (jsonObj.get("default_language_iso_code") != null && !jsonObj.get("default_language_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_language_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_language_iso_code").toString()));
      }
      if (jsonObj.get("default_status") != null && !jsonObj.get("default_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_status").toString()));
      }
      if (jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("profile_image_upload_key") != null && !jsonObj.get("profile_image_upload_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image_upload_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image_upload_key").toString()));
      }
      if (jsonObj.get("profile_image_url") != null && !jsonObj.get("profile_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationAgentProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationAgentProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationAgentProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationAgentProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationAgentProfile>() {
           @Override
           public void write(JsonWriter out, ConversationAgentProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationAgentProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationAgentProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationAgentProfile
  * @throws IOException if the JSON string is invalid with respect to ConversationAgentProfile
  */
  public static ConversationAgentProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationAgentProfile.class);
  }

 /**
  * Convert an instance of ConversationAgentProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


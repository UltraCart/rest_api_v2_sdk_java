/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartItemAttribute;
import com.ultracart.admin.v2.models.CartItemMultimedia;
import com.ultracart.admin.v2.models.CartItemOption;
import com.ultracart.admin.v2.models.CartItemPhysical;
import com.ultracart.admin.v2.models.CartItemVariationSelection;
import com.ultracart.admin.v2.models.CartKitComponentOption;
import com.ultracart.admin.v2.models.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T11:32:05.355-04:00[America/Indianapolis]")
public class CartItem {
  public static final String SERIALIZED_NAME_ARBITRARY_UNIT_COST = "arbitrary_unit_cost";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_UNIT_COST)
  private Currency arbitraryUnitCost;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<CartItemAttribute> attributes = null;

  public static final String SERIALIZED_NAME_AUTO_ORDER_SCHEDULE = "auto_order_schedule";
  @SerializedName(SERIALIZED_NAME_AUTO_ORDER_SCHEDULE)
  private String autoOrderSchedule;

  public static final String SERIALIZED_NAME_DEFAULT_IMAGE_URL = "default_image_url";
  @SerializedName(SERIALIZED_NAME_DEFAULT_IMAGE_URL)
  private String defaultImageUrl;

  public static final String SERIALIZED_NAME_DEFAULT_THUMBNAIL_URL = "default_thumbnail_url";
  @SerializedName(SERIALIZED_NAME_DEFAULT_THUMBNAIL_URL)
  private String defaultThumbnailUrl;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Currency discount;

  public static final String SERIALIZED_NAME_EXTENDED_DESCRIPTION = "extended_description";
  @SerializedName(SERIALIZED_NAME_EXTENDED_DESCRIPTION)
  private String extendedDescription;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_OID = "item_oid";
  @SerializedName(SERIALIZED_NAME_ITEM_OID)
  private Integer itemOid;

  public static final String SERIALIZED_NAME_KIT = "kit";
  @SerializedName(SERIALIZED_NAME_KIT)
  private Boolean kit;

  public static final String SERIALIZED_NAME_KIT_COMPONENT_OPTIONS = "kit_component_options";
  @SerializedName(SERIALIZED_NAME_KIT_COMPONENT_OPTIONS)
  private List<CartKitComponentOption> kitComponentOptions = null;

  public static final String SERIALIZED_NAME_MANUFACTURER_SUGGESTED_RETAIL_PRICE = "manufacturer_suggested_retail_price";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_SUGGESTED_RETAIL_PRICE)
  private Currency manufacturerSuggestedRetailPrice;

  public static final String SERIALIZED_NAME_MAXIMUM_QUANTITY = "maximum_quantity";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_QUANTITY)
  private BigDecimal maximumQuantity;

  public static final String SERIALIZED_NAME_MINIMUM_QUANTITY = "minimum_quantity";
  @SerializedName(SERIALIZED_NAME_MINIMUM_QUANTITY)
  private BigDecimal minimumQuantity;

  public static final String SERIALIZED_NAME_MULTIMEDIA = "multimedia";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA)
  private List<CartItemMultimedia> multimedia = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CartItemOption> options = null;

  public static final String SERIALIZED_NAME_PHSYICAL = "phsyical";
  @SerializedName(SERIALIZED_NAME_PHSYICAL)
  private CartItemPhysical phsyical;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_PREORDER = "preorder";
  @SerializedName(SERIALIZED_NAME_PREORDER)
  private Boolean preorder;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<String> schedules = null;

  public static final String SERIALIZED_NAME_TOTAL_COST = "total_cost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Currency totalCost;

  public static final String SERIALIZED_NAME_TOTAL_COST_WITH_DISCOUNT = "total_cost_with_discount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_WITH_DISCOUNT)
  private Currency totalCostWithDiscount;

  public static final String SERIALIZED_NAME_UNIT_COST = "unit_cost";
  @SerializedName(SERIALIZED_NAME_UNIT_COST)
  private Currency unitCost;

  public static final String SERIALIZED_NAME_UNIT_COST_WITH_DISCOUNT = "unit_cost_with_discount";
  @SerializedName(SERIALIZED_NAME_UNIT_COST_WITH_DISCOUNT)
  private Currency unitCostWithDiscount;

  public static final String SERIALIZED_NAME_UPSELL = "upsell";
  @SerializedName(SERIALIZED_NAME_UPSELL)
  private Boolean upsell;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<CartItemVariationSelection> variations = null;

  public static final String SERIALIZED_NAME_VIEW_URL = "view_url";
  @SerializedName(SERIALIZED_NAME_VIEW_URL)
  private String viewUrl;

  public CartItem() { 
  }

  public CartItem arbitraryUnitCost(Currency arbitraryUnitCost) {
    
    this.arbitraryUnitCost = arbitraryUnitCost;
    return this;
  }

   /**
   * Get arbitraryUnitCost
   * @return arbitraryUnitCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getArbitraryUnitCost() {
    return arbitraryUnitCost;
  }


  public void setArbitraryUnitCost(Currency arbitraryUnitCost) {
    this.arbitraryUnitCost = arbitraryUnitCost;
  }


  public CartItem attributes(List<CartItemAttribute> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public CartItem addAttributesItem(CartItemAttribute attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attributes")

  public List<CartItemAttribute> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<CartItemAttribute> attributes) {
    this.attributes = attributes;
  }


  public CartItem autoOrderSchedule(String autoOrderSchedule) {
    
    this.autoOrderSchedule = autoOrderSchedule;
    return this;
  }

   /**
   * Auto order schedule the customer selected
   * @return autoOrderSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Auto order schedule the customer selected")

  public String getAutoOrderSchedule() {
    return autoOrderSchedule;
  }


  public void setAutoOrderSchedule(String autoOrderSchedule) {
    this.autoOrderSchedule = autoOrderSchedule;
  }


  public CartItem defaultImageUrl(String defaultImageUrl) {
    
    this.defaultImageUrl = defaultImageUrl;
    return this;
  }

   /**
   * URL to the default multimedia image
   * @return defaultImageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to the default multimedia image")

  public String getDefaultImageUrl() {
    return defaultImageUrl;
  }


  public void setDefaultImageUrl(String defaultImageUrl) {
    this.defaultImageUrl = defaultImageUrl;
  }


  public CartItem defaultThumbnailUrl(String defaultThumbnailUrl) {
    
    this.defaultThumbnailUrl = defaultThumbnailUrl;
    return this;
  }

   /**
   * URL to the default multimedia thumbnail
   * @return defaultThumbnailUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to the default multimedia thumbnail")

  public String getDefaultThumbnailUrl() {
    return defaultThumbnailUrl;
  }


  public void setDefaultThumbnailUrl(String defaultThumbnailUrl) {
    this.defaultThumbnailUrl = defaultThumbnailUrl;
  }


  public CartItem description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the item
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the item")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CartItem discount(Currency discount) {
    
    this.discount = discount;
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getDiscount() {
    return discount;
  }


  public void setDiscount(Currency discount) {
    this.discount = discount;
  }


  public CartItem extendedDescription(String extendedDescription) {
    
    this.extendedDescription = extendedDescription;
    return this;
  }

   /**
   * Extended description of the item
   * @return extendedDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extended description of the item")

  public String getExtendedDescription() {
    return extendedDescription;
  }


  public void setExtendedDescription(String extendedDescription) {
    this.extendedDescription = extendedDescription;
  }


  public CartItem itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Item ID
   * @return itemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Item ID")

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public CartItem itemOid(Integer itemOid) {
    
    this.itemOid = itemOid;
    return this;
  }

   /**
   * Item object identifier
   * @return itemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Item object identifier")

  public Integer getItemOid() {
    return itemOid;
  }


  public void setItemOid(Integer itemOid) {
    this.itemOid = itemOid;
  }


  public CartItem kit(Boolean kit) {
    
    this.kit = kit;
    return this;
  }

   /**
   * True if this item is a kit
   * @return kit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this item is a kit")

  public Boolean getKit() {
    return kit;
  }


  public void setKit(Boolean kit) {
    this.kit = kit;
  }


  public CartItem kitComponentOptions(List<CartKitComponentOption> kitComponentOptions) {
    
    this.kitComponentOptions = kitComponentOptions;
    return this;
  }

  public CartItem addKitComponentOptionsItem(CartKitComponentOption kitComponentOptionsItem) {
    if (this.kitComponentOptions == null) {
      this.kitComponentOptions = new ArrayList<>();
    }
    this.kitComponentOptions.add(kitComponentOptionsItem);
    return this;
  }

   /**
   * Options associated with the kit components
   * @return kitComponentOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Options associated with the kit components")

  public List<CartKitComponentOption> getKitComponentOptions() {
    return kitComponentOptions;
  }


  public void setKitComponentOptions(List<CartKitComponentOption> kitComponentOptions) {
    this.kitComponentOptions = kitComponentOptions;
  }


  public CartItem manufacturerSuggestedRetailPrice(Currency manufacturerSuggestedRetailPrice) {
    
    this.manufacturerSuggestedRetailPrice = manufacturerSuggestedRetailPrice;
    return this;
  }

   /**
   * Get manufacturerSuggestedRetailPrice
   * @return manufacturerSuggestedRetailPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getManufacturerSuggestedRetailPrice() {
    return manufacturerSuggestedRetailPrice;
  }


  public void setManufacturerSuggestedRetailPrice(Currency manufacturerSuggestedRetailPrice) {
    this.manufacturerSuggestedRetailPrice = manufacturerSuggestedRetailPrice;
  }


  public CartItem maximumQuantity(BigDecimal maximumQuantity) {
    
    this.maximumQuantity = maximumQuantity;
    return this;
  }

   /**
   * Maximum quantity the customer can purchase
   * @return maximumQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum quantity the customer can purchase")

  public BigDecimal getMaximumQuantity() {
    return maximumQuantity;
  }


  public void setMaximumQuantity(BigDecimal maximumQuantity) {
    this.maximumQuantity = maximumQuantity;
  }


  public CartItem minimumQuantity(BigDecimal minimumQuantity) {
    
    this.minimumQuantity = minimumQuantity;
    return this;
  }

   /**
   * Minimum quantity the customer can purchase
   * @return minimumQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum quantity the customer can purchase")

  public BigDecimal getMinimumQuantity() {
    return minimumQuantity;
  }


  public void setMinimumQuantity(BigDecimal minimumQuantity) {
    this.minimumQuantity = minimumQuantity;
  }


  public CartItem multimedia(List<CartItemMultimedia> multimedia) {
    
    this.multimedia = multimedia;
    return this;
  }

  public CartItem addMultimediaItem(CartItemMultimedia multimediaItem) {
    if (this.multimedia == null) {
      this.multimedia = new ArrayList<>();
    }
    this.multimedia.add(multimediaItem);
    return this;
  }

   /**
   * Multimedia
   * @return multimedia
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multimedia")

  public List<CartItemMultimedia> getMultimedia() {
    return multimedia;
  }


  public void setMultimedia(List<CartItemMultimedia> multimedia) {
    this.multimedia = multimedia;
  }


  public CartItem options(List<CartItemOption> options) {
    
    this.options = options;
    return this;
  }

  public CartItem addOptionsItem(CartItemOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Options")

  public List<CartItemOption> getOptions() {
    return options;
  }


  public void setOptions(List<CartItemOption> options) {
    this.options = options;
  }


  public CartItem phsyical(CartItemPhysical phsyical) {
    
    this.phsyical = phsyical;
    return this;
  }

   /**
   * Get phsyical
   * @return phsyical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartItemPhysical getPhsyical() {
    return phsyical;
  }


  public void setPhsyical(CartItemPhysical phsyical) {
    this.phsyical = phsyical;
  }


  public CartItem position(Integer position) {
    
    this.position = position;
    return this;
  }

   /**
   * Position of the item in the cart
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Position of the item in the cart")

  public Integer getPosition() {
    return position;
  }


  public void setPosition(Integer position) {
    this.position = position;
  }


  public CartItem preorder(Boolean preorder) {
    
    this.preorder = preorder;
    return this;
  }

   /**
   * True if this item is on pre-order
   * @return preorder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this item is on pre-order")

  public Boolean getPreorder() {
    return preorder;
  }


  public void setPreorder(Boolean preorder) {
    this.preorder = preorder;
  }


  public CartItem quantity(BigDecimal quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "quantity")

  public BigDecimal getQuantity() {
    return quantity;
  }


  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public CartItem schedules(List<String> schedules) {
    
    this.schedules = schedules;
    return this;
  }

  public CartItem addSchedulesItem(String schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

   /**
   * Customer selectable auto order schedules
   * @return schedules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer selectable auto order schedules")

  public List<String> getSchedules() {
    return schedules;
  }


  public void setSchedules(List<String> schedules) {
    this.schedules = schedules;
  }


  public CartItem totalCost(Currency totalCost) {
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(Currency totalCost) {
    this.totalCost = totalCost;
  }


  public CartItem totalCostWithDiscount(Currency totalCostWithDiscount) {
    
    this.totalCostWithDiscount = totalCostWithDiscount;
    return this;
  }

   /**
   * Get totalCostWithDiscount
   * @return totalCostWithDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTotalCostWithDiscount() {
    return totalCostWithDiscount;
  }


  public void setTotalCostWithDiscount(Currency totalCostWithDiscount) {
    this.totalCostWithDiscount = totalCostWithDiscount;
  }


  public CartItem unitCost(Currency unitCost) {
    
    this.unitCost = unitCost;
    return this;
  }

   /**
   * Get unitCost
   * @return unitCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getUnitCost() {
    return unitCost;
  }


  public void setUnitCost(Currency unitCost) {
    this.unitCost = unitCost;
  }


  public CartItem unitCostWithDiscount(Currency unitCostWithDiscount) {
    
    this.unitCostWithDiscount = unitCostWithDiscount;
    return this;
  }

   /**
   * Get unitCostWithDiscount
   * @return unitCostWithDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getUnitCostWithDiscount() {
    return unitCostWithDiscount;
  }


  public void setUnitCostWithDiscount(Currency unitCostWithDiscount) {
    this.unitCostWithDiscount = unitCostWithDiscount;
  }


  public CartItem upsell(Boolean upsell) {
    
    this.upsell = upsell;
    return this;
  }

   /**
   * True if this item was added to the cart as part of an upsell
   * @return upsell
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this item was added to the cart as part of an upsell")

  public Boolean getUpsell() {
    return upsell;
  }


  public void setUpsell(Boolean upsell) {
    this.upsell = upsell;
  }


  public CartItem variations(List<CartItemVariationSelection> variations) {
    
    this.variations = variations;
    return this;
  }

  public CartItem addVariationsItem(CartItemVariationSelection variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Variations
   * @return variations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variations")

  public List<CartItemVariationSelection> getVariations() {
    return variations;
  }


  public void setVariations(List<CartItemVariationSelection> variations) {
    this.variations = variations;
  }


  public CartItem viewUrl(String viewUrl) {
    
    this.viewUrl = viewUrl;
    return this;
  }

   /**
   * URL to view the product on the site
   * @return viewUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to view the product on the site")

  public String getViewUrl() {
    return viewUrl;
  }


  public void setViewUrl(String viewUrl) {
    this.viewUrl = viewUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartItem cartItem = (CartItem) o;
    return Objects.equals(this.arbitraryUnitCost, cartItem.arbitraryUnitCost) &&
        Objects.equals(this.attributes, cartItem.attributes) &&
        Objects.equals(this.autoOrderSchedule, cartItem.autoOrderSchedule) &&
        Objects.equals(this.defaultImageUrl, cartItem.defaultImageUrl) &&
        Objects.equals(this.defaultThumbnailUrl, cartItem.defaultThumbnailUrl) &&
        Objects.equals(this.description, cartItem.description) &&
        Objects.equals(this.discount, cartItem.discount) &&
        Objects.equals(this.extendedDescription, cartItem.extendedDescription) &&
        Objects.equals(this.itemId, cartItem.itemId) &&
        Objects.equals(this.itemOid, cartItem.itemOid) &&
        Objects.equals(this.kit, cartItem.kit) &&
        Objects.equals(this.kitComponentOptions, cartItem.kitComponentOptions) &&
        Objects.equals(this.manufacturerSuggestedRetailPrice, cartItem.manufacturerSuggestedRetailPrice) &&
        Objects.equals(this.maximumQuantity, cartItem.maximumQuantity) &&
        Objects.equals(this.minimumQuantity, cartItem.minimumQuantity) &&
        Objects.equals(this.multimedia, cartItem.multimedia) &&
        Objects.equals(this.options, cartItem.options) &&
        Objects.equals(this.phsyical, cartItem.phsyical) &&
        Objects.equals(this.position, cartItem.position) &&
        Objects.equals(this.preorder, cartItem.preorder) &&
        Objects.equals(this.quantity, cartItem.quantity) &&
        Objects.equals(this.schedules, cartItem.schedules) &&
        Objects.equals(this.totalCost, cartItem.totalCost) &&
        Objects.equals(this.totalCostWithDiscount, cartItem.totalCostWithDiscount) &&
        Objects.equals(this.unitCost, cartItem.unitCost) &&
        Objects.equals(this.unitCostWithDiscount, cartItem.unitCostWithDiscount) &&
        Objects.equals(this.upsell, cartItem.upsell) &&
        Objects.equals(this.variations, cartItem.variations) &&
        Objects.equals(this.viewUrl, cartItem.viewUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arbitraryUnitCost, attributes, autoOrderSchedule, defaultImageUrl, defaultThumbnailUrl, description, discount, extendedDescription, itemId, itemOid, kit, kitComponentOptions, manufacturerSuggestedRetailPrice, maximumQuantity, minimumQuantity, multimedia, options, phsyical, position, preorder, quantity, schedules, totalCost, totalCostWithDiscount, unitCost, unitCostWithDiscount, upsell, variations, viewUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartItem {\n");
    sb.append("    arbitraryUnitCost: ").append(toIndentedString(arbitraryUnitCost)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    autoOrderSchedule: ").append(toIndentedString(autoOrderSchedule)).append("\n");
    sb.append("    defaultImageUrl: ").append(toIndentedString(defaultImageUrl)).append("\n");
    sb.append("    defaultThumbnailUrl: ").append(toIndentedString(defaultThumbnailUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    extendedDescription: ").append(toIndentedString(extendedDescription)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemOid: ").append(toIndentedString(itemOid)).append("\n");
    sb.append("    kit: ").append(toIndentedString(kit)).append("\n");
    sb.append("    kitComponentOptions: ").append(toIndentedString(kitComponentOptions)).append("\n");
    sb.append("    manufacturerSuggestedRetailPrice: ").append(toIndentedString(manufacturerSuggestedRetailPrice)).append("\n");
    sb.append("    maximumQuantity: ").append(toIndentedString(maximumQuantity)).append("\n");
    sb.append("    minimumQuantity: ").append(toIndentedString(minimumQuantity)).append("\n");
    sb.append("    multimedia: ").append(toIndentedString(multimedia)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    phsyical: ").append(toIndentedString(phsyical)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    preorder: ").append(toIndentedString(preorder)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    totalCostWithDiscount: ").append(toIndentedString(totalCostWithDiscount)).append("\n");
    sb.append("    unitCost: ").append(toIndentedString(unitCost)).append("\n");
    sb.append("    unitCostWithDiscount: ").append(toIndentedString(unitCostWithDiscount)).append("\n");
    sb.append("    upsell: ").append(toIndentedString(upsell)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("    viewUrl: ").append(toIndentedString(viewUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arbitrary_unit_cost");
    openapiFields.add("attributes");
    openapiFields.add("auto_order_schedule");
    openapiFields.add("default_image_url");
    openapiFields.add("default_thumbnail_url");
    openapiFields.add("description");
    openapiFields.add("discount");
    openapiFields.add("extended_description");
    openapiFields.add("item_id");
    openapiFields.add("item_oid");
    openapiFields.add("kit");
    openapiFields.add("kit_component_options");
    openapiFields.add("manufacturer_suggested_retail_price");
    openapiFields.add("maximum_quantity");
    openapiFields.add("minimum_quantity");
    openapiFields.add("multimedia");
    openapiFields.add("options");
    openapiFields.add("phsyical");
    openapiFields.add("position");
    openapiFields.add("preorder");
    openapiFields.add("quantity");
    openapiFields.add("schedules");
    openapiFields.add("total_cost");
    openapiFields.add("total_cost_with_discount");
    openapiFields.add("unit_cost");
    openapiFields.add("unit_cost_with_discount");
    openapiFields.add("upsell");
    openapiFields.add("variations");
    openapiFields.add("view_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartItem is not found in the empty JSON string", CartItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `arbitrary_unit_cost`
      if (jsonObj.getAsJsonObject("arbitrary_unit_cost") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("arbitrary_unit_cost"));
      }
      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      if (jsonArrayattributes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("attributes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
        }

        // validate the optional field `attributes` (array)
        for (int i = 0; i < jsonArrayattributes.size(); i++) {
          CartItemAttribute.validateJsonObject(jsonArrayattributes.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("auto_order_schedule") != null && !jsonObj.get("auto_order_schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_order_schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_order_schedule").toString()));
      }
      if (jsonObj.get("default_image_url") != null && !jsonObj.get("default_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_image_url").toString()));
      }
      if (jsonObj.get("default_thumbnail_url") != null && !jsonObj.get("default_thumbnail_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_thumbnail_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_thumbnail_url").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `discount`
      if (jsonObj.getAsJsonObject("discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("discount"));
      }
      if (jsonObj.get("extended_description") != null && !jsonObj.get("extended_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extended_description").toString()));
      }
      if (jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      JsonArray jsonArraykitComponentOptions = jsonObj.getAsJsonArray("kit_component_options");
      if (jsonArraykitComponentOptions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("kit_component_options").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `kit_component_options` to be an array in the JSON string but got `%s`", jsonObj.get("kit_component_options").toString()));
        }

        // validate the optional field `kit_component_options` (array)
        for (int i = 0; i < jsonArraykitComponentOptions.size(); i++) {
          CartKitComponentOption.validateJsonObject(jsonArraykitComponentOptions.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `manufacturer_suggested_retail_price`
      if (jsonObj.getAsJsonObject("manufacturer_suggested_retail_price") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("manufacturer_suggested_retail_price"));
      }
      JsonArray jsonArraymultimedia = jsonObj.getAsJsonArray("multimedia");
      if (jsonArraymultimedia != null) {
        // ensure the json data is an array
        if (!jsonObj.get("multimedia").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `multimedia` to be an array in the JSON string but got `%s`", jsonObj.get("multimedia").toString()));
        }

        // validate the optional field `multimedia` (array)
        for (int i = 0; i < jsonArraymultimedia.size(); i++) {
          CartItemMultimedia.validateJsonObject(jsonArraymultimedia.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
      if (jsonArrayoptions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("options").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
        }

        // validate the optional field `options` (array)
        for (int i = 0; i < jsonArrayoptions.size(); i++) {
          CartItemOption.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `phsyical`
      if (jsonObj.getAsJsonObject("phsyical") != null) {
        CartItemPhysical.validateJsonObject(jsonObj.getAsJsonObject("phsyical"));
      }
      // ensure the json data is an array
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
      }
      // validate the optional field `total_cost`
      if (jsonObj.getAsJsonObject("total_cost") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("total_cost"));
      }
      // validate the optional field `total_cost_with_discount`
      if (jsonObj.getAsJsonObject("total_cost_with_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("total_cost_with_discount"));
      }
      // validate the optional field `unit_cost`
      if (jsonObj.getAsJsonObject("unit_cost") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("unit_cost"));
      }
      // validate the optional field `unit_cost_with_discount`
      if (jsonObj.getAsJsonObject("unit_cost_with_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("unit_cost_with_discount"));
      }
      JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
      if (jsonArrayvariations != null) {
        // ensure the json data is an array
        if (!jsonObj.get("variations").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
        }

        // validate the optional field `variations` (array)
        for (int i = 0; i < jsonArrayvariations.size(); i++) {
          CartItemVariationSelection.validateJsonObject(jsonArrayvariations.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("view_url") != null && !jsonObj.get("view_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CartItem>() {
           @Override
           public void write(JsonWriter out, CartItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartItem
  * @throws IOException if the JSON string is invalid with respect to CartItem
  */
  public static CartItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartItem.class);
  }

 /**
  * Convert an instance of CartItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


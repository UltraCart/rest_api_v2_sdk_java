/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ResultSet;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ResponseMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:19:33.697-04:00[America/Indianapolis]")
public class ResponseMetadata {
  public static final String SERIALIZED_NAME_PAYLOAD_NAME = "payload_name";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_NAME)
  private String payloadName;

  public static final String SERIALIZED_NAME_RESULT_SET = "result_set";
  @SerializedName(SERIALIZED_NAME_RESULT_SET)
  private ResultSet resultSet;

  public ResponseMetadata() { 
  }

  public ResponseMetadata payloadName(String payloadName) {
    
    this.payloadName = payloadName;
    return this;
  }

   /**
   * Payload name
   * @return payloadName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payload name")

  public String getPayloadName() {
    return payloadName;
  }


  public void setPayloadName(String payloadName) {
    this.payloadName = payloadName;
  }


  public ResponseMetadata resultSet(ResultSet resultSet) {
    
    this.resultSet = resultSet;
    return this;
  }

   /**
   * Get resultSet
   * @return resultSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResultSet getResultSet() {
    return resultSet;
  }


  public void setResultSet(ResultSet resultSet) {
    this.resultSet = resultSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseMetadata responseMetadata = (ResponseMetadata) o;
    return Objects.equals(this.payloadName, responseMetadata.payloadName) &&
        Objects.equals(this.resultSet, responseMetadata.resultSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payloadName, resultSet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseMetadata {\n");
    sb.append("    payloadName: ").append(toIndentedString(payloadName)).append("\n");
    sb.append("    resultSet: ").append(toIndentedString(resultSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payload_name");
    openapiFields.add("result_set");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ResponseMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ResponseMetadata.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseMetadata is not found in the empty JSON string", ResponseMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ResponseMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseMetadata` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("payload_name") != null && !jsonObj.get("payload_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_name").toString()));
      }
      // validate the optional field `result_set`
      if (jsonObj.getAsJsonObject("result_set") != null) {
        ResultSet.validateJsonObject(jsonObj.getAsJsonObject("result_set"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseMetadata>() {
           @Override
           public void write(JsonWriter out, ResponseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResponseMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResponseMetadata
  * @throws IOException if the JSON string is invalid with respect to ResponseMetadata
  */
  public static ResponseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseMetadata.class);
  }

 /**
  * Convert an instance of ResponseMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


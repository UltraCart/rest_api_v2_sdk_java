/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxPostalCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxCity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-26T09:48:11.285-04:00[America/Indianapolis]")
public class TaxCity {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CITY_OID = "city_oid";
  @SerializedName(SERIALIZED_NAME_CITY_OID)
  private Integer cityOid;

  public static final String SERIALIZED_NAME_COUNTY_OID = "county_oid";
  @SerializedName(SERIALIZED_NAME_COUNTY_OID)
  private Integer countyOid;

  public static final String SERIALIZED_NAME_DONT_COLLECT_CITY = "dont_collect_city";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_CITY)
  private Boolean dontCollectCity;

  public static final String SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE = "dont_collect_postal_code";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE)
  private Boolean dontCollectPostalCode;

  public static final String SERIALIZED_NAME_POSTAL_CODES = "postal_codes";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODES)
  private List<TaxPostalCode> postalCodes = null;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public TaxCity() { 
  }

  public TaxCity accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxCity city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public TaxCity cityOid(Integer cityOid) {
    
    this.cityOid = cityOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return cityOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCityOid() {
    return cityOid;
  }


  public void setCityOid(Integer cityOid) {
    this.cityOid = cityOid;
  }


  public TaxCity countyOid(Integer countyOid) {
    
    this.countyOid = countyOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return countyOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCountyOid() {
    return countyOid;
  }


  public void setCountyOid(Integer countyOid) {
    this.countyOid = countyOid;
  }


  public TaxCity dontCollectCity(Boolean dontCollectCity) {
    
    this.dontCollectCity = dontCollectCity;
    return this;
  }

   /**
   * Flag instructing engine to not collect city tax for this city
   * @return dontCollectCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect city tax for this city")

  public Boolean getDontCollectCity() {
    return dontCollectCity;
  }


  public void setDontCollectCity(Boolean dontCollectCity) {
    this.dontCollectCity = dontCollectCity;
  }


  public TaxCity dontCollectPostalCode(Boolean dontCollectPostalCode) {
    
    this.dontCollectPostalCode = dontCollectPostalCode;
    return this;
  }

   /**
   * Flag instructing engine to not collect postal code tax for this city
   * @return dontCollectPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect postal code tax for this city")

  public Boolean getDontCollectPostalCode() {
    return dontCollectPostalCode;
  }


  public void setDontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
  }


  public TaxCity postalCodes(List<TaxPostalCode> postalCodes) {
    
    this.postalCodes = postalCodes;
    return this;
  }

  public TaxCity addPostalCodesItem(TaxPostalCode postalCodesItem) {
    if (this.postalCodes == null) {
      this.postalCodes = new ArrayList<>();
    }
    this.postalCodes.add(postalCodesItem);
    return this;
  }

   /**
   * Postal Codes within this city
   * @return postalCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Postal Codes within this city")

  public List<TaxPostalCode> getPostalCodes() {
    return postalCodes;
  }


  public void setPostalCodes(List<TaxPostalCode> postalCodes) {
    this.postalCodes = postalCodes;
  }


  public TaxCity taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxCity taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxCity taxCity = (TaxCity) o;
    return Objects.equals(this.accountingCode, taxCity.accountingCode) &&
        Objects.equals(this.city, taxCity.city) &&
        Objects.equals(this.cityOid, taxCity.cityOid) &&
        Objects.equals(this.countyOid, taxCity.countyOid) &&
        Objects.equals(this.dontCollectCity, taxCity.dontCollectCity) &&
        Objects.equals(this.dontCollectPostalCode, taxCity.dontCollectPostalCode) &&
        Objects.equals(this.postalCodes, taxCity.postalCodes) &&
        Objects.equals(this.taxRate, taxCity.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxCity.taxRateFormatted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, city, cityOid, countyOid, dontCollectCity, dontCollectPostalCode, postalCodes, taxRate, taxRateFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxCity {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cityOid: ").append(toIndentedString(cityOid)).append("\n");
    sb.append("    countyOid: ").append(toIndentedString(countyOid)).append("\n");
    sb.append("    dontCollectCity: ").append(toIndentedString(dontCollectCity)).append("\n");
    sb.append("    dontCollectPostalCode: ").append(toIndentedString(dontCollectPostalCode)).append("\n");
    sb.append("    postalCodes: ").append(toIndentedString(postalCodes)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("city");
    openapiFields.add("city_oid");
    openapiFields.add("county_oid");
    openapiFields.add("dont_collect_city");
    openapiFields.add("dont_collect_postal_code");
    openapiFields.add("postal_codes");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxCity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxCity.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxCity is not found in the empty JSON string", TaxCity.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxCity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxCity` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      JsonArray jsonArraypostalCodes = jsonObj.getAsJsonArray("postal_codes");
      if (jsonArraypostalCodes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("postal_codes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `postal_codes` to be an array in the JSON string but got `%s`", jsonObj.get("postal_codes").toString()));
        }

        // validate the optional field `postal_codes` (array)
        for (int i = 0; i < jsonArraypostalCodes.size(); i++) {
          TaxPostalCode.validateJsonObject(jsonArraypostalCodes.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxCity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxCity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxCity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxCity.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxCity>() {
           @Override
           public void write(JsonWriter out, TaxCity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxCity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxCity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxCity
  * @throws IOException if the JSON string is invalid with respect to TaxCity
  */
  public static TaxCity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxCity.class);
  }

 /**
  * Convert an instance of TaxCity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


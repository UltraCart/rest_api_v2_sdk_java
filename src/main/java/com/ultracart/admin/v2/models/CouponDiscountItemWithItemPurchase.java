/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CouponDiscountItemWithItemPurchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-14T11:51:09.923-05:00[America/Indianapolis]")
public class CouponDiscountItemWithItemPurchase {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DISCOUNT_ITEM = "discount_item";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ITEM)
  private String discountItem;

  public static final String SERIALIZED_NAME_DISCOUNT_PRICE = "discount_price";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PRICE)
  private BigDecimal discountPrice;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_REQUIRED_PURCHASE_ITEM = "required_purchase_item";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PURCHASE_ITEM)
  private String requiredPurchaseItem;

  public CouponDiscountItemWithItemPurchase() { 
  }

  public CouponDiscountItemWithItemPurchase currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter currency code the customer is viewing prices in
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ISO-4217 three letter currency code the customer is viewing prices in")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CouponDiscountItemWithItemPurchase discountItem(String discountItem) {
    
    this.discountItem = discountItem;
    return this;
  }

   /**
   * The item that will be sold at the discount_price when required_purchase_item is purchased.
   * @return discountItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item that will be sold at the discount_price when required_purchase_item is purchased.")

  public String getDiscountItem() {
    return discountItem;
  }


  public void setDiscountItem(String discountItem) {
    this.discountItem = discountItem;
  }


  public CouponDiscountItemWithItemPurchase discountPrice(BigDecimal discountPrice) {
    
    this.discountPrice = discountPrice;
    return this;
  }

   /**
   * The price (unit cost) of the discounted item
   * @return discountPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The price (unit cost) of the discounted item")

  public BigDecimal getDiscountPrice() {
    return discountPrice;
  }


  public void setDiscountPrice(BigDecimal discountPrice) {
    this.discountPrice = discountPrice;
  }


  public CouponDiscountItemWithItemPurchase limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * The (optional) maximum quantity of discounted items.
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The (optional) maximum quantity of discounted items.")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public CouponDiscountItemWithItemPurchase requiredPurchaseItem(String requiredPurchaseItem) {
    
    this.requiredPurchaseItem = requiredPurchaseItem;
    return this;
  }

   /**
   * The item that must be purchased for the discount to be applied to the discount item.
   * @return requiredPurchaseItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item that must be purchased for the discount to be applied to the discount item.")

  public String getRequiredPurchaseItem() {
    return requiredPurchaseItem;
  }


  public void setRequiredPurchaseItem(String requiredPurchaseItem) {
    this.requiredPurchaseItem = requiredPurchaseItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponDiscountItemWithItemPurchase couponDiscountItemWithItemPurchase = (CouponDiscountItemWithItemPurchase) o;
    return Objects.equals(this.currencyCode, couponDiscountItemWithItemPurchase.currencyCode) &&
        Objects.equals(this.discountItem, couponDiscountItemWithItemPurchase.discountItem) &&
        Objects.equals(this.discountPrice, couponDiscountItemWithItemPurchase.discountPrice) &&
        Objects.equals(this.limit, couponDiscountItemWithItemPurchase.limit) &&
        Objects.equals(this.requiredPurchaseItem, couponDiscountItemWithItemPurchase.requiredPurchaseItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, discountItem, discountPrice, limit, requiredPurchaseItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponDiscountItemWithItemPurchase {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    discountItem: ").append(toIndentedString(discountItem)).append("\n");
    sb.append("    discountPrice: ").append(toIndentedString(discountPrice)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    requiredPurchaseItem: ").append(toIndentedString(requiredPurchaseItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency_code");
    openapiFields.add("discount_item");
    openapiFields.add("discount_price");
    openapiFields.add("limit");
    openapiFields.add("required_purchase_item");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponDiscountItemWithItemPurchase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CouponDiscountItemWithItemPurchase.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponDiscountItemWithItemPurchase is not found in the empty JSON string", CouponDiscountItemWithItemPurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponDiscountItemWithItemPurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponDiscountItemWithItemPurchase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if (jsonObj.get("discount_item") != null && !jsonObj.get("discount_item").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_item` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_item").toString()));
      }
      if (jsonObj.get("required_purchase_item") != null && !jsonObj.get("required_purchase_item").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_purchase_item` to be a primitive type in the JSON string but got `%s`", jsonObj.get("required_purchase_item").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponDiscountItemWithItemPurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponDiscountItemWithItemPurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponDiscountItemWithItemPurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponDiscountItemWithItemPurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponDiscountItemWithItemPurchase>() {
           @Override
           public void write(JsonWriter out, CouponDiscountItemWithItemPurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponDiscountItemWithItemPurchase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponDiscountItemWithItemPurchase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponDiscountItemWithItemPurchase
  * @throws IOException if the JSON string is invalid with respect to CouponDiscountItemWithItemPurchase
  */
  public static CouponDiscountItemWithItemPurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponDiscountItemWithItemPurchase.class);
  }

 /**
  * Convert an instance of CouponDiscountItemWithItemPurchase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


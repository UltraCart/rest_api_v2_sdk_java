/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderTaxes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-17T16:23:43.112-05:00[America/Indianapolis]")
public class OrderTaxes {
  public static final String SERIALIZED_NAME_ARBITRARY_TAX = "arbitrary_tax";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAX)
  private BigDecimal arbitraryTax;

  public static final String SERIALIZED_NAME_ARBITRARY_TAX_RATE = "arbitrary_tax_rate";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAX_RATE)
  private BigDecimal arbitraryTaxRate;

  public static final String SERIALIZED_NAME_ARBITRARY_TAXABLE_SUBTOTAL = "arbitrary_taxable_subtotal";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAXABLE_SUBTOTAL)
  private BigDecimal arbitraryTaxableSubtotal;

  public static final String SERIALIZED_NAME_TAX_CITY_ACCOUNTING_CODE = "tax_city_accounting_code";
  @SerializedName(SERIALIZED_NAME_TAX_CITY_ACCOUNTING_CODE)
  private String taxCityAccountingCode;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_ACCOUNTING_CODE = "tax_country_accounting_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_ACCOUNTING_CODE)
  private String taxCountryAccountingCode;

  public static final String SERIALIZED_NAME_TAX_COUNTY = "tax_county";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTY)
  private String taxCounty;

  public static final String SERIALIZED_NAME_TAX_COUNTY_ACCOUNTING_CODE = "tax_county_accounting_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTY_ACCOUNTING_CODE)
  private String taxCountyAccountingCode;

  public static final String SERIALIZED_NAME_TAX_GIFT_CHARGE = "tax_gift_charge";
  @SerializedName(SERIALIZED_NAME_TAX_GIFT_CHARGE)
  private Boolean taxGiftCharge;

  public static final String SERIALIZED_NAME_TAX_POSTAL_CODE_ACCOUNTING_CODE = "tax_postal_code_accounting_code";
  @SerializedName(SERIALIZED_NAME_TAX_POSTAL_CODE_ACCOUNTING_CODE)
  private String taxPostalCodeAccountingCode;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_CITY = "tax_rate_city";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_CITY)
  private BigDecimal taxRateCity;

  public static final String SERIALIZED_NAME_TAX_RATE_COUNTRY = "tax_rate_country";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_COUNTRY)
  private BigDecimal taxRateCountry;

  public static final String SERIALIZED_NAME_TAX_RATE_COUNTY = "tax_rate_county";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_COUNTY)
  private BigDecimal taxRateCounty;

  public static final String SERIALIZED_NAME_TAX_RATE_POSTAL_CODE = "tax_rate_postal_code";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_POSTAL_CODE)
  private BigDecimal taxRatePostalCode;

  public static final String SERIALIZED_NAME_TAX_RATE_STATE = "tax_rate_state";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_STATE)
  private BigDecimal taxRateState;

  public static final String SERIALIZED_NAME_TAX_SHIPPING = "tax_shipping";
  @SerializedName(SERIALIZED_NAME_TAX_SHIPPING)
  private Boolean taxShipping;

  public static final String SERIALIZED_NAME_TAX_STATE_ACCOUNTING_CODE = "tax_state_accounting_code";
  @SerializedName(SERIALIZED_NAME_TAX_STATE_ACCOUNTING_CODE)
  private String taxStateAccountingCode;

  public OrderTaxes() { 
  }

  public OrderTaxes arbitraryTax(BigDecimal arbitraryTax) {
    
    this.arbitraryTax = arbitraryTax;
    return this;
  }

   /**
   * Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @return arbitraryTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.")

  public BigDecimal getArbitraryTax() {
    return arbitraryTax;
  }


  public void setArbitraryTax(BigDecimal arbitraryTax) {
    this.arbitraryTax = arbitraryTax;
  }


  public OrderTaxes arbitraryTaxRate(BigDecimal arbitraryTaxRate) {
    
    this.arbitraryTaxRate = arbitraryTaxRate;
    return this;
  }

   /**
   * Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @return arbitraryTaxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.")

  public BigDecimal getArbitraryTaxRate() {
    return arbitraryTaxRate;
  }


  public void setArbitraryTaxRate(BigDecimal arbitraryTaxRate) {
    this.arbitraryTaxRate = arbitraryTaxRate;
  }


  public OrderTaxes arbitraryTaxableSubtotal(BigDecimal arbitraryTaxableSubtotal) {
    
    this.arbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
    return this;
  }

   /**
   * Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @return arbitraryTaxableSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.")

  public BigDecimal getArbitraryTaxableSubtotal() {
    return arbitraryTaxableSubtotal;
  }


  public void setArbitraryTaxableSubtotal(BigDecimal arbitraryTaxableSubtotal) {
    this.arbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
  }


  public OrderTaxes taxCityAccountingCode(String taxCityAccountingCode) {
    
    this.taxCityAccountingCode = taxCityAccountingCode;
    return this;
  }

   /**
   * QuickBooks tax city code
   * @return taxCityAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks tax city code")

  public String getTaxCityAccountingCode() {
    return taxCityAccountingCode;
  }


  public void setTaxCityAccountingCode(String taxCityAccountingCode) {
    this.taxCityAccountingCode = taxCityAccountingCode;
  }


  public OrderTaxes taxCountryAccountingCode(String taxCountryAccountingCode) {
    
    this.taxCountryAccountingCode = taxCountryAccountingCode;
    return this;
  }

   /**
   * QuickBooks tax country code
   * @return taxCountryAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks tax country code")

  public String getTaxCountryAccountingCode() {
    return taxCountryAccountingCode;
  }


  public void setTaxCountryAccountingCode(String taxCountryAccountingCode) {
    this.taxCountryAccountingCode = taxCountryAccountingCode;
  }


  public OrderTaxes taxCounty(String taxCounty) {
    
    this.taxCounty = taxCounty;
    return this;
  }

   /**
   * County used for tax calculation purposes (only in the United States)
   * @return taxCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "County used for tax calculation purposes (only in the United States)")

  public String getTaxCounty() {
    return taxCounty;
  }


  public void setTaxCounty(String taxCounty) {
    this.taxCounty = taxCounty;
  }


  public OrderTaxes taxCountyAccountingCode(String taxCountyAccountingCode) {
    
    this.taxCountyAccountingCode = taxCountyAccountingCode;
    return this;
  }

   /**
   * QuickBooks tax county code
   * @return taxCountyAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks tax county code")

  public String getTaxCountyAccountingCode() {
    return taxCountyAccountingCode;
  }


  public void setTaxCountyAccountingCode(String taxCountyAccountingCode) {
    this.taxCountyAccountingCode = taxCountyAccountingCode;
  }


  public OrderTaxes taxGiftCharge(Boolean taxGiftCharge) {
    
    this.taxGiftCharge = taxGiftCharge;
    return this;
  }

   /**
   * True if gift charge is taxed
   * @return taxGiftCharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if gift charge is taxed")

  public Boolean getTaxGiftCharge() {
    return taxGiftCharge;
  }


  public void setTaxGiftCharge(Boolean taxGiftCharge) {
    this.taxGiftCharge = taxGiftCharge;
  }


  public OrderTaxes taxPostalCodeAccountingCode(String taxPostalCodeAccountingCode) {
    
    this.taxPostalCodeAccountingCode = taxPostalCodeAccountingCode;
    return this;
  }

   /**
   * QuickBooks tax postal code code
   * @return taxPostalCodeAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks tax postal code code")

  public String getTaxPostalCodeAccountingCode() {
    return taxPostalCodeAccountingCode;
  }


  public void setTaxPostalCodeAccountingCode(String taxPostalCodeAccountingCode) {
    this.taxPostalCodeAccountingCode = taxPostalCodeAccountingCode;
  }


  public OrderTaxes taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public OrderTaxes taxRateCity(BigDecimal taxRateCity) {
    
    this.taxRateCity = taxRateCity;
    return this;
  }

   /**
   * Tax rate at the city level
   * @return taxRateCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate at the city level")

  public BigDecimal getTaxRateCity() {
    return taxRateCity;
  }


  public void setTaxRateCity(BigDecimal taxRateCity) {
    this.taxRateCity = taxRateCity;
  }


  public OrderTaxes taxRateCountry(BigDecimal taxRateCountry) {
    
    this.taxRateCountry = taxRateCountry;
    return this;
  }

   /**
   * Tax rate at the country level
   * @return taxRateCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate at the country level")

  public BigDecimal getTaxRateCountry() {
    return taxRateCountry;
  }


  public void setTaxRateCountry(BigDecimal taxRateCountry) {
    this.taxRateCountry = taxRateCountry;
  }


  public OrderTaxes taxRateCounty(BigDecimal taxRateCounty) {
    
    this.taxRateCounty = taxRateCounty;
    return this;
  }

   /**
   * Tax rate at the county level
   * @return taxRateCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate at the county level")

  public BigDecimal getTaxRateCounty() {
    return taxRateCounty;
  }


  public void setTaxRateCounty(BigDecimal taxRateCounty) {
    this.taxRateCounty = taxRateCounty;
  }


  public OrderTaxes taxRatePostalCode(BigDecimal taxRatePostalCode) {
    
    this.taxRatePostalCode = taxRatePostalCode;
    return this;
  }

   /**
   * Tax rate at the postal code level
   * @return taxRatePostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate at the postal code level")

  public BigDecimal getTaxRatePostalCode() {
    return taxRatePostalCode;
  }


  public void setTaxRatePostalCode(BigDecimal taxRatePostalCode) {
    this.taxRatePostalCode = taxRatePostalCode;
  }


  public OrderTaxes taxRateState(BigDecimal taxRateState) {
    
    this.taxRateState = taxRateState;
    return this;
  }

   /**
   * Tax rate at the state level
   * @return taxRateState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate at the state level")

  public BigDecimal getTaxRateState() {
    return taxRateState;
  }


  public void setTaxRateState(BigDecimal taxRateState) {
    this.taxRateState = taxRateState;
  }


  public OrderTaxes taxShipping(Boolean taxShipping) {
    
    this.taxShipping = taxShipping;
    return this;
  }

   /**
   * True if shipping is taxed
   * @return taxShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if shipping is taxed")

  public Boolean getTaxShipping() {
    return taxShipping;
  }


  public void setTaxShipping(Boolean taxShipping) {
    this.taxShipping = taxShipping;
  }


  public OrderTaxes taxStateAccountingCode(String taxStateAccountingCode) {
    
    this.taxStateAccountingCode = taxStateAccountingCode;
    return this;
  }

   /**
   * QuickBooks tax state code
   * @return taxStateAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks tax state code")

  public String getTaxStateAccountingCode() {
    return taxStateAccountingCode;
  }


  public void setTaxStateAccountingCode(String taxStateAccountingCode) {
    this.taxStateAccountingCode = taxStateAccountingCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTaxes orderTaxes = (OrderTaxes) o;
    return Objects.equals(this.arbitraryTax, orderTaxes.arbitraryTax) &&
        Objects.equals(this.arbitraryTaxRate, orderTaxes.arbitraryTaxRate) &&
        Objects.equals(this.arbitraryTaxableSubtotal, orderTaxes.arbitraryTaxableSubtotal) &&
        Objects.equals(this.taxCityAccountingCode, orderTaxes.taxCityAccountingCode) &&
        Objects.equals(this.taxCountryAccountingCode, orderTaxes.taxCountryAccountingCode) &&
        Objects.equals(this.taxCounty, orderTaxes.taxCounty) &&
        Objects.equals(this.taxCountyAccountingCode, orderTaxes.taxCountyAccountingCode) &&
        Objects.equals(this.taxGiftCharge, orderTaxes.taxGiftCharge) &&
        Objects.equals(this.taxPostalCodeAccountingCode, orderTaxes.taxPostalCodeAccountingCode) &&
        Objects.equals(this.taxRate, orderTaxes.taxRate) &&
        Objects.equals(this.taxRateCity, orderTaxes.taxRateCity) &&
        Objects.equals(this.taxRateCountry, orderTaxes.taxRateCountry) &&
        Objects.equals(this.taxRateCounty, orderTaxes.taxRateCounty) &&
        Objects.equals(this.taxRatePostalCode, orderTaxes.taxRatePostalCode) &&
        Objects.equals(this.taxRateState, orderTaxes.taxRateState) &&
        Objects.equals(this.taxShipping, orderTaxes.taxShipping) &&
        Objects.equals(this.taxStateAccountingCode, orderTaxes.taxStateAccountingCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arbitraryTax, arbitraryTaxRate, arbitraryTaxableSubtotal, taxCityAccountingCode, taxCountryAccountingCode, taxCounty, taxCountyAccountingCode, taxGiftCharge, taxPostalCodeAccountingCode, taxRate, taxRateCity, taxRateCountry, taxRateCounty, taxRatePostalCode, taxRateState, taxShipping, taxStateAccountingCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTaxes {\n");
    sb.append("    arbitraryTax: ").append(toIndentedString(arbitraryTax)).append("\n");
    sb.append("    arbitraryTaxRate: ").append(toIndentedString(arbitraryTaxRate)).append("\n");
    sb.append("    arbitraryTaxableSubtotal: ").append(toIndentedString(arbitraryTaxableSubtotal)).append("\n");
    sb.append("    taxCityAccountingCode: ").append(toIndentedString(taxCityAccountingCode)).append("\n");
    sb.append("    taxCountryAccountingCode: ").append(toIndentedString(taxCountryAccountingCode)).append("\n");
    sb.append("    taxCounty: ").append(toIndentedString(taxCounty)).append("\n");
    sb.append("    taxCountyAccountingCode: ").append(toIndentedString(taxCountyAccountingCode)).append("\n");
    sb.append("    taxGiftCharge: ").append(toIndentedString(taxGiftCharge)).append("\n");
    sb.append("    taxPostalCodeAccountingCode: ").append(toIndentedString(taxPostalCodeAccountingCode)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateCity: ").append(toIndentedString(taxRateCity)).append("\n");
    sb.append("    taxRateCountry: ").append(toIndentedString(taxRateCountry)).append("\n");
    sb.append("    taxRateCounty: ").append(toIndentedString(taxRateCounty)).append("\n");
    sb.append("    taxRatePostalCode: ").append(toIndentedString(taxRatePostalCode)).append("\n");
    sb.append("    taxRateState: ").append(toIndentedString(taxRateState)).append("\n");
    sb.append("    taxShipping: ").append(toIndentedString(taxShipping)).append("\n");
    sb.append("    taxStateAccountingCode: ").append(toIndentedString(taxStateAccountingCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arbitrary_tax");
    openapiFields.add("arbitrary_tax_rate");
    openapiFields.add("arbitrary_taxable_subtotal");
    openapiFields.add("tax_city_accounting_code");
    openapiFields.add("tax_country_accounting_code");
    openapiFields.add("tax_county");
    openapiFields.add("tax_county_accounting_code");
    openapiFields.add("tax_gift_charge");
    openapiFields.add("tax_postal_code_accounting_code");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_city");
    openapiFields.add("tax_rate_country");
    openapiFields.add("tax_rate_county");
    openapiFields.add("tax_rate_postal_code");
    openapiFields.add("tax_rate_state");
    openapiFields.add("tax_shipping");
    openapiFields.add("tax_state_accounting_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderTaxes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderTaxes.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTaxes is not found in the empty JSON string", OrderTaxes.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderTaxes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTaxes` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("tax_city_accounting_code") != null && !jsonObj.get("tax_city_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_city_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_city_accounting_code").toString()));
      }
      if (jsonObj.get("tax_country_accounting_code") != null && !jsonObj.get("tax_country_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_accounting_code").toString()));
      }
      if (jsonObj.get("tax_county") != null && !jsonObj.get("tax_county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_county").toString()));
      }
      if (jsonObj.get("tax_county_accounting_code") != null && !jsonObj.get("tax_county_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_county_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_county_accounting_code").toString()));
      }
      if (jsonObj.get("tax_postal_code_accounting_code") != null && !jsonObj.get("tax_postal_code_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_postal_code_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_postal_code_accounting_code").toString()));
      }
      if (jsonObj.get("tax_state_accounting_code") != null && !jsonObj.get("tax_state_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_state_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_state_accounting_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTaxes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTaxes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTaxes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTaxes.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTaxes>() {
           @Override
           public void write(JsonWriter out, OrderTaxes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTaxes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderTaxes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderTaxes
  * @throws IOException if the JSON string is invalid with respect to OrderTaxes
  */
  public static OrderTaxes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTaxes.class);
  }

 /**
  * Convert an instance of OrderTaxes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


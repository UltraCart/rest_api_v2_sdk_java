/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemContentMultimediaThumbnail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemContentMultimedia
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-11T14:02:08.222-04:00[America/Indianapolis]")
public class ItemContentMultimedia {
  public static final String SERIALIZED_NAME_CLOUD_URL = "cloud_url";
  @SerializedName(SERIALIZED_NAME_CLOUD_URL)
  private String cloudUrl;

  public static final String SERIALIZED_NAME_CLOUD_URL_EXPIRATION = "cloud_url_expiration";
  @SerializedName(SERIALIZED_NAME_CLOUD_URL_EXPIRATION)
  private String cloudUrlExpiration;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXCLUDE_FROM_GALLERY = "exclude_from_gallery";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FROM_GALLERY)
  private Boolean excludeFromGallery;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_MERCHANT_ITEM_MULTIMEDIA_OID = "merchant_item_multimedia_oid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ITEM_MULTIMEDIA_OID)
  private Integer merchantItemMultimediaOid;

  public static final String SERIALIZED_NAME_ORPHAN = "orphan";
  @SerializedName(SERIALIZED_NAME_ORPHAN)
  private Boolean orphan;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private Boolean placeholder;

  public static final String SERIALIZED_NAME_TEMP_MULTIMEDIA_OID = "temp_multimedia_oid";
  @SerializedName(SERIALIZED_NAME_TEMP_MULTIMEDIA_OID)
  private Integer tempMultimediaOid;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<ItemContentMultimediaThumbnail> thumbnails = null;

  /**
   * Type of file
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMAGE("Image"),
    
    PDF("PDF"),
    
    TEXT("Text"),
    
    UNKNOWN("Unknown"),
    
    VIDEO("Video");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public ItemContentMultimedia() { 
  }

  public ItemContentMultimedia cloudUrl(String cloudUrl) {
    
    this.cloudUrl = cloudUrl;
    return this;
  }

   /**
   * URL where the image can be downloaded from the cloud
   * @return cloudUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL where the image can be downloaded from the cloud")

  public String getCloudUrl() {
    return cloudUrl;
  }


  public void setCloudUrl(String cloudUrl) {
    this.cloudUrl = cloudUrl;
  }


  public ItemContentMultimedia cloudUrlExpiration(String cloudUrlExpiration) {
    
    this.cloudUrlExpiration = cloudUrlExpiration;
    return this;
  }

   /**
   * Expiration date of the cloud URL
   * @return cloudUrlExpiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date of the cloud URL")

  public String getCloudUrlExpiration() {
    return cloudUrlExpiration;
  }


  public void setCloudUrlExpiration(String cloudUrlExpiration) {
    this.cloudUrlExpiration = cloudUrlExpiration;
  }


  public ItemContentMultimedia code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Code assigned to the file
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Code assigned to the file")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public ItemContentMultimedia description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ItemContentMultimedia excludeFromGallery(Boolean excludeFromGallery) {
    
    this.excludeFromGallery = excludeFromGallery;
    return this;
  }

   /**
   * True to exclude from multimedia gallery
   * @return excludeFromGallery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True to exclude from multimedia gallery")

  public Boolean getExcludeFromGallery() {
    return excludeFromGallery;
  }


  public void setExcludeFromGallery(Boolean excludeFromGallery) {
    this.excludeFromGallery = excludeFromGallery;
  }


  public ItemContentMultimedia fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * File name
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File name")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ItemContentMultimedia height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * Height of the image
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Height of the image")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public ItemContentMultimedia merchantItemMultimediaOid(Integer merchantItemMultimediaOid) {
    
    this.merchantItemMultimediaOid = merchantItemMultimediaOid;
    return this;
  }

   /**
   * Item multimedia object identifier
   * @return merchantItemMultimediaOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Item multimedia object identifier")

  public Integer getMerchantItemMultimediaOid() {
    return merchantItemMultimediaOid;
  }


  public void setMerchantItemMultimediaOid(Integer merchantItemMultimediaOid) {
    this.merchantItemMultimediaOid = merchantItemMultimediaOid;
  }


  public ItemContentMultimedia orphan(Boolean orphan) {
    
    this.orphan = orphan;
    return this;
  }

   /**
   * True if the multimedia is an orphan of the active StoreFront themes
   * @return orphan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the multimedia is an orphan of the active StoreFront themes")

  public Boolean getOrphan() {
    return orphan;
  }


  public void setOrphan(Boolean orphan) {
    this.orphan = orphan;
  }


  public ItemContentMultimedia placeholder(Boolean placeholder) {
    
    this.placeholder = placeholder;
    return this;
  }

   /**
   * True if the object is a place holder that can be populated
   * @return placeholder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the object is a place holder that can be populated")

  public Boolean getPlaceholder() {
    return placeholder;
  }


  public void setPlaceholder(Boolean placeholder) {
    this.placeholder = placeholder;
  }


  public ItemContentMultimedia tempMultimediaOid(Integer tempMultimediaOid) {
    
    this.tempMultimediaOid = tempMultimediaOid;
    return this;
  }

   /**
   * Temporary multimedia object identifier assigned if uploading new multimedia
   * @return tempMultimediaOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Temporary multimedia object identifier assigned if uploading new multimedia")

  public Integer getTempMultimediaOid() {
    return tempMultimediaOid;
  }


  public void setTempMultimediaOid(Integer tempMultimediaOid) {
    this.tempMultimediaOid = tempMultimediaOid;
  }


  public ItemContentMultimedia thumbnails(List<ItemContentMultimediaThumbnail> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public ItemContentMultimedia addThumbnailsItem(ItemContentMultimediaThumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Thumbnails of this image
   * @return thumbnails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Thumbnails of this image")

  public List<ItemContentMultimediaThumbnail> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<ItemContentMultimediaThumbnail> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public ItemContentMultimedia type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of file
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of file")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ItemContentMultimedia url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public ItemContentMultimedia width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * Width of the image
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Width of the image")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemContentMultimedia itemContentMultimedia = (ItemContentMultimedia) o;
    return Objects.equals(this.cloudUrl, itemContentMultimedia.cloudUrl) &&
        Objects.equals(this.cloudUrlExpiration, itemContentMultimedia.cloudUrlExpiration) &&
        Objects.equals(this.code, itemContentMultimedia.code) &&
        Objects.equals(this.description, itemContentMultimedia.description) &&
        Objects.equals(this.excludeFromGallery, itemContentMultimedia.excludeFromGallery) &&
        Objects.equals(this.fileName, itemContentMultimedia.fileName) &&
        Objects.equals(this.height, itemContentMultimedia.height) &&
        Objects.equals(this.merchantItemMultimediaOid, itemContentMultimedia.merchantItemMultimediaOid) &&
        Objects.equals(this.orphan, itemContentMultimedia.orphan) &&
        Objects.equals(this.placeholder, itemContentMultimedia.placeholder) &&
        Objects.equals(this.tempMultimediaOid, itemContentMultimedia.tempMultimediaOid) &&
        Objects.equals(this.thumbnails, itemContentMultimedia.thumbnails) &&
        Objects.equals(this.type, itemContentMultimedia.type) &&
        Objects.equals(this.url, itemContentMultimedia.url) &&
        Objects.equals(this.width, itemContentMultimedia.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudUrl, cloudUrlExpiration, code, description, excludeFromGallery, fileName, height, merchantItemMultimediaOid, orphan, placeholder, tempMultimediaOid, thumbnails, type, url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemContentMultimedia {\n");
    sb.append("    cloudUrl: ").append(toIndentedString(cloudUrl)).append("\n");
    sb.append("    cloudUrlExpiration: ").append(toIndentedString(cloudUrlExpiration)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    excludeFromGallery: ").append(toIndentedString(excludeFromGallery)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    merchantItemMultimediaOid: ").append(toIndentedString(merchantItemMultimediaOid)).append("\n");
    sb.append("    orphan: ").append(toIndentedString(orphan)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    tempMultimediaOid: ").append(toIndentedString(tempMultimediaOid)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloud_url");
    openapiFields.add("cloud_url_expiration");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("exclude_from_gallery");
    openapiFields.add("file_name");
    openapiFields.add("height");
    openapiFields.add("merchant_item_multimedia_oid");
    openapiFields.add("orphan");
    openapiFields.add("placeholder");
    openapiFields.add("temp_multimedia_oid");
    openapiFields.add("thumbnails");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemContentMultimedia
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemContentMultimedia.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemContentMultimedia is not found in the empty JSON string", ItemContentMultimedia.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemContentMultimedia.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemContentMultimedia` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("cloud_url") != null && !jsonObj.get("cloud_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_url").toString()));
      }
      if (jsonObj.get("cloud_url_expiration") != null && !jsonObj.get("cloud_url_expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_url_expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_url_expiration").toString()));
      }
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
      if (jsonArraythumbnails != null) {
        // ensure the json data is an array
        if (!jsonObj.get("thumbnails").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
        }

        // validate the optional field `thumbnails` (array)
        for (int i = 0; i < jsonArraythumbnails.size(); i++) {
          ItemContentMultimediaThumbnail.validateJsonObject(jsonArraythumbnails.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemContentMultimedia.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemContentMultimedia' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemContentMultimedia> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemContentMultimedia.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemContentMultimedia>() {
           @Override
           public void write(JsonWriter out, ItemContentMultimedia value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemContentMultimedia read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemContentMultimedia given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemContentMultimedia
  * @throws IOException if the JSON string is invalid with respect to ItemContentMultimedia
  */
  public static ItemContentMultimedia fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemContentMultimedia.class);
  }

 /**
  * Convert an instance of ItemContentMultimedia to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationEventAddCoupon;
import com.ultracart.admin.v2.models.ConversationEventAddItem;
import com.ultracart.admin.v2.models.ConversationEventQueuePosition;
import com.ultracart.admin.v2.models.ConversationEventRRWeb;
import com.ultracart.admin.v2.models.ConversationEventReadMessage;
import com.ultracart.admin.v2.models.ConversationEventTyping;
import com.ultracart.admin.v2.models.ConversationEventWebchatContext;
import com.ultracart.admin.v2.models.ConversationMessage;
import com.ultracart.admin.v2.models.ConversationSummary;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConversationWebsocketMessage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-13T10:02:12.903-05:00")



public class ConversationWebsocketMessage {
  @SerializedName("conversation_uuid")
  private String conversationUuid = null;

  @SerializedName("event_add_coupon")
  private ConversationEventAddCoupon eventAddCoupon = null;

  @SerializedName("event_add_item")
  private ConversationEventAddItem eventAddItem = null;

  @SerializedName("event_conversation_closed")
  private ConversationSummary eventConversationClosed = null;

  @SerializedName("event_new_conversation")
  private ConversationSummary eventNewConversation = null;

  @SerializedName("event_new_message")
  private ConversationSummary eventNewMessage = null;

  @SerializedName("event_participant_update")
  private ConversationSummary eventParticipantUpdate = null;

  @SerializedName("event_queue_position")
  private ConversationEventQueuePosition eventQueuePosition = null;

  @SerializedName("event_queue_status_update")
  private ConversationWebchatQueueStatus eventQueueStatusUpdate = null;

  @SerializedName("event_read_message")
  private ConversationEventReadMessage eventReadMessage = null;

  @SerializedName("event_rrweb")
  private ConversationEventRRWeb eventRrweb = null;

  /**
   * Type of event
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    QUEUE_POSITION("queue position"),
    
    WEBCHAT_START_CONVERSATION("webchat start conversation"),
    
    CONVERSATION_CLOSED("conversation closed"),
    
    NEW_CONVERSATION("new conversation"),
    
    NEW_MESSAGE("new message"),
    
    UPDATED_MESSAGE("updated message"),
    
    QUEUE_STATUS_UPDATE("queue status update"),
    
    RRWEB("rrweb"),
    
    PARTICIPANT_UPDATE("participant update"),
    
    READ_MESSAGE("read message"),
    
    TYPING("typing"),
    
    ADD_COUPON("add coupon"),
    
    ADD_ITEM("add item"),
    
    WEBCHAT_CONTEXT("webchat context");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String text) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EventTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("event_type")
  private EventTypeEnum eventType = null;

  @SerializedName("event_typing")
  private ConversationEventTyping eventTyping = null;

  @SerializedName("event_updated_message")
  private ConversationMessage eventUpdatedMessage = null;

  @SerializedName("event_webchat_context")
  private ConversationEventWebchatContext eventWebchatContext = null;

  @SerializedName("message")
  private ConversationMessage message = null;

  /**
   * Type of message
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MESSAGE("message"),
    
    EVENT("event"),
    
    PING("ping"),
    
    CHECK_QUEUE_POSITION("check queue position");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public ConversationWebsocketMessage conversationUuid(String conversationUuid) {
    this.conversationUuid = conversationUuid;
    return this;
  }

   /**
   * Conversation UUID if the websocket message is tied to a specific conversation
   * @return conversationUuid
  **/
  @ApiModelProperty(value = "Conversation UUID if the websocket message is tied to a specific conversation")
  public String getConversationUuid() {
    return conversationUuid;
  }

  public void setConversationUuid(String conversationUuid) {
    this.conversationUuid = conversationUuid;
  }

  public ConversationWebsocketMessage eventAddCoupon(ConversationEventAddCoupon eventAddCoupon) {
    this.eventAddCoupon = eventAddCoupon;
    return this;
  }

   /**
   * Get eventAddCoupon
   * @return eventAddCoupon
  **/
  @ApiModelProperty(value = "")
  public ConversationEventAddCoupon getEventAddCoupon() {
    return eventAddCoupon;
  }

  public void setEventAddCoupon(ConversationEventAddCoupon eventAddCoupon) {
    this.eventAddCoupon = eventAddCoupon;
  }

  public ConversationWebsocketMessage eventAddItem(ConversationEventAddItem eventAddItem) {
    this.eventAddItem = eventAddItem;
    return this;
  }

   /**
   * Get eventAddItem
   * @return eventAddItem
  **/
  @ApiModelProperty(value = "")
  public ConversationEventAddItem getEventAddItem() {
    return eventAddItem;
  }

  public void setEventAddItem(ConversationEventAddItem eventAddItem) {
    this.eventAddItem = eventAddItem;
  }

  public ConversationWebsocketMessage eventConversationClosed(ConversationSummary eventConversationClosed) {
    this.eventConversationClosed = eventConversationClosed;
    return this;
  }

   /**
   * Get eventConversationClosed
   * @return eventConversationClosed
  **/
  @ApiModelProperty(value = "")
  public ConversationSummary getEventConversationClosed() {
    return eventConversationClosed;
  }

  public void setEventConversationClosed(ConversationSummary eventConversationClosed) {
    this.eventConversationClosed = eventConversationClosed;
  }

  public ConversationWebsocketMessage eventNewConversation(ConversationSummary eventNewConversation) {
    this.eventNewConversation = eventNewConversation;
    return this;
  }

   /**
   * Get eventNewConversation
   * @return eventNewConversation
  **/
  @ApiModelProperty(value = "")
  public ConversationSummary getEventNewConversation() {
    return eventNewConversation;
  }

  public void setEventNewConversation(ConversationSummary eventNewConversation) {
    this.eventNewConversation = eventNewConversation;
  }

  public ConversationWebsocketMessage eventNewMessage(ConversationSummary eventNewMessage) {
    this.eventNewMessage = eventNewMessage;
    return this;
  }

   /**
   * Get eventNewMessage
   * @return eventNewMessage
  **/
  @ApiModelProperty(value = "")
  public ConversationSummary getEventNewMessage() {
    return eventNewMessage;
  }

  public void setEventNewMessage(ConversationSummary eventNewMessage) {
    this.eventNewMessage = eventNewMessage;
  }

  public ConversationWebsocketMessage eventParticipantUpdate(ConversationSummary eventParticipantUpdate) {
    this.eventParticipantUpdate = eventParticipantUpdate;
    return this;
  }

   /**
   * Get eventParticipantUpdate
   * @return eventParticipantUpdate
  **/
  @ApiModelProperty(value = "")
  public ConversationSummary getEventParticipantUpdate() {
    return eventParticipantUpdate;
  }

  public void setEventParticipantUpdate(ConversationSummary eventParticipantUpdate) {
    this.eventParticipantUpdate = eventParticipantUpdate;
  }

  public ConversationWebsocketMessage eventQueuePosition(ConversationEventQueuePosition eventQueuePosition) {
    this.eventQueuePosition = eventQueuePosition;
    return this;
  }

   /**
   * Get eventQueuePosition
   * @return eventQueuePosition
  **/
  @ApiModelProperty(value = "")
  public ConversationEventQueuePosition getEventQueuePosition() {
    return eventQueuePosition;
  }

  public void setEventQueuePosition(ConversationEventQueuePosition eventQueuePosition) {
    this.eventQueuePosition = eventQueuePosition;
  }

  public ConversationWebsocketMessage eventQueueStatusUpdate(ConversationWebchatQueueStatus eventQueueStatusUpdate) {
    this.eventQueueStatusUpdate = eventQueueStatusUpdate;
    return this;
  }

   /**
   * Get eventQueueStatusUpdate
   * @return eventQueueStatusUpdate
  **/
  @ApiModelProperty(value = "")
  public ConversationWebchatQueueStatus getEventQueueStatusUpdate() {
    return eventQueueStatusUpdate;
  }

  public void setEventQueueStatusUpdate(ConversationWebchatQueueStatus eventQueueStatusUpdate) {
    this.eventQueueStatusUpdate = eventQueueStatusUpdate;
  }

  public ConversationWebsocketMessage eventReadMessage(ConversationEventReadMessage eventReadMessage) {
    this.eventReadMessage = eventReadMessage;
    return this;
  }

   /**
   * Get eventReadMessage
   * @return eventReadMessage
  **/
  @ApiModelProperty(value = "")
  public ConversationEventReadMessage getEventReadMessage() {
    return eventReadMessage;
  }

  public void setEventReadMessage(ConversationEventReadMessage eventReadMessage) {
    this.eventReadMessage = eventReadMessage;
  }

  public ConversationWebsocketMessage eventRrweb(ConversationEventRRWeb eventRrweb) {
    this.eventRrweb = eventRrweb;
    return this;
  }

   /**
   * Get eventRrweb
   * @return eventRrweb
  **/
  @ApiModelProperty(value = "")
  public ConversationEventRRWeb getEventRrweb() {
    return eventRrweb;
  }

  public void setEventRrweb(ConversationEventRRWeb eventRrweb) {
    this.eventRrweb = eventRrweb;
  }

  public ConversationWebsocketMessage eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Type of event
   * @return eventType
  **/
  @ApiModelProperty(value = "Type of event")
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }

  public ConversationWebsocketMessage eventTyping(ConversationEventTyping eventTyping) {
    this.eventTyping = eventTyping;
    return this;
  }

   /**
   * Get eventTyping
   * @return eventTyping
  **/
  @ApiModelProperty(value = "")
  public ConversationEventTyping getEventTyping() {
    return eventTyping;
  }

  public void setEventTyping(ConversationEventTyping eventTyping) {
    this.eventTyping = eventTyping;
  }

  public ConversationWebsocketMessage eventUpdatedMessage(ConversationMessage eventUpdatedMessage) {
    this.eventUpdatedMessage = eventUpdatedMessage;
    return this;
  }

   /**
   * Get eventUpdatedMessage
   * @return eventUpdatedMessage
  **/
  @ApiModelProperty(value = "")
  public ConversationMessage getEventUpdatedMessage() {
    return eventUpdatedMessage;
  }

  public void setEventUpdatedMessage(ConversationMessage eventUpdatedMessage) {
    this.eventUpdatedMessage = eventUpdatedMessage;
  }

  public ConversationWebsocketMessage eventWebchatContext(ConversationEventWebchatContext eventWebchatContext) {
    this.eventWebchatContext = eventWebchatContext;
    return this;
  }

   /**
   * Get eventWebchatContext
   * @return eventWebchatContext
  **/
  @ApiModelProperty(value = "")
  public ConversationEventWebchatContext getEventWebchatContext() {
    return eventWebchatContext;
  }

  public void setEventWebchatContext(ConversationEventWebchatContext eventWebchatContext) {
    this.eventWebchatContext = eventWebchatContext;
  }

  public ConversationWebsocketMessage message(ConversationMessage message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @ApiModelProperty(value = "")
  public ConversationMessage getMessage() {
    return message;
  }

  public void setMessage(ConversationMessage message) {
    this.message = message;
  }

  public ConversationWebsocketMessage type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of message
   * @return type
  **/
  @ApiModelProperty(value = "Type of message")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationWebsocketMessage conversationWebsocketMessage = (ConversationWebsocketMessage) o;
    return Objects.equals(this.conversationUuid, conversationWebsocketMessage.conversationUuid) &&
        Objects.equals(this.eventAddCoupon, conversationWebsocketMessage.eventAddCoupon) &&
        Objects.equals(this.eventAddItem, conversationWebsocketMessage.eventAddItem) &&
        Objects.equals(this.eventConversationClosed, conversationWebsocketMessage.eventConversationClosed) &&
        Objects.equals(this.eventNewConversation, conversationWebsocketMessage.eventNewConversation) &&
        Objects.equals(this.eventNewMessage, conversationWebsocketMessage.eventNewMessage) &&
        Objects.equals(this.eventParticipantUpdate, conversationWebsocketMessage.eventParticipantUpdate) &&
        Objects.equals(this.eventQueuePosition, conversationWebsocketMessage.eventQueuePosition) &&
        Objects.equals(this.eventQueueStatusUpdate, conversationWebsocketMessage.eventQueueStatusUpdate) &&
        Objects.equals(this.eventReadMessage, conversationWebsocketMessage.eventReadMessage) &&
        Objects.equals(this.eventRrweb, conversationWebsocketMessage.eventRrweb) &&
        Objects.equals(this.eventType, conversationWebsocketMessage.eventType) &&
        Objects.equals(this.eventTyping, conversationWebsocketMessage.eventTyping) &&
        Objects.equals(this.eventUpdatedMessage, conversationWebsocketMessage.eventUpdatedMessage) &&
        Objects.equals(this.eventWebchatContext, conversationWebsocketMessage.eventWebchatContext) &&
        Objects.equals(this.message, conversationWebsocketMessage.message) &&
        Objects.equals(this.type, conversationWebsocketMessage.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationUuid, eventAddCoupon, eventAddItem, eventConversationClosed, eventNewConversation, eventNewMessage, eventParticipantUpdate, eventQueuePosition, eventQueueStatusUpdate, eventReadMessage, eventRrweb, eventType, eventTyping, eventUpdatedMessage, eventWebchatContext, message, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationWebsocketMessage {\n");
    
    sb.append("    conversationUuid: ").append(toIndentedString(conversationUuid)).append("\n");
    sb.append("    eventAddCoupon: ").append(toIndentedString(eventAddCoupon)).append("\n");
    sb.append("    eventAddItem: ").append(toIndentedString(eventAddItem)).append("\n");
    sb.append("    eventConversationClosed: ").append(toIndentedString(eventConversationClosed)).append("\n");
    sb.append("    eventNewConversation: ").append(toIndentedString(eventNewConversation)).append("\n");
    sb.append("    eventNewMessage: ").append(toIndentedString(eventNewMessage)).append("\n");
    sb.append("    eventParticipantUpdate: ").append(toIndentedString(eventParticipantUpdate)).append("\n");
    sb.append("    eventQueuePosition: ").append(toIndentedString(eventQueuePosition)).append("\n");
    sb.append("    eventQueueStatusUpdate: ").append(toIndentedString(eventQueueStatusUpdate)).append("\n");
    sb.append("    eventReadMessage: ").append(toIndentedString(eventReadMessage)).append("\n");
    sb.append("    eventRrweb: ").append(toIndentedString(eventRrweb)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTyping: ").append(toIndentedString(eventTyping)).append("\n");
    sb.append("    eventUpdatedMessage: ").append(toIndentedString(eventUpdatedMessage)).append("\n");
    sb.append("    eventWebchatContext: ").append(toIndentedString(eventWebchatContext)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationEventAddCoupon;
import com.ultracart.admin.v2.models.ConversationEventAddItem;
import com.ultracart.admin.v2.models.ConversationEventQueuePosition;
import com.ultracart.admin.v2.models.ConversationEventRRWeb;
import com.ultracart.admin.v2.models.ConversationEventReadMessage;
import com.ultracart.admin.v2.models.ConversationEventTyping;
import com.ultracart.admin.v2.models.ConversationEventWebchatContext;
import com.ultracart.admin.v2.models.ConversationMessage;
import com.ultracart.admin.v2.models.ConversationParticipant;
import com.ultracart.admin.v2.models.ConversationSummary;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatus;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatusQueueEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationWebsocketMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:26:00.852-04:00[America/Indianapolis]")
public class ConversationWebsocketMessage {
  public static final String SERIALIZED_NAME_CONVERSATION_ARN = "conversation_arn";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_ARN)
  private String conversationArn;

  public static final String SERIALIZED_NAME_CONVERSATION_UUID = "conversation_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_UUID)
  private String conversationUuid;

  public static final String SERIALIZED_NAME_EVENT_ADD_COUPON = "event_add_coupon";
  @SerializedName(SERIALIZED_NAME_EVENT_ADD_COUPON)
  private ConversationEventAddCoupon eventAddCoupon;

  public static final String SERIALIZED_NAME_EVENT_ADD_ITEM = "event_add_item";
  @SerializedName(SERIALIZED_NAME_EVENT_ADD_ITEM)
  private ConversationEventAddItem eventAddItem;

  public static final String SERIALIZED_NAME_EVENT_CONVERSATION_CLOSED = "event_conversation_closed";
  @SerializedName(SERIALIZED_NAME_EVENT_CONVERSATION_CLOSED)
  private ConversationSummary eventConversationClosed;

  public static final String SERIALIZED_NAME_EVENT_ENGAGE_CUSTOMER = "event_engage_customer";
  @SerializedName(SERIALIZED_NAME_EVENT_ENGAGE_CUSTOMER)
  private ConversationWebchatQueueStatusQueueEntry eventEngageCustomer;

  public static final String SERIALIZED_NAME_EVENT_NEW_CONVERSATION = "event_new_conversation";
  @SerializedName(SERIALIZED_NAME_EVENT_NEW_CONVERSATION)
  private ConversationSummary eventNewConversation;

  public static final String SERIALIZED_NAME_EVENT_NEW_MESSAGE = "event_new_message";
  @SerializedName(SERIALIZED_NAME_EVENT_NEW_MESSAGE)
  private ConversationSummary eventNewMessage;

  public static final String SERIALIZED_NAME_EVENT_PARTICIPANT_JOIN = "event_participant_join";
  @SerializedName(SERIALIZED_NAME_EVENT_PARTICIPANT_JOIN)
  private ConversationSummary eventParticipantJoin;

  public static final String SERIALIZED_NAME_EVENT_PARTICIPANT_JOIN_PARTICIPANT = "event_participant_join_participant";
  @SerializedName(SERIALIZED_NAME_EVENT_PARTICIPANT_JOIN_PARTICIPANT)
  private ConversationParticipant eventParticipantJoinParticipant;

  public static final String SERIALIZED_NAME_EVENT_PARTICIPANT_LEFT = "event_participant_left";
  @SerializedName(SERIALIZED_NAME_EVENT_PARTICIPANT_LEFT)
  private ConversationSummary eventParticipantLeft;

  public static final String SERIALIZED_NAME_EVENT_PARTICIPANT_LEFT_PARTICIPANT = "event_participant_left_participant";
  @SerializedName(SERIALIZED_NAME_EVENT_PARTICIPANT_LEFT_PARTICIPANT)
  private ConversationParticipant eventParticipantLeftParticipant;

  public static final String SERIALIZED_NAME_EVENT_PARTICIPANT_UPDATE = "event_participant_update";
  @SerializedName(SERIALIZED_NAME_EVENT_PARTICIPANT_UPDATE)
  private ConversationSummary eventParticipantUpdate;

  public static final String SERIALIZED_NAME_EVENT_QUEUE_NEW_MEMBER = "event_queue_new_member";
  @SerializedName(SERIALIZED_NAME_EVENT_QUEUE_NEW_MEMBER)
  private ConversationWebchatQueueStatusQueueEntry eventQueueNewMember;

  public static final String SERIALIZED_NAME_EVENT_QUEUE_POSITION = "event_queue_position";
  @SerializedName(SERIALIZED_NAME_EVENT_QUEUE_POSITION)
  private ConversationEventQueuePosition eventQueuePosition;

  public static final String SERIALIZED_NAME_EVENT_QUEUE_STATUS_UPDATE = "event_queue_status_update";
  @SerializedName(SERIALIZED_NAME_EVENT_QUEUE_STATUS_UPDATE)
  private ConversationWebchatQueueStatus eventQueueStatusUpdate;

  public static final String SERIALIZED_NAME_EVENT_READ_MESSAGE = "event_read_message";
  @SerializedName(SERIALIZED_NAME_EVENT_READ_MESSAGE)
  private ConversationEventReadMessage eventReadMessage;

  public static final String SERIALIZED_NAME_EVENT_RRWEB = "event_rrweb";
  @SerializedName(SERIALIZED_NAME_EVENT_RRWEB)
  private ConversationEventRRWeb eventRrweb;

  /**
   * Type of event
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    QUEUE_POSITION("queue position"),
    
    WEBCHAT_START_CONVERSATION("webchat start conversation"),
    
    CONVERSATION_CLOSED("conversation closed"),
    
    NEW_CONVERSATION("new conversation"),
    
    NEW_MESSAGE("new message"),
    
    UPDATED_MESSAGE("updated message"),
    
    QUEUE_STATUS_UPDATE("queue status update"),
    
    RRWEB("rrweb"),
    
    PARTICIPANT_UPDATE("participant update"),
    
    PARTICIPANT_JOIN("participant join"),
    
    PARTICIPANT_LEFT("participant left"),
    
    READ_MESSAGE("read message"),
    
    TYPING("typing"),
    
    ADD_COUPON("add coupon"),
    
    ADD_ITEM("add item"),
    
    WEBCHAT_CONTEXT("webchat context"),
    
    ENGAGE_CUSTOMER("engage customer"),
    
    QUEUE_NEW_MEMBER("queue new member");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_EVENT_TYPING = "event_typing";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPING)
  private ConversationEventTyping eventTyping;

  public static final String SERIALIZED_NAME_EVENT_UPDATED_MESSAGE = "event_updated_message";
  @SerializedName(SERIALIZED_NAME_EVENT_UPDATED_MESSAGE)
  private ConversationMessage eventUpdatedMessage;

  public static final String SERIALIZED_NAME_EVENT_WEBCHAT_CONTEXT = "event_webchat_context";
  @SerializedName(SERIALIZED_NAME_EVENT_WEBCHAT_CONTEXT)
  private ConversationEventWebchatContext eventWebchatContext;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private ConversationMessage message;

  /**
   * Type of message
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MESSAGE("message"),
    
    EVENT("event"),
    
    PING("ping"),
    
    CHECK_QUEUE_POSITION("check queue position");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ConversationWebsocketMessage() { 
  }

  public ConversationWebsocketMessage conversationArn(String conversationArn) {
    
    this.conversationArn = conversationArn;
    return this;
  }

   /**
   * Conversation ARN
   * @return conversationArn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversation ARN")

  public String getConversationArn() {
    return conversationArn;
  }


  public void setConversationArn(String conversationArn) {
    this.conversationArn = conversationArn;
  }


  public ConversationWebsocketMessage conversationUuid(String conversationUuid) {
    
    this.conversationUuid = conversationUuid;
    return this;
  }

   /**
   * Conversation UUID if the websocket message is tied to a specific conversation
   * @return conversationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversation UUID if the websocket message is tied to a specific conversation")

  public String getConversationUuid() {
    return conversationUuid;
  }


  public void setConversationUuid(String conversationUuid) {
    this.conversationUuid = conversationUuid;
  }


  public ConversationWebsocketMessage eventAddCoupon(ConversationEventAddCoupon eventAddCoupon) {
    
    this.eventAddCoupon = eventAddCoupon;
    return this;
  }

   /**
   * Get eventAddCoupon
   * @return eventAddCoupon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventAddCoupon getEventAddCoupon() {
    return eventAddCoupon;
  }


  public void setEventAddCoupon(ConversationEventAddCoupon eventAddCoupon) {
    this.eventAddCoupon = eventAddCoupon;
  }


  public ConversationWebsocketMessage eventAddItem(ConversationEventAddItem eventAddItem) {
    
    this.eventAddItem = eventAddItem;
    return this;
  }

   /**
   * Get eventAddItem
   * @return eventAddItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventAddItem getEventAddItem() {
    return eventAddItem;
  }


  public void setEventAddItem(ConversationEventAddItem eventAddItem) {
    this.eventAddItem = eventAddItem;
  }


  public ConversationWebsocketMessage eventConversationClosed(ConversationSummary eventConversationClosed) {
    
    this.eventConversationClosed = eventConversationClosed;
    return this;
  }

   /**
   * Get eventConversationClosed
   * @return eventConversationClosed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventConversationClosed() {
    return eventConversationClosed;
  }


  public void setEventConversationClosed(ConversationSummary eventConversationClosed) {
    this.eventConversationClosed = eventConversationClosed;
  }


  public ConversationWebsocketMessage eventEngageCustomer(ConversationWebchatQueueStatusQueueEntry eventEngageCustomer) {
    
    this.eventEngageCustomer = eventEngageCustomer;
    return this;
  }

   /**
   * Get eventEngageCustomer
   * @return eventEngageCustomer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationWebchatQueueStatusQueueEntry getEventEngageCustomer() {
    return eventEngageCustomer;
  }


  public void setEventEngageCustomer(ConversationWebchatQueueStatusQueueEntry eventEngageCustomer) {
    this.eventEngageCustomer = eventEngageCustomer;
  }


  public ConversationWebsocketMessage eventNewConversation(ConversationSummary eventNewConversation) {
    
    this.eventNewConversation = eventNewConversation;
    return this;
  }

   /**
   * Get eventNewConversation
   * @return eventNewConversation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventNewConversation() {
    return eventNewConversation;
  }


  public void setEventNewConversation(ConversationSummary eventNewConversation) {
    this.eventNewConversation = eventNewConversation;
  }


  public ConversationWebsocketMessage eventNewMessage(ConversationSummary eventNewMessage) {
    
    this.eventNewMessage = eventNewMessage;
    return this;
  }

   /**
   * Get eventNewMessage
   * @return eventNewMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventNewMessage() {
    return eventNewMessage;
  }


  public void setEventNewMessage(ConversationSummary eventNewMessage) {
    this.eventNewMessage = eventNewMessage;
  }


  public ConversationWebsocketMessage eventParticipantJoin(ConversationSummary eventParticipantJoin) {
    
    this.eventParticipantJoin = eventParticipantJoin;
    return this;
  }

   /**
   * Get eventParticipantJoin
   * @return eventParticipantJoin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventParticipantJoin() {
    return eventParticipantJoin;
  }


  public void setEventParticipantJoin(ConversationSummary eventParticipantJoin) {
    this.eventParticipantJoin = eventParticipantJoin;
  }


  public ConversationWebsocketMessage eventParticipantJoinParticipant(ConversationParticipant eventParticipantJoinParticipant) {
    
    this.eventParticipantJoinParticipant = eventParticipantJoinParticipant;
    return this;
  }

   /**
   * Get eventParticipantJoinParticipant
   * @return eventParticipantJoinParticipant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationParticipant getEventParticipantJoinParticipant() {
    return eventParticipantJoinParticipant;
  }


  public void setEventParticipantJoinParticipant(ConversationParticipant eventParticipantJoinParticipant) {
    this.eventParticipantJoinParticipant = eventParticipantJoinParticipant;
  }


  public ConversationWebsocketMessage eventParticipantLeft(ConversationSummary eventParticipantLeft) {
    
    this.eventParticipantLeft = eventParticipantLeft;
    return this;
  }

   /**
   * Get eventParticipantLeft
   * @return eventParticipantLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventParticipantLeft() {
    return eventParticipantLeft;
  }


  public void setEventParticipantLeft(ConversationSummary eventParticipantLeft) {
    this.eventParticipantLeft = eventParticipantLeft;
  }


  public ConversationWebsocketMessage eventParticipantLeftParticipant(ConversationParticipant eventParticipantLeftParticipant) {
    
    this.eventParticipantLeftParticipant = eventParticipantLeftParticipant;
    return this;
  }

   /**
   * Get eventParticipantLeftParticipant
   * @return eventParticipantLeftParticipant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationParticipant getEventParticipantLeftParticipant() {
    return eventParticipantLeftParticipant;
  }


  public void setEventParticipantLeftParticipant(ConversationParticipant eventParticipantLeftParticipant) {
    this.eventParticipantLeftParticipant = eventParticipantLeftParticipant;
  }


  public ConversationWebsocketMessage eventParticipantUpdate(ConversationSummary eventParticipantUpdate) {
    
    this.eventParticipantUpdate = eventParticipantUpdate;
    return this;
  }

   /**
   * Get eventParticipantUpdate
   * @return eventParticipantUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationSummary getEventParticipantUpdate() {
    return eventParticipantUpdate;
  }


  public void setEventParticipantUpdate(ConversationSummary eventParticipantUpdate) {
    this.eventParticipantUpdate = eventParticipantUpdate;
  }


  public ConversationWebsocketMessage eventQueueNewMember(ConversationWebchatQueueStatusQueueEntry eventQueueNewMember) {
    
    this.eventQueueNewMember = eventQueueNewMember;
    return this;
  }

   /**
   * Get eventQueueNewMember
   * @return eventQueueNewMember
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationWebchatQueueStatusQueueEntry getEventQueueNewMember() {
    return eventQueueNewMember;
  }


  public void setEventQueueNewMember(ConversationWebchatQueueStatusQueueEntry eventQueueNewMember) {
    this.eventQueueNewMember = eventQueueNewMember;
  }


  public ConversationWebsocketMessage eventQueuePosition(ConversationEventQueuePosition eventQueuePosition) {
    
    this.eventQueuePosition = eventQueuePosition;
    return this;
  }

   /**
   * Get eventQueuePosition
   * @return eventQueuePosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventQueuePosition getEventQueuePosition() {
    return eventQueuePosition;
  }


  public void setEventQueuePosition(ConversationEventQueuePosition eventQueuePosition) {
    this.eventQueuePosition = eventQueuePosition;
  }


  public ConversationWebsocketMessage eventQueueStatusUpdate(ConversationWebchatQueueStatus eventQueueStatusUpdate) {
    
    this.eventQueueStatusUpdate = eventQueueStatusUpdate;
    return this;
  }

   /**
   * Get eventQueueStatusUpdate
   * @return eventQueueStatusUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationWebchatQueueStatus getEventQueueStatusUpdate() {
    return eventQueueStatusUpdate;
  }


  public void setEventQueueStatusUpdate(ConversationWebchatQueueStatus eventQueueStatusUpdate) {
    this.eventQueueStatusUpdate = eventQueueStatusUpdate;
  }


  public ConversationWebsocketMessage eventReadMessage(ConversationEventReadMessage eventReadMessage) {
    
    this.eventReadMessage = eventReadMessage;
    return this;
  }

   /**
   * Get eventReadMessage
   * @return eventReadMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventReadMessage getEventReadMessage() {
    return eventReadMessage;
  }


  public void setEventReadMessage(ConversationEventReadMessage eventReadMessage) {
    this.eventReadMessage = eventReadMessage;
  }


  public ConversationWebsocketMessage eventRrweb(ConversationEventRRWeb eventRrweb) {
    
    this.eventRrweb = eventRrweb;
    return this;
  }

   /**
   * Get eventRrweb
   * @return eventRrweb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventRRWeb getEventRrweb() {
    return eventRrweb;
  }


  public void setEventRrweb(ConversationEventRRWeb eventRrweb) {
    this.eventRrweb = eventRrweb;
  }


  public ConversationWebsocketMessage eventType(EventTypeEnum eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Type of event
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of event")

  public EventTypeEnum getEventType() {
    return eventType;
  }


  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public ConversationWebsocketMessage eventTyping(ConversationEventTyping eventTyping) {
    
    this.eventTyping = eventTyping;
    return this;
  }

   /**
   * Get eventTyping
   * @return eventTyping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventTyping getEventTyping() {
    return eventTyping;
  }


  public void setEventTyping(ConversationEventTyping eventTyping) {
    this.eventTyping = eventTyping;
  }


  public ConversationWebsocketMessage eventUpdatedMessage(ConversationMessage eventUpdatedMessage) {
    
    this.eventUpdatedMessage = eventUpdatedMessage;
    return this;
  }

   /**
   * Get eventUpdatedMessage
   * @return eventUpdatedMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationMessage getEventUpdatedMessage() {
    return eventUpdatedMessage;
  }


  public void setEventUpdatedMessage(ConversationMessage eventUpdatedMessage) {
    this.eventUpdatedMessage = eventUpdatedMessage;
  }


  public ConversationWebsocketMessage eventWebchatContext(ConversationEventWebchatContext eventWebchatContext) {
    
    this.eventWebchatContext = eventWebchatContext;
    return this;
  }

   /**
   * Get eventWebchatContext
   * @return eventWebchatContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationEventWebchatContext getEventWebchatContext() {
    return eventWebchatContext;
  }


  public void setEventWebchatContext(ConversationEventWebchatContext eventWebchatContext) {
    this.eventWebchatContext = eventWebchatContext;
  }


  public ConversationWebsocketMessage message(ConversationMessage message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConversationMessage getMessage() {
    return message;
  }


  public void setMessage(ConversationMessage message) {
    this.message = message;
  }


  public ConversationWebsocketMessage type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of message
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of message")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationWebsocketMessage conversationWebsocketMessage = (ConversationWebsocketMessage) o;
    return Objects.equals(this.conversationArn, conversationWebsocketMessage.conversationArn) &&
        Objects.equals(this.conversationUuid, conversationWebsocketMessage.conversationUuid) &&
        Objects.equals(this.eventAddCoupon, conversationWebsocketMessage.eventAddCoupon) &&
        Objects.equals(this.eventAddItem, conversationWebsocketMessage.eventAddItem) &&
        Objects.equals(this.eventConversationClosed, conversationWebsocketMessage.eventConversationClosed) &&
        Objects.equals(this.eventEngageCustomer, conversationWebsocketMessage.eventEngageCustomer) &&
        Objects.equals(this.eventNewConversation, conversationWebsocketMessage.eventNewConversation) &&
        Objects.equals(this.eventNewMessage, conversationWebsocketMessage.eventNewMessage) &&
        Objects.equals(this.eventParticipantJoin, conversationWebsocketMessage.eventParticipantJoin) &&
        Objects.equals(this.eventParticipantJoinParticipant, conversationWebsocketMessage.eventParticipantJoinParticipant) &&
        Objects.equals(this.eventParticipantLeft, conversationWebsocketMessage.eventParticipantLeft) &&
        Objects.equals(this.eventParticipantLeftParticipant, conversationWebsocketMessage.eventParticipantLeftParticipant) &&
        Objects.equals(this.eventParticipantUpdate, conversationWebsocketMessage.eventParticipantUpdate) &&
        Objects.equals(this.eventQueueNewMember, conversationWebsocketMessage.eventQueueNewMember) &&
        Objects.equals(this.eventQueuePosition, conversationWebsocketMessage.eventQueuePosition) &&
        Objects.equals(this.eventQueueStatusUpdate, conversationWebsocketMessage.eventQueueStatusUpdate) &&
        Objects.equals(this.eventReadMessage, conversationWebsocketMessage.eventReadMessage) &&
        Objects.equals(this.eventRrweb, conversationWebsocketMessage.eventRrweb) &&
        Objects.equals(this.eventType, conversationWebsocketMessage.eventType) &&
        Objects.equals(this.eventTyping, conversationWebsocketMessage.eventTyping) &&
        Objects.equals(this.eventUpdatedMessage, conversationWebsocketMessage.eventUpdatedMessage) &&
        Objects.equals(this.eventWebchatContext, conversationWebsocketMessage.eventWebchatContext) &&
        Objects.equals(this.message, conversationWebsocketMessage.message) &&
        Objects.equals(this.type, conversationWebsocketMessage.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationArn, conversationUuid, eventAddCoupon, eventAddItem, eventConversationClosed, eventEngageCustomer, eventNewConversation, eventNewMessage, eventParticipantJoin, eventParticipantJoinParticipant, eventParticipantLeft, eventParticipantLeftParticipant, eventParticipantUpdate, eventQueueNewMember, eventQueuePosition, eventQueueStatusUpdate, eventReadMessage, eventRrweb, eventType, eventTyping, eventUpdatedMessage, eventWebchatContext, message, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationWebsocketMessage {\n");
    sb.append("    conversationArn: ").append(toIndentedString(conversationArn)).append("\n");
    sb.append("    conversationUuid: ").append(toIndentedString(conversationUuid)).append("\n");
    sb.append("    eventAddCoupon: ").append(toIndentedString(eventAddCoupon)).append("\n");
    sb.append("    eventAddItem: ").append(toIndentedString(eventAddItem)).append("\n");
    sb.append("    eventConversationClosed: ").append(toIndentedString(eventConversationClosed)).append("\n");
    sb.append("    eventEngageCustomer: ").append(toIndentedString(eventEngageCustomer)).append("\n");
    sb.append("    eventNewConversation: ").append(toIndentedString(eventNewConversation)).append("\n");
    sb.append("    eventNewMessage: ").append(toIndentedString(eventNewMessage)).append("\n");
    sb.append("    eventParticipantJoin: ").append(toIndentedString(eventParticipantJoin)).append("\n");
    sb.append("    eventParticipantJoinParticipant: ").append(toIndentedString(eventParticipantJoinParticipant)).append("\n");
    sb.append("    eventParticipantLeft: ").append(toIndentedString(eventParticipantLeft)).append("\n");
    sb.append("    eventParticipantLeftParticipant: ").append(toIndentedString(eventParticipantLeftParticipant)).append("\n");
    sb.append("    eventParticipantUpdate: ").append(toIndentedString(eventParticipantUpdate)).append("\n");
    sb.append("    eventQueueNewMember: ").append(toIndentedString(eventQueueNewMember)).append("\n");
    sb.append("    eventQueuePosition: ").append(toIndentedString(eventQueuePosition)).append("\n");
    sb.append("    eventQueueStatusUpdate: ").append(toIndentedString(eventQueueStatusUpdate)).append("\n");
    sb.append("    eventReadMessage: ").append(toIndentedString(eventReadMessage)).append("\n");
    sb.append("    eventRrweb: ").append(toIndentedString(eventRrweb)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventTyping: ").append(toIndentedString(eventTyping)).append("\n");
    sb.append("    eventUpdatedMessage: ").append(toIndentedString(eventUpdatedMessage)).append("\n");
    sb.append("    eventWebchatContext: ").append(toIndentedString(eventWebchatContext)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversation_arn");
    openapiFields.add("conversation_uuid");
    openapiFields.add("event_add_coupon");
    openapiFields.add("event_add_item");
    openapiFields.add("event_conversation_closed");
    openapiFields.add("event_engage_customer");
    openapiFields.add("event_new_conversation");
    openapiFields.add("event_new_message");
    openapiFields.add("event_participant_join");
    openapiFields.add("event_participant_join_participant");
    openapiFields.add("event_participant_left");
    openapiFields.add("event_participant_left_participant");
    openapiFields.add("event_participant_update");
    openapiFields.add("event_queue_new_member");
    openapiFields.add("event_queue_position");
    openapiFields.add("event_queue_status_update");
    openapiFields.add("event_read_message");
    openapiFields.add("event_rrweb");
    openapiFields.add("event_type");
    openapiFields.add("event_typing");
    openapiFields.add("event_updated_message");
    openapiFields.add("event_webchat_context");
    openapiFields.add("message");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationWebsocketMessage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationWebsocketMessage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationWebsocketMessage is not found in the empty JSON string", ConversationWebsocketMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationWebsocketMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationWebsocketMessage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("conversation_arn") != null && !jsonObj.get("conversation_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_arn").toString()));
      }
      if (jsonObj.get("conversation_uuid") != null && !jsonObj.get("conversation_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_uuid").toString()));
      }
      // validate the optional field `event_add_coupon`
      if (jsonObj.getAsJsonObject("event_add_coupon") != null) {
        ConversationEventAddCoupon.validateJsonObject(jsonObj.getAsJsonObject("event_add_coupon"));
      }
      // validate the optional field `event_add_item`
      if (jsonObj.getAsJsonObject("event_add_item") != null) {
        ConversationEventAddItem.validateJsonObject(jsonObj.getAsJsonObject("event_add_item"));
      }
      // validate the optional field `event_conversation_closed`
      if (jsonObj.getAsJsonObject("event_conversation_closed") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_conversation_closed"));
      }
      // validate the optional field `event_engage_customer`
      if (jsonObj.getAsJsonObject("event_engage_customer") != null) {
        ConversationWebchatQueueStatusQueueEntry.validateJsonObject(jsonObj.getAsJsonObject("event_engage_customer"));
      }
      // validate the optional field `event_new_conversation`
      if (jsonObj.getAsJsonObject("event_new_conversation") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_new_conversation"));
      }
      // validate the optional field `event_new_message`
      if (jsonObj.getAsJsonObject("event_new_message") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_new_message"));
      }
      // validate the optional field `event_participant_join`
      if (jsonObj.getAsJsonObject("event_participant_join") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_participant_join"));
      }
      // validate the optional field `event_participant_join_participant`
      if (jsonObj.getAsJsonObject("event_participant_join_participant") != null) {
        ConversationParticipant.validateJsonObject(jsonObj.getAsJsonObject("event_participant_join_participant"));
      }
      // validate the optional field `event_participant_left`
      if (jsonObj.getAsJsonObject("event_participant_left") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_participant_left"));
      }
      // validate the optional field `event_participant_left_participant`
      if (jsonObj.getAsJsonObject("event_participant_left_participant") != null) {
        ConversationParticipant.validateJsonObject(jsonObj.getAsJsonObject("event_participant_left_participant"));
      }
      // validate the optional field `event_participant_update`
      if (jsonObj.getAsJsonObject("event_participant_update") != null) {
        ConversationSummary.validateJsonObject(jsonObj.getAsJsonObject("event_participant_update"));
      }
      // validate the optional field `event_queue_new_member`
      if (jsonObj.getAsJsonObject("event_queue_new_member") != null) {
        ConversationWebchatQueueStatusQueueEntry.validateJsonObject(jsonObj.getAsJsonObject("event_queue_new_member"));
      }
      // validate the optional field `event_queue_position`
      if (jsonObj.getAsJsonObject("event_queue_position") != null) {
        ConversationEventQueuePosition.validateJsonObject(jsonObj.getAsJsonObject("event_queue_position"));
      }
      // validate the optional field `event_queue_status_update`
      if (jsonObj.getAsJsonObject("event_queue_status_update") != null) {
        ConversationWebchatQueueStatus.validateJsonObject(jsonObj.getAsJsonObject("event_queue_status_update"));
      }
      // validate the optional field `event_read_message`
      if (jsonObj.getAsJsonObject("event_read_message") != null) {
        ConversationEventReadMessage.validateJsonObject(jsonObj.getAsJsonObject("event_read_message"));
      }
      // validate the optional field `event_rrweb`
      if (jsonObj.getAsJsonObject("event_rrweb") != null) {
        ConversationEventRRWeb.validateJsonObject(jsonObj.getAsJsonObject("event_rrweb"));
      }
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // validate the optional field `event_typing`
      if (jsonObj.getAsJsonObject("event_typing") != null) {
        ConversationEventTyping.validateJsonObject(jsonObj.getAsJsonObject("event_typing"));
      }
      // validate the optional field `event_updated_message`
      if (jsonObj.getAsJsonObject("event_updated_message") != null) {
        ConversationMessage.validateJsonObject(jsonObj.getAsJsonObject("event_updated_message"));
      }
      // validate the optional field `event_webchat_context`
      if (jsonObj.getAsJsonObject("event_webchat_context") != null) {
        ConversationEventWebchatContext.validateJsonObject(jsonObj.getAsJsonObject("event_webchat_context"));
      }
      // validate the optional field `message`
      if (jsonObj.getAsJsonObject("message") != null) {
        ConversationMessage.validateJsonObject(jsonObj.getAsJsonObject("message"));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationWebsocketMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationWebsocketMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationWebsocketMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationWebsocketMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationWebsocketMessage>() {
           @Override
           public void write(JsonWriter out, ConversationWebsocketMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationWebsocketMessage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationWebsocketMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationWebsocketMessage
  * @throws IOException if the JSON string is invalid with respect to ConversationWebsocketMessage
  */
  public static ConversationWebsocketMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationWebsocketMessage.class);
  }

 /**
  * Convert an instance of ConversationWebsocketMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


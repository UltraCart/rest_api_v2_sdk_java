/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderTransactionalMerchantNote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-24T10:48:42.268-05:00[America/Indianapolis]")
public class OrderTransactionalMerchantNote {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_DTS = "note_dts";
  @SerializedName(SERIALIZED_NAME_NOTE_DTS)
  private String noteDts;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public OrderTransactionalMerchantNote() { 
  }

  public OrderTransactionalMerchantNote ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP Address
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP Address")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public OrderTransactionalMerchantNote note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "note")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    this.note = note;
  }


  public OrderTransactionalMerchantNote noteDts(String noteDts) {
    
    this.noteDts = noteDts;
    return this;
  }

   /**
   * Timestamp when the note was added
   * @return noteDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp when the note was added")

  public String getNoteDts() {
    return noteDts;
  }


  public void setNoteDts(String noteDts) {
    this.noteDts = noteDts;
  }


  public OrderTransactionalMerchantNote user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * User that wrote the merchant note
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User that wrote the merchant note")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTransactionalMerchantNote orderTransactionalMerchantNote = (OrderTransactionalMerchantNote) o;
    return Objects.equals(this.ipAddress, orderTransactionalMerchantNote.ipAddress) &&
        Objects.equals(this.note, orderTransactionalMerchantNote.note) &&
        Objects.equals(this.noteDts, orderTransactionalMerchantNote.noteDts) &&
        Objects.equals(this.user, orderTransactionalMerchantNote.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, note, noteDts, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTransactionalMerchantNote {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteDts: ").append(toIndentedString(noteDts)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ip_address");
    openapiFields.add("note");
    openapiFields.add("note_dts");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderTransactionalMerchantNote
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderTransactionalMerchantNote.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTransactionalMerchantNote is not found in the empty JSON string", OrderTransactionalMerchantNote.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderTransactionalMerchantNote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTransactionalMerchantNote` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("note_dts") != null && !jsonObj.get("note_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_dts").toString()));
      }
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTransactionalMerchantNote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTransactionalMerchantNote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTransactionalMerchantNote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTransactionalMerchantNote.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTransactionalMerchantNote>() {
           @Override
           public void write(JsonWriter out, OrderTransactionalMerchantNote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTransactionalMerchantNote read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderTransactionalMerchantNote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderTransactionalMerchantNote
  * @throws IOException if the JSON string is invalid with respect to OrderTransactionalMerchantNote
  */
  public static OrderTransactionalMerchantNote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTransactionalMerchantNote.class);
  }

 /**
  * Convert an instance of OrderTransactionalMerchantNote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * IntegrationLogQueryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T16:10:17.964-05:00[America/Indianapolis]")
public class IntegrationLogQueryRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private String direction;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FILE_NAMES = "file_names";
  @SerializedName(SERIALIZED_NAME_FILE_NAMES)
  private List<String> fileNames = null;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_IPN_OID = "item_ipn_oid";
  @SerializedName(SERIALIZED_NAME_ITEM_IPN_OID)
  private Integer itemIpnOid;

  public static final String SERIALIZED_NAME_LOG_DTS_BEGIN = "log_dts_begin";
  @SerializedName(SERIALIZED_NAME_LOG_DTS_BEGIN)
  private String logDtsBegin;

  public static final String SERIALIZED_NAME_LOG_DTS_END = "log_dts_end";
  @SerializedName(SERIALIZED_NAME_LOG_DTS_END)
  private String logDtsEnd;

  public static final String SERIALIZED_NAME_LOG_TYPE = "log_type";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  private String logType;

  public static final String SERIALIZED_NAME_LOGGER_ID = "logger_id";
  @SerializedName(SERIALIZED_NAME_LOGGER_ID)
  private String loggerId;

  public static final String SERIALIZED_NAME_LOGGER_NAME = "logger_name";
  @SerializedName(SERIALIZED_NAME_LOGGER_NAME)
  private String loggerName;

  public static final String SERIALIZED_NAME_ORDER_IDS = "order_ids";
  @SerializedName(SERIALIZED_NAME_ORDER_IDS)
  private List<String> orderIds = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public IntegrationLogQueryRequest() { 
  }

  public IntegrationLogQueryRequest action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public IntegrationLogQueryRequest direction(String direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDirection() {
    return direction;
  }


  public void setDirection(String direction) {
    this.direction = direction;
  }


  public IntegrationLogQueryRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public IntegrationLogQueryRequest fileNames(List<String> fileNames) {
    
    this.fileNames = fileNames;
    return this;
  }

  public IntegrationLogQueryRequest addFileNamesItem(String fileNamesItem) {
    if (this.fileNames == null) {
      this.fileNames = new ArrayList<>();
    }
    this.fileNames.add(fileNamesItem);
    return this;
  }

   /**
   * Get fileNames
   * @return fileNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getFileNames() {
    return fileNames;
  }


  public void setFileNames(List<String> fileNames) {
    this.fileNames = fileNames;
  }


  public IntegrationLogQueryRequest itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Get itemId
   * @return itemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public IntegrationLogQueryRequest itemIpnOid(Integer itemIpnOid) {
    
    this.itemIpnOid = itemIpnOid;
    return this;
  }

   /**
   * Get itemIpnOid
   * @return itemIpnOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getItemIpnOid() {
    return itemIpnOid;
  }


  public void setItemIpnOid(Integer itemIpnOid) {
    this.itemIpnOid = itemIpnOid;
  }


  public IntegrationLogQueryRequest logDtsBegin(String logDtsBegin) {
    
    this.logDtsBegin = logDtsBegin;
    return this;
  }

   /**
   * Log date/time begin
   * @return logDtsBegin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Log date/time begin")

  public String getLogDtsBegin() {
    return logDtsBegin;
  }


  public void setLogDtsBegin(String logDtsBegin) {
    this.logDtsBegin = logDtsBegin;
  }


  public IntegrationLogQueryRequest logDtsEnd(String logDtsEnd) {
    
    this.logDtsEnd = logDtsEnd;
    return this;
  }

   /**
   * Log date/time end
   * @return logDtsEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Log date/time end")

  public String getLogDtsEnd() {
    return logDtsEnd;
  }


  public void setLogDtsEnd(String logDtsEnd) {
    this.logDtsEnd = logDtsEnd;
  }


  public IntegrationLogQueryRequest logType(String logType) {
    
    this.logType = logType;
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLogType() {
    return logType;
  }


  public void setLogType(String logType) {
    this.logType = logType;
  }


  public IntegrationLogQueryRequest loggerId(String loggerId) {
    
    this.loggerId = loggerId;
    return this;
  }

   /**
   * Get loggerId
   * @return loggerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoggerId() {
    return loggerId;
  }


  public void setLoggerId(String loggerId) {
    this.loggerId = loggerId;
  }


  public IntegrationLogQueryRequest loggerName(String loggerName) {
    
    this.loggerName = loggerName;
    return this;
  }

   /**
   * Get loggerName
   * @return loggerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLoggerName() {
    return loggerName;
  }


  public void setLoggerName(String loggerName) {
    this.loggerName = loggerName;
  }


  public IntegrationLogQueryRequest orderIds(List<String> orderIds) {
    
    this.orderIds = orderIds;
    return this;
  }

  public IntegrationLogQueryRequest addOrderIdsItem(String orderIdsItem) {
    if (this.orderIds == null) {
      this.orderIds = new ArrayList<>();
    }
    this.orderIds.add(orderIdsItem);
    return this;
  }

   /**
   * Get orderIds
   * @return orderIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOrderIds() {
    return orderIds;
  }


  public void setOrderIds(List<String> orderIds) {
    this.orderIds = orderIds;
  }


  public IntegrationLogQueryRequest status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationLogQueryRequest integrationLogQueryRequest = (IntegrationLogQueryRequest) o;
    return Objects.equals(this.action, integrationLogQueryRequest.action) &&
        Objects.equals(this.direction, integrationLogQueryRequest.direction) &&
        Objects.equals(this.email, integrationLogQueryRequest.email) &&
        Objects.equals(this.fileNames, integrationLogQueryRequest.fileNames) &&
        Objects.equals(this.itemId, integrationLogQueryRequest.itemId) &&
        Objects.equals(this.itemIpnOid, integrationLogQueryRequest.itemIpnOid) &&
        Objects.equals(this.logDtsBegin, integrationLogQueryRequest.logDtsBegin) &&
        Objects.equals(this.logDtsEnd, integrationLogQueryRequest.logDtsEnd) &&
        Objects.equals(this.logType, integrationLogQueryRequest.logType) &&
        Objects.equals(this.loggerId, integrationLogQueryRequest.loggerId) &&
        Objects.equals(this.loggerName, integrationLogQueryRequest.loggerName) &&
        Objects.equals(this.orderIds, integrationLogQueryRequest.orderIds) &&
        Objects.equals(this.status, integrationLogQueryRequest.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, direction, email, fileNames, itemId, itemIpnOid, logDtsBegin, logDtsEnd, logType, loggerId, loggerName, orderIds, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationLogQueryRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fileNames: ").append(toIndentedString(fileNames)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemIpnOid: ").append(toIndentedString(itemIpnOid)).append("\n");
    sb.append("    logDtsBegin: ").append(toIndentedString(logDtsBegin)).append("\n");
    sb.append("    logDtsEnd: ").append(toIndentedString(logDtsEnd)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    loggerId: ").append(toIndentedString(loggerId)).append("\n");
    sb.append("    loggerName: ").append(toIndentedString(loggerName)).append("\n");
    sb.append("    orderIds: ").append(toIndentedString(orderIds)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("direction");
    openapiFields.add("email");
    openapiFields.add("file_names");
    openapiFields.add("item_id");
    openapiFields.add("item_ipn_oid");
    openapiFields.add("log_dts_begin");
    openapiFields.add("log_dts_end");
    openapiFields.add("log_type");
    openapiFields.add("logger_id");
    openapiFields.add("logger_name");
    openapiFields.add("order_ids");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegrationLogQueryRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IntegrationLogQueryRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationLogQueryRequest is not found in the empty JSON string", IntegrationLogQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IntegrationLogQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationLogQueryRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `direction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("direction").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("file_names") != null && !jsonObj.get("file_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_names` to be an array in the JSON string but got `%s`", jsonObj.get("file_names").toString()));
      }
      if (jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if (jsonObj.get("log_dts_begin") != null && !jsonObj.get("log_dts_begin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_dts_begin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_dts_begin").toString()));
      }
      if (jsonObj.get("log_dts_end") != null && !jsonObj.get("log_dts_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_dts_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_dts_end").toString()));
      }
      if (jsonObj.get("log_type") != null && !jsonObj.get("log_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_type").toString()));
      }
      if (jsonObj.get("logger_id") != null && !jsonObj.get("logger_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger_id").toString()));
      }
      if (jsonObj.get("logger_name") != null && !jsonObj.get("logger_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logger_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logger_name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("order_ids") != null && !jsonObj.get("order_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_ids` to be an array in the JSON string but got `%s`", jsonObj.get("order_ids").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationLogQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationLogQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationLogQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationLogQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationLogQueryRequest>() {
           @Override
           public void write(JsonWriter out, IntegrationLogQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationLogQueryRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegrationLogQueryRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegrationLogQueryRequest
  * @throws IOException if the JSON string is invalid with respect to IntegrationLogQueryRequest
  */
  public static IntegrationLogQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationLogQueryRequest.class);
  }

 /**
  * Convert an instance of IntegrationLogQueryRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


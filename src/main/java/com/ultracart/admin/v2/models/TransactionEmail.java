/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TransactionEmailOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TransactionEmail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-30T15:27:05.032-04:00[America/Indianapolis]")
public class TransactionEmail {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_ESP_DOMAIN_UUID = "esp_domain_uuid";
  @SerializedName(SERIALIZED_NAME_ESP_DOMAIN_UUID)
  private String espDomainUuid;

  public static final String SERIALIZED_NAME_ESP_FRIENDLY_NAME = "esp_friendly_name";
  @SerializedName(SERIALIZED_NAME_ESP_FRIENDLY_NAME)
  private String espFriendlyName;

  public static final String SERIALIZED_NAME_ESP_USER = "esp_user";
  @SerializedName(SERIALIZED_NAME_ESP_USER)
  private String espUser;

  public static final String SERIALIZED_NAME_FILE_EXISTS = "file_exists";
  @SerializedName(SERIALIZED_NAME_FILE_EXISTS)
  private Boolean fileExists;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_HANDLEBAR_VARIABLES = "handlebar_variables";
  @SerializedName(SERIALIZED_NAME_HANDLEBAR_VARIABLES)
  private List<String> handlebarVariables = null;

  public static final String SERIALIZED_NAME_INVALID = "invalid";
  @SerializedName(SERIALIZED_NAME_INVALID)
  private Boolean invalid;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LIBRARY_ITEM_OID = "library_item_oid";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEM_OID)
  private Integer libraryItemOid;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<TransactionEmailOption> options = null;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STORE_FRONT_FS_DIRECTORY_OID = "store_front_fs_directory_oid";
  @SerializedName(SERIALIZED_NAME_STORE_FRONT_FS_DIRECTORY_OID)
  private Integer storeFrontFsDirectoryOid;

  public static final String SERIALIZED_NAME_STORE_FRONT_FS_FILE_OID = "store_front_fs_file_oid";
  @SerializedName(SERIALIZED_NAME_STORE_FRONT_FS_FILE_OID)
  private Integer storeFrontFsFileOid;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SYNTAX_ERRORS = "syntax_errors";
  @SerializedName(SERIALIZED_NAME_SYNTAX_ERRORS)
  private String syntaxErrors;

  public static final String SERIALIZED_NAME_TEMPLATE_PATH_RELATIVE_PATH = "template_path_relative_path";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PATH_RELATIVE_PATH)
  private String templatePathRelativePath;

  public static final String SERIALIZED_NAME_THEME_RELATIVE_PATH = "theme_relative_path";
  @SerializedName(SERIALIZED_NAME_THEME_RELATIVE_PATH)
  private String themeRelativePath;

  public TransactionEmail() { 
  }

  public TransactionEmail content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Actual template contents
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Actual template contents")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public TransactionEmail espDomainUuid(String espDomainUuid) {
    
    this.espDomainUuid = espDomainUuid;
    return this;
  }

   /**
   * The uuid of the sending domain
   * @return espDomainUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The uuid of the sending domain")

  public String getEspDomainUuid() {
    return espDomainUuid;
  }


  public void setEspDomainUuid(String espDomainUuid) {
    this.espDomainUuid = espDomainUuid;
  }


  public TransactionEmail espFriendlyName(String espFriendlyName) {
    
    this.espFriendlyName = espFriendlyName;
    return this;
  }

   /**
   * Friendly from that will appear in customer email clients.
   * @return espFriendlyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Friendly from that will appear in customer email clients.")

  public String getEspFriendlyName() {
    return espFriendlyName;
  }


  public void setEspFriendlyName(String espFriendlyName) {
    this.espFriendlyName = espFriendlyName;
  }


  public TransactionEmail espUser(String espUser) {
    
    this.espUser = espUser;
    return this;
  }

   /**
   * The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.
   * @return espUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.")

  public String getEspUser() {
    return espUser;
  }


  public void setEspUser(String espUser) {
    this.espUser = espUser;
  }


  public TransactionEmail fileExists(Boolean fileExists) {
    
    this.fileExists = fileExists;
    return this;
  }

   /**
   * An internal identifier used to aid in retrieving templates from the filesystem.
   * @return fileExists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An internal identifier used to aid in retrieving templates from the filesystem.")

  public Boolean getFileExists() {
    return fileExists;
  }


  public void setFileExists(Boolean fileExists) {
    this.fileExists = fileExists;
  }


  public TransactionEmail fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * File name
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File name")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public TransactionEmail group(String group) {
    
    this.group = group;
    return this;
  }

   /**
   * Group
   * @return group
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group")

  public String getGroup() {
    return group;
  }


  public void setGroup(String group) {
    this.group = group;
  }


  public TransactionEmail handlebarVariables(List<String> handlebarVariables) {
    
    this.handlebarVariables = handlebarVariables;
    return this;
  }

  public TransactionEmail addHandlebarVariablesItem(String handlebarVariablesItem) {
    if (this.handlebarVariables == null) {
      this.handlebarVariables = new ArrayList<>();
    }
    this.handlebarVariables.add(handlebarVariablesItem);
    return this;
  }

   /**
   * Handlebar Variables available for email template
   * @return handlebarVariables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Handlebar Variables available for email template")

  public List<String> getHandlebarVariables() {
    return handlebarVariables;
  }


  public void setHandlebarVariables(List<String> handlebarVariables) {
    this.handlebarVariables = handlebarVariables;
  }


  public TransactionEmail invalid(Boolean invalid) {
    
    this.invalid = invalid;
    return this;
  }

   /**
   * Invalid will be true if the template cannot compile
   * @return invalid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Invalid will be true if the template cannot compile")

  public Boolean getInvalid() {
    return invalid;
  }


  public void setInvalid(Boolean invalid) {
    this.invalid = invalid;
  }


  public TransactionEmail lastModified(String lastModified) {
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Last modified timestamp
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last modified timestamp")

  public String getLastModified() {
    return lastModified;
  }


  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public TransactionEmail libraryItemOid(Integer libraryItemOid) {
    
    this.libraryItemOid = libraryItemOid;
    return this;
  }

   /**
   * If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
   * @return libraryItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.")

  public Integer getLibraryItemOid() {
    return libraryItemOid;
  }


  public void setLibraryItemOid(Integer libraryItemOid) {
    this.libraryItemOid = libraryItemOid;
  }


  public TransactionEmail options(List<TransactionEmailOption> options) {
    
    this.options = options;
    return this;
  }

  public TransactionEmail addOptionsItem(TransactionEmailOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Options that help govern how and when this template is used
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Options that help govern how and when this template is used")

  public List<TransactionEmailOption> getOptions() {
    return options;
  }


  public void setOptions(List<TransactionEmailOption> options) {
    this.options = options;
  }


  public TransactionEmail path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * directory path where template is stored in file system
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "directory path where template is stored in file system")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public TransactionEmail size(String size) {
    
    this.size = size;
    return this;
  }

   /**
   * Size of file in friendly description
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Size of file in friendly description")

  public String getSize() {
    return size;
  }


  public void setSize(String size) {
    this.size = size;
  }


  public TransactionEmail storeFrontFsDirectoryOid(Integer storeFrontFsDirectoryOid) {
    
    this.storeFrontFsDirectoryOid = storeFrontFsDirectoryOid;
    return this;
  }

   /**
   * Internal identifier used to store and retrieve template from filesystem
   * @return storeFrontFsDirectoryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal identifier used to store and retrieve template from filesystem")

  public Integer getStoreFrontFsDirectoryOid() {
    return storeFrontFsDirectoryOid;
  }


  public void setStoreFrontFsDirectoryOid(Integer storeFrontFsDirectoryOid) {
    this.storeFrontFsDirectoryOid = storeFrontFsDirectoryOid;
  }


  public TransactionEmail storeFrontFsFileOid(Integer storeFrontFsFileOid) {
    
    this.storeFrontFsFileOid = storeFrontFsFileOid;
    return this;
  }

   /**
   * Internal identifier used to store and retrieve template from filesystem
   * @return storeFrontFsFileOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal identifier used to store and retrieve template from filesystem")

  public Integer getStoreFrontFsFileOid() {
    return storeFrontFsFileOid;
  }


  public void setStoreFrontFsFileOid(Integer storeFrontFsFileOid) {
    this.storeFrontFsFileOid = storeFrontFsFileOid;
  }


  public TransactionEmail subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public TransactionEmail syntaxErrors(String syntaxErrors) {
    
    this.syntaxErrors = syntaxErrors;
    return this;
  }

   /**
   * Any syntax errors contained within the tempalate
   * @return syntaxErrors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any syntax errors contained within the tempalate")

  public String getSyntaxErrors() {
    return syntaxErrors;
  }


  public void setSyntaxErrors(String syntaxErrors) {
    this.syntaxErrors = syntaxErrors;
  }


  public TransactionEmail templatePathRelativePath(String templatePathRelativePath) {
    
    this.templatePathRelativePath = templatePathRelativePath;
    return this;
  }

   /**
   * Internal value used to locate the template in the filesystem
   * @return templatePathRelativePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal value used to locate the template in the filesystem")

  public String getTemplatePathRelativePath() {
    return templatePathRelativePath;
  }


  public void setTemplatePathRelativePath(String templatePathRelativePath) {
    this.templatePathRelativePath = templatePathRelativePath;
  }


  public TransactionEmail themeRelativePath(String themeRelativePath) {
    
    this.themeRelativePath = themeRelativePath;
    return this;
  }

   /**
   * Theme relative path in the filesystem.
   * @return themeRelativePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Theme relative path in the filesystem.")

  public String getThemeRelativePath() {
    return themeRelativePath;
  }


  public void setThemeRelativePath(String themeRelativePath) {
    this.themeRelativePath = themeRelativePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionEmail transactionEmail = (TransactionEmail) o;
    return Objects.equals(this.content, transactionEmail.content) &&
        Objects.equals(this.espDomainUuid, transactionEmail.espDomainUuid) &&
        Objects.equals(this.espFriendlyName, transactionEmail.espFriendlyName) &&
        Objects.equals(this.espUser, transactionEmail.espUser) &&
        Objects.equals(this.fileExists, transactionEmail.fileExists) &&
        Objects.equals(this.fileName, transactionEmail.fileName) &&
        Objects.equals(this.group, transactionEmail.group) &&
        Objects.equals(this.handlebarVariables, transactionEmail.handlebarVariables) &&
        Objects.equals(this.invalid, transactionEmail.invalid) &&
        Objects.equals(this.lastModified, transactionEmail.lastModified) &&
        Objects.equals(this.libraryItemOid, transactionEmail.libraryItemOid) &&
        Objects.equals(this.options, transactionEmail.options) &&
        Objects.equals(this.path, transactionEmail.path) &&
        Objects.equals(this.size, transactionEmail.size) &&
        Objects.equals(this.storeFrontFsDirectoryOid, transactionEmail.storeFrontFsDirectoryOid) &&
        Objects.equals(this.storeFrontFsFileOid, transactionEmail.storeFrontFsFileOid) &&
        Objects.equals(this.subject, transactionEmail.subject) &&
        Objects.equals(this.syntaxErrors, transactionEmail.syntaxErrors) &&
        Objects.equals(this.templatePathRelativePath, transactionEmail.templatePathRelativePath) &&
        Objects.equals(this.themeRelativePath, transactionEmail.themeRelativePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, espDomainUuid, espFriendlyName, espUser, fileExists, fileName, group, handlebarVariables, invalid, lastModified, libraryItemOid, options, path, size, storeFrontFsDirectoryOid, storeFrontFsFileOid, subject, syntaxErrors, templatePathRelativePath, themeRelativePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionEmail {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    espDomainUuid: ").append(toIndentedString(espDomainUuid)).append("\n");
    sb.append("    espFriendlyName: ").append(toIndentedString(espFriendlyName)).append("\n");
    sb.append("    espUser: ").append(toIndentedString(espUser)).append("\n");
    sb.append("    fileExists: ").append(toIndentedString(fileExists)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    handlebarVariables: ").append(toIndentedString(handlebarVariables)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    libraryItemOid: ").append(toIndentedString(libraryItemOid)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storeFrontFsDirectoryOid: ").append(toIndentedString(storeFrontFsDirectoryOid)).append("\n");
    sb.append("    storeFrontFsFileOid: ").append(toIndentedString(storeFrontFsFileOid)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    syntaxErrors: ").append(toIndentedString(syntaxErrors)).append("\n");
    sb.append("    templatePathRelativePath: ").append(toIndentedString(templatePathRelativePath)).append("\n");
    sb.append("    themeRelativePath: ").append(toIndentedString(themeRelativePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("esp_domain_uuid");
    openapiFields.add("esp_friendly_name");
    openapiFields.add("esp_user");
    openapiFields.add("file_exists");
    openapiFields.add("file_name");
    openapiFields.add("group");
    openapiFields.add("handlebar_variables");
    openapiFields.add("invalid");
    openapiFields.add("last_modified");
    openapiFields.add("library_item_oid");
    openapiFields.add("options");
    openapiFields.add("path");
    openapiFields.add("size");
    openapiFields.add("store_front_fs_directory_oid");
    openapiFields.add("store_front_fs_file_oid");
    openapiFields.add("subject");
    openapiFields.add("syntax_errors");
    openapiFields.add("template_path_relative_path");
    openapiFields.add("theme_relative_path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionEmail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TransactionEmail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionEmail is not found in the empty JSON string", TransactionEmail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionEmail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionEmail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (jsonObj.get("esp_domain_uuid") != null && !jsonObj.get("esp_domain_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_domain_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_domain_uuid").toString()));
      }
      if (jsonObj.get("esp_friendly_name") != null && !jsonObj.get("esp_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_friendly_name").toString()));
      }
      if (jsonObj.get("esp_user") != null && !jsonObj.get("esp_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_user").toString()));
      }
      if (jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if (jsonObj.get("group") != null && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("handlebar_variables") != null && !jsonObj.get("handlebar_variables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlebar_variables` to be an array in the JSON string but got `%s`", jsonObj.get("handlebar_variables").toString()));
      }
      if (jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
      if (jsonArrayoptions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("options").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
        }

        // validate the optional field `options` (array)
        for (int i = 0; i < jsonArrayoptions.size(); i++) {
          TransactionEmailOption.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (jsonObj.get("syntax_errors") != null && !jsonObj.get("syntax_errors").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syntax_errors` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syntax_errors").toString()));
      }
      if (jsonObj.get("template_path_relative_path") != null && !jsonObj.get("template_path_relative_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_path_relative_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_path_relative_path").toString()));
      }
      if (jsonObj.get("theme_relative_path") != null && !jsonObj.get("theme_relative_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme_relative_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme_relative_path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionEmail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionEmail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionEmail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionEmail.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionEmail>() {
           @Override
           public void write(JsonWriter out, TransactionEmail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionEmail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionEmail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionEmail
  * @throws IOException if the JSON string is invalid with respect to TransactionEmail
  */
  public static TransactionEmail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionEmail.class);
  }

 /**
  * Convert an instance of TransactionEmail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


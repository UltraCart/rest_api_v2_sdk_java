/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TransactionEmailOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TransactionEmail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-02-02T10:03:38.886-05:00")



public class TransactionEmail {
  @SerializedName("content")
  private String content = null;

  @SerializedName("esp_domain_uuid")
  private String espDomainUuid = null;

  @SerializedName("esp_friendly_name")
  private String espFriendlyName = null;

  @SerializedName("esp_user")
  private String espUser = null;

  @SerializedName("file_exists")
  private Boolean fileExists = null;

  @SerializedName("file_name")
  private String fileName = null;

  @SerializedName("group")
  private String group = null;

  @SerializedName("handlebar_variables")
  private List<String> handlebarVariables = null;

  @SerializedName("invalid")
  private Boolean invalid = null;

  @SerializedName("last_modified")
  private String lastModified = null;

  @SerializedName("library_item_oid")
  private Integer libraryItemOid = null;

  @SerializedName("options")
  private List<TransactionEmailOption> options = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("size")
  private String size = null;

  @SerializedName("store_front_fs_directory_oid")
  private Integer storeFrontFsDirectoryOid = null;

  @SerializedName("store_front_fs_file_oid")
  private Integer storeFrontFsFileOid = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("syntax_errors")
  private String syntaxErrors = null;

  @SerializedName("template_path_relative_path")
  private String templatePathRelativePath = null;

  @SerializedName("theme_relative_path")
  private String themeRelativePath = null;

  public TransactionEmail content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Actual template contents
   * @return content
  **/
  @ApiModelProperty(value = "Actual template contents")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public TransactionEmail espDomainUuid(String espDomainUuid) {
    this.espDomainUuid = espDomainUuid;
    return this;
  }

   /**
   * The uuid of the sending domain
   * @return espDomainUuid
  **/
  @ApiModelProperty(value = "The uuid of the sending domain")
  public String getEspDomainUuid() {
    return espDomainUuid;
  }

  public void setEspDomainUuid(String espDomainUuid) {
    this.espDomainUuid = espDomainUuid;
  }

  public TransactionEmail espFriendlyName(String espFriendlyName) {
    this.espFriendlyName = espFriendlyName;
    return this;
  }

   /**
   * Friendly from that will appear in customer email clients.
   * @return espFriendlyName
  **/
  @ApiModelProperty(value = "Friendly from that will appear in customer email clients.")
  public String getEspFriendlyName() {
    return espFriendlyName;
  }

  public void setEspFriendlyName(String espFriendlyName) {
    this.espFriendlyName = espFriendlyName;
  }

  public TransactionEmail espUser(String espUser) {
    this.espUser = espUser;
    return this;
  }

   /**
   * The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.
   * @return espUser
  **/
  @ApiModelProperty(value = "The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.")
  public String getEspUser() {
    return espUser;
  }

  public void setEspUser(String espUser) {
    this.espUser = espUser;
  }

  public TransactionEmail fileExists(Boolean fileExists) {
    this.fileExists = fileExists;
    return this;
  }

   /**
   * An internal identifier used to aid in retrieving templates from the filesystem.
   * @return fileExists
  **/
  @ApiModelProperty(value = "An internal identifier used to aid in retrieving templates from the filesystem.")
  public Boolean isFileExists() {
    return fileExists;
  }

  public void setFileExists(Boolean fileExists) {
    this.fileExists = fileExists;
  }

  public TransactionEmail fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * File name
   * @return fileName
  **/
  @ApiModelProperty(value = "File name")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public TransactionEmail group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Group
   * @return group
  **/
  @ApiModelProperty(value = "Group")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public TransactionEmail handlebarVariables(List<String> handlebarVariables) {
    this.handlebarVariables = handlebarVariables;
    return this;
  }

  public TransactionEmail addHandlebarVariablesItem(String handlebarVariablesItem) {
    if (this.handlebarVariables == null) {
      this.handlebarVariables = new ArrayList<String>();
    }
    this.handlebarVariables.add(handlebarVariablesItem);
    return this;
  }

   /**
   * Handlebar Variables available for email template
   * @return handlebarVariables
  **/
  @ApiModelProperty(value = "Handlebar Variables available for email template")
  public List<String> getHandlebarVariables() {
    return handlebarVariables;
  }

  public void setHandlebarVariables(List<String> handlebarVariables) {
    this.handlebarVariables = handlebarVariables;
  }

  public TransactionEmail invalid(Boolean invalid) {
    this.invalid = invalid;
    return this;
  }

   /**
   * Invalid will be true if the template cannot compile
   * @return invalid
  **/
  @ApiModelProperty(value = "Invalid will be true if the template cannot compile")
  public Boolean isInvalid() {
    return invalid;
  }

  public void setInvalid(Boolean invalid) {
    this.invalid = invalid;
  }

  public TransactionEmail lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Last modified timestamp
   * @return lastModified
  **/
  @ApiModelProperty(value = "Last modified timestamp")
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }

  public TransactionEmail libraryItemOid(Integer libraryItemOid) {
    this.libraryItemOid = libraryItemOid;
    return this;
  }

   /**
   * If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
   * @return libraryItemOid
  **/
  @ApiModelProperty(value = "If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.")
  public Integer getLibraryItemOid() {
    return libraryItemOid;
  }

  public void setLibraryItemOid(Integer libraryItemOid) {
    this.libraryItemOid = libraryItemOid;
  }

  public TransactionEmail options(List<TransactionEmailOption> options) {
    this.options = options;
    return this;
  }

  public TransactionEmail addOptionsItem(TransactionEmailOption optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<TransactionEmailOption>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Options that help govern how and when this template is used
   * @return options
  **/
  @ApiModelProperty(value = "Options that help govern how and when this template is used")
  public List<TransactionEmailOption> getOptions() {
    return options;
  }

  public void setOptions(List<TransactionEmailOption> options) {
    this.options = options;
  }

  public TransactionEmail path(String path) {
    this.path = path;
    return this;
  }

   /**
   * directory path where template is stored in file system
   * @return path
  **/
  @ApiModelProperty(value = "directory path where template is stored in file system")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public TransactionEmail size(String size) {
    this.size = size;
    return this;
  }

   /**
   * Size of file in friendly description
   * @return size
  **/
  @ApiModelProperty(value = "Size of file in friendly description")
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }

  public TransactionEmail storeFrontFsDirectoryOid(Integer storeFrontFsDirectoryOid) {
    this.storeFrontFsDirectoryOid = storeFrontFsDirectoryOid;
    return this;
  }

   /**
   * Internal identifier used to store and retrieve template from filesystem
   * @return storeFrontFsDirectoryOid
  **/
  @ApiModelProperty(value = "Internal identifier used to store and retrieve template from filesystem")
  public Integer getStoreFrontFsDirectoryOid() {
    return storeFrontFsDirectoryOid;
  }

  public void setStoreFrontFsDirectoryOid(Integer storeFrontFsDirectoryOid) {
    this.storeFrontFsDirectoryOid = storeFrontFsDirectoryOid;
  }

  public TransactionEmail storeFrontFsFileOid(Integer storeFrontFsFileOid) {
    this.storeFrontFsFileOid = storeFrontFsFileOid;
    return this;
  }

   /**
   * Internal identifier used to store and retrieve template from filesystem
   * @return storeFrontFsFileOid
  **/
  @ApiModelProperty(value = "Internal identifier used to store and retrieve template from filesystem")
  public Integer getStoreFrontFsFileOid() {
    return storeFrontFsFileOid;
  }

  public void setStoreFrontFsFileOid(Integer storeFrontFsFileOid) {
    this.storeFrontFsFileOid = storeFrontFsFileOid;
  }

  public TransactionEmail subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject
   * @return subject
  **/
  @ApiModelProperty(value = "Subject")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public TransactionEmail syntaxErrors(String syntaxErrors) {
    this.syntaxErrors = syntaxErrors;
    return this;
  }

   /**
   * Any syntax errors contained within the tempalate
   * @return syntaxErrors
  **/
  @ApiModelProperty(value = "Any syntax errors contained within the tempalate")
  public String getSyntaxErrors() {
    return syntaxErrors;
  }

  public void setSyntaxErrors(String syntaxErrors) {
    this.syntaxErrors = syntaxErrors;
  }

  public TransactionEmail templatePathRelativePath(String templatePathRelativePath) {
    this.templatePathRelativePath = templatePathRelativePath;
    return this;
  }

   /**
   * Internal value used to locate the template in the filesystem
   * @return templatePathRelativePath
  **/
  @ApiModelProperty(value = "Internal value used to locate the template in the filesystem")
  public String getTemplatePathRelativePath() {
    return templatePathRelativePath;
  }

  public void setTemplatePathRelativePath(String templatePathRelativePath) {
    this.templatePathRelativePath = templatePathRelativePath;
  }

  public TransactionEmail themeRelativePath(String themeRelativePath) {
    this.themeRelativePath = themeRelativePath;
    return this;
  }

   /**
   * Theme relative path in the filesystem.
   * @return themeRelativePath
  **/
  @ApiModelProperty(value = "Theme relative path in the filesystem.")
  public String getThemeRelativePath() {
    return themeRelativePath;
  }

  public void setThemeRelativePath(String themeRelativePath) {
    this.themeRelativePath = themeRelativePath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionEmail transactionEmail = (TransactionEmail) o;
    return Objects.equals(this.content, transactionEmail.content) &&
        Objects.equals(this.espDomainUuid, transactionEmail.espDomainUuid) &&
        Objects.equals(this.espFriendlyName, transactionEmail.espFriendlyName) &&
        Objects.equals(this.espUser, transactionEmail.espUser) &&
        Objects.equals(this.fileExists, transactionEmail.fileExists) &&
        Objects.equals(this.fileName, transactionEmail.fileName) &&
        Objects.equals(this.group, transactionEmail.group) &&
        Objects.equals(this.handlebarVariables, transactionEmail.handlebarVariables) &&
        Objects.equals(this.invalid, transactionEmail.invalid) &&
        Objects.equals(this.lastModified, transactionEmail.lastModified) &&
        Objects.equals(this.libraryItemOid, transactionEmail.libraryItemOid) &&
        Objects.equals(this.options, transactionEmail.options) &&
        Objects.equals(this.path, transactionEmail.path) &&
        Objects.equals(this.size, transactionEmail.size) &&
        Objects.equals(this.storeFrontFsDirectoryOid, transactionEmail.storeFrontFsDirectoryOid) &&
        Objects.equals(this.storeFrontFsFileOid, transactionEmail.storeFrontFsFileOid) &&
        Objects.equals(this.subject, transactionEmail.subject) &&
        Objects.equals(this.syntaxErrors, transactionEmail.syntaxErrors) &&
        Objects.equals(this.templatePathRelativePath, transactionEmail.templatePathRelativePath) &&
        Objects.equals(this.themeRelativePath, transactionEmail.themeRelativePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, espDomainUuid, espFriendlyName, espUser, fileExists, fileName, group, handlebarVariables, invalid, lastModified, libraryItemOid, options, path, size, storeFrontFsDirectoryOid, storeFrontFsFileOid, subject, syntaxErrors, templatePathRelativePath, themeRelativePath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionEmail {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    espDomainUuid: ").append(toIndentedString(espDomainUuid)).append("\n");
    sb.append("    espFriendlyName: ").append(toIndentedString(espFriendlyName)).append("\n");
    sb.append("    espUser: ").append(toIndentedString(espUser)).append("\n");
    sb.append("    fileExists: ").append(toIndentedString(fileExists)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    handlebarVariables: ").append(toIndentedString(handlebarVariables)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    libraryItemOid: ").append(toIndentedString(libraryItemOid)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storeFrontFsDirectoryOid: ").append(toIndentedString(storeFrontFsDirectoryOid)).append("\n");
    sb.append("    storeFrontFsFileOid: ").append(toIndentedString(storeFrontFsFileOid)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    syntaxErrors: ").append(toIndentedString(syntaxErrors)).append("\n");
    sb.append("    templatePathRelativePath: ").append(toIndentedString(templatePathRelativePath)).append("\n");
    sb.append("    themeRelativePath: ").append(toIndentedString(themeRelativePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxCounty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * TaxState
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:39:38.982-04:00")



public class TaxState {
  @SerializedName("accounting_code")
  private String accountingCode = null;

  @SerializedName("counties")
  private List<TaxCounty> counties = null;

  @SerializedName("country_oid")
  private Integer countryOid = null;

  @SerializedName("dont_collect_city")
  private Boolean dontCollectCity = null;

  @SerializedName("dont_collect_county")
  private Boolean dontCollectCounty = null;

  @SerializedName("dont_collect_postal_code")
  private Boolean dontCollectPostalCode = null;

  @SerializedName("dont_collect_state")
  private Boolean dontCollectState = null;

  @SerializedName("exempt_digital_items")
  private Boolean exemptDigitalItems = null;

  @SerializedName("exempt_physical_items")
  private Boolean exemptPhysicalItems = null;

  @SerializedName("exempt_service_items")
  private Boolean exemptServiceItems = null;

  @SerializedName("state_code")
  private String stateCode = null;

  @SerializedName("state_oid")
  private Integer stateOid = null;

  @SerializedName("tax_gift_charge")
  private Boolean taxGiftCharge = null;

  @SerializedName("tax_gift_wrap")
  private Boolean taxGiftWrap = null;

  @SerializedName("tax_rate")
  private BigDecimal taxRate = null;

  @SerializedName("tax_rate_formatted")
  private String taxRateFormatted = null;

  @SerializedName("tax_shipping")
  private Boolean taxShipping = null;

  @SerializedName("use_ultracart_managed_rates")
  private Boolean useUltracartManagedRates = null;

  public TaxState accountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")
  public String getAccountingCode() {
    return accountingCode;
  }

  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }

  public TaxState counties(List<TaxCounty> counties) {
    this.counties = counties;
    return this;
  }

  public TaxState addCountiesItem(TaxCounty countiesItem) {
    if (this.counties == null) {
      this.counties = new ArrayList<TaxCounty>();
    }
    this.counties.add(countiesItem);
    return this;
  }

   /**
   * Counties within this state
   * @return counties
  **/
  @ApiModelProperty(value = "Counties within this state")
  public List<TaxCounty> getCounties() {
    return counties;
  }

  public void setCounties(List<TaxCounty> counties) {
    this.counties = counties;
  }

  public TaxState countryOid(Integer countryOid) {
    this.countryOid = countryOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return countryOid
  **/
  @ApiModelProperty(value = "Tax record object identifier used internally by database")
  public Integer getCountryOid() {
    return countryOid;
  }

  public void setCountryOid(Integer countryOid) {
    this.countryOid = countryOid;
  }

  public TaxState dontCollectCity(Boolean dontCollectCity) {
    this.dontCollectCity = dontCollectCity;
    return this;
  }

   /**
   * Flag instructing engine to not collect city tax for this state
   * @return dontCollectCity
  **/
  @ApiModelProperty(value = "Flag instructing engine to not collect city tax for this state")
  public Boolean isDontCollectCity() {
    return dontCollectCity;
  }

  public void setDontCollectCity(Boolean dontCollectCity) {
    this.dontCollectCity = dontCollectCity;
  }

  public TaxState dontCollectCounty(Boolean dontCollectCounty) {
    this.dontCollectCounty = dontCollectCounty;
    return this;
  }

   /**
   * Flag instructing engine to not collect county tax for this state
   * @return dontCollectCounty
  **/
  @ApiModelProperty(value = "Flag instructing engine to not collect county tax for this state")
  public Boolean isDontCollectCounty() {
    return dontCollectCounty;
  }

  public void setDontCollectCounty(Boolean dontCollectCounty) {
    this.dontCollectCounty = dontCollectCounty;
  }

  public TaxState dontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
    return this;
  }

   /**
   * Flag instructing engine to not collect postal code tax for this state
   * @return dontCollectPostalCode
  **/
  @ApiModelProperty(value = "Flag instructing engine to not collect postal code tax for this state")
  public Boolean isDontCollectPostalCode() {
    return dontCollectPostalCode;
  }

  public void setDontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
  }

  public TaxState dontCollectState(Boolean dontCollectState) {
    this.dontCollectState = dontCollectState;
    return this;
  }

   /**
   * Flag instructing engine to not collect state tax for this state
   * @return dontCollectState
  **/
  @ApiModelProperty(value = "Flag instructing engine to not collect state tax for this state")
  public Boolean isDontCollectState() {
    return dontCollectState;
  }

  public void setDontCollectState(Boolean dontCollectState) {
    this.dontCollectState = dontCollectState;
  }

  public TaxState exemptDigitalItems(Boolean exemptDigitalItems) {
    this.exemptDigitalItems = exemptDigitalItems;
    return this;
  }

   /**
   * True if digital items are exempt from sales tax in this state.
   * @return exemptDigitalItems
  **/
  @ApiModelProperty(value = "True if digital items are exempt from sales tax in this state.")
  public Boolean isExemptDigitalItems() {
    return exemptDigitalItems;
  }

  public void setExemptDigitalItems(Boolean exemptDigitalItems) {
    this.exemptDigitalItems = exemptDigitalItems;
  }

  public TaxState exemptPhysicalItems(Boolean exemptPhysicalItems) {
    this.exemptPhysicalItems = exemptPhysicalItems;
    return this;
  }

   /**
   * True if physical items are exempt from sales tax in this state.
   * @return exemptPhysicalItems
  **/
  @ApiModelProperty(value = "True if physical items are exempt from sales tax in this state.")
  public Boolean isExemptPhysicalItems() {
    return exemptPhysicalItems;
  }

  public void setExemptPhysicalItems(Boolean exemptPhysicalItems) {
    this.exemptPhysicalItems = exemptPhysicalItems;
  }

  public TaxState exemptServiceItems(Boolean exemptServiceItems) {
    this.exemptServiceItems = exemptServiceItems;
    return this;
  }

   /**
   * True if service items are exempt from sales tax in this state.
   * @return exemptServiceItems
  **/
  @ApiModelProperty(value = "True if service items are exempt from sales tax in this state.")
  public Boolean isExemptServiceItems() {
    return exemptServiceItems;
  }

  public void setExemptServiceItems(Boolean exemptServiceItems) {
    this.exemptServiceItems = exemptServiceItems;
  }

  public TaxState stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State code
   * @return stateCode
  **/
  @ApiModelProperty(value = "State code")
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }

  public TaxState stateOid(Integer stateOid) {
    this.stateOid = stateOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return stateOid
  **/
  @ApiModelProperty(value = "Tax record object identifier used internally by database")
  public Integer getStateOid() {
    return stateOid;
  }

  public void setStateOid(Integer stateOid) {
    this.stateOid = stateOid;
  }

  public TaxState taxGiftCharge(Boolean taxGiftCharge) {
    this.taxGiftCharge = taxGiftCharge;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift charge
   * @return taxGiftCharge
  **/
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift charge")
  public Boolean isTaxGiftCharge() {
    return taxGiftCharge;
  }

  public void setTaxGiftCharge(Boolean taxGiftCharge) {
    this.taxGiftCharge = taxGiftCharge;
  }

  public TaxState taxGiftWrap(Boolean taxGiftWrap) {
    this.taxGiftWrap = taxGiftWrap;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift wrap
   * @return taxGiftWrap
  **/
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift wrap")
  public Boolean isTaxGiftWrap() {
    return taxGiftWrap;
  }

  public void setTaxGiftWrap(Boolean taxGiftWrap) {
    this.taxGiftWrap = taxGiftWrap;
  }

  public TaxState taxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @ApiModelProperty(value = "Tax Rate")
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }

  public TaxState taxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @ApiModelProperty(value = "Tax rate formatted")
  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }

  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }

  public TaxState taxShipping(Boolean taxShipping) {
    this.taxShipping = taxShipping;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on shipping
   * @return taxShipping
  **/
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on shipping")
  public Boolean isTaxShipping() {
    return taxShipping;
  }

  public void setTaxShipping(Boolean taxShipping) {
    this.taxShipping = taxShipping;
  }

  public TaxState useUltracartManagedRates(Boolean useUltracartManagedRates) {
    this.useUltracartManagedRates = useUltracartManagedRates;
    return this;
  }

   /**
   * If true, use UltraCart managed rates for this state
   * @return useUltracartManagedRates
  **/
  @ApiModelProperty(value = "If true, use UltraCart managed rates for this state")
  public Boolean isUseUltracartManagedRates() {
    return useUltracartManagedRates;
  }

  public void setUseUltracartManagedRates(Boolean useUltracartManagedRates) {
    this.useUltracartManagedRates = useUltracartManagedRates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxState taxState = (TaxState) o;
    return Objects.equals(this.accountingCode, taxState.accountingCode) &&
        Objects.equals(this.counties, taxState.counties) &&
        Objects.equals(this.countryOid, taxState.countryOid) &&
        Objects.equals(this.dontCollectCity, taxState.dontCollectCity) &&
        Objects.equals(this.dontCollectCounty, taxState.dontCollectCounty) &&
        Objects.equals(this.dontCollectPostalCode, taxState.dontCollectPostalCode) &&
        Objects.equals(this.dontCollectState, taxState.dontCollectState) &&
        Objects.equals(this.exemptDigitalItems, taxState.exemptDigitalItems) &&
        Objects.equals(this.exemptPhysicalItems, taxState.exemptPhysicalItems) &&
        Objects.equals(this.exemptServiceItems, taxState.exemptServiceItems) &&
        Objects.equals(this.stateCode, taxState.stateCode) &&
        Objects.equals(this.stateOid, taxState.stateOid) &&
        Objects.equals(this.taxGiftCharge, taxState.taxGiftCharge) &&
        Objects.equals(this.taxGiftWrap, taxState.taxGiftWrap) &&
        Objects.equals(this.taxRate, taxState.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxState.taxRateFormatted) &&
        Objects.equals(this.taxShipping, taxState.taxShipping) &&
        Objects.equals(this.useUltracartManagedRates, taxState.useUltracartManagedRates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, counties, countryOid, dontCollectCity, dontCollectCounty, dontCollectPostalCode, dontCollectState, exemptDigitalItems, exemptPhysicalItems, exemptServiceItems, stateCode, stateOid, taxGiftCharge, taxGiftWrap, taxRate, taxRateFormatted, taxShipping, useUltracartManagedRates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxState {\n");
    
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    counties: ").append(toIndentedString(counties)).append("\n");
    sb.append("    countryOid: ").append(toIndentedString(countryOid)).append("\n");
    sb.append("    dontCollectCity: ").append(toIndentedString(dontCollectCity)).append("\n");
    sb.append("    dontCollectCounty: ").append(toIndentedString(dontCollectCounty)).append("\n");
    sb.append("    dontCollectPostalCode: ").append(toIndentedString(dontCollectPostalCode)).append("\n");
    sb.append("    dontCollectState: ").append(toIndentedString(dontCollectState)).append("\n");
    sb.append("    exemptDigitalItems: ").append(toIndentedString(exemptDigitalItems)).append("\n");
    sb.append("    exemptPhysicalItems: ").append(toIndentedString(exemptPhysicalItems)).append("\n");
    sb.append("    exemptServiceItems: ").append(toIndentedString(exemptServiceItems)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    stateOid: ").append(toIndentedString(stateOid)).append("\n");
    sb.append("    taxGiftCharge: ").append(toIndentedString(taxGiftCharge)).append("\n");
    sb.append("    taxGiftWrap: ").append(toIndentedString(taxGiftWrap)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("    taxShipping: ").append(toIndentedString(taxShipping)).append("\n");
    sb.append("    useUltracartManagedRates: ").append(toIndentedString(useUltracartManagedRates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


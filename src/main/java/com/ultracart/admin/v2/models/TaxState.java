/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxCounty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-22T10:25:24.226-04:00[America/Indianapolis]")
public class TaxState {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_COUNTIES = "counties";
  @SerializedName(SERIALIZED_NAME_COUNTIES)
  private List<TaxCounty> counties = null;

  public static final String SERIALIZED_NAME_COUNTRY_OID = "country_oid";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OID)
  private Integer countryOid;

  public static final String SERIALIZED_NAME_DONT_COLLECT_CITY = "dont_collect_city";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_CITY)
  private Boolean dontCollectCity;

  public static final String SERIALIZED_NAME_DONT_COLLECT_COUNTY = "dont_collect_county";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_COUNTY)
  private Boolean dontCollectCounty;

  public static final String SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE = "dont_collect_postal_code";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE)
  private Boolean dontCollectPostalCode;

  public static final String SERIALIZED_NAME_DONT_COLLECT_STATE = "dont_collect_state";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_STATE)
  private Boolean dontCollectState;

  public static final String SERIALIZED_NAME_EXEMPT_DIGITAL_ITEMS = "exempt_digital_items";
  @SerializedName(SERIALIZED_NAME_EXEMPT_DIGITAL_ITEMS)
  private Boolean exemptDigitalItems;

  public static final String SERIALIZED_NAME_EXEMPT_PHYSICAL_ITEMS = "exempt_physical_items";
  @SerializedName(SERIALIZED_NAME_EXEMPT_PHYSICAL_ITEMS)
  private Boolean exemptPhysicalItems;

  public static final String SERIALIZED_NAME_EXEMPT_SERVICE_ITEMS = "exempt_service_items";
  @SerializedName(SERIALIZED_NAME_EXEMPT_SERVICE_ITEMS)
  private Boolean exemptServiceItems;

  public static final String SERIALIZED_NAME_STATE_CODE = "state_code";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_STATE_OID = "state_oid";
  @SerializedName(SERIALIZED_NAME_STATE_OID)
  private Integer stateOid;

  public static final String SERIALIZED_NAME_TAX_GIFT_CHARGE = "tax_gift_charge";
  @SerializedName(SERIALIZED_NAME_TAX_GIFT_CHARGE)
  private Boolean taxGiftCharge;

  public static final String SERIALIZED_NAME_TAX_GIFT_WRAP = "tax_gift_wrap";
  @SerializedName(SERIALIZED_NAME_TAX_GIFT_WRAP)
  private Boolean taxGiftWrap;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public static final String SERIALIZED_NAME_TAX_SHIPPING = "tax_shipping";
  @SerializedName(SERIALIZED_NAME_TAX_SHIPPING)
  private Boolean taxShipping;

  public static final String SERIALIZED_NAME_USE_ULTRACART_MANAGED_RATES = "use_ultracart_managed_rates";
  @SerializedName(SERIALIZED_NAME_USE_ULTRACART_MANAGED_RATES)
  private Boolean useUltracartManagedRates;

  public TaxState() { 
  }

  public TaxState accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxState counties(List<TaxCounty> counties) {
    
    this.counties = counties;
    return this;
  }

  public TaxState addCountiesItem(TaxCounty countiesItem) {
    if (this.counties == null) {
      this.counties = new ArrayList<>();
    }
    this.counties.add(countiesItem);
    return this;
  }

   /**
   * Counties within this state
   * @return counties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Counties within this state")

  public List<TaxCounty> getCounties() {
    return counties;
  }


  public void setCounties(List<TaxCounty> counties) {
    this.counties = counties;
  }


  public TaxState countryOid(Integer countryOid) {
    
    this.countryOid = countryOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return countryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCountryOid() {
    return countryOid;
  }


  public void setCountryOid(Integer countryOid) {
    this.countryOid = countryOid;
  }


  public TaxState dontCollectCity(Boolean dontCollectCity) {
    
    this.dontCollectCity = dontCollectCity;
    return this;
  }

   /**
   * Flag instructing engine to not collect city tax for this state
   * @return dontCollectCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect city tax for this state")

  public Boolean getDontCollectCity() {
    return dontCollectCity;
  }


  public void setDontCollectCity(Boolean dontCollectCity) {
    this.dontCollectCity = dontCollectCity;
  }


  public TaxState dontCollectCounty(Boolean dontCollectCounty) {
    
    this.dontCollectCounty = dontCollectCounty;
    return this;
  }

   /**
   * Flag instructing engine to not collect county tax for this state
   * @return dontCollectCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect county tax for this state")

  public Boolean getDontCollectCounty() {
    return dontCollectCounty;
  }


  public void setDontCollectCounty(Boolean dontCollectCounty) {
    this.dontCollectCounty = dontCollectCounty;
  }


  public TaxState dontCollectPostalCode(Boolean dontCollectPostalCode) {
    
    this.dontCollectPostalCode = dontCollectPostalCode;
    return this;
  }

   /**
   * Flag instructing engine to not collect postal code tax for this state
   * @return dontCollectPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect postal code tax for this state")

  public Boolean getDontCollectPostalCode() {
    return dontCollectPostalCode;
  }


  public void setDontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
  }


  public TaxState dontCollectState(Boolean dontCollectState) {
    
    this.dontCollectState = dontCollectState;
    return this;
  }

   /**
   * Flag instructing engine to not collect state tax for this state
   * @return dontCollectState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect state tax for this state")

  public Boolean getDontCollectState() {
    return dontCollectState;
  }


  public void setDontCollectState(Boolean dontCollectState) {
    this.dontCollectState = dontCollectState;
  }


  public TaxState exemptDigitalItems(Boolean exemptDigitalItems) {
    
    this.exemptDigitalItems = exemptDigitalItems;
    return this;
  }

   /**
   * True if digital items are exempt from sales tax in this state.
   * @return exemptDigitalItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if digital items are exempt from sales tax in this state.")

  public Boolean getExemptDigitalItems() {
    return exemptDigitalItems;
  }


  public void setExemptDigitalItems(Boolean exemptDigitalItems) {
    this.exemptDigitalItems = exemptDigitalItems;
  }


  public TaxState exemptPhysicalItems(Boolean exemptPhysicalItems) {
    
    this.exemptPhysicalItems = exemptPhysicalItems;
    return this;
  }

   /**
   * True if physical items are exempt from sales tax in this state.
   * @return exemptPhysicalItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if physical items are exempt from sales tax in this state.")

  public Boolean getExemptPhysicalItems() {
    return exemptPhysicalItems;
  }


  public void setExemptPhysicalItems(Boolean exemptPhysicalItems) {
    this.exemptPhysicalItems = exemptPhysicalItems;
  }


  public TaxState exemptServiceItems(Boolean exemptServiceItems) {
    
    this.exemptServiceItems = exemptServiceItems;
    return this;
  }

   /**
   * True if service items are exempt from sales tax in this state.
   * @return exemptServiceItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if service items are exempt from sales tax in this state.")

  public Boolean getExemptServiceItems() {
    return exemptServiceItems;
  }


  public void setExemptServiceItems(Boolean exemptServiceItems) {
    this.exemptServiceItems = exemptServiceItems;
  }


  public TaxState stateCode(String stateCode) {
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State code
   * @return stateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State code")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public TaxState stateOid(Integer stateOid) {
    
    this.stateOid = stateOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return stateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getStateOid() {
    return stateOid;
  }


  public void setStateOid(Integer stateOid) {
    this.stateOid = stateOid;
  }


  public TaxState taxGiftCharge(Boolean taxGiftCharge) {
    
    this.taxGiftCharge = taxGiftCharge;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift charge
   * @return taxGiftCharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift charge")

  public Boolean getTaxGiftCharge() {
    return taxGiftCharge;
  }


  public void setTaxGiftCharge(Boolean taxGiftCharge) {
    this.taxGiftCharge = taxGiftCharge;
  }


  public TaxState taxGiftWrap(Boolean taxGiftWrap) {
    
    this.taxGiftWrap = taxGiftWrap;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift wrap
   * @return taxGiftWrap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift wrap")

  public Boolean getTaxGiftWrap() {
    return taxGiftWrap;
  }


  public void setTaxGiftWrap(Boolean taxGiftWrap) {
    this.taxGiftWrap = taxGiftWrap;
  }


  public TaxState taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxState taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }


  public TaxState taxShipping(Boolean taxShipping) {
    
    this.taxShipping = taxShipping;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on shipping
   * @return taxShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on shipping")

  public Boolean getTaxShipping() {
    return taxShipping;
  }


  public void setTaxShipping(Boolean taxShipping) {
    this.taxShipping = taxShipping;
  }


  public TaxState useUltracartManagedRates(Boolean useUltracartManagedRates) {
    
    this.useUltracartManagedRates = useUltracartManagedRates;
    return this;
  }

   /**
   * If true, use UltraCart managed rates for this state
   * @return useUltracartManagedRates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, use UltraCart managed rates for this state")

  public Boolean getUseUltracartManagedRates() {
    return useUltracartManagedRates;
  }


  public void setUseUltracartManagedRates(Boolean useUltracartManagedRates) {
    this.useUltracartManagedRates = useUltracartManagedRates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxState taxState = (TaxState) o;
    return Objects.equals(this.accountingCode, taxState.accountingCode) &&
        Objects.equals(this.counties, taxState.counties) &&
        Objects.equals(this.countryOid, taxState.countryOid) &&
        Objects.equals(this.dontCollectCity, taxState.dontCollectCity) &&
        Objects.equals(this.dontCollectCounty, taxState.dontCollectCounty) &&
        Objects.equals(this.dontCollectPostalCode, taxState.dontCollectPostalCode) &&
        Objects.equals(this.dontCollectState, taxState.dontCollectState) &&
        Objects.equals(this.exemptDigitalItems, taxState.exemptDigitalItems) &&
        Objects.equals(this.exemptPhysicalItems, taxState.exemptPhysicalItems) &&
        Objects.equals(this.exemptServiceItems, taxState.exemptServiceItems) &&
        Objects.equals(this.stateCode, taxState.stateCode) &&
        Objects.equals(this.stateOid, taxState.stateOid) &&
        Objects.equals(this.taxGiftCharge, taxState.taxGiftCharge) &&
        Objects.equals(this.taxGiftWrap, taxState.taxGiftWrap) &&
        Objects.equals(this.taxRate, taxState.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxState.taxRateFormatted) &&
        Objects.equals(this.taxShipping, taxState.taxShipping) &&
        Objects.equals(this.useUltracartManagedRates, taxState.useUltracartManagedRates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, counties, countryOid, dontCollectCity, dontCollectCounty, dontCollectPostalCode, dontCollectState, exemptDigitalItems, exemptPhysicalItems, exemptServiceItems, stateCode, stateOid, taxGiftCharge, taxGiftWrap, taxRate, taxRateFormatted, taxShipping, useUltracartManagedRates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxState {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    counties: ").append(toIndentedString(counties)).append("\n");
    sb.append("    countryOid: ").append(toIndentedString(countryOid)).append("\n");
    sb.append("    dontCollectCity: ").append(toIndentedString(dontCollectCity)).append("\n");
    sb.append("    dontCollectCounty: ").append(toIndentedString(dontCollectCounty)).append("\n");
    sb.append("    dontCollectPostalCode: ").append(toIndentedString(dontCollectPostalCode)).append("\n");
    sb.append("    dontCollectState: ").append(toIndentedString(dontCollectState)).append("\n");
    sb.append("    exemptDigitalItems: ").append(toIndentedString(exemptDigitalItems)).append("\n");
    sb.append("    exemptPhysicalItems: ").append(toIndentedString(exemptPhysicalItems)).append("\n");
    sb.append("    exemptServiceItems: ").append(toIndentedString(exemptServiceItems)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    stateOid: ").append(toIndentedString(stateOid)).append("\n");
    sb.append("    taxGiftCharge: ").append(toIndentedString(taxGiftCharge)).append("\n");
    sb.append("    taxGiftWrap: ").append(toIndentedString(taxGiftWrap)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("    taxShipping: ").append(toIndentedString(taxShipping)).append("\n");
    sb.append("    useUltracartManagedRates: ").append(toIndentedString(useUltracartManagedRates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("counties");
    openapiFields.add("country_oid");
    openapiFields.add("dont_collect_city");
    openapiFields.add("dont_collect_county");
    openapiFields.add("dont_collect_postal_code");
    openapiFields.add("dont_collect_state");
    openapiFields.add("exempt_digital_items");
    openapiFields.add("exempt_physical_items");
    openapiFields.add("exempt_service_items");
    openapiFields.add("state_code");
    openapiFields.add("state_oid");
    openapiFields.add("tax_gift_charge");
    openapiFields.add("tax_gift_wrap");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");
    openapiFields.add("tax_shipping");
    openapiFields.add("use_ultracart_managed_rates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxState
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxState.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxState is not found in the empty JSON string", TaxState.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxState` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      JsonArray jsonArraycounties = jsonObj.getAsJsonArray("counties");
      if (jsonArraycounties != null) {
        // ensure the json data is an array
        if (!jsonObj.get("counties").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `counties` to be an array in the JSON string but got `%s`", jsonObj.get("counties").toString()));
        }

        // validate the optional field `counties` (array)
        for (int i = 0; i < jsonArraycounties.size(); i++) {
          TaxCounty.validateJsonObject(jsonArraycounties.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("state_code") != null && !jsonObj.get("state_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_code").toString()));
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxState.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxState>() {
           @Override
           public void write(JsonWriter out, TaxState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxState read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxState given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxState
  * @throws IOException if the JSON string is invalid with respect to TaxState
  */
  public static TaxState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxState.class);
  }

 /**
  * Convert an instance of TaxState to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


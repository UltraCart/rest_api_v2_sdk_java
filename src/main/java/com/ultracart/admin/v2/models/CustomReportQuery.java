/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CustomReportQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:21:52.957-04:00[America/Indianapolis]")
public class CustomReportQuery {
  public static final String SERIALIZED_NAME_CONDITIONAL_FORMATTING_START_COLUMN = "conditional_formatting_start_column";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_FORMATTING_START_COLUMN)
  private Integer conditionalFormattingStartColumn;

  public static final String SERIALIZED_NAME_FREEZE_COLUMNS = "freeze_columns";
  @SerializedName(SERIALIZED_NAME_FREEZE_COLUMNS)
  private Integer freezeColumns;

  public static final String SERIALIZED_NAME_PII_COLUMNS = "pii_columns";
  @SerializedName(SERIALIZED_NAME_PII_COLUMNS)
  private List<String> piiColumns = null;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SHEET_NAME = "sheet_name";
  @SerializedName(SERIALIZED_NAME_SHEET_NAME)
  private String sheetName;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public CustomReportQuery() { 
  }

  public CustomReportQuery conditionalFormattingStartColumn(Integer conditionalFormattingStartColumn) {
    
    this.conditionalFormattingStartColumn = conditionalFormattingStartColumn;
    return this;
  }

   /**
   * Get conditionalFormattingStartColumn
   * @return conditionalFormattingStartColumn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getConditionalFormattingStartColumn() {
    return conditionalFormattingStartColumn;
  }


  public void setConditionalFormattingStartColumn(Integer conditionalFormattingStartColumn) {
    this.conditionalFormattingStartColumn = conditionalFormattingStartColumn;
  }


  public CustomReportQuery freezeColumns(Integer freezeColumns) {
    
    this.freezeColumns = freezeColumns;
    return this;
  }

   /**
   * Get freezeColumns
   * @return freezeColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFreezeColumns() {
    return freezeColumns;
  }


  public void setFreezeColumns(Integer freezeColumns) {
    this.freezeColumns = freezeColumns;
  }


  public CustomReportQuery piiColumns(List<String> piiColumns) {
    
    this.piiColumns = piiColumns;
    return this;
  }

  public CustomReportQuery addPiiColumnsItem(String piiColumnsItem) {
    if (this.piiColumns == null) {
      this.piiColumns = new ArrayList<>();
    }
    this.piiColumns.add(piiColumnsItem);
    return this;
  }

   /**
   * Get piiColumns
   * @return piiColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getPiiColumns() {
    return piiColumns;
  }


  public void setPiiColumns(List<String> piiColumns) {
    this.piiColumns = piiColumns;
  }


  public CustomReportQuery query(String query) {
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    this.query = query;
  }


  public CustomReportQuery sheetName(String sheetName) {
    
    this.sheetName = sheetName;
    return this;
  }

   /**
   * Get sheetName
   * @return sheetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSheetName() {
    return sheetName;
  }


  public void setSheetName(String sheetName) {
    this.sheetName = sheetName;
  }


  public CustomReportQuery title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomReportQuery customReportQuery = (CustomReportQuery) o;
    return Objects.equals(this.conditionalFormattingStartColumn, customReportQuery.conditionalFormattingStartColumn) &&
        Objects.equals(this.freezeColumns, customReportQuery.freezeColumns) &&
        Objects.equals(this.piiColumns, customReportQuery.piiColumns) &&
        Objects.equals(this.query, customReportQuery.query) &&
        Objects.equals(this.sheetName, customReportQuery.sheetName) &&
        Objects.equals(this.title, customReportQuery.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionalFormattingStartColumn, freezeColumns, piiColumns, query, sheetName, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomReportQuery {\n");
    sb.append("    conditionalFormattingStartColumn: ").append(toIndentedString(conditionalFormattingStartColumn)).append("\n");
    sb.append("    freezeColumns: ").append(toIndentedString(freezeColumns)).append("\n");
    sb.append("    piiColumns: ").append(toIndentedString(piiColumns)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sheetName: ").append(toIndentedString(sheetName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditional_formatting_start_column");
    openapiFields.add("freeze_columns");
    openapiFields.add("pii_columns");
    openapiFields.add("query");
    openapiFields.add("sheet_name");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomReportQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomReportQuery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomReportQuery is not found in the empty JSON string", CustomReportQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomReportQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomReportQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("pii_columns") != null && !jsonObj.get("pii_columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pii_columns` to be an array in the JSON string but got `%s`", jsonObj.get("pii_columns").toString()));
      }
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("sheet_name") != null && !jsonObj.get("sheet_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sheet_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sheet_name").toString()));
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomReportQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomReportQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomReportQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomReportQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomReportQuery>() {
           @Override
           public void write(JsonWriter out, CustomReportQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomReportQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomReportQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomReportQuery
  * @throws IOException if the JSON string is invalid with respect to CustomReportQuery
  */
  public static CustomReportQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomReportQuery.class);
  }

 /**
  * Convert an instance of CustomReportQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomReportQuery
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-04T16:21:10.809-04:00")



public class CustomReportQuery {
  @SerializedName("conditional_formatting_start_column")
  private Integer conditionalFormattingStartColumn = null;

  @SerializedName("freeze_columns")
  private Integer freezeColumns = null;

  @SerializedName("pii_columns")
  private List<String> piiColumns = null;

  @SerializedName("query")
  private String query = null;

  @SerializedName("sheet_name")
  private String sheetName = null;

  @SerializedName("title")
  private String title = null;

  public CustomReportQuery conditionalFormattingStartColumn(Integer conditionalFormattingStartColumn) {
    this.conditionalFormattingStartColumn = conditionalFormattingStartColumn;
    return this;
  }

   /**
   * Get conditionalFormattingStartColumn
   * @return conditionalFormattingStartColumn
  **/
  @ApiModelProperty(value = "")
  public Integer getConditionalFormattingStartColumn() {
    return conditionalFormattingStartColumn;
  }

  public void setConditionalFormattingStartColumn(Integer conditionalFormattingStartColumn) {
    this.conditionalFormattingStartColumn = conditionalFormattingStartColumn;
  }

  public CustomReportQuery freezeColumns(Integer freezeColumns) {
    this.freezeColumns = freezeColumns;
    return this;
  }

   /**
   * Get freezeColumns
   * @return freezeColumns
  **/
  @ApiModelProperty(value = "")
  public Integer getFreezeColumns() {
    return freezeColumns;
  }

  public void setFreezeColumns(Integer freezeColumns) {
    this.freezeColumns = freezeColumns;
  }

  public CustomReportQuery piiColumns(List<String> piiColumns) {
    this.piiColumns = piiColumns;
    return this;
  }

  public CustomReportQuery addPiiColumnsItem(String piiColumnsItem) {
    if (this.piiColumns == null) {
      this.piiColumns = new ArrayList<String>();
    }
    this.piiColumns.add(piiColumnsItem);
    return this;
  }

   /**
   * Get piiColumns
   * @return piiColumns
  **/
  @ApiModelProperty(value = "")
  public List<String> getPiiColumns() {
    return piiColumns;
  }

  public void setPiiColumns(List<String> piiColumns) {
    this.piiColumns = piiColumns;
  }

  public CustomReportQuery query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @ApiModelProperty(value = "")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public CustomReportQuery sheetName(String sheetName) {
    this.sheetName = sheetName;
    return this;
  }

   /**
   * Get sheetName
   * @return sheetName
  **/
  @ApiModelProperty(value = "")
  public String getSheetName() {
    return sheetName;
  }

  public void setSheetName(String sheetName) {
    this.sheetName = sheetName;
  }

  public CustomReportQuery title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomReportQuery customReportQuery = (CustomReportQuery) o;
    return Objects.equals(this.conditionalFormattingStartColumn, customReportQuery.conditionalFormattingStartColumn) &&
        Objects.equals(this.freezeColumns, customReportQuery.freezeColumns) &&
        Objects.equals(this.piiColumns, customReportQuery.piiColumns) &&
        Objects.equals(this.query, customReportQuery.query) &&
        Objects.equals(this.sheetName, customReportQuery.sheetName) &&
        Objects.equals(this.title, customReportQuery.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionalFormattingStartColumn, freezeColumns, piiColumns, query, sheetName, title);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomReportQuery {\n");
    
    sb.append("    conditionalFormattingStartColumn: ").append(toIndentedString(conditionalFormattingStartColumn)).append("\n");
    sb.append("    freezeColumns: ").append(toIndentedString(freezeColumns)).append("\n");
    sb.append("    piiColumns: ").append(toIndentedString(piiColumns)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sheetName: ").append(toIndentedString(sheetName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


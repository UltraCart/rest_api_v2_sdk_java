/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.EmailListSegmentUsedBy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-09T12:00:33.817-05:00[America/Indianapolis]")
public class EmailList {
  public static final String SERIALIZED_NAME_ALLOW_CSV_DOWNLOAD = "allow_csv_download";
  @SerializedName(SERIALIZED_NAME_ALLOW_CSV_DOWNLOAD)
  private Boolean allowCsvDownload;

  public static final String SERIALIZED_NAME_CREATED_DTS = "created_dts";
  @SerializedName(SERIALIZED_NAME_CREATED_DTS)
  private String createdDts;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_EMAIL_LIST_UUID = "email_list_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_LIST_UUID)
  private String emailListUuid;

  public static final String SERIALIZED_NAME_ESP_LIST_SEGMENT_FOLDER_UUID = "esp_list_segment_folder_uuid";
  @SerializedName(SERIALIZED_NAME_ESP_LIST_SEGMENT_FOLDER_UUID)
  private String espListSegmentFolderUuid;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "member_count";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLIC_DESCRIPTION = "public_description";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DESCRIPTION)
  private String publicDescription;

  public static final String SERIALIZED_NAME_PUBLIC_LIST = "public_list";
  @SerializedName(SERIALIZED_NAME_PUBLIC_LIST)
  private Boolean publicList;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_USED_BY = "used_by";
  @SerializedName(SERIALIZED_NAME_USED_BY)
  private List<EmailListSegmentUsedBy> usedBy = null;

  public EmailList() { 
  }

  public EmailList allowCsvDownload(Boolean allowCsvDownload) {
    
    this.allowCsvDownload = allowCsvDownload;
    return this;
  }

   /**
   * True if the current user has the rights to download this list.
   * @return allowCsvDownload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the current user has the rights to download this list.")

  public Boolean getAllowCsvDownload() {
    return allowCsvDownload;
  }


  public void setAllowCsvDownload(Boolean allowCsvDownload) {
    this.allowCsvDownload = allowCsvDownload;
  }


  public EmailList createdDts(String createdDts) {
    
    this.createdDts = createdDts;
    return this;
  }

   /**
   * Created date
   * @return createdDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Created date")

  public String getCreatedDts() {
    return createdDts;
  }


  public void setCreatedDts(String createdDts) {
    this.createdDts = createdDts;
  }


  public EmailList deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * True if this campaign was deleted
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this campaign was deleted")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public EmailList emailListUuid(String emailListUuid) {
    
    this.emailListUuid = emailListUuid;
    return this;
  }

   /**
   * Email list UUID
   * @return emailListUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email list UUID")

  public String getEmailListUuid() {
    return emailListUuid;
  }


  public void setEmailListUuid(String emailListUuid) {
    this.emailListUuid = emailListUuid;
  }


  public EmailList espListSegmentFolderUuid(String espListSegmentFolderUuid) {
    
    this.espListSegmentFolderUuid = espListSegmentFolderUuid;
    return this;
  }

   /**
   * List/Segment folder UUID
   * @return espListSegmentFolderUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List/Segment folder UUID")

  public String getEspListSegmentFolderUuid() {
    return espListSegmentFolderUuid;
  }


  public void setEspListSegmentFolderUuid(String espListSegmentFolderUuid) {
    this.espListSegmentFolderUuid = espListSegmentFolderUuid;
  }


  public EmailList memberCount(Integer memberCount) {
    
    this.memberCount = memberCount;
    return this;
  }

   /**
   * Count of members in this list
   * @return memberCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of members in this list")

  public Integer getMemberCount() {
    return memberCount;
  }


  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public EmailList merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public EmailList name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of email list
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of email list")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EmailList publicDescription(String publicDescription) {
    
    this.publicDescription = publicDescription;
    return this;
  }

   /**
   * Description of list shown to customer.
   * @return publicDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of list shown to customer.")

  public String getPublicDescription() {
    return publicDescription;
  }


  public void setPublicDescription(String publicDescription) {
    this.publicDescription = publicDescription;
  }


  public EmailList publicList(Boolean publicList) {
    
    this.publicList = publicList;
    return this;
  }

   /**
   * True if this list is public
   * @return publicList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this list is public")

  public Boolean getPublicList() {
    return publicList;
  }


  public void setPublicList(Boolean publicList) {
    this.publicList = publicList;
  }


  public EmailList storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Storefront oid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storefront oid")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public EmailList usedBy(List<EmailListSegmentUsedBy> usedBy) {
    
    this.usedBy = usedBy;
    return this;
  }

  public EmailList addUsedByItem(EmailListSegmentUsedBy usedByItem) {
    if (this.usedBy == null) {
      this.usedBy = new ArrayList<>();
    }
    this.usedBy.add(usedByItem);
    return this;
  }

   /**
   * Details on the flows or campaigns that use this list.
   * @return usedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details on the flows or campaigns that use this list.")

  public List<EmailListSegmentUsedBy> getUsedBy() {
    return usedBy;
  }


  public void setUsedBy(List<EmailListSegmentUsedBy> usedBy) {
    this.usedBy = usedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailList emailList = (EmailList) o;
    return Objects.equals(this.allowCsvDownload, emailList.allowCsvDownload) &&
        Objects.equals(this.createdDts, emailList.createdDts) &&
        Objects.equals(this.deleted, emailList.deleted) &&
        Objects.equals(this.emailListUuid, emailList.emailListUuid) &&
        Objects.equals(this.espListSegmentFolderUuid, emailList.espListSegmentFolderUuid) &&
        Objects.equals(this.memberCount, emailList.memberCount) &&
        Objects.equals(this.merchantId, emailList.merchantId) &&
        Objects.equals(this.name, emailList.name) &&
        Objects.equals(this.publicDescription, emailList.publicDescription) &&
        Objects.equals(this.publicList, emailList.publicList) &&
        Objects.equals(this.storefrontOid, emailList.storefrontOid) &&
        Objects.equals(this.usedBy, emailList.usedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCsvDownload, createdDts, deleted, emailListUuid, espListSegmentFolderUuid, memberCount, merchantId, name, publicDescription, publicList, storefrontOid, usedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailList {\n");
    sb.append("    allowCsvDownload: ").append(toIndentedString(allowCsvDownload)).append("\n");
    sb.append("    createdDts: ").append(toIndentedString(createdDts)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    emailListUuid: ").append(toIndentedString(emailListUuid)).append("\n");
    sb.append("    espListSegmentFolderUuid: ").append(toIndentedString(espListSegmentFolderUuid)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publicDescription: ").append(toIndentedString(publicDescription)).append("\n");
    sb.append("    publicList: ").append(toIndentedString(publicList)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    usedBy: ").append(toIndentedString(usedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_csv_download");
    openapiFields.add("created_dts");
    openapiFields.add("deleted");
    openapiFields.add("email_list_uuid");
    openapiFields.add("esp_list_segment_folder_uuid");
    openapiFields.add("member_count");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("public_description");
    openapiFields.add("public_list");
    openapiFields.add("storefront_oid");
    openapiFields.add("used_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailList
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailList.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailList is not found in the empty JSON string", EmailList.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailList` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("created_dts") != null && !jsonObj.get("created_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_dts").toString()));
      }
      if (jsonObj.get("email_list_uuid") != null && !jsonObj.get("email_list_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_list_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_list_uuid").toString()));
      }
      if (jsonObj.get("esp_list_segment_folder_uuid") != null && !jsonObj.get("esp_list_segment_folder_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_list_segment_folder_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_list_segment_folder_uuid").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("public_description") != null && !jsonObj.get("public_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_description").toString()));
      }
      JsonArray jsonArrayusedBy = jsonObj.getAsJsonArray("used_by");
      if (jsonArrayusedBy != null) {
        // ensure the json data is an array
        if (!jsonObj.get("used_by").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `used_by` to be an array in the JSON string but got `%s`", jsonObj.get("used_by").toString()));
        }

        // validate the optional field `used_by` (array)
        for (int i = 0; i < jsonArrayusedBy.size(); i++) {
          EmailListSegmentUsedBy.validateJsonObject(jsonArrayusedBy.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailList.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailList>() {
           @Override
           public void write(JsonWriter out, EmailList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailList read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailList given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailList
  * @throws IOException if the JSON string is invalid with respect to EmailList
  */
  public static EmailList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailList.class);
  }

 /**
  * Convert an instance of EmailList to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


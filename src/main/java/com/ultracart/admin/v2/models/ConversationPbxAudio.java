/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationPbxAudio
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T12:08:18.099-05:00[America/Indianapolis]")
public class ConversationPbxAudio {
  public static final String SERIALIZED_NAME_AUDIO_S3_LISTING_KEY = "audio_s3_listing_key";
  @SerializedName(SERIALIZED_NAME_AUDIO_S3_LISTING_KEY)
  private String audioS3ListingKey;

  public static final String SERIALIZED_NAME_CONVERSATION_PBX_AUDIO_UUID = "conversation_pbx_audio_uuid";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_PBX_AUDIO_UUID)
  private String conversationPbxAudioUuid;

  public static final String SERIALIZED_NAME_DEFAULT_HOLD_MUSIC = "default_hold_music";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOLD_MUSIC)
  private Boolean defaultHoldMusic;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ConversationPbxAudio() { 
  }

  public ConversationPbxAudio audioS3ListingKey(String audioS3ListingKey) {
    
    this.audioS3ListingKey = audioS3ListingKey;
    return this;
  }

   /**
   * Audio S3 Listing Key
   * @return audioS3ListingKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Audio S3 Listing Key")

  public String getAudioS3ListingKey() {
    return audioS3ListingKey;
  }


  public void setAudioS3ListingKey(String audioS3ListingKey) {
    this.audioS3ListingKey = audioS3ListingKey;
  }


  public ConversationPbxAudio conversationPbxAudioUuid(String conversationPbxAudioUuid) {
    
    this.conversationPbxAudioUuid = conversationPbxAudioUuid;
    return this;
  }

   /**
   * Conversation Pbx Audio UUID
   * @return conversationPbxAudioUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conversation Pbx Audio UUID")

  public String getConversationPbxAudioUuid() {
    return conversationPbxAudioUuid;
  }


  public void setConversationPbxAudioUuid(String conversationPbxAudioUuid) {
    this.conversationPbxAudioUuid = conversationPbxAudioUuid;
  }


  public ConversationPbxAudio defaultHoldMusic(Boolean defaultHoldMusic) {
    
    this.defaultHoldMusic = defaultHoldMusic;
    return this;
  }

   /**
   * If true, this will be the default hold music
   * @return defaultHoldMusic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, this will be the default hold music")

  public Boolean getDefaultHoldMusic() {
    return defaultHoldMusic;
  }


  public void setDefaultHoldMusic(Boolean defaultHoldMusic) {
    this.defaultHoldMusic = defaultHoldMusic;
  }


  public ConversationPbxAudio description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of this audio
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of this audio")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ConversationPbxAudio filename(String filename) {
    
    this.filename = filename;
    return this;
  }

   /**
   * Filename
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filename")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ConversationPbxAudio merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant Id
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant Id")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public ConversationPbxAudio mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Mime Type
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mime Type")

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public ConversationPbxAudio url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public ConversationPbxAudio userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User Id
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User Id")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public ConversationPbxAudio version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationPbxAudio conversationPbxAudio = (ConversationPbxAudio) o;
    return Objects.equals(this.audioS3ListingKey, conversationPbxAudio.audioS3ListingKey) &&
        Objects.equals(this.conversationPbxAudioUuid, conversationPbxAudio.conversationPbxAudioUuid) &&
        Objects.equals(this.defaultHoldMusic, conversationPbxAudio.defaultHoldMusic) &&
        Objects.equals(this.description, conversationPbxAudio.description) &&
        Objects.equals(this.filename, conversationPbxAudio.filename) &&
        Objects.equals(this.merchantId, conversationPbxAudio.merchantId) &&
        Objects.equals(this.mimeType, conversationPbxAudio.mimeType) &&
        Objects.equals(this.url, conversationPbxAudio.url) &&
        Objects.equals(this.userId, conversationPbxAudio.userId) &&
        Objects.equals(this.version, conversationPbxAudio.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioS3ListingKey, conversationPbxAudioUuid, defaultHoldMusic, description, filename, merchantId, mimeType, url, userId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationPbxAudio {\n");
    sb.append("    audioS3ListingKey: ").append(toIndentedString(audioS3ListingKey)).append("\n");
    sb.append("    conversationPbxAudioUuid: ").append(toIndentedString(conversationPbxAudioUuid)).append("\n");
    sb.append("    defaultHoldMusic: ").append(toIndentedString(defaultHoldMusic)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_s3_listing_key");
    openapiFields.add("conversation_pbx_audio_uuid");
    openapiFields.add("default_hold_music");
    openapiFields.add("description");
    openapiFields.add("filename");
    openapiFields.add("merchant_id");
    openapiFields.add("mime_type");
    openapiFields.add("url");
    openapiFields.add("user_id");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationPbxAudio
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationPbxAudio.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationPbxAudio is not found in the empty JSON string", ConversationPbxAudio.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationPbxAudio.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationPbxAudio` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("audio_s3_listing_key") != null && !jsonObj.get("audio_s3_listing_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_s3_listing_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_s3_listing_key").toString()));
      }
      if (jsonObj.get("conversation_pbx_audio_uuid") != null && !jsonObj.get("conversation_pbx_audio_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversation_pbx_audio_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversation_pbx_audio_uuid").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationPbxAudio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationPbxAudio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationPbxAudio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationPbxAudio.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationPbxAudio>() {
           @Override
           public void write(JsonWriter out, ConversationPbxAudio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationPbxAudio read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationPbxAudio given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationPbxAudio
  * @throws IOException if the JSON string is invalid with respect to ConversationPbxAudio
  */
  public static ConversationPbxAudio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationPbxAudio.class);
  }

 /**
  * Convert an instance of ConversationPbxAudio to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.ultracart.admin.v2.models.Currency;
import com.ultracart.admin.v2.models.OrderPaymentCheck;
import com.ultracart.admin.v2.models.OrderPaymentCreditCard;
import com.ultracart.admin.v2.models.OrderPaymentECheck;
import com.ultracart.admin.v2.models.OrderPaymentPurchaseOrder;
import com.ultracart.admin.v2.models.OrderPaymentTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;


/**
 * OrderPayment
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-10T12:06:02.551-04:00")
public class OrderPayment   {
  @SerializedName("check")
  private OrderPaymentCheck check = null;

  @SerializedName("credit_card")
  private OrderPaymentCreditCard creditCard = null;

  @SerializedName("echeck")
  private OrderPaymentECheck echeck = null;

  @SerializedName("hold_for_fraud_review")
  private Boolean holdForFraudReview = null;

  @SerializedName("payment_dts")
  private String paymentDts = null;

  /**
   * Payment method
   */
  public enum PaymentMethodEnum {
    @SerializedName("Affirm")
    AFFIRM("Affirm"),
    
    @SerializedName("Amazon")
    AMAZON("Amazon"),
    
    @SerializedName("Amazon SC")
    AMAZON_SC("Amazon SC"),
    
    @SerializedName("Cash")
    CASH("Cash"),
    
    @SerializedName("Check")
    CHECK("Check"),
    
    @SerializedName("COD")
    COD("COD"),
    
    @SerializedName("Coinbase")
    COINBASE("Coinbase"),
    
    @SerializedName("Credit Card")
    CREDIT_CARD("Credit Card"),
    
    @SerializedName("eCheck")
    ECHECK("eCheck"),
    
    @SerializedName("Money Order")
    MONEY_ORDER("Money Order"),
    
    @SerializedName("PayPal")
    PAYPAL("PayPal"),
    
    @SerializedName("Purchase Order")
    PURCHASE_ORDER("Purchase Order"),
    
    @SerializedName("Quote Request")
    QUOTE_REQUEST("Quote Request"),
    
    @SerializedName("Unknown")
    UNKNOWN("Unknown"),
    
    @SerializedName("Wire Transfer")
    WIRE_TRANSFER("Wire Transfer");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("payment_method")
  private PaymentMethodEnum paymentMethod = null;

  @SerializedName("payment_method_accounting_code")
  private String paymentMethodAccountingCode = null;

  @SerializedName("payment_method_deposit_to_account")
  private String paymentMethodDepositToAccount = null;

  /**
   * Payment status
   */
  public enum PaymentStatusEnum {
    @SerializedName("Unprocessed")
    UNPROCESSED("Unprocessed"),
    
    @SerializedName("Authorized")
    AUTHORIZED("Authorized"),
    
    @SerializedName("Capture Failed")
    CAPTURE_FAILED("Capture Failed"),
    
    @SerializedName("Processed")
    PROCESSED("Processed"),
    
    @SerializedName("Declined")
    DECLINED("Declined"),
    
    @SerializedName("Voided")
    VOIDED("Voided"),
    
    @SerializedName("Refunded")
    REFUNDED("Refunded"),
    
    @SerializedName("Skipped")
    SKIPPED("Skipped");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("payment_status")
  private PaymentStatusEnum paymentStatus = null;

  @SerializedName("purchase_order")
  private OrderPaymentPurchaseOrder purchaseOrder = null;

  @SerializedName("rotating_transaction_gateway_code")
  private String rotatingTransactionGatewayCode = null;

  @SerializedName("surcharge")
  private Currency surcharge = null;

  @SerializedName("surcharge_accounting_code")
  private String surchargeAccountingCode = null;

  @SerializedName("surcharge_transaction_fee")
  private BigDecimal surchargeTransactionFee = null;

  @SerializedName("surcharge_transaction_percentage")
  private BigDecimal surchargeTransactionPercentage = null;

  @SerializedName("test_order")
  private Boolean testOrder = null;

  @SerializedName("transactions")
  private List<OrderPaymentTransaction> transactions = new ArrayList<OrderPaymentTransaction>();

  public OrderPayment check(OrderPaymentCheck check) {
    this.check = check;
    return this;
  }

   /**
   * Get check
   * @return check
  **/
  @ApiModelProperty(example = "null", value = "")
  public OrderPaymentCheck getCheck() {
    return check;
  }

  public void setCheck(OrderPaymentCheck check) {
    this.check = check;
  }

  public OrderPayment creditCard(OrderPaymentCreditCard creditCard) {
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @ApiModelProperty(example = "null", value = "")
  public OrderPaymentCreditCard getCreditCard() {
    return creditCard;
  }

  public void setCreditCard(OrderPaymentCreditCard creditCard) {
    this.creditCard = creditCard;
  }

  public OrderPayment echeck(OrderPaymentECheck echeck) {
    this.echeck = echeck;
    return this;
  }

   /**
   * Get echeck
   * @return echeck
  **/
  @ApiModelProperty(example = "null", value = "")
  public OrderPaymentECheck getEcheck() {
    return echeck;
  }

  public void setEcheck(OrderPaymentECheck echeck) {
    this.echeck = echeck;
  }

  public OrderPayment holdForFraudReview(Boolean holdForFraudReview) {
    this.holdForFraudReview = holdForFraudReview;
    return this;
  }

   /**
   * True if order has been held for fraud review
   * @return holdForFraudReview
  **/
  @ApiModelProperty(example = "null", value = "True if order has been held for fraud review")
  public Boolean getHoldForFraudReview() {
    return holdForFraudReview;
  }

  public void setHoldForFraudReview(Boolean holdForFraudReview) {
    this.holdForFraudReview = holdForFraudReview;
  }

  public OrderPayment paymentDts(String paymentDts) {
    this.paymentDts = paymentDts;
    return this;
  }

   /**
   * Date/time that the payment was successfully processed
   * @return paymentDts
  **/
  @ApiModelProperty(example = "null", value = "Date/time that the payment was successfully processed")
  public String getPaymentDts() {
    return paymentDts;
  }

  public void setPaymentDts(String paymentDts) {
    this.paymentDts = paymentDts;
  }

  public OrderPayment paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method
   * @return paymentMethod
  **/
  @ApiModelProperty(example = "null", value = "Payment method")
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public OrderPayment paymentMethodAccountingCode(String paymentMethodAccountingCode) {
    this.paymentMethodAccountingCode = paymentMethodAccountingCode;
    return this;
  }

   /**
   * Payment method QuickBooks code
   * @return paymentMethodAccountingCode
  **/
  @ApiModelProperty(example = "null", value = "Payment method QuickBooks code")
  public String getPaymentMethodAccountingCode() {
    return paymentMethodAccountingCode;
  }

  public void setPaymentMethodAccountingCode(String paymentMethodAccountingCode) {
    this.paymentMethodAccountingCode = paymentMethodAccountingCode;
  }

  public OrderPayment paymentMethodDepositToAccount(String paymentMethodDepositToAccount) {
    this.paymentMethodDepositToAccount = paymentMethodDepositToAccount;
    return this;
  }

   /**
   * Payment method QuickBooks deposit account
   * @return paymentMethodDepositToAccount
  **/
  @ApiModelProperty(example = "null", value = "Payment method QuickBooks deposit account")
  public String getPaymentMethodDepositToAccount() {
    return paymentMethodDepositToAccount;
  }

  public void setPaymentMethodDepositToAccount(String paymentMethodDepositToAccount) {
    this.paymentMethodDepositToAccount = paymentMethodDepositToAccount;
  }

  public OrderPayment paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Payment status
   * @return paymentStatus
  **/
  @ApiModelProperty(example = "null", value = "Payment status")
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public OrderPayment purchaseOrder(OrderPaymentPurchaseOrder purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @ApiModelProperty(example = "null", value = "")
  public OrderPaymentPurchaseOrder getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(OrderPaymentPurchaseOrder purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }

  public OrderPayment rotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
    return this;
  }

   /**
   * Rotating transaction gateway code used to process this order
   * @return rotatingTransactionGatewayCode
  **/
  @ApiModelProperty(example = "null", value = "Rotating transaction gateway code used to process this order")
  public String getRotatingTransactionGatewayCode() {
    return rotatingTransactionGatewayCode;
  }

  public void setRotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
  }

  public OrderPayment surcharge(Currency surcharge) {
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @ApiModelProperty(example = "null", value = "")
  public Currency getSurcharge() {
    return surcharge;
  }

  public void setSurcharge(Currency surcharge) {
    this.surcharge = surcharge;
  }

  public OrderPayment surchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
    return this;
  }

   /**
   * Surcharge accounting code
   * @return surchargeAccountingCode
  **/
  @ApiModelProperty(example = "null", value = "Surcharge accounting code")
  public String getSurchargeAccountingCode() {
    return surchargeAccountingCode;
  }

  public void setSurchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
  }

  public OrderPayment surchargeTransactionFee(BigDecimal surchargeTransactionFee) {
    this.surchargeTransactionFee = surchargeTransactionFee;
    return this;
  }

   /**
   * Surcharge transaction fee
   * @return surchargeTransactionFee
  **/
  @ApiModelProperty(example = "null", value = "Surcharge transaction fee")
  public BigDecimal getSurchargeTransactionFee() {
    return surchargeTransactionFee;
  }

  public void setSurchargeTransactionFee(BigDecimal surchargeTransactionFee) {
    this.surchargeTransactionFee = surchargeTransactionFee;
  }

  public OrderPayment surchargeTransactionPercentage(BigDecimal surchargeTransactionPercentage) {
    this.surchargeTransactionPercentage = surchargeTransactionPercentage;
    return this;
  }

   /**
   * Surcharge transaction percentage
   * @return surchargeTransactionPercentage
  **/
  @ApiModelProperty(example = "null", value = "Surcharge transaction percentage")
  public BigDecimal getSurchargeTransactionPercentage() {
    return surchargeTransactionPercentage;
  }

  public void setSurchargeTransactionPercentage(BigDecimal surchargeTransactionPercentage) {
    this.surchargeTransactionPercentage = surchargeTransactionPercentage;
  }

  public OrderPayment testOrder(Boolean testOrder) {
    this.testOrder = testOrder;
    return this;
  }

   /**
   * True if this is a test order
   * @return testOrder
  **/
  @ApiModelProperty(example = "null", value = "True if this is a test order")
  public Boolean getTestOrder() {
    return testOrder;
  }

  public void setTestOrder(Boolean testOrder) {
    this.testOrder = testOrder;
  }

  public OrderPayment transactions(List<OrderPaymentTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public OrderPayment addTransactionsItem(OrderPaymentTransaction transactionsItem) {
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions associated with processing this payment
   * @return transactions
  **/
  @ApiModelProperty(example = "null", value = "Transactions associated with processing this payment")
  public List<OrderPaymentTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<OrderPaymentTransaction> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPayment orderPayment = (OrderPayment) o;
    return Objects.equals(this.check, orderPayment.check) &&
        Objects.equals(this.creditCard, orderPayment.creditCard) &&
        Objects.equals(this.echeck, orderPayment.echeck) &&
        Objects.equals(this.holdForFraudReview, orderPayment.holdForFraudReview) &&
        Objects.equals(this.paymentDts, orderPayment.paymentDts) &&
        Objects.equals(this.paymentMethod, orderPayment.paymentMethod) &&
        Objects.equals(this.paymentMethodAccountingCode, orderPayment.paymentMethodAccountingCode) &&
        Objects.equals(this.paymentMethodDepositToAccount, orderPayment.paymentMethodDepositToAccount) &&
        Objects.equals(this.paymentStatus, orderPayment.paymentStatus) &&
        Objects.equals(this.purchaseOrder, orderPayment.purchaseOrder) &&
        Objects.equals(this.rotatingTransactionGatewayCode, orderPayment.rotatingTransactionGatewayCode) &&
        Objects.equals(this.surcharge, orderPayment.surcharge) &&
        Objects.equals(this.surchargeAccountingCode, orderPayment.surchargeAccountingCode) &&
        Objects.equals(this.surchargeTransactionFee, orderPayment.surchargeTransactionFee) &&
        Objects.equals(this.surchargeTransactionPercentage, orderPayment.surchargeTransactionPercentage) &&
        Objects.equals(this.testOrder, orderPayment.testOrder) &&
        Objects.equals(this.transactions, orderPayment.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(check, creditCard, echeck, holdForFraudReview, paymentDts, paymentMethod, paymentMethodAccountingCode, paymentMethodDepositToAccount, paymentStatus, purchaseOrder, rotatingTransactionGatewayCode, surcharge, surchargeAccountingCode, surchargeTransactionFee, surchargeTransactionPercentage, testOrder, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPayment {\n");
    
    sb.append("    check: ").append(toIndentedString(check)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    echeck: ").append(toIndentedString(echeck)).append("\n");
    sb.append("    holdForFraudReview: ").append(toIndentedString(holdForFraudReview)).append("\n");
    sb.append("    paymentDts: ").append(toIndentedString(paymentDts)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethodAccountingCode: ").append(toIndentedString(paymentMethodAccountingCode)).append("\n");
    sb.append("    paymentMethodDepositToAccount: ").append(toIndentedString(paymentMethodDepositToAccount)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    rotatingTransactionGatewayCode: ").append(toIndentedString(rotatingTransactionGatewayCode)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    surchargeAccountingCode: ").append(toIndentedString(surchargeAccountingCode)).append("\n");
    sb.append("    surchargeTransactionFee: ").append(toIndentedString(surchargeTransactionFee)).append("\n");
    sb.append("    surchargeTransactionPercentage: ").append(toIndentedString(surchargeTransactionPercentage)).append("\n");
    sb.append("    testOrder: ").append(toIndentedString(testOrder)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Currency;
import com.ultracart.admin.v2.models.OrderPaymentCheck;
import com.ultracart.admin.v2.models.OrderPaymentCreditCard;
import com.ultracart.admin.v2.models.OrderPaymentECheck;
import com.ultracart.admin.v2.models.OrderPaymentHealthBenefitCard;
import com.ultracart.admin.v2.models.OrderPaymentInsurance;
import com.ultracart.admin.v2.models.OrderPaymentPayPal;
import com.ultracart.admin.v2.models.OrderPaymentPurchaseOrder;
import com.ultracart.admin.v2.models.OrderPaymentTransaction;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-21T12:08:57.583-05:00[America/Indianapolis]")
public class OrderPayment {
  public static final String SERIALIZED_NAME_CHECK = "check";
  @SerializedName(SERIALIZED_NAME_CHECK)
  private OrderPaymentCheck check;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "credit_card";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private OrderPaymentCreditCard creditCard;

  public static final String SERIALIZED_NAME_ECHECK = "echeck";
  @SerializedName(SERIALIZED_NAME_ECHECK)
  private OrderPaymentECheck echeck;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD = "health_benefit_card";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD)
  private OrderPaymentHealthBenefitCard healthBenefitCard;

  public static final String SERIALIZED_NAME_HOLD_FOR_FRAUD_REVIEW = "hold_for_fraud_review";
  @SerializedName(SERIALIZED_NAME_HOLD_FOR_FRAUD_REVIEW)
  private Boolean holdForFraudReview;

  public static final String SERIALIZED_NAME_INSURANCE = "insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  private OrderPaymentInsurance insurance;

  public static final String SERIALIZED_NAME_PAYMENT_DTS = "payment_dts";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DTS)
  private String paymentDts;

  /**
   * Payment method
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    AFFIRM("Affirm"),
    
    AMAZON("Amazon"),
    
    AMAZON_PAY("Amazon Pay"),
    
    AMAZON_SC("Amazon SC"),
    
    CASH("Cash"),
    
    CHECK("Check"),
    
    COD("COD"),
    
    CREDIT_CARD("Credit Card"),
    
    EBAY("eBay"),
    
    ECHECK("eCheck"),
    
    GOOGLE_SHOPPING("Google Shopping"),
    
    INSURANCE("Insurance"),
    
    LINK("Link"),
    
    LOANHERO("LoanHero"),
    
    MONEY_ORDER("Money Order"),
    
    PAYPAL("PayPal"),
    
    PURCHASE_ORDER("Purchase Order"),
    
    QUOTE_REQUEST("Quote Request"),
    
    UNKNOWN("Unknown"),
    
    WIRE_TRANSFER("Wire Transfer"),
    
    WALMART("Walmart"),
    
    SHOP_COM("Shop.com"),
    
    SEZZLE("Sezzle"),
    
    VENMO("Venmo"),
    
    APPLE_PAY("Apple Pay"),
    
    GOOGLE_PAY("Google Pay"),
    
    HEALTH_BENEFIT_CARD("Health Benefit Card");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ACCOUNTING_CODE = "payment_method_accounting_code";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ACCOUNTING_CODE)
  private String paymentMethodAccountingCode;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_DEPOSIT_TO_ACCOUNT = "payment_method_deposit_to_account";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_DEPOSIT_TO_ACCOUNT)
  private String paymentMethodDepositToAccount;

  /**
   * Payment status
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    UNPROCESSED("Unprocessed"),
    
    AUTHORIZED("Authorized"),
    
    CAPTURE_FAILED("Capture Failed"),
    
    PROCESSED("Processed"),
    
    DECLINED("Declined"),
    
    VOIDED("Voided"),
    
    REFUNDED("Refunded"),
    
    SKIPPED("Skipped");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_PAYPAL = "paypal";
  @SerializedName(SERIALIZED_NAME_PAYPAL)
  private OrderPaymentPayPal paypal;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private OrderPaymentPurchaseOrder purchaseOrder;

  public static final String SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODE = "rotating_transaction_gateway_code";
  @SerializedName(SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODE)
  private String rotatingTransactionGatewayCode;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Currency surcharge;

  public static final String SERIALIZED_NAME_SURCHARGE_ACCOUNTING_CODE = "surcharge_accounting_code";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_ACCOUNTING_CODE)
  private String surchargeAccountingCode;

  public static final String SERIALIZED_NAME_SURCHARGE_TRANSACTION_FEE = "surcharge_transaction_fee";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_TRANSACTION_FEE)
  private BigDecimal surchargeTransactionFee;

  public static final String SERIALIZED_NAME_SURCHARGE_TRANSACTION_PERCENTAGE = "surcharge_transaction_percentage";
  @SerializedName(SERIALIZED_NAME_SURCHARGE_TRANSACTION_PERCENTAGE)
  private BigDecimal surchargeTransactionPercentage;

  public static final String SERIALIZED_NAME_TEST_ORDER = "test_order";
  @SerializedName(SERIALIZED_NAME_TEST_ORDER)
  private Boolean testOrder;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<OrderPaymentTransaction> transactions = null;

  public OrderPayment() { 
  }

  public OrderPayment check(OrderPaymentCheck check) {
    
    this.check = check;
    return this;
  }

   /**
   * Get check
   * @return check
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentCheck getCheck() {
    return check;
  }


  public void setCheck(OrderPaymentCheck check) {
    this.check = check;
  }


  public OrderPayment creditCard(OrderPaymentCreditCard creditCard) {
    
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentCreditCard getCreditCard() {
    return creditCard;
  }


  public void setCreditCard(OrderPaymentCreditCard creditCard) {
    this.creditCard = creditCard;
  }


  public OrderPayment echeck(OrderPaymentECheck echeck) {
    
    this.echeck = echeck;
    return this;
  }

   /**
   * Get echeck
   * @return echeck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentECheck getEcheck() {
    return echeck;
  }


  public void setEcheck(OrderPaymentECheck echeck) {
    this.echeck = echeck;
  }


  public OrderPayment healthBenefitCard(OrderPaymentHealthBenefitCard healthBenefitCard) {
    
    this.healthBenefitCard = healthBenefitCard;
    return this;
  }

   /**
   * Get healthBenefitCard
   * @return healthBenefitCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentHealthBenefitCard getHealthBenefitCard() {
    return healthBenefitCard;
  }


  public void setHealthBenefitCard(OrderPaymentHealthBenefitCard healthBenefitCard) {
    this.healthBenefitCard = healthBenefitCard;
  }


  public OrderPayment holdForFraudReview(Boolean holdForFraudReview) {
    
    this.holdForFraudReview = holdForFraudReview;
    return this;
  }

   /**
   * True if order has been held for fraud review
   * @return holdForFraudReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if order has been held for fraud review")

  public Boolean getHoldForFraudReview() {
    return holdForFraudReview;
  }


  public void setHoldForFraudReview(Boolean holdForFraudReview) {
    this.holdForFraudReview = holdForFraudReview;
  }


  public OrderPayment insurance(OrderPaymentInsurance insurance) {
    
    this.insurance = insurance;
    return this;
  }

   /**
   * Get insurance
   * @return insurance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentInsurance getInsurance() {
    return insurance;
  }


  public void setInsurance(OrderPaymentInsurance insurance) {
    this.insurance = insurance;
  }


  public OrderPayment paymentDts(String paymentDts) {
    
    this.paymentDts = paymentDts;
    return this;
  }

   /**
   * Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true
   * @return paymentDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true")

  public String getPaymentDts() {
    return paymentDts;
  }


  public void setPaymentDts(String paymentDts) {
    this.paymentDts = paymentDts;
  }


  public OrderPayment paymentMethod(PaymentMethodEnum paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method")

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public OrderPayment paymentMethodAccountingCode(String paymentMethodAccountingCode) {
    
    this.paymentMethodAccountingCode = paymentMethodAccountingCode;
    return this;
  }

   /**
   * Payment method QuickBooks code
   * @return paymentMethodAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method QuickBooks code")

  public String getPaymentMethodAccountingCode() {
    return paymentMethodAccountingCode;
  }


  public void setPaymentMethodAccountingCode(String paymentMethodAccountingCode) {
    this.paymentMethodAccountingCode = paymentMethodAccountingCode;
  }


  public OrderPayment paymentMethodDepositToAccount(String paymentMethodDepositToAccount) {
    
    this.paymentMethodDepositToAccount = paymentMethodDepositToAccount;
    return this;
  }

   /**
   * Payment method QuickBooks deposit account
   * @return paymentMethodDepositToAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method QuickBooks deposit account")

  public String getPaymentMethodDepositToAccount() {
    return paymentMethodDepositToAccount;
  }


  public void setPaymentMethodDepositToAccount(String paymentMethodDepositToAccount) {
    this.paymentMethodDepositToAccount = paymentMethodDepositToAccount;
  }


  public OrderPayment paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Payment status
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment status")

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public OrderPayment paypal(OrderPaymentPayPal paypal) {
    
    this.paypal = paypal;
    return this;
  }

   /**
   * Get paypal
   * @return paypal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentPayPal getPaypal() {
    return paypal;
  }


  public void setPaypal(OrderPaymentPayPal paypal) {
    this.paypal = paypal;
  }


  public OrderPayment purchaseOrder(OrderPaymentPurchaseOrder purchaseOrder) {
    
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPaymentPurchaseOrder getPurchaseOrder() {
    return purchaseOrder;
  }


  public void setPurchaseOrder(OrderPaymentPurchaseOrder purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public OrderPayment rotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
    return this;
  }

   /**
   * Rotating transaction gateway code used to process this order
   * @return rotatingTransactionGatewayCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rotating transaction gateway code used to process this order")

  public String getRotatingTransactionGatewayCode() {
    return rotatingTransactionGatewayCode;
  }


  public void setRotatingTransactionGatewayCode(String rotatingTransactionGatewayCode) {
    this.rotatingTransactionGatewayCode = rotatingTransactionGatewayCode;
  }


  public OrderPayment surcharge(Currency surcharge) {
    
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getSurcharge() {
    return surcharge;
  }


  public void setSurcharge(Currency surcharge) {
    this.surcharge = surcharge;
  }


  public OrderPayment surchargeAccountingCode(String surchargeAccountingCode) {
    
    this.surchargeAccountingCode = surchargeAccountingCode;
    return this;
  }

   /**
   * Surcharge accounting code
   * @return surchargeAccountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Surcharge accounting code")

  public String getSurchargeAccountingCode() {
    return surchargeAccountingCode;
  }


  public void setSurchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
  }


  public OrderPayment surchargeTransactionFee(BigDecimal surchargeTransactionFee) {
    
    this.surchargeTransactionFee = surchargeTransactionFee;
    return this;
  }

   /**
   * Surcharge transaction fee
   * @return surchargeTransactionFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Surcharge transaction fee")

  public BigDecimal getSurchargeTransactionFee() {
    return surchargeTransactionFee;
  }


  public void setSurchargeTransactionFee(BigDecimal surchargeTransactionFee) {
    this.surchargeTransactionFee = surchargeTransactionFee;
  }


  public OrderPayment surchargeTransactionPercentage(BigDecimal surchargeTransactionPercentage) {
    
    this.surchargeTransactionPercentage = surchargeTransactionPercentage;
    return this;
  }

   /**
   * Surcharge transaction percentage
   * @return surchargeTransactionPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Surcharge transaction percentage")

  public BigDecimal getSurchargeTransactionPercentage() {
    return surchargeTransactionPercentage;
  }


  public void setSurchargeTransactionPercentage(BigDecimal surchargeTransactionPercentage) {
    this.surchargeTransactionPercentage = surchargeTransactionPercentage;
  }


  public OrderPayment testOrder(Boolean testOrder) {
    
    this.testOrder = testOrder;
    return this;
  }

   /**
   * True if this is a test order
   * @return testOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this is a test order")

  public Boolean getTestOrder() {
    return testOrder;
  }


  public void setTestOrder(Boolean testOrder) {
    this.testOrder = testOrder;
  }


  public OrderPayment transactions(List<OrderPaymentTransaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public OrderPayment addTransactionsItem(OrderPaymentTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions associated with processing this payment
   * @return transactions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transactions associated with processing this payment")

  public List<OrderPaymentTransaction> getTransactions() {
    return transactions;
  }


  public void setTransactions(List<OrderPaymentTransaction> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPayment orderPayment = (OrderPayment) o;
    return Objects.equals(this.check, orderPayment.check) &&
        Objects.equals(this.creditCard, orderPayment.creditCard) &&
        Objects.equals(this.echeck, orderPayment.echeck) &&
        Objects.equals(this.healthBenefitCard, orderPayment.healthBenefitCard) &&
        Objects.equals(this.holdForFraudReview, orderPayment.holdForFraudReview) &&
        Objects.equals(this.insurance, orderPayment.insurance) &&
        Objects.equals(this.paymentDts, orderPayment.paymentDts) &&
        Objects.equals(this.paymentMethod, orderPayment.paymentMethod) &&
        Objects.equals(this.paymentMethodAccountingCode, orderPayment.paymentMethodAccountingCode) &&
        Objects.equals(this.paymentMethodDepositToAccount, orderPayment.paymentMethodDepositToAccount) &&
        Objects.equals(this.paymentStatus, orderPayment.paymentStatus) &&
        Objects.equals(this.paypal, orderPayment.paypal) &&
        Objects.equals(this.purchaseOrder, orderPayment.purchaseOrder) &&
        Objects.equals(this.rotatingTransactionGatewayCode, orderPayment.rotatingTransactionGatewayCode) &&
        Objects.equals(this.surcharge, orderPayment.surcharge) &&
        Objects.equals(this.surchargeAccountingCode, orderPayment.surchargeAccountingCode) &&
        Objects.equals(this.surchargeTransactionFee, orderPayment.surchargeTransactionFee) &&
        Objects.equals(this.surchargeTransactionPercentage, orderPayment.surchargeTransactionPercentage) &&
        Objects.equals(this.testOrder, orderPayment.testOrder) &&
        Objects.equals(this.transactions, orderPayment.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(check, creditCard, echeck, healthBenefitCard, holdForFraudReview, insurance, paymentDts, paymentMethod, paymentMethodAccountingCode, paymentMethodDepositToAccount, paymentStatus, paypal, purchaseOrder, rotatingTransactionGatewayCode, surcharge, surchargeAccountingCode, surchargeTransactionFee, surchargeTransactionPercentage, testOrder, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPayment {\n");
    sb.append("    check: ").append(toIndentedString(check)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    echeck: ").append(toIndentedString(echeck)).append("\n");
    sb.append("    healthBenefitCard: ").append(toIndentedString(healthBenefitCard)).append("\n");
    sb.append("    holdForFraudReview: ").append(toIndentedString(holdForFraudReview)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    paymentDts: ").append(toIndentedString(paymentDts)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethodAccountingCode: ").append(toIndentedString(paymentMethodAccountingCode)).append("\n");
    sb.append("    paymentMethodDepositToAccount: ").append(toIndentedString(paymentMethodDepositToAccount)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    paypal: ").append(toIndentedString(paypal)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    rotatingTransactionGatewayCode: ").append(toIndentedString(rotatingTransactionGatewayCode)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    surchargeAccountingCode: ").append(toIndentedString(surchargeAccountingCode)).append("\n");
    sb.append("    surchargeTransactionFee: ").append(toIndentedString(surchargeTransactionFee)).append("\n");
    sb.append("    surchargeTransactionPercentage: ").append(toIndentedString(surchargeTransactionPercentage)).append("\n");
    sb.append("    testOrder: ").append(toIndentedString(testOrder)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("check");
    openapiFields.add("credit_card");
    openapiFields.add("echeck");
    openapiFields.add("health_benefit_card");
    openapiFields.add("hold_for_fraud_review");
    openapiFields.add("insurance");
    openapiFields.add("payment_dts");
    openapiFields.add("payment_method");
    openapiFields.add("payment_method_accounting_code");
    openapiFields.add("payment_method_deposit_to_account");
    openapiFields.add("payment_status");
    openapiFields.add("paypal");
    openapiFields.add("purchase_order");
    openapiFields.add("rotating_transaction_gateway_code");
    openapiFields.add("surcharge");
    openapiFields.add("surcharge_accounting_code");
    openapiFields.add("surcharge_transaction_fee");
    openapiFields.add("surcharge_transaction_percentage");
    openapiFields.add("test_order");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPayment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPayment is not found in the empty JSON string", OrderPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPayment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `check`
      if (jsonObj.getAsJsonObject("check") != null) {
        OrderPaymentCheck.validateJsonObject(jsonObj.getAsJsonObject("check"));
      }
      // validate the optional field `credit_card`
      if (jsonObj.getAsJsonObject("credit_card") != null) {
        OrderPaymentCreditCard.validateJsonObject(jsonObj.getAsJsonObject("credit_card"));
      }
      // validate the optional field `echeck`
      if (jsonObj.getAsJsonObject("echeck") != null) {
        OrderPaymentECheck.validateJsonObject(jsonObj.getAsJsonObject("echeck"));
      }
      // validate the optional field `health_benefit_card`
      if (jsonObj.getAsJsonObject("health_benefit_card") != null) {
        OrderPaymentHealthBenefitCard.validateJsonObject(jsonObj.getAsJsonObject("health_benefit_card"));
      }
      // validate the optional field `insurance`
      if (jsonObj.getAsJsonObject("insurance") != null) {
        OrderPaymentInsurance.validateJsonObject(jsonObj.getAsJsonObject("insurance"));
      }
      if (jsonObj.get("payment_dts") != null && !jsonObj.get("payment_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_dts").toString()));
      }
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      if (jsonObj.get("payment_method_accounting_code") != null && !jsonObj.get("payment_method_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_accounting_code").toString()));
      }
      if (jsonObj.get("payment_method_deposit_to_account") != null && !jsonObj.get("payment_method_deposit_to_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_deposit_to_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_deposit_to_account").toString()));
      }
      if (jsonObj.get("payment_status") != null && !jsonObj.get("payment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_status").toString()));
      }
      // validate the optional field `paypal`
      if (jsonObj.getAsJsonObject("paypal") != null) {
        OrderPaymentPayPal.validateJsonObject(jsonObj.getAsJsonObject("paypal"));
      }
      // validate the optional field `purchase_order`
      if (jsonObj.getAsJsonObject("purchase_order") != null) {
        OrderPaymentPurchaseOrder.validateJsonObject(jsonObj.getAsJsonObject("purchase_order"));
      }
      if (jsonObj.get("rotating_transaction_gateway_code") != null && !jsonObj.get("rotating_transaction_gateway_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotating_transaction_gateway_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rotating_transaction_gateway_code").toString()));
      }
      // validate the optional field `surcharge`
      if (jsonObj.getAsJsonObject("surcharge") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("surcharge"));
      }
      if (jsonObj.get("surcharge_accounting_code") != null && !jsonObj.get("surcharge_accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surcharge_accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surcharge_accounting_code").toString()));
      }
      JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
      if (jsonArraytransactions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("transactions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
        }

        // validate the optional field `transactions` (array)
        for (int i = 0; i < jsonArraytransactions.size(); i++) {
          OrderPaymentTransaction.validateJsonObject(jsonArraytransactions.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPayment>() {
           @Override
           public void write(JsonWriter out, OrderPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPayment
  * @throws IOException if the JSON string is invalid with respect to OrderPayment
  */
  public static OrderPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPayment.class);
  }

 /**
  * Convert an instance of OrderPayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


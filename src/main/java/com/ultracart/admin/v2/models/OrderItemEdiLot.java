/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderItemEdiLot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-18T11:26:02.311-04:00[America/Indianapolis]")
public class OrderItemEdiLot {
  public static final String SERIALIZED_NAME_LOT_EXPIRATION = "lot_expiration";
  @SerializedName(SERIALIZED_NAME_LOT_EXPIRATION)
  private String lotExpiration;

  public static final String SERIALIZED_NAME_LOT_NUMBER = "lot_number";
  @SerializedName(SERIALIZED_NAME_LOT_NUMBER)
  private String lotNumber;

  public static final String SERIALIZED_NAME_LOT_QUANTITY = "lot_quantity";
  @SerializedName(SERIALIZED_NAME_LOT_QUANTITY)
  private Integer lotQuantity;

  public OrderItemEdiLot() { 
  }

  public OrderItemEdiLot lotExpiration(String lotExpiration) {
    
    this.lotExpiration = lotExpiration;
    return this;
  }

   /**
   * Log expiration
   * @return lotExpiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Log expiration")

  public String getLotExpiration() {
    return lotExpiration;
  }


  public void setLotExpiration(String lotExpiration) {
    this.lotExpiration = lotExpiration;
  }


  public OrderItemEdiLot lotNumber(String lotNumber) {
    
    this.lotNumber = lotNumber;
    return this;
  }

   /**
   * Lot number
   * @return lotNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lot number")

  public String getLotNumber() {
    return lotNumber;
  }


  public void setLotNumber(String lotNumber) {
    this.lotNumber = lotNumber;
  }


  public OrderItemEdiLot lotQuantity(Integer lotQuantity) {
    
    this.lotQuantity = lotQuantity;
    return this;
  }

   /**
   * Lot quantity
   * @return lotQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Lot quantity")

  public Integer getLotQuantity() {
    return lotQuantity;
  }


  public void setLotQuantity(Integer lotQuantity) {
    this.lotQuantity = lotQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItemEdiLot orderItemEdiLot = (OrderItemEdiLot) o;
    return Objects.equals(this.lotExpiration, orderItemEdiLot.lotExpiration) &&
        Objects.equals(this.lotNumber, orderItemEdiLot.lotNumber) &&
        Objects.equals(this.lotQuantity, orderItemEdiLot.lotQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotExpiration, lotNumber, lotQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemEdiLot {\n");
    sb.append("    lotExpiration: ").append(toIndentedString(lotExpiration)).append("\n");
    sb.append("    lotNumber: ").append(toIndentedString(lotNumber)).append("\n");
    sb.append("    lotQuantity: ").append(toIndentedString(lotQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lot_expiration");
    openapiFields.add("lot_number");
    openapiFields.add("lot_quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderItemEdiLot
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderItemEdiLot.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItemEdiLot is not found in the empty JSON string", OrderItemEdiLot.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderItemEdiLot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderItemEdiLot` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("lot_expiration") != null && !jsonObj.get("lot_expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lot_expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lot_expiration").toString()));
      }
      if (jsonObj.get("lot_number") != null && !jsonObj.get("lot_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lot_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lot_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItemEdiLot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItemEdiLot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItemEdiLot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItemEdiLot.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItemEdiLot>() {
           @Override
           public void write(JsonWriter out, OrderItemEdiLot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItemEdiLot read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderItemEdiLot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderItemEdiLot
  * @throws IOException if the JSON string is invalid with respect to OrderItemEdiLot
  */
  public static OrderItemEdiLot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItemEdiLot.class);
  }

 /**
  * Convert an instance of OrderItemEdiLot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


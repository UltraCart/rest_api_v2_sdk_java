/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemContentAssignment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-05T11:02:37.171-05:00[America/Indianapolis]")
public class ItemContentAssignment {
  public static final String SERIALIZED_NAME_DEFAULT_ASSIGNMENT = "default_assignment";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ASSIGNMENT)
  private Boolean defaultAssignment;

  public static final String SERIALIZED_NAME_GROUP_OID = "group_oid";
  @SerializedName(SERIALIZED_NAME_GROUP_OID)
  private Integer groupOid;

  public static final String SERIALIZED_NAME_GROUP_PATH = "group_path";
  @SerializedName(SERIALIZED_NAME_GROUP_PATH)
  private String groupPath;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_URL_PART = "url_part";
  @SerializedName(SERIALIZED_NAME_URL_PART)
  private String urlPart;

  public ItemContentAssignment() { 
  }

  public ItemContentAssignment defaultAssignment(Boolean defaultAssignment) {
    
    this.defaultAssignment = defaultAssignment;
    return this;
  }

   /**
   * True if this group is the default assignment for this item
   * @return defaultAssignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this group is the default assignment for this item")

  public Boolean getDefaultAssignment() {
    return defaultAssignment;
  }


  public void setDefaultAssignment(Boolean defaultAssignment) {
    this.defaultAssignment = defaultAssignment;
  }


  public ItemContentAssignment groupOid(Integer groupOid) {
    
    this.groupOid = groupOid;
    return this;
  }

   /**
   * Page (group) object identifier
   * @return groupOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Page (group) object identifier")

  public Integer getGroupOid() {
    return groupOid;
  }


  public void setGroupOid(Integer groupOid) {
    this.groupOid = groupOid;
  }


  public ItemContentAssignment groupPath(String groupPath) {
    
    this.groupPath = groupPath;
    return this;
  }

   /**
   * Page (group) path
   * @return groupPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Page (group) path")

  public String getGroupPath() {
    return groupPath;
  }


  public void setGroupPath(String groupPath) {
    this.groupPath = groupPath;
  }


  public ItemContentAssignment host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * StoreFront host name
   * @return host
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "StoreFront host name")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public ItemContentAssignment sortOrder(Integer sortOrder) {
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Sort order (optional)
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sort order (optional)")

  public Integer getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ItemContentAssignment urlPart(String urlPart) {
    
    this.urlPart = urlPart;
    return this;
  }

   /**
   * URL part if the item id is not used
   * @return urlPart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL part if the item id is not used")

  public String getUrlPart() {
    return urlPart;
  }


  public void setUrlPart(String urlPart) {
    this.urlPart = urlPart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemContentAssignment itemContentAssignment = (ItemContentAssignment) o;
    return Objects.equals(this.defaultAssignment, itemContentAssignment.defaultAssignment) &&
        Objects.equals(this.groupOid, itemContentAssignment.groupOid) &&
        Objects.equals(this.groupPath, itemContentAssignment.groupPath) &&
        Objects.equals(this.host, itemContentAssignment.host) &&
        Objects.equals(this.sortOrder, itemContentAssignment.sortOrder) &&
        Objects.equals(this.urlPart, itemContentAssignment.urlPart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultAssignment, groupOid, groupPath, host, sortOrder, urlPart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemContentAssignment {\n");
    sb.append("    defaultAssignment: ").append(toIndentedString(defaultAssignment)).append("\n");
    sb.append("    groupOid: ").append(toIndentedString(groupOid)).append("\n");
    sb.append("    groupPath: ").append(toIndentedString(groupPath)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    urlPart: ").append(toIndentedString(urlPart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_assignment");
    openapiFields.add("group_oid");
    openapiFields.add("group_path");
    openapiFields.add("host");
    openapiFields.add("sort_order");
    openapiFields.add("url_part");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemContentAssignment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemContentAssignment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemContentAssignment is not found in the empty JSON string", ItemContentAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemContentAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemContentAssignment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("group_path") != null && !jsonObj.get("group_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_path").toString()));
      }
      if (jsonObj.get("host") != null && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (jsonObj.get("url_part") != null && !jsonObj.get("url_part").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_part` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_part").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemContentAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemContentAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemContentAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemContentAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemContentAssignment>() {
           @Override
           public void write(JsonWriter out, ItemContentAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemContentAssignment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemContentAssignment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemContentAssignment
  * @throws IOException if the JSON string is invalid with respect to ItemContentAssignment
  */
  public static ItemContentAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemContentAssignment.class);
  }

 /**
  * Convert an instance of ItemContentAssignment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemShippingMethod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T10:08:44.056-05:00[America/Indianapolis]")
public class ItemShippingMethod {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_EACH_ADDITIONAL_ITEM_MARKUP = "each_additional_item_markup";
  @SerializedName(SERIALIZED_NAME_EACH_ADDITIONAL_ITEM_MARKUP)
  private BigDecimal eachAdditionalItemMarkup;

  public static final String SERIALIZED_NAME_FILTER_TO_IF_AVAILABLE = "filter_to_if_available";
  @SerializedName(SERIALIZED_NAME_FILTER_TO_IF_AVAILABLE)
  private Boolean filterToIfAvailable;

  public static final String SERIALIZED_NAME_FIRST_ITEM_MARKUP = "first_item_markup";
  @SerializedName(SERIALIZED_NAME_FIRST_ITEM_MARKUP)
  private BigDecimal firstItemMarkup;

  public static final String SERIALIZED_NAME_FIXED_SHIPPING_COST = "fixed_shipping_cost";
  @SerializedName(SERIALIZED_NAME_FIXED_SHIPPING_COST)
  private BigDecimal fixedShippingCost;

  public static final String SERIALIZED_NAME_FLAT_FEE_MARKUP = "flat_fee_markup";
  @SerializedName(SERIALIZED_NAME_FLAT_FEE_MARKUP)
  private BigDecimal flatFeeMarkup;

  public static final String SERIALIZED_NAME_FREE_SHIPPING = "free_shipping";
  @SerializedName(SERIALIZED_NAME_FREE_SHIPPING)
  private Boolean freeShipping;

  public static final String SERIALIZED_NAME_PER_ITEM_FEE_MARKUP = "per_item_fee_markup";
  @SerializedName(SERIALIZED_NAME_PER_ITEM_FEE_MARKUP)
  private BigDecimal perItemFeeMarkup;

  public static final String SERIALIZED_NAME_PERCENTAGE_MARKUP = "percentage_markup";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_MARKUP)
  private BigDecimal percentageMarkup;

  public static final String SERIALIZED_NAME_PERCENTAGE_OF_ITEM_MARKUP = "percentage_of_item_markup";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_OF_ITEM_MARKUP)
  private BigDecimal percentageOfItemMarkup;

  public static final String SERIALIZED_NAME_RELAX_RESTRICTIONS_ON_UPSELL = "relax_restrictions_on_upsell";
  @SerializedName(SERIALIZED_NAME_RELAX_RESTRICTIONS_ON_UPSELL)
  private Boolean relaxRestrictionsOnUpsell;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shipping_method";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_OID = "shipping_method_oid";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_OID)
  private Integer shippingMethodOid;

  /**
   * Shipping method validity
   */
  @JsonAdapter(ShippingMethodValidityEnum.Adapter.class)
  public enum ShippingMethodValidityEnum {
    INVALID_FOR("invalid for"),
    
    VALID_FOR("valid for"),
    
    VALID_ONLY_FOR("valid only for");

    private String value;

    ShippingMethodValidityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShippingMethodValidityEnum fromValue(String value) {
      for (ShippingMethodValidityEnum b : ShippingMethodValidityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShippingMethodValidityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShippingMethodValidityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShippingMethodValidityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShippingMethodValidityEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHIPPING_METHOD_VALIDITY = "shipping_method_validity";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD_VALIDITY)
  private ShippingMethodValidityEnum shippingMethodValidity;

  public static final String SERIALIZED_NAME_SIGNATURE_REQUIRED = "signature_required";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_REQUIRED)
  private Boolean signatureRequired;

  public ItemShippingMethod() { 
  }

  public ItemShippingMethod cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost")

  public BigDecimal getCost() {
    return cost;
  }


  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public ItemShippingMethod eachAdditionalItemMarkup(BigDecimal eachAdditionalItemMarkup) {
    
    this.eachAdditionalItemMarkup = eachAdditionalItemMarkup;
    return this;
  }

   /**
   * Each additional item markup
   * @return eachAdditionalItemMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Each additional item markup")

  public BigDecimal getEachAdditionalItemMarkup() {
    return eachAdditionalItemMarkup;
  }


  public void setEachAdditionalItemMarkup(BigDecimal eachAdditionalItemMarkup) {
    this.eachAdditionalItemMarkup = eachAdditionalItemMarkup;
  }


  public ItemShippingMethod filterToIfAvailable(Boolean filterToIfAvailable) {
    
    this.filterToIfAvailable = filterToIfAvailable;
    return this;
  }

   /**
   * Filter to this method if available
   * @return filterToIfAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter to this method if available")

  public Boolean getFilterToIfAvailable() {
    return filterToIfAvailable;
  }


  public void setFilterToIfAvailable(Boolean filterToIfAvailable) {
    this.filterToIfAvailable = filterToIfAvailable;
  }


  public ItemShippingMethod firstItemMarkup(BigDecimal firstItemMarkup) {
    
    this.firstItemMarkup = firstItemMarkup;
    return this;
  }

   /**
   * First item markup
   * @return firstItemMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First item markup")

  public BigDecimal getFirstItemMarkup() {
    return firstItemMarkup;
  }


  public void setFirstItemMarkup(BigDecimal firstItemMarkup) {
    this.firstItemMarkup = firstItemMarkup;
  }


  public ItemShippingMethod fixedShippingCost(BigDecimal fixedShippingCost) {
    
    this.fixedShippingCost = fixedShippingCost;
    return this;
  }

   /**
   * Fixed shipping cost
   * @return fixedShippingCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fixed shipping cost")

  public BigDecimal getFixedShippingCost() {
    return fixedShippingCost;
  }


  public void setFixedShippingCost(BigDecimal fixedShippingCost) {
    this.fixedShippingCost = fixedShippingCost;
  }


  public ItemShippingMethod flatFeeMarkup(BigDecimal flatFeeMarkup) {
    
    this.flatFeeMarkup = flatFeeMarkup;
    return this;
  }

   /**
   * Flat fee markup
   * @return flatFeeMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flat fee markup")

  public BigDecimal getFlatFeeMarkup() {
    return flatFeeMarkup;
  }


  public void setFlatFeeMarkup(BigDecimal flatFeeMarkup) {
    this.flatFeeMarkup = flatFeeMarkup;
  }


  public ItemShippingMethod freeShipping(Boolean freeShipping) {
    
    this.freeShipping = freeShipping;
    return this;
  }

   /**
   * Free shipping
   * @return freeShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Free shipping")

  public Boolean getFreeShipping() {
    return freeShipping;
  }


  public void setFreeShipping(Boolean freeShipping) {
    this.freeShipping = freeShipping;
  }


  public ItemShippingMethod perItemFeeMarkup(BigDecimal perItemFeeMarkup) {
    
    this.perItemFeeMarkup = perItemFeeMarkup;
    return this;
  }

   /**
   * Per item fee markup
   * @return perItemFeeMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Per item fee markup")

  public BigDecimal getPerItemFeeMarkup() {
    return perItemFeeMarkup;
  }


  public void setPerItemFeeMarkup(BigDecimal perItemFeeMarkup) {
    this.perItemFeeMarkup = perItemFeeMarkup;
  }


  public ItemShippingMethod percentageMarkup(BigDecimal percentageMarkup) {
    
    this.percentageMarkup = percentageMarkup;
    return this;
  }

   /**
   * Percentage markup
   * @return percentageMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Percentage markup")

  public BigDecimal getPercentageMarkup() {
    return percentageMarkup;
  }


  public void setPercentageMarkup(BigDecimal percentageMarkup) {
    this.percentageMarkup = percentageMarkup;
  }


  public ItemShippingMethod percentageOfItemMarkup(BigDecimal percentageOfItemMarkup) {
    
    this.percentageOfItemMarkup = percentageOfItemMarkup;
    return this;
  }

   /**
   * Percentage of item markup
   * @return percentageOfItemMarkup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Percentage of item markup")

  public BigDecimal getPercentageOfItemMarkup() {
    return percentageOfItemMarkup;
  }


  public void setPercentageOfItemMarkup(BigDecimal percentageOfItemMarkup) {
    this.percentageOfItemMarkup = percentageOfItemMarkup;
  }


  public ItemShippingMethod relaxRestrictionsOnUpsell(Boolean relaxRestrictionsOnUpsell) {
    
    this.relaxRestrictionsOnUpsell = relaxRestrictionsOnUpsell;
    return this;
  }

   /**
   * Relax restrictions on upsell
   * @return relaxRestrictionsOnUpsell
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Relax restrictions on upsell")

  public Boolean getRelaxRestrictionsOnUpsell() {
    return relaxRestrictionsOnUpsell;
  }


  public void setRelaxRestrictionsOnUpsell(Boolean relaxRestrictionsOnUpsell) {
    this.relaxRestrictionsOnUpsell = relaxRestrictionsOnUpsell;
  }


  public ItemShippingMethod shippingMethod(String shippingMethod) {
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Shipping method name
   * @return shippingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping method name")

  public String getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public ItemShippingMethod shippingMethodOid(Integer shippingMethodOid) {
    
    this.shippingMethodOid = shippingMethodOid;
    return this;
  }

   /**
   * Shipping method object identifier
   * @return shippingMethodOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping method object identifier")

  public Integer getShippingMethodOid() {
    return shippingMethodOid;
  }


  public void setShippingMethodOid(Integer shippingMethodOid) {
    this.shippingMethodOid = shippingMethodOid;
  }


  public ItemShippingMethod shippingMethodValidity(ShippingMethodValidityEnum shippingMethodValidity) {
    
    this.shippingMethodValidity = shippingMethodValidity;
    return this;
  }

   /**
   * Shipping method validity
   * @return shippingMethodValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shipping method validity")

  public ShippingMethodValidityEnum getShippingMethodValidity() {
    return shippingMethodValidity;
  }


  public void setShippingMethodValidity(ShippingMethodValidityEnum shippingMethodValidity) {
    this.shippingMethodValidity = shippingMethodValidity;
  }


  public ItemShippingMethod signatureRequired(Boolean signatureRequired) {
    
    this.signatureRequired = signatureRequired;
    return this;
  }

   /**
   * Signature required
   * @return signatureRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signature required")

  public Boolean getSignatureRequired() {
    return signatureRequired;
  }


  public void setSignatureRequired(Boolean signatureRequired) {
    this.signatureRequired = signatureRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemShippingMethod itemShippingMethod = (ItemShippingMethod) o;
    return Objects.equals(this.cost, itemShippingMethod.cost) &&
        Objects.equals(this.eachAdditionalItemMarkup, itemShippingMethod.eachAdditionalItemMarkup) &&
        Objects.equals(this.filterToIfAvailable, itemShippingMethod.filterToIfAvailable) &&
        Objects.equals(this.firstItemMarkup, itemShippingMethod.firstItemMarkup) &&
        Objects.equals(this.fixedShippingCost, itemShippingMethod.fixedShippingCost) &&
        Objects.equals(this.flatFeeMarkup, itemShippingMethod.flatFeeMarkup) &&
        Objects.equals(this.freeShipping, itemShippingMethod.freeShipping) &&
        Objects.equals(this.perItemFeeMarkup, itemShippingMethod.perItemFeeMarkup) &&
        Objects.equals(this.percentageMarkup, itemShippingMethod.percentageMarkup) &&
        Objects.equals(this.percentageOfItemMarkup, itemShippingMethod.percentageOfItemMarkup) &&
        Objects.equals(this.relaxRestrictionsOnUpsell, itemShippingMethod.relaxRestrictionsOnUpsell) &&
        Objects.equals(this.shippingMethod, itemShippingMethod.shippingMethod) &&
        Objects.equals(this.shippingMethodOid, itemShippingMethod.shippingMethodOid) &&
        Objects.equals(this.shippingMethodValidity, itemShippingMethod.shippingMethodValidity) &&
        Objects.equals(this.signatureRequired, itemShippingMethod.signatureRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, eachAdditionalItemMarkup, filterToIfAvailable, firstItemMarkup, fixedShippingCost, flatFeeMarkup, freeShipping, perItemFeeMarkup, percentageMarkup, percentageOfItemMarkup, relaxRestrictionsOnUpsell, shippingMethod, shippingMethodOid, shippingMethodValidity, signatureRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemShippingMethod {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    eachAdditionalItemMarkup: ").append(toIndentedString(eachAdditionalItemMarkup)).append("\n");
    sb.append("    filterToIfAvailable: ").append(toIndentedString(filterToIfAvailable)).append("\n");
    sb.append("    firstItemMarkup: ").append(toIndentedString(firstItemMarkup)).append("\n");
    sb.append("    fixedShippingCost: ").append(toIndentedString(fixedShippingCost)).append("\n");
    sb.append("    flatFeeMarkup: ").append(toIndentedString(flatFeeMarkup)).append("\n");
    sb.append("    freeShipping: ").append(toIndentedString(freeShipping)).append("\n");
    sb.append("    perItemFeeMarkup: ").append(toIndentedString(perItemFeeMarkup)).append("\n");
    sb.append("    percentageMarkup: ").append(toIndentedString(percentageMarkup)).append("\n");
    sb.append("    percentageOfItemMarkup: ").append(toIndentedString(percentageOfItemMarkup)).append("\n");
    sb.append("    relaxRestrictionsOnUpsell: ").append(toIndentedString(relaxRestrictionsOnUpsell)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingMethodOid: ").append(toIndentedString(shippingMethodOid)).append("\n");
    sb.append("    shippingMethodValidity: ").append(toIndentedString(shippingMethodValidity)).append("\n");
    sb.append("    signatureRequired: ").append(toIndentedString(signatureRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("each_additional_item_markup");
    openapiFields.add("filter_to_if_available");
    openapiFields.add("first_item_markup");
    openapiFields.add("fixed_shipping_cost");
    openapiFields.add("flat_fee_markup");
    openapiFields.add("free_shipping");
    openapiFields.add("per_item_fee_markup");
    openapiFields.add("percentage_markup");
    openapiFields.add("percentage_of_item_markup");
    openapiFields.add("relax_restrictions_on_upsell");
    openapiFields.add("shipping_method");
    openapiFields.add("shipping_method_oid");
    openapiFields.add("shipping_method_validity");
    openapiFields.add("signature_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemShippingMethod
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemShippingMethod.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemShippingMethod is not found in the empty JSON string", ItemShippingMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemShippingMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemShippingMethod` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("shipping_method") != null && !jsonObj.get("shipping_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_method").toString()));
      }
      if (jsonObj.get("shipping_method_validity") != null && !jsonObj.get("shipping_method_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_method_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_method_validity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemShippingMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemShippingMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemShippingMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemShippingMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemShippingMethod>() {
           @Override
           public void write(JsonWriter out, ItemShippingMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemShippingMethod read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemShippingMethod given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemShippingMethod
  * @throws IOException if the JSON string is invalid with respect to ItemShippingMethod
  */
  public static ItemShippingMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemShippingMethod.class);
  }

 /**
  * Convert an instance of ItemShippingMethod to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


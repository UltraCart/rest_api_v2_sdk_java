/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxCountry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-15T16:57:28.765-05:00[America/Indianapolis]")
public class TaxCountry {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_OID = "country_oid";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OID)
  private Integer countryOid;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<TaxState> states = null;

  public static final String SERIALIZED_NAME_TAX_GIFT_CHARGE = "tax_gift_charge";
  @SerializedName(SERIALIZED_NAME_TAX_GIFT_CHARGE)
  private Boolean taxGiftCharge;

  public static final String SERIALIZED_NAME_TAX_GIFT_WRAP = "tax_gift_wrap";
  @SerializedName(SERIALIZED_NAME_TAX_GIFT_WRAP)
  private Boolean taxGiftWrap;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public static final String SERIALIZED_NAME_TAX_SHIPPING = "tax_shipping";
  @SerializedName(SERIALIZED_NAME_TAX_SHIPPING)
  private Boolean taxShipping;

  public TaxCountry() { 
  }

  public TaxCountry accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxCountry countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country code (2 characters
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Country code (2 characters")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public TaxCountry countryOid(Integer countryOid) {
    
    this.countryOid = countryOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return countryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCountryOid() {
    return countryOid;
  }


  public void setCountryOid(Integer countryOid) {
    this.countryOid = countryOid;
  }


  public TaxCountry states(List<TaxState> states) {
    
    this.states = states;
    return this;
  }

  public TaxCountry addStatesItem(TaxState statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * States (or regions or territories) within this country
   * @return states
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "States (or regions or territories) within this country")

  public List<TaxState> getStates() {
    return states;
  }


  public void setStates(List<TaxState> states) {
    this.states = states;
  }


  public TaxCountry taxGiftCharge(Boolean taxGiftCharge) {
    
    this.taxGiftCharge = taxGiftCharge;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift charge
   * @return taxGiftCharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift charge")

  public Boolean getTaxGiftCharge() {
    return taxGiftCharge;
  }


  public void setTaxGiftCharge(Boolean taxGiftCharge) {
    this.taxGiftCharge = taxGiftCharge;
  }


  public TaxCountry taxGiftWrap(Boolean taxGiftWrap) {
    
    this.taxGiftWrap = taxGiftWrap;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on gift wrap
   * @return taxGiftWrap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on gift wrap")

  public Boolean getTaxGiftWrap() {
    return taxGiftWrap;
  }


  public void setTaxGiftWrap(Boolean taxGiftWrap) {
    this.taxGiftWrap = taxGiftWrap;
  }


  public TaxCountry taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxCountry taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }


  public TaxCountry taxShipping(Boolean taxShipping) {
    
    this.taxShipping = taxShipping;
    return this;
  }

   /**
   * True if taxation within this jurisdiction should charge tax on shipping
   * @return taxShipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if taxation within this jurisdiction should charge tax on shipping")

  public Boolean getTaxShipping() {
    return taxShipping;
  }


  public void setTaxShipping(Boolean taxShipping) {
    this.taxShipping = taxShipping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxCountry taxCountry = (TaxCountry) o;
    return Objects.equals(this.accountingCode, taxCountry.accountingCode) &&
        Objects.equals(this.countryCode, taxCountry.countryCode) &&
        Objects.equals(this.countryOid, taxCountry.countryOid) &&
        Objects.equals(this.states, taxCountry.states) &&
        Objects.equals(this.taxGiftCharge, taxCountry.taxGiftCharge) &&
        Objects.equals(this.taxGiftWrap, taxCountry.taxGiftWrap) &&
        Objects.equals(this.taxRate, taxCountry.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxCountry.taxRateFormatted) &&
        Objects.equals(this.taxShipping, taxCountry.taxShipping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, countryCode, countryOid, states, taxGiftCharge, taxGiftWrap, taxRate, taxRateFormatted, taxShipping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxCountry {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryOid: ").append(toIndentedString(countryOid)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    taxGiftCharge: ").append(toIndentedString(taxGiftCharge)).append("\n");
    sb.append("    taxGiftWrap: ").append(toIndentedString(taxGiftWrap)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("    taxShipping: ").append(toIndentedString(taxShipping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("country_code");
    openapiFields.add("country_oid");
    openapiFields.add("states");
    openapiFields.add("tax_gift_charge");
    openapiFields.add("tax_gift_wrap");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");
    openapiFields.add("tax_shipping");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxCountry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxCountry.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxCountry is not found in the empty JSON string", TaxCountry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxCountry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxCountry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      if (jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
      if (jsonArraystates != null) {
        // ensure the json data is an array
        if (!jsonObj.get("states").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
        }

        // validate the optional field `states` (array)
        for (int i = 0; i < jsonArraystates.size(); i++) {
          TaxState.validateJsonObject(jsonArraystates.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxCountry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxCountry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxCountry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxCountry.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxCountry>() {
           @Override
           public void write(JsonWriter out, TaxCountry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxCountry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxCountry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxCountry
  * @throws IOException if the JSON string is invalid with respect to TaxCountry
  */
  public static TaxCountry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxCountry.class);
  }

 /**
  * Convert an instance of TaxCountry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


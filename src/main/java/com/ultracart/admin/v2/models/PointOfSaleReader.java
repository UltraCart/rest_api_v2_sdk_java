/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * PointOfSaleReader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-18T13:37:57.506-05:00[America/Indianapolis]")
public class PointOfSaleReader {
  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  /**
   * The payment provider for the card reader.
   */
  @JsonAdapter(PaymentProviderEnum.Adapter.class)
  public enum PaymentProviderEnum {
    STRIPE("stripe");

    private String value;

    PaymentProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentProviderEnum fromValue(String value) {
      for (PaymentProviderEnum b : PaymentProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentProviderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_PROVIDER = "payment_provider";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROVIDER)
  private PaymentProviderEnum paymentProvider;

  public static final String SERIALIZED_NAME_POS_READER_ID = "pos_reader_id";
  @SerializedName(SERIALIZED_NAME_POS_READER_ID)
  private Integer posReaderId;

  public static final String SERIALIZED_NAME_POS_REGISTER_OID = "pos_register_oid";
  @SerializedName(SERIALIZED_NAME_POS_REGISTER_OID)
  private Integer posRegisterOid;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serial_number";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_STRIPE_ACCOUNT_ID = "stripe_account_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_ACCOUNT_ID)
  private String stripeAccountId;

  public static final String SERIALIZED_NAME_STRIPE_READER_ID = "stripe_reader_id";
  @SerializedName(SERIALIZED_NAME_STRIPE_READER_ID)
  private String stripeReaderId;

  public PointOfSaleReader() { 
  }

  public PointOfSaleReader deviceType(String deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

   /**
   * The device type of the reader.
   * @return deviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The device type of the reader.")

  public String getDeviceType() {
    return deviceType;
  }


  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public PointOfSaleReader label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * The label of the reader.
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The label of the reader.")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public PointOfSaleReader merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant id that owns this point of sale reader.
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The merchant id that owns this point of sale reader.")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public PointOfSaleReader paymentProvider(PaymentProviderEnum paymentProvider) {
    
    this.paymentProvider = paymentProvider;
    return this;
  }

   /**
   * The payment provider for the card reader.
   * @return paymentProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The payment provider for the card reader.")

  public PaymentProviderEnum getPaymentProvider() {
    return paymentProvider;
  }


  public void setPaymentProvider(PaymentProviderEnum paymentProvider) {
    this.paymentProvider = paymentProvider;
  }


  public PointOfSaleReader posReaderId(Integer posReaderId) {
    
    this.posReaderId = posReaderId;
    return this;
  }

   /**
   * Object identifier of the point of sale reader.
   * @return posReaderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object identifier of the point of sale reader.")

  public Integer getPosReaderId() {
    return posReaderId;
  }


  public void setPosReaderId(Integer posReaderId) {
    this.posReaderId = posReaderId;
  }


  public PointOfSaleReader posRegisterOid(Integer posRegisterOid) {
    
    this.posRegisterOid = posRegisterOid;
    return this;
  }

   /**
   * Object identifier of the point of sale register this reader is assigned to.
   * @return posRegisterOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object identifier of the point of sale register this reader is assigned to.")

  public Integer getPosRegisterOid() {
    return posRegisterOid;
  }


  public void setPosRegisterOid(Integer posRegisterOid) {
    this.posRegisterOid = posRegisterOid;
  }


  public PointOfSaleReader serialNumber(String serialNumber) {
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The serial number of the reader.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The serial number of the reader.")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public PointOfSaleReader stripeAccountId(String stripeAccountId) {
    
    this.stripeAccountId = stripeAccountId;
    return this;
  }

   /**
   * If the payment provider is Stripe, this is the Stripe account id
   * @return stripeAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the payment provider is Stripe, this is the Stripe account id")

  public String getStripeAccountId() {
    return stripeAccountId;
  }


  public void setStripeAccountId(String stripeAccountId) {
    this.stripeAccountId = stripeAccountId;
  }


  public PointOfSaleReader stripeReaderId(String stripeReaderId) {
    
    this.stripeReaderId = stripeReaderId;
    return this;
  }

   /**
   * If the payment provide is Stripe, this is the Stripe terminal reader id
   * @return stripeReaderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the payment provide is Stripe, this is the Stripe terminal reader id")

  public String getStripeReaderId() {
    return stripeReaderId;
  }


  public void setStripeReaderId(String stripeReaderId) {
    this.stripeReaderId = stripeReaderId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointOfSaleReader pointOfSaleReader = (PointOfSaleReader) o;
    return Objects.equals(this.deviceType, pointOfSaleReader.deviceType) &&
        Objects.equals(this.label, pointOfSaleReader.label) &&
        Objects.equals(this.merchantId, pointOfSaleReader.merchantId) &&
        Objects.equals(this.paymentProvider, pointOfSaleReader.paymentProvider) &&
        Objects.equals(this.posReaderId, pointOfSaleReader.posReaderId) &&
        Objects.equals(this.posRegisterOid, pointOfSaleReader.posRegisterOid) &&
        Objects.equals(this.serialNumber, pointOfSaleReader.serialNumber) &&
        Objects.equals(this.stripeAccountId, pointOfSaleReader.stripeAccountId) &&
        Objects.equals(this.stripeReaderId, pointOfSaleReader.stripeReaderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceType, label, merchantId, paymentProvider, posReaderId, posRegisterOid, serialNumber, stripeAccountId, stripeReaderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointOfSaleReader {\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    paymentProvider: ").append(toIndentedString(paymentProvider)).append("\n");
    sb.append("    posReaderId: ").append(toIndentedString(posReaderId)).append("\n");
    sb.append("    posRegisterOid: ").append(toIndentedString(posRegisterOid)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    stripeAccountId: ").append(toIndentedString(stripeAccountId)).append("\n");
    sb.append("    stripeReaderId: ").append(toIndentedString(stripeReaderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_type");
    openapiFields.add("label");
    openapiFields.add("merchant_id");
    openapiFields.add("payment_provider");
    openapiFields.add("pos_reader_id");
    openapiFields.add("pos_register_oid");
    openapiFields.add("serial_number");
    openapiFields.add("stripe_account_id");
    openapiFields.add("stripe_reader_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PointOfSaleReader
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PointOfSaleReader.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointOfSaleReader is not found in the empty JSON string", PointOfSaleReader.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PointOfSaleReader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointOfSaleReader` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("device_type") != null && !jsonObj.get("device_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_type").toString()));
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("payment_provider") != null && !jsonObj.get("payment_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_provider").toString()));
      }
      if (jsonObj.get("serial_number") != null && !jsonObj.get("serial_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serial_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serial_number").toString()));
      }
      if (jsonObj.get("stripe_account_id") != null && !jsonObj.get("stripe_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_account_id").toString()));
      }
      if (jsonObj.get("stripe_reader_id") != null && !jsonObj.get("stripe_reader_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripe_reader_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripe_reader_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointOfSaleReader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointOfSaleReader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointOfSaleReader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointOfSaleReader.class));

       return (TypeAdapter<T>) new TypeAdapter<PointOfSaleReader>() {
           @Override
           public void write(JsonWriter out, PointOfSaleReader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointOfSaleReader read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PointOfSaleReader given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PointOfSaleReader
  * @throws IOException if the JSON string is invalid with respect to PointOfSaleReader
  */
  public static PointOfSaleReader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointOfSaleReader.class);
  }

 /**
  * Convert an instance of PointOfSaleReader to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


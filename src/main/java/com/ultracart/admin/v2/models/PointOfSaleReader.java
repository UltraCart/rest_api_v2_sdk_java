/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PointOfSaleReader
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-03-07T07:37:21.076-05:00")



public class PointOfSaleReader {
  @SerializedName("device_type")
  private String deviceType = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  /**
   * The payment provider for the card reader.
   */
  @JsonAdapter(PaymentProviderEnum.Adapter.class)
  public enum PaymentProviderEnum {
    STRIPE("stripe");

    private String value;

    PaymentProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentProviderEnum fromValue(String text) {
      for (PaymentProviderEnum b : PaymentProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentProviderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("payment_provider")
  private PaymentProviderEnum paymentProvider = null;

  @SerializedName("pos_reader_id")
  private Integer posReaderId = null;

  @SerializedName("pos_register_oid")
  private Integer posRegisterOid = null;

  @SerializedName("serial_number")
  private String serialNumber = null;

  @SerializedName("stripe_account_id")
  private String stripeAccountId = null;

  @SerializedName("stripe_reader_id")
  private String stripeReaderId = null;

  public PointOfSaleReader deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

   /**
   * The device type of the reader.
   * @return deviceType
  **/
  @ApiModelProperty(value = "The device type of the reader.")
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }

  public PointOfSaleReader label(String label) {
    this.label = label;
    return this;
  }

   /**
   * The label of the reader.
   * @return label
  **/
  @ApiModelProperty(value = "The label of the reader.")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public PointOfSaleReader merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant id that owns this point of sale reader.
   * @return merchantId
  **/
  @ApiModelProperty(value = "The merchant id that owns this point of sale reader.")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public PointOfSaleReader paymentProvider(PaymentProviderEnum paymentProvider) {
    this.paymentProvider = paymentProvider;
    return this;
  }

   /**
   * The payment provider for the card reader.
   * @return paymentProvider
  **/
  @ApiModelProperty(value = "The payment provider for the card reader.")
  public PaymentProviderEnum getPaymentProvider() {
    return paymentProvider;
  }

  public void setPaymentProvider(PaymentProviderEnum paymentProvider) {
    this.paymentProvider = paymentProvider;
  }

  public PointOfSaleReader posReaderId(Integer posReaderId) {
    this.posReaderId = posReaderId;
    return this;
  }

   /**
   * Object identifier of the point of sale reader.
   * @return posReaderId
  **/
  @ApiModelProperty(value = "Object identifier of the point of sale reader.")
  public Integer getPosReaderId() {
    return posReaderId;
  }

  public void setPosReaderId(Integer posReaderId) {
    this.posReaderId = posReaderId;
  }

  public PointOfSaleReader posRegisterOid(Integer posRegisterOid) {
    this.posRegisterOid = posRegisterOid;
    return this;
  }

   /**
   * Object identifier of the point of sale register this reader is assigned to.
   * @return posRegisterOid
  **/
  @ApiModelProperty(value = "Object identifier of the point of sale register this reader is assigned to.")
  public Integer getPosRegisterOid() {
    return posRegisterOid;
  }

  public void setPosRegisterOid(Integer posRegisterOid) {
    this.posRegisterOid = posRegisterOid;
  }

  public PointOfSaleReader serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * The serial number of the reader.
   * @return serialNumber
  **/
  @ApiModelProperty(value = "The serial number of the reader.")
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public PointOfSaleReader stripeAccountId(String stripeAccountId) {
    this.stripeAccountId = stripeAccountId;
    return this;
  }

   /**
   * If the payment provider is Stripe, this is the Stripe account id
   * @return stripeAccountId
  **/
  @ApiModelProperty(value = "If the payment provider is Stripe, this is the Stripe account id")
  public String getStripeAccountId() {
    return stripeAccountId;
  }

  public void setStripeAccountId(String stripeAccountId) {
    this.stripeAccountId = stripeAccountId;
  }

  public PointOfSaleReader stripeReaderId(String stripeReaderId) {
    this.stripeReaderId = stripeReaderId;
    return this;
  }

   /**
   * If the payment provide is Stripe, this is the Stripe terminal reader id
   * @return stripeReaderId
  **/
  @ApiModelProperty(value = "If the payment provide is Stripe, this is the Stripe terminal reader id")
  public String getStripeReaderId() {
    return stripeReaderId;
  }

  public void setStripeReaderId(String stripeReaderId) {
    this.stripeReaderId = stripeReaderId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointOfSaleReader pointOfSaleReader = (PointOfSaleReader) o;
    return Objects.equals(this.deviceType, pointOfSaleReader.deviceType) &&
        Objects.equals(this.label, pointOfSaleReader.label) &&
        Objects.equals(this.merchantId, pointOfSaleReader.merchantId) &&
        Objects.equals(this.paymentProvider, pointOfSaleReader.paymentProvider) &&
        Objects.equals(this.posReaderId, pointOfSaleReader.posReaderId) &&
        Objects.equals(this.posRegisterOid, pointOfSaleReader.posRegisterOid) &&
        Objects.equals(this.serialNumber, pointOfSaleReader.serialNumber) &&
        Objects.equals(this.stripeAccountId, pointOfSaleReader.stripeAccountId) &&
        Objects.equals(this.stripeReaderId, pointOfSaleReader.stripeReaderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceType, label, merchantId, paymentProvider, posReaderId, posRegisterOid, serialNumber, stripeAccountId, stripeReaderId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointOfSaleReader {\n");
    
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    paymentProvider: ").append(toIndentedString(paymentProvider)).append("\n");
    sb.append("    posReaderId: ").append(toIndentedString(posReaderId)).append("\n");
    sb.append("    posRegisterOid: ").append(toIndentedString(posRegisterOid)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    stripeAccountId: ").append(toIndentedString(stripeAccountId)).append("\n");
    sb.append("    stripeReaderId: ").append(toIndentedString(stripeReaderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


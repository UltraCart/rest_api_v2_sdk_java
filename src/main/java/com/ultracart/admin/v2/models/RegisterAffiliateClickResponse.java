/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * RegisterAffiliateClickResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-11T14:02:08.222-04:00[America/Indianapolis]")
public class RegisterAffiliateClickResponse {
  public static final String SERIALIZED_NAME_COOKIE_MAX_AGE = "cookie_max_age";
  @SerializedName(SERIALIZED_NAME_COOKIE_MAX_AGE)
  private Integer cookieMaxAge;

  public static final String SERIALIZED_NAME_COOKIE_NAMES = "cookie_names";
  @SerializedName(SERIALIZED_NAME_COOKIE_NAMES)
  private List<String> cookieNames = null;

  public static final String SERIALIZED_NAME_COOKIE_VALUES = "cookie_values";
  @SerializedName(SERIALIZED_NAME_COOKIE_VALUES)
  private List<String> cookieValues = null;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private Boolean registered;

  public RegisterAffiliateClickResponse() { 
  }

  public RegisterAffiliateClickResponse cookieMaxAge(Integer cookieMaxAge) {
    
    this.cookieMaxAge = cookieMaxAge;
    return this;
  }

   /**
   * The cookie max age to use
   * @return cookieMaxAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cookie max age to use")

  public Integer getCookieMaxAge() {
    return cookieMaxAge;
  }


  public void setCookieMaxAge(Integer cookieMaxAge) {
    this.cookieMaxAge = cookieMaxAge;
  }


  public RegisterAffiliateClickResponse cookieNames(List<String> cookieNames) {
    
    this.cookieNames = cookieNames;
    return this;
  }

  public RegisterAffiliateClickResponse addCookieNamesItem(String cookieNamesItem) {
    if (this.cookieNames == null) {
      this.cookieNames = new ArrayList<>();
    }
    this.cookieNames.add(cookieNamesItem);
    return this;
  }

   /**
   * The names of all the cookies to set on the browser
   * @return cookieNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The names of all the cookies to set on the browser")

  public List<String> getCookieNames() {
    return cookieNames;
  }


  public void setCookieNames(List<String> cookieNames) {
    this.cookieNames = cookieNames;
  }


  public RegisterAffiliateClickResponse cookieValues(List<String> cookieValues) {
    
    this.cookieValues = cookieValues;
    return this;
  }

  public RegisterAffiliateClickResponse addCookieValuesItem(String cookieValuesItem) {
    if (this.cookieValues == null) {
      this.cookieValues = new ArrayList<>();
    }
    this.cookieValues.add(cookieValuesItem);
    return this;
  }

   /**
   * The values of all the cookies to set on the browser
   * @return cookieValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The values of all the cookies to set on the browser")

  public List<String> getCookieValues() {
    return cookieValues;
  }


  public void setCookieValues(List<String> cookieValues) {
    this.cookieValues = cookieValues;
  }


  public RegisterAffiliateClickResponse registered(Boolean registered) {
    
    this.registered = registered;
    return this;
  }

   /**
   * True if a click was registered
   * @return registered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if a click was registered")

  public Boolean getRegistered() {
    return registered;
  }


  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAffiliateClickResponse registerAffiliateClickResponse = (RegisterAffiliateClickResponse) o;
    return Objects.equals(this.cookieMaxAge, registerAffiliateClickResponse.cookieMaxAge) &&
        Objects.equals(this.cookieNames, registerAffiliateClickResponse.cookieNames) &&
        Objects.equals(this.cookieValues, registerAffiliateClickResponse.cookieValues) &&
        Objects.equals(this.registered, registerAffiliateClickResponse.registered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieMaxAge, cookieNames, cookieValues, registered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAffiliateClickResponse {\n");
    sb.append("    cookieMaxAge: ").append(toIndentedString(cookieMaxAge)).append("\n");
    sb.append("    cookieNames: ").append(toIndentedString(cookieNames)).append("\n");
    sb.append("    cookieValues: ").append(toIndentedString(cookieValues)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookie_max_age");
    openapiFields.add("cookie_names");
    openapiFields.add("cookie_values");
    openapiFields.add("registered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RegisterAffiliateClickResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (RegisterAffiliateClickResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterAffiliateClickResponse is not found in the empty JSON string", RegisterAffiliateClickResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RegisterAffiliateClickResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterAffiliateClickResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("cookie_names") != null && !jsonObj.get("cookie_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_names` to be an array in the JSON string but got `%s`", jsonObj.get("cookie_names").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("cookie_values") != null && !jsonObj.get("cookie_values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_values` to be an array in the JSON string but got `%s`", jsonObj.get("cookie_values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterAffiliateClickResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterAffiliateClickResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterAffiliateClickResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterAffiliateClickResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterAffiliateClickResponse>() {
           @Override
           public void write(JsonWriter out, RegisterAffiliateClickResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterAffiliateClickResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisterAffiliateClickResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisterAffiliateClickResponse
  * @throws IOException if the JSON string is invalid with respect to RegisterAffiliateClickResponse
  */
  public static RegisterAffiliateClickResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterAffiliateClickResponse.class);
  }

 /**
  * Convert an instance of RegisterAffiliateClickResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


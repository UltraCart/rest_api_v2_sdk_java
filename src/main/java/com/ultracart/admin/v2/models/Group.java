/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.GroupUserMembership;
import com.ultracart.admin.v2.models.Notification;
import com.ultracart.admin.v2.models.Permission;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-22T23:37:17.283-04:00[America/Indianapolis]")
public class Group {
  public static final String SERIALIZED_NAME_GROUP_OID = "group_oid";
  @SerializedName(SERIALIZED_NAME_GROUP_OID)
  private Integer groupOid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<Notification> notifications = null;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<Permission> permissions = null;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<GroupUserMembership> users = null;

  public Group() { 
  }

  public Group groupOid(Integer groupOid) {
    
    this.groupOid = groupOid;
    return this;
  }

   /**
   * The unique object identifier (oid for short) for this group
   * @return groupOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique object identifier (oid for short) for this group")

  public Integer getGroupOid() {
    return groupOid;
  }


  public void setGroupOid(Integer groupOid) {
    this.groupOid = groupOid;
  }


  public Group name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this group.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of this group.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Group notifications(List<Notification> notifications) {
    
    this.notifications = notifications;
    return this;
  }

  public Group addNotificationsItem(Notification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * A list of notifications the user receives.
   * @return notifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of notifications the user receives.")

  public List<Notification> getNotifications() {
    return notifications;
  }


  public void setNotifications(List<Notification> notifications) {
    this.notifications = notifications;
  }


  public Group permissions(List<Permission> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public Group addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * A list of permissions the user enjoys for accessing the backend of UltraCart.
   * @return permissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of permissions the user enjoys for accessing the backend of UltraCart.")

  public List<Permission> getPermissions() {
    return permissions;
  }


  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }


  public Group users(List<GroupUserMembership> users) {
    
    this.users = users;
    return this;
  }

  public Group addUsersItem(GroupUserMembership usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * A list of users that belong to this group.
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of users that belong to this group.")

  public List<GroupUserMembership> getUsers() {
    return users;
  }


  public void setUsers(List<GroupUserMembership> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.groupOid, group.groupOid) &&
        Objects.equals(this.name, group.name) &&
        Objects.equals(this.notifications, group.notifications) &&
        Objects.equals(this.permissions, group.permissions) &&
        Objects.equals(this.users, group.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupOid, name, notifications, permissions, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    groupOid: ").append(toIndentedString(groupOid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_oid");
    openapiFields.add("name");
    openapiFields.add("notifications");
    openapiFields.add("permissions");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Group
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Group.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Group.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Group` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
      if (jsonArraynotifications != null) {
        // ensure the json data is an array
        if (!jsonObj.get("notifications").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
        }

        // validate the optional field `notifications` (array)
        for (int i = 0; i < jsonArraynotifications.size(); i++) {
          Notification.validateJsonObject(jsonArraynotifications.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
      if (jsonArraypermissions != null) {
        // ensure the json data is an array
        if (!jsonObj.get("permissions").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
        }

        // validate the optional field `permissions` (array)
        for (int i = 0; i < jsonArraypermissions.size(); i++) {
          Permission.validateJsonObject(jsonArraypermissions.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
      if (jsonArrayusers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("users").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
        }

        // validate the optional field `users` (array)
        for (int i = 0; i < jsonArrayusers.size(); i++) {
          GroupUserMembership.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Group given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Group
  * @throws IOException if the JSON string is invalid with respect to Group
  */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

 /**
  * Convert an instance of Group to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


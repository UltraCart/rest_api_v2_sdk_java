/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportFilterConnection;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportFilter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-07-28T11:03:40.534-04:00")



public class ReportFilter {
  @SerializedName("connections")
  private List<ReportFilterConnection> connections = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("timezone")
  private String timezone = null;

  /**
   * Type of filter
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATE_RANGE("date range"),
    
    DATE_COMPARISON("date comparison"),
    
    SINGLE_VALUE("single value"),
    
    MULTIPLE_VALUES("multiple values");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("values")
  private List<String> values = null;

  public ReportFilter connections(List<ReportFilterConnection> connections) {
    this.connections = connections;
    return this;
  }

  public ReportFilter addConnectionsItem(ReportFilterConnection connectionsItem) {
    if (this.connections == null) {
      this.connections = new ArrayList<ReportFilterConnection>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * How this filter connects to the data sources and columns
   * @return connections
  **/
  @ApiModelProperty(value = "How this filter connects to the data sources and columns")
  public List<ReportFilterConnection> getConnections() {
    return connections;
  }

  public void setConnections(List<ReportFilterConnection> connections) {
    this.connections = connections;
  }

  public ReportFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ReportFilter timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * The timezone that the date range is querying on.
   * @return timezone
  **/
  @ApiModelProperty(value = "The timezone that the date range is querying on.")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public ReportFilter type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of filter
   * @return type
  **/
  @ApiModelProperty(value = "Type of filter")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ReportFilter uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique UUID assigned to the filter.  Assists when returning values that the filter can use.
   * @return uuid
  **/
  @ApiModelProperty(value = "Unique UUID assigned to the filter.  Assists when returning values that the filter can use.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ReportFilter values(List<String> values) {
    this.values = values;
    return this;
  }

  public ReportFilter addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<String>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * The selected values for the filter.  When used, some type conversion will need to occur.
   * @return values
  **/
  @ApiModelProperty(value = "The selected values for the filter.  When used, some type conversion will need to occur.")
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportFilter reportFilter = (ReportFilter) o;
    return Objects.equals(this.connections, reportFilter.connections) &&
        Objects.equals(this.name, reportFilter.name) &&
        Objects.equals(this.timezone, reportFilter.timezone) &&
        Objects.equals(this.type, reportFilter.type) &&
        Objects.equals(this.uuid, reportFilter.uuid) &&
        Objects.equals(this.values, reportFilter.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connections, name, timezone, type, uuid, values);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportFilter {\n");
    
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


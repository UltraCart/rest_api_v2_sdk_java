/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartSettingsShippingCalendar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-05T12:08:18.099-05:00[America/Indianapolis]")
public class CartSettingsShippingCalendar {
  public static final String SERIALIZED_NAME_BLACKOUTS = "blackouts";
  @SerializedName(SERIALIZED_NAME_BLACKOUTS)
  private List<String> blackouts = null;

  public static final String SERIALIZED_NAME_DAYS_OF_WEEK = "days_of_week";
  @SerializedName(SERIALIZED_NAME_DAYS_OF_WEEK)
  private List<Boolean> daysOfWeek = null;

  public static final String SERIALIZED_NAME_EARLIEST = "earliest";
  @SerializedName(SERIALIZED_NAME_EARLIEST)
  private String earliest;

  public static final String SERIALIZED_NAME_REQUIRE = "require";
  @SerializedName(SERIALIZED_NAME_REQUIRE)
  private Boolean require;

  public static final String SERIALIZED_NAME_SHOW = "show";
  @SerializedName(SERIALIZED_NAME_SHOW)
  private Boolean show;

  public CartSettingsShippingCalendar() { 
  }

  public CartSettingsShippingCalendar blackouts(List<String> blackouts) {
    
    this.blackouts = blackouts;
    return this;
  }

  public CartSettingsShippingCalendar addBlackoutsItem(String blackoutsItem) {
    if (this.blackouts == null) {
      this.blackouts = new ArrayList<>();
    }
    this.blackouts.add(blackoutsItem);
    return this;
  }

   /**
   * Specified dates that are blacked out on the calendar in ISO8601 format
   * @return blackouts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specified dates that are blacked out on the calendar in ISO8601 format")

  public List<String> getBlackouts() {
    return blackouts;
  }


  public void setBlackouts(List<String> blackouts) {
    this.blackouts = blackouts;
  }


  public CartSettingsShippingCalendar daysOfWeek(List<Boolean> daysOfWeek) {
    
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  public CartSettingsShippingCalendar addDaysOfWeekItem(Boolean daysOfWeekItem) {
    if (this.daysOfWeek == null) {
      this.daysOfWeek = new ArrayList<>();
    }
    this.daysOfWeek.add(daysOfWeekItem);
    return this;
  }

   /**
   * Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)
   * @return daysOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Days of week that should be enabled on the calendar (0 - Sunday through 6 - Saturday)")

  public List<Boolean> getDaysOfWeek() {
    return daysOfWeek;
  }


  public void setDaysOfWeek(List<Boolean> daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
  }


  public CartSettingsShippingCalendar earliest(String earliest) {
    
    this.earliest = earliest;
    return this;
  }

   /**
   * The earliest date that can be selected on the calendar
   * @return earliest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The earliest date that can be selected on the calendar")

  public String getEarliest() {
    return earliest;
  }


  public void setEarliest(String earliest) {
    this.earliest = earliest;
  }


  public CartSettingsShippingCalendar require(Boolean require) {
    
    this.require = require;
    return this;
  }

   /**
   * True if the customer is required to select a date
   * @return require
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer is required to select a date")

  public Boolean getRequire() {
    return require;
  }


  public void setRequire(Boolean require) {
    this.require = require;
  }


  public CartSettingsShippingCalendar show(Boolean show) {
    
    this.show = show;
    return this;
  }

   /**
   * True if this calendar should be shown to the customer
   * @return show
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this calendar should be shown to the customer")

  public Boolean getShow() {
    return show;
  }


  public void setShow(Boolean show) {
    this.show = show;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSettingsShippingCalendar cartSettingsShippingCalendar = (CartSettingsShippingCalendar) o;
    return Objects.equals(this.blackouts, cartSettingsShippingCalendar.blackouts) &&
        Objects.equals(this.daysOfWeek, cartSettingsShippingCalendar.daysOfWeek) &&
        Objects.equals(this.earliest, cartSettingsShippingCalendar.earliest) &&
        Objects.equals(this.require, cartSettingsShippingCalendar.require) &&
        Objects.equals(this.show, cartSettingsShippingCalendar.show);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blackouts, daysOfWeek, earliest, require, show);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSettingsShippingCalendar {\n");
    sb.append("    blackouts: ").append(toIndentedString(blackouts)).append("\n");
    sb.append("    daysOfWeek: ").append(toIndentedString(daysOfWeek)).append("\n");
    sb.append("    earliest: ").append(toIndentedString(earliest)).append("\n");
    sb.append("    require: ").append(toIndentedString(require)).append("\n");
    sb.append("    show: ").append(toIndentedString(show)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blackouts");
    openapiFields.add("days_of_week");
    openapiFields.add("earliest");
    openapiFields.add("require");
    openapiFields.add("show");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartSettingsShippingCalendar
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartSettingsShippingCalendar.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSettingsShippingCalendar is not found in the empty JSON string", CartSettingsShippingCalendar.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartSettingsShippingCalendar.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSettingsShippingCalendar` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("blackouts") != null && !jsonObj.get("blackouts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blackouts` to be an array in the JSON string but got `%s`", jsonObj.get("blackouts").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("days_of_week") != null && !jsonObj.get("days_of_week").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days_of_week` to be an array in the JSON string but got `%s`", jsonObj.get("days_of_week").toString()));
      }
      if (jsonObj.get("earliest") != null && !jsonObj.get("earliest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earliest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earliest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSettingsShippingCalendar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSettingsShippingCalendar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSettingsShippingCalendar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSettingsShippingCalendar.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSettingsShippingCalendar>() {
           @Override
           public void write(JsonWriter out, CartSettingsShippingCalendar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSettingsShippingCalendar read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSettingsShippingCalendar given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSettingsShippingCalendar
  * @throws IOException if the JSON string is invalid with respect to CartSettingsShippingCalendar
  */
  public static CartSettingsShippingCalendar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSettingsShippingCalendar.class);
  }

 /**
  * Convert an instance of CartSettingsShippingCalendar to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


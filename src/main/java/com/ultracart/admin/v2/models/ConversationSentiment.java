/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationSentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-07T01:56:11.152-05:00[America/Indianapolis]")
public class ConversationSentiment {
  public static final String SERIALIZED_NAME_LAST_DETECT_SENTIMENT = "last_detect_sentiment";
  @SerializedName(SERIALIZED_NAME_LAST_DETECT_SENTIMENT)
  private String lastDetectSentiment;

  public static final String SERIALIZED_NAME_MIXED = "mixed";
  @SerializedName(SERIALIZED_NAME_MIXED)
  private BigDecimal mixed;

  public static final String SERIALIZED_NAME_NEGATIVE = "negative";
  @SerializedName(SERIALIZED_NAME_NEGATIVE)
  private BigDecimal negative;

  public static final String SERIALIZED_NAME_NEUTRAL = "neutral";
  @SerializedName(SERIALIZED_NAME_NEUTRAL)
  private BigDecimal neutral;

  public static final String SERIALIZED_NAME_POSITIVE = "positive";
  @SerializedName(SERIALIZED_NAME_POSITIVE)
  private BigDecimal positive;

  /**
   * The overall sentiment
   */
  @JsonAdapter(SentimentEnum.Adapter.class)
  public enum SentimentEnum {
    POSITIVE("POSITIVE"),
    
    NEUTRAL("NEUTRAL"),
    
    NEGATIVE("NEGATIVE"),
    
    MIXED("MIXED");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentEnum fromValue(String value) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private SentimentEnum sentiment;

  public ConversationSentiment() { 
  }

  public ConversationSentiment lastDetectSentiment(String lastDetectSentiment) {
    
    this.lastDetectSentiment = lastDetectSentiment;
    return this;
  }

   /**
   * The last time the detect sentiment was run on this conversation
   * @return lastDetectSentiment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last time the detect sentiment was run on this conversation")

  public String getLastDetectSentiment() {
    return lastDetectSentiment;
  }


  public void setLastDetectSentiment(String lastDetectSentiment) {
    this.lastDetectSentiment = lastDetectSentiment;
  }


  public ConversationSentiment mixed(BigDecimal mixed) {
    
    this.mixed = mixed;
    return this;
  }

   /**
   * The mixed score
   * @return mixed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mixed score")

  public BigDecimal getMixed() {
    return mixed;
  }


  public void setMixed(BigDecimal mixed) {
    this.mixed = mixed;
  }


  public ConversationSentiment negative(BigDecimal negative) {
    
    this.negative = negative;
    return this;
  }

   /**
   * The negative score
   * @return negative
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The negative score")

  public BigDecimal getNegative() {
    return negative;
  }


  public void setNegative(BigDecimal negative) {
    this.negative = negative;
  }


  public ConversationSentiment neutral(BigDecimal neutral) {
    
    this.neutral = neutral;
    return this;
  }

   /**
   * The neutral score
   * @return neutral
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The neutral score")

  public BigDecimal getNeutral() {
    return neutral;
  }


  public void setNeutral(BigDecimal neutral) {
    this.neutral = neutral;
  }


  public ConversationSentiment positive(BigDecimal positive) {
    
    this.positive = positive;
    return this;
  }

   /**
   * The positive score
   * @return positive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The positive score")

  public BigDecimal getPositive() {
    return positive;
  }


  public void setPositive(BigDecimal positive) {
    this.positive = positive;
  }


  public ConversationSentiment sentiment(SentimentEnum sentiment) {
    
    this.sentiment = sentiment;
    return this;
  }

   /**
   * The overall sentiment
   * @return sentiment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The overall sentiment")

  public SentimentEnum getSentiment() {
    return sentiment;
  }


  public void setSentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationSentiment conversationSentiment = (ConversationSentiment) o;
    return Objects.equals(this.lastDetectSentiment, conversationSentiment.lastDetectSentiment) &&
        Objects.equals(this.mixed, conversationSentiment.mixed) &&
        Objects.equals(this.negative, conversationSentiment.negative) &&
        Objects.equals(this.neutral, conversationSentiment.neutral) &&
        Objects.equals(this.positive, conversationSentiment.positive) &&
        Objects.equals(this.sentiment, conversationSentiment.sentiment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastDetectSentiment, mixed, negative, neutral, positive, sentiment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationSentiment {\n");
    sb.append("    lastDetectSentiment: ").append(toIndentedString(lastDetectSentiment)).append("\n");
    sb.append("    mixed: ").append(toIndentedString(mixed)).append("\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("    neutral: ").append(toIndentedString(neutral)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_detect_sentiment");
    openapiFields.add("mixed");
    openapiFields.add("negative");
    openapiFields.add("neutral");
    openapiFields.add("positive");
    openapiFields.add("sentiment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationSentiment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationSentiment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationSentiment is not found in the empty JSON string", ConversationSentiment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationSentiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationSentiment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("last_detect_sentiment") != null && !jsonObj.get("last_detect_sentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_detect_sentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_detect_sentiment").toString()));
      }
      if (jsonObj.get("sentiment") != null && !jsonObj.get("sentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationSentiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationSentiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationSentiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationSentiment.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationSentiment>() {
           @Override
           public void write(JsonWriter out, ConversationSentiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationSentiment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationSentiment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationSentiment
  * @throws IOException if the JSON string is invalid with respect to ConversationSentiment
  */
  public static ConversationSentiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationSentiment.class);
  }

 /**
  * Convert an instance of ConversationSentiment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


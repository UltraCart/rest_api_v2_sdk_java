/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * ConversationSentiment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-04-16T14:51:12.703-04:00")



public class ConversationSentiment {
  @SerializedName("last_detect_sentiment")
  private String lastDetectSentiment = null;

  @SerializedName("mixed")
  private BigDecimal mixed = null;

  @SerializedName("negative")
  private BigDecimal negative = null;

  @SerializedName("neutral")
  private BigDecimal neutral = null;

  @SerializedName("positive")
  private BigDecimal positive = null;

  /**
   * The overall sentiment
   */
  @JsonAdapter(SentimentEnum.Adapter.class)
  public enum SentimentEnum {
    POSITIVE("POSITIVE"),
    
    NEUTRAL("NEUTRAL"),
    
    NEGATIVE("NEGATIVE"),
    
    MIXED("MIXED");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentEnum fromValue(String text) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SentimentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SentimentEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sentiment")
  private SentimentEnum sentiment = null;

  public ConversationSentiment lastDetectSentiment(String lastDetectSentiment) {
    this.lastDetectSentiment = lastDetectSentiment;
    return this;
  }

   /**
   * The last time the detect sentiment was run on this conversation
   * @return lastDetectSentiment
  **/
  @ApiModelProperty(value = "The last time the detect sentiment was run on this conversation")
  public String getLastDetectSentiment() {
    return lastDetectSentiment;
  }

  public void setLastDetectSentiment(String lastDetectSentiment) {
    this.lastDetectSentiment = lastDetectSentiment;
  }

  public ConversationSentiment mixed(BigDecimal mixed) {
    this.mixed = mixed;
    return this;
  }

   /**
   * The mixed score
   * @return mixed
  **/
  @ApiModelProperty(value = "The mixed score")
  public BigDecimal getMixed() {
    return mixed;
  }

  public void setMixed(BigDecimal mixed) {
    this.mixed = mixed;
  }

  public ConversationSentiment negative(BigDecimal negative) {
    this.negative = negative;
    return this;
  }

   /**
   * The negative score
   * @return negative
  **/
  @ApiModelProperty(value = "The negative score")
  public BigDecimal getNegative() {
    return negative;
  }

  public void setNegative(BigDecimal negative) {
    this.negative = negative;
  }

  public ConversationSentiment neutral(BigDecimal neutral) {
    this.neutral = neutral;
    return this;
  }

   /**
   * The neutral score
   * @return neutral
  **/
  @ApiModelProperty(value = "The neutral score")
  public BigDecimal getNeutral() {
    return neutral;
  }

  public void setNeutral(BigDecimal neutral) {
    this.neutral = neutral;
  }

  public ConversationSentiment positive(BigDecimal positive) {
    this.positive = positive;
    return this;
  }

   /**
   * The positive score
   * @return positive
  **/
  @ApiModelProperty(value = "The positive score")
  public BigDecimal getPositive() {
    return positive;
  }

  public void setPositive(BigDecimal positive) {
    this.positive = positive;
  }

  public ConversationSentiment sentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
    return this;
  }

   /**
   * The overall sentiment
   * @return sentiment
  **/
  @ApiModelProperty(value = "The overall sentiment")
  public SentimentEnum getSentiment() {
    return sentiment;
  }

  public void setSentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationSentiment conversationSentiment = (ConversationSentiment) o;
    return Objects.equals(this.lastDetectSentiment, conversationSentiment.lastDetectSentiment) &&
        Objects.equals(this.mixed, conversationSentiment.mixed) &&
        Objects.equals(this.negative, conversationSentiment.negative) &&
        Objects.equals(this.neutral, conversationSentiment.neutral) &&
        Objects.equals(this.positive, conversationSentiment.positive) &&
        Objects.equals(this.sentiment, conversationSentiment.sentiment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastDetectSentiment, mixed, negative, neutral, positive, sentiment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationSentiment {\n");
    
    sb.append("    lastDetectSentiment: ").append(toIndentedString(lastDetectSentiment)).append("\n");
    sb.append("    mixed: ").append(toIndentedString(mixed)).append("\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("    neutral: ").append(toIndentedString(neutral)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CouponFreeItemWithItemPurchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-02T15:19:53.558-04:00[America/Indianapolis]")
public class CouponFreeItemWithItemPurchase {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<String> items = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_MATCH_REQUIRED_PURCHASE_ITEM_TO_FREE_ITEM = "match_required_purchase_item_to_free_item";
  @SerializedName(SERIALIZED_NAME_MATCH_REQUIRED_PURCHASE_ITEM_TO_FREE_ITEM)
  private Boolean matchRequiredPurchaseItemToFreeItem;

  public static final String SERIALIZED_NAME_REQUIRED_PURCHASE_ITEMS = "required_purchase_items";
  @SerializedName(SERIALIZED_NAME_REQUIRED_PURCHASE_ITEMS)
  private List<String> requiredPurchaseItems = null;

  public CouponFreeItemWithItemPurchase() { 
  }

  public CouponFreeItemWithItemPurchase items(List<String> items) {
    
    this.items = items;
    return this;
  }

  public CouponFreeItemWithItemPurchase addItemsItem(String itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * A list of free items which will receive a discount if one of the required purchase items is purchased.
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of free items which will receive a discount if one of the required purchase items is purchased.")

  public List<String> getItems() {
    return items;
  }


  public void setItems(List<String> items) {
    this.items = items;
  }


  public CouponFreeItemWithItemPurchase limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * The (optional) maximum quantity of discounted items.
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The (optional) maximum quantity of discounted items.")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public CouponFreeItemWithItemPurchase matchRequiredPurchaseItemToFreeItem(Boolean matchRequiredPurchaseItemToFreeItem) {
    
    this.matchRequiredPurchaseItemToFreeItem = matchRequiredPurchaseItemToFreeItem;
    return this;
  }

   /**
   * If true then the free item is matched 1:1 with the free item in the list.
   * @return matchRequiredPurchaseItemToFreeItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true then the free item is matched 1:1 with the free item in the list.")

  public Boolean getMatchRequiredPurchaseItemToFreeItem() {
    return matchRequiredPurchaseItemToFreeItem;
  }


  public void setMatchRequiredPurchaseItemToFreeItem(Boolean matchRequiredPurchaseItemToFreeItem) {
    this.matchRequiredPurchaseItemToFreeItem = matchRequiredPurchaseItemToFreeItem;
  }


  public CouponFreeItemWithItemPurchase requiredPurchaseItems(List<String> requiredPurchaseItems) {
    
    this.requiredPurchaseItems = requiredPurchaseItems;
    return this;
  }

  public CouponFreeItemWithItemPurchase addRequiredPurchaseItemsItem(String requiredPurchaseItemsItem) {
    if (this.requiredPurchaseItems == null) {
      this.requiredPurchaseItems = new ArrayList<>();
    }
    this.requiredPurchaseItems.add(requiredPurchaseItemsItem);
    return this;
  }

   /**
   * Required items (at least one from the list) that must be purchased for coupon to be valid
   * @return requiredPurchaseItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required items (at least one from the list) that must be purchased for coupon to be valid")

  public List<String> getRequiredPurchaseItems() {
    return requiredPurchaseItems;
  }


  public void setRequiredPurchaseItems(List<String> requiredPurchaseItems) {
    this.requiredPurchaseItems = requiredPurchaseItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponFreeItemWithItemPurchase couponFreeItemWithItemPurchase = (CouponFreeItemWithItemPurchase) o;
    return Objects.equals(this.items, couponFreeItemWithItemPurchase.items) &&
        Objects.equals(this.limit, couponFreeItemWithItemPurchase.limit) &&
        Objects.equals(this.matchRequiredPurchaseItemToFreeItem, couponFreeItemWithItemPurchase.matchRequiredPurchaseItemToFreeItem) &&
        Objects.equals(this.requiredPurchaseItems, couponFreeItemWithItemPurchase.requiredPurchaseItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, limit, matchRequiredPurchaseItemToFreeItem, requiredPurchaseItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponFreeItemWithItemPurchase {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    matchRequiredPurchaseItemToFreeItem: ").append(toIndentedString(matchRequiredPurchaseItemToFreeItem)).append("\n");
    sb.append("    requiredPurchaseItems: ").append(toIndentedString(requiredPurchaseItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("limit");
    openapiFields.add("match_required_purchase_item_to_free_item");
    openapiFields.add("required_purchase_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CouponFreeItemWithItemPurchase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CouponFreeItemWithItemPurchase.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponFreeItemWithItemPurchase is not found in the empty JSON string", CouponFreeItemWithItemPurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CouponFreeItemWithItemPurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponFreeItemWithItemPurchase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("required_purchase_items") != null && !jsonObj.get("required_purchase_items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_purchase_items` to be an array in the JSON string but got `%s`", jsonObj.get("required_purchase_items").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponFreeItemWithItemPurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponFreeItemWithItemPurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponFreeItemWithItemPurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponFreeItemWithItemPurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponFreeItemWithItemPurchase>() {
           @Override
           public void write(JsonWriter out, CouponFreeItemWithItemPurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponFreeItemWithItemPurchase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CouponFreeItemWithItemPurchase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CouponFreeItemWithItemPurchase
  * @throws IOException if the JSON string is invalid with respect to CouponFreeItemWithItemPurchase
  */
  public static CouponFreeItemWithItemPurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponFreeItemWithItemPurchase.class);
  }

 /**
  * Convert an instance of CouponFreeItemWithItemPurchase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


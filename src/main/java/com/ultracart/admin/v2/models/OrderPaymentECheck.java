/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderPaymentECheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:21:52.957-04:00[America/Indianapolis]")
public class OrderPaymentECheck {
  public static final String SERIALIZED_NAME_BANK_ABA_CODE = "bank_aba_code";
  @SerializedName(SERIALIZED_NAME_BANK_ABA_CODE)
  private String bankAbaCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NAME = "bank_account_name";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NAME)
  private String bankAccountName;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bank_account_number";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  /**
   * Bank account type
   */
  @JsonAdapter(BankAccountTypeEnum.Adapter.class)
  public enum BankAccountTypeEnum {
    CHECKING("Checking"),
    
    SAVINGS("Savings");

    private String value;

    BankAccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankAccountTypeEnum fromValue(String value) {
      for (BankAccountTypeEnum b : BankAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BankAccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankAccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BankAccountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_TYPE = "bank_account_type";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_TYPE)
  private BankAccountTypeEnum bankAccountType;

  public static final String SERIALIZED_NAME_BANK_NAME = "bank_name";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  /**
   * Bank owner type
   */
  @JsonAdapter(BankOwnerTypeEnum.Adapter.class)
  public enum BankOwnerTypeEnum {
    PERSONAL("Personal"),
    
    BUSINESS("Business");

    private String value;

    BankOwnerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankOwnerTypeEnum fromValue(String value) {
      for (BankOwnerTypeEnum b : BankOwnerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BankOwnerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankOwnerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankOwnerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BankOwnerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BANK_OWNER_TYPE = "bank_owner_type";
  @SerializedName(SERIALIZED_NAME_BANK_OWNER_TYPE)
  private BankOwnerTypeEnum bankOwnerType;

  public static final String SERIALIZED_NAME_CUSTOMER_TAX_ID = "customer_tax_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TAX_ID)
  private String customerTaxId;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE_DOB = "drivers_license_dob";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE_DOB)
  private String driversLicenseDob;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE_NUMBER = "drivers_license_number";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE_NUMBER)
  private String driversLicenseNumber;

  public static final String SERIALIZED_NAME_DRIVERS_LICENSE_STATE = "drivers_license_state";
  @SerializedName(SERIALIZED_NAME_DRIVERS_LICENSE_STATE)
  private String driversLicenseState;

  public OrderPaymentECheck() { 
  }

  public OrderPaymentECheck bankAbaCode(String bankAbaCode) {
    
    this.bankAbaCode = bankAbaCode;
    return this;
  }

   /**
   * Bank routing code
   * @return bankAbaCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank routing code")

  public String getBankAbaCode() {
    return bankAbaCode;
  }


  public void setBankAbaCode(String bankAbaCode) {
    this.bankAbaCode = bankAbaCode;
  }


  public OrderPaymentECheck bankAccountName(String bankAccountName) {
    
    this.bankAccountName = bankAccountName;
    return this;
  }

   /**
   * Bank account name
   * @return bankAccountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account name")

  public String getBankAccountName() {
    return bankAccountName;
  }


  public void setBankAccountName(String bankAccountName) {
    this.bankAccountName = bankAccountName;
  }


  public OrderPaymentECheck bankAccountNumber(String bankAccountNumber) {
    
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Bank account number (masked to last 4)
   * @return bankAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account number (masked to last 4)")

  public String getBankAccountNumber() {
    return bankAccountNumber;
  }


  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }


  public OrderPaymentECheck bankAccountType(BankAccountTypeEnum bankAccountType) {
    
    this.bankAccountType = bankAccountType;
    return this;
  }

   /**
   * Bank account type
   * @return bankAccountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank account type")

  public BankAccountTypeEnum getBankAccountType() {
    return bankAccountType;
  }


  public void setBankAccountType(BankAccountTypeEnum bankAccountType) {
    this.bankAccountType = bankAccountType;
  }


  public OrderPaymentECheck bankName(String bankName) {
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Bank name
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank name")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    this.bankName = bankName;
  }


  public OrderPaymentECheck bankOwnerType(BankOwnerTypeEnum bankOwnerType) {
    
    this.bankOwnerType = bankOwnerType;
    return this;
  }

   /**
   * Bank owner type
   * @return bankOwnerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank owner type")

  public BankOwnerTypeEnum getBankOwnerType() {
    return bankOwnerType;
  }


  public void setBankOwnerType(BankOwnerTypeEnum bankOwnerType) {
    this.bankOwnerType = bankOwnerType;
  }


  public OrderPaymentECheck customerTaxId(String customerTaxId) {
    
    this.customerTaxId = customerTaxId;
    return this;
  }

   /**
   * Customer tax id (masked to last 4)
   * @return customerTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customer tax id (masked to last 4)")

  public String getCustomerTaxId() {
    return customerTaxId;
  }


  public void setCustomerTaxId(String customerTaxId) {
    this.customerTaxId = customerTaxId;
  }


  public OrderPaymentECheck driversLicenseDob(String driversLicenseDob) {
    
    this.driversLicenseDob = driversLicenseDob;
    return this;
  }

   /**
   * Driver license date of birth
   * @return driversLicenseDob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Driver license date of birth")

  public String getDriversLicenseDob() {
    return driversLicenseDob;
  }


  public void setDriversLicenseDob(String driversLicenseDob) {
    this.driversLicenseDob = driversLicenseDob;
  }


  public OrderPaymentECheck driversLicenseNumber(String driversLicenseNumber) {
    
    this.driversLicenseNumber = driversLicenseNumber;
    return this;
  }

   /**
   * Driver license number (masked to last 4)
   * @return driversLicenseNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Driver license number (masked to last 4)")

  public String getDriversLicenseNumber() {
    return driversLicenseNumber;
  }


  public void setDriversLicenseNumber(String driversLicenseNumber) {
    this.driversLicenseNumber = driversLicenseNumber;
  }


  public OrderPaymentECheck driversLicenseState(String driversLicenseState) {
    
    this.driversLicenseState = driversLicenseState;
    return this;
  }

   /**
   * Driver license state
   * @return driversLicenseState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Driver license state")

  public String getDriversLicenseState() {
    return driversLicenseState;
  }


  public void setDriversLicenseState(String driversLicenseState) {
    this.driversLicenseState = driversLicenseState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPaymentECheck orderPaymentECheck = (OrderPaymentECheck) o;
    return Objects.equals(this.bankAbaCode, orderPaymentECheck.bankAbaCode) &&
        Objects.equals(this.bankAccountName, orderPaymentECheck.bankAccountName) &&
        Objects.equals(this.bankAccountNumber, orderPaymentECheck.bankAccountNumber) &&
        Objects.equals(this.bankAccountType, orderPaymentECheck.bankAccountType) &&
        Objects.equals(this.bankName, orderPaymentECheck.bankName) &&
        Objects.equals(this.bankOwnerType, orderPaymentECheck.bankOwnerType) &&
        Objects.equals(this.customerTaxId, orderPaymentECheck.customerTaxId) &&
        Objects.equals(this.driversLicenseDob, orderPaymentECheck.driversLicenseDob) &&
        Objects.equals(this.driversLicenseNumber, orderPaymentECheck.driversLicenseNumber) &&
        Objects.equals(this.driversLicenseState, orderPaymentECheck.driversLicenseState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAbaCode, bankAccountName, bankAccountNumber, bankAccountType, bankName, bankOwnerType, customerTaxId, driversLicenseDob, driversLicenseNumber, driversLicenseState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPaymentECheck {\n");
    sb.append("    bankAbaCode: ").append(toIndentedString(bankAbaCode)).append("\n");
    sb.append("    bankAccountName: ").append(toIndentedString(bankAccountName)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankAccountType: ").append(toIndentedString(bankAccountType)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankOwnerType: ").append(toIndentedString(bankOwnerType)).append("\n");
    sb.append("    customerTaxId: ").append(toIndentedString(customerTaxId)).append("\n");
    sb.append("    driversLicenseDob: ").append(toIndentedString(driversLicenseDob)).append("\n");
    sb.append("    driversLicenseNumber: ").append(toIndentedString(driversLicenseNumber)).append("\n");
    sb.append("    driversLicenseState: ").append(toIndentedString(driversLicenseState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bank_aba_code");
    openapiFields.add("bank_account_name");
    openapiFields.add("bank_account_number");
    openapiFields.add("bank_account_type");
    openapiFields.add("bank_name");
    openapiFields.add("bank_owner_type");
    openapiFields.add("customer_tax_id");
    openapiFields.add("drivers_license_dob");
    openapiFields.add("drivers_license_number");
    openapiFields.add("drivers_license_state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderPaymentECheck
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderPaymentECheck.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPaymentECheck is not found in the empty JSON string", OrderPaymentECheck.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderPaymentECheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPaymentECheck` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("bank_aba_code") != null && !jsonObj.get("bank_aba_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_aba_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_aba_code").toString()));
      }
      if (jsonObj.get("bank_account_name") != null && !jsonObj.get("bank_account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_account_name").toString()));
      }
      if (jsonObj.get("bank_account_number") != null && !jsonObj.get("bank_account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_account_number").toString()));
      }
      if (jsonObj.get("bank_account_type") != null && !jsonObj.get("bank_account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_account_type").toString()));
      }
      if (jsonObj.get("bank_name") != null && !jsonObj.get("bank_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_name").toString()));
      }
      if (jsonObj.get("bank_owner_type") != null && !jsonObj.get("bank_owner_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_owner_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_owner_type").toString()));
      }
      if (jsonObj.get("customer_tax_id") != null && !jsonObj.get("customer_tax_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_tax_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_tax_id").toString()));
      }
      if (jsonObj.get("drivers_license_dob") != null && !jsonObj.get("drivers_license_dob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivers_license_dob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivers_license_dob").toString()));
      }
      if (jsonObj.get("drivers_license_number") != null && !jsonObj.get("drivers_license_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivers_license_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivers_license_number").toString()));
      }
      if (jsonObj.get("drivers_license_state") != null && !jsonObj.get("drivers_license_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `drivers_license_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("drivers_license_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPaymentECheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPaymentECheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPaymentECheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPaymentECheck.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPaymentECheck>() {
           @Override
           public void write(JsonWriter out, OrderPaymentECheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPaymentECheck read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderPaymentECheck given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderPaymentECheck
  * @throws IOException if the JSON string is invalid with respect to OrderPaymentECheck
  */
  public static OrderPaymentECheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPaymentECheck.class);
  }

 /**
  * Convert an instance of OrderPaymentECheck to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


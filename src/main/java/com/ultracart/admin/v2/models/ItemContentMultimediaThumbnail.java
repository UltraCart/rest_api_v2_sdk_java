/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemContentMultimediaThumbnail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:19:44.125-04:00[America/Indianapolis]")
public class ItemContentMultimediaThumbnail {
  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HTTP_URL = "http_url";
  @SerializedName(SERIALIZED_NAME_HTTP_URL)
  private String httpUrl;

  public static final String SERIALIZED_NAME_HTTPS_URL = "https_url";
  @SerializedName(SERIALIZED_NAME_HTTPS_URL)
  private String httpsUrl;

  public static final String SERIALIZED_NAME_PNG_FORMAT = "png_format";
  @SerializedName(SERIALIZED_NAME_PNG_FORMAT)
  private Boolean pngFormat;

  public static final String SERIALIZED_NAME_SQUARE = "square";
  @SerializedName(SERIALIZED_NAME_SQUARE)
  private Boolean square;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public ItemContentMultimediaThumbnail() { 
  }

  public ItemContentMultimediaThumbnail height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * Height of the thumbnail
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Height of the thumbnail")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public ItemContentMultimediaThumbnail httpUrl(String httpUrl) {
    
    this.httpUrl = httpUrl;
    return this;
  }

   /**
   * HTTP URL to view the thumbnail
   * @return httpUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HTTP URL to view the thumbnail")

  public String getHttpUrl() {
    return httpUrl;
  }


  public void setHttpUrl(String httpUrl) {
    this.httpUrl = httpUrl;
  }


  public ItemContentMultimediaThumbnail httpsUrl(String httpsUrl) {
    
    this.httpsUrl = httpsUrl;
    return this;
  }

   /**
   * HTTPS URL to view the thumbnail
   * @return httpsUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "HTTPS URL to view the thumbnail")

  public String getHttpsUrl() {
    return httpsUrl;
  }


  public void setHttpsUrl(String httpsUrl) {
    this.httpsUrl = httpsUrl;
  }


  public ItemContentMultimediaThumbnail pngFormat(Boolean pngFormat) {
    
    this.pngFormat = pngFormat;
    return this;
  }

   /**
   * True if PNG, false if JPEG
   * @return pngFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if PNG, false if JPEG")

  public Boolean getPngFormat() {
    return pngFormat;
  }


  public void setPngFormat(Boolean pngFormat) {
    this.pngFormat = pngFormat;
  }


  public ItemContentMultimediaThumbnail square(Boolean square) {
    
    this.square = square;
    return this;
  }

   /**
   * True if the thumbnail is square
   * @return square
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the thumbnail is square")

  public Boolean getSquare() {
    return square;
  }


  public void setSquare(Boolean square) {
    this.square = square;
  }


  public ItemContentMultimediaThumbnail width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * Width of the thumbnail
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Width of the thumbnail")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemContentMultimediaThumbnail itemContentMultimediaThumbnail = (ItemContentMultimediaThumbnail) o;
    return Objects.equals(this.height, itemContentMultimediaThumbnail.height) &&
        Objects.equals(this.httpUrl, itemContentMultimediaThumbnail.httpUrl) &&
        Objects.equals(this.httpsUrl, itemContentMultimediaThumbnail.httpsUrl) &&
        Objects.equals(this.pngFormat, itemContentMultimediaThumbnail.pngFormat) &&
        Objects.equals(this.square, itemContentMultimediaThumbnail.square) &&
        Objects.equals(this.width, itemContentMultimediaThumbnail.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, httpUrl, httpsUrl, pngFormat, square, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemContentMultimediaThumbnail {\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    httpUrl: ").append(toIndentedString(httpUrl)).append("\n");
    sb.append("    httpsUrl: ").append(toIndentedString(httpsUrl)).append("\n");
    sb.append("    pngFormat: ").append(toIndentedString(pngFormat)).append("\n");
    sb.append("    square: ").append(toIndentedString(square)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("height");
    openapiFields.add("http_url");
    openapiFields.add("https_url");
    openapiFields.add("png_format");
    openapiFields.add("square");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemContentMultimediaThumbnail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemContentMultimediaThumbnail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemContentMultimediaThumbnail is not found in the empty JSON string", ItemContentMultimediaThumbnail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemContentMultimediaThumbnail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemContentMultimediaThumbnail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("http_url") != null && !jsonObj.get("http_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_url").toString()));
      }
      if (jsonObj.get("https_url") != null && !jsonObj.get("https_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `https_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("https_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemContentMultimediaThumbnail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemContentMultimediaThumbnail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemContentMultimediaThumbnail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemContentMultimediaThumbnail.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemContentMultimediaThumbnail>() {
           @Override
           public void write(JsonWriter out, ItemContentMultimediaThumbnail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemContentMultimediaThumbnail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemContentMultimediaThumbnail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemContentMultimediaThumbnail
  * @throws IOException if the JSON string is invalid with respect to ItemContentMultimediaThumbnail
  */
  public static ItemContentMultimediaThumbnail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemContentMultimediaThumbnail.class);
  }

 /**
  * Convert an instance of ItemContentMultimediaThumbnail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


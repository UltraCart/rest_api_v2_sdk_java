/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ScreenRecordingFilterStringSearch
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-09-21T10:48:32.913-04:00")



public class ScreenRecordingFilterStringSearch {
  @SerializedName("does_not_exist")
  private Boolean doesNotExist = null;

  @SerializedName("exists")
  private Boolean exists = null;

  @SerializedName("is")
  private String is = null;

  @SerializedName("is_not")
  private String isNot = null;

  @SerializedName("starts_with")
  private String startsWith = null;

  public ScreenRecordingFilterStringSearch doesNotExist(Boolean doesNotExist) {
    this.doesNotExist = doesNotExist;
    return this;
  }

   /**
   * Get doesNotExist
   * @return doesNotExist
  **/
  @ApiModelProperty(value = "")
  public Boolean isDoesNotExist() {
    return doesNotExist;
  }

  public void setDoesNotExist(Boolean doesNotExist) {
    this.doesNotExist = doesNotExist;
  }

  public ScreenRecordingFilterStringSearch exists(Boolean exists) {
    this.exists = exists;
    return this;
  }

   /**
   * Get exists
   * @return exists
  **/
  @ApiModelProperty(value = "")
  public Boolean isExists() {
    return exists;
  }

  public void setExists(Boolean exists) {
    this.exists = exists;
  }

  public ScreenRecordingFilterStringSearch is(String is) {
    this.is = is;
    return this;
  }

   /**
   * Get is
   * @return is
  **/
  @ApiModelProperty(value = "")
  public String getIs() {
    return is;
  }

  public void setIs(String is) {
    this.is = is;
  }

  public ScreenRecordingFilterStringSearch isNot(String isNot) {
    this.isNot = isNot;
    return this;
  }

   /**
   * Get isNot
   * @return isNot
  **/
  @ApiModelProperty(value = "")
  public String getIsNot() {
    return isNot;
  }

  public void setIsNot(String isNot) {
    this.isNot = isNot;
  }

  public ScreenRecordingFilterStringSearch startsWith(String startsWith) {
    this.startsWith = startsWith;
    return this;
  }

   /**
   * Get startsWith
   * @return startsWith
  **/
  @ApiModelProperty(value = "")
  public String getStartsWith() {
    return startsWith;
  }

  public void setStartsWith(String startsWith) {
    this.startsWith = startsWith;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingFilterStringSearch screenRecordingFilterStringSearch = (ScreenRecordingFilterStringSearch) o;
    return Objects.equals(this.doesNotExist, screenRecordingFilterStringSearch.doesNotExist) &&
        Objects.equals(this.exists, screenRecordingFilterStringSearch.exists) &&
        Objects.equals(this.is, screenRecordingFilterStringSearch.is) &&
        Objects.equals(this.isNot, screenRecordingFilterStringSearch.isNot) &&
        Objects.equals(this.startsWith, screenRecordingFilterStringSearch.startsWith);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doesNotExist, exists, is, isNot, startsWith);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingFilterStringSearch {\n");
    
    sb.append("    doesNotExist: ").append(toIndentedString(doesNotExist)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    is: ").append(toIndentedString(is)).append("\n");
    sb.append("    isNot: ").append(toIndentedString(isNot)).append("\n");
    sb.append("    startsWith: ").append(toIndentedString(startsWith)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


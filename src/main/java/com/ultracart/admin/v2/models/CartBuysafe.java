/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartBuysafe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-09T16:30:26.529-05:00[America/Indianapolis]")
public class CartBuysafe {
  public static final String SERIALIZED_NAME_BOND_AVAILABLE = "bond_available";
  @SerializedName(SERIALIZED_NAME_BOND_AVAILABLE)
  private Boolean bondAvailable;

  public static final String SERIALIZED_NAME_BOND_COST = "bond_cost";
  @SerializedName(SERIALIZED_NAME_BOND_COST)
  private Currency bondCost;

  public static final String SERIALIZED_NAME_BOND_FREE = "bond_free";
  @SerializedName(SERIALIZED_NAME_BOND_FREE)
  private Boolean bondFree;

  public static final String SERIALIZED_NAME_BOND_WANTED = "bond_wanted";
  @SerializedName(SERIALIZED_NAME_BOND_WANTED)
  private Boolean bondWanted;

  public static final String SERIALIZED_NAME_CART_DISPLAY_TEXT = "cart_display_text";
  @SerializedName(SERIALIZED_NAME_CART_DISPLAY_TEXT)
  private String cartDisplayText;

  public static final String SERIALIZED_NAME_CART_DISPLAY_URL = "cart_display_url";
  @SerializedName(SERIALIZED_NAME_CART_DISPLAY_URL)
  private String cartDisplayUrl;

  public CartBuysafe() { 
  }

  public CartBuysafe bondAvailable(Boolean bondAvailable) {
    
    this.bondAvailable = bondAvailable;
    return this;
  }

   /**
   * True if buySAFE is willing to bond the order
   * @return bondAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if buySAFE is willing to bond the order")

  public Boolean getBondAvailable() {
    return bondAvailable;
  }


  public void setBondAvailable(Boolean bondAvailable) {
    this.bondAvailable = bondAvailable;
  }


  public CartBuysafe bondCost(Currency bondCost) {
    
    this.bondCost = bondCost;
    return this;
  }

   /**
   * Get bondCost
   * @return bondCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getBondCost() {
    return bondCost;
  }


  public void setBondCost(Currency bondCost) {
    this.bondCost = bondCost;
  }


  public CartBuysafe bondFree(Boolean bondFree) {
    
    this.bondFree = bondFree;
    return this;
  }

   /**
   * True if the bond is free (merchant paying for it)
   * @return bondFree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the bond is free (merchant paying for it)")

  public Boolean getBondFree() {
    return bondFree;
  }


  public void setBondFree(Boolean bondFree) {
    this.bondFree = bondFree;
  }


  public CartBuysafe bondWanted(Boolean bondWanted) {
    
    this.bondWanted = bondWanted;
    return this;
  }

   /**
   * True if the customer wants the bond
   * @return bondWanted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer wants the bond")

  public Boolean getBondWanted() {
    return bondWanted;
  }


  public void setBondWanted(Boolean bondWanted) {
    this.bondWanted = bondWanted;
  }


  public CartBuysafe cartDisplayText(String cartDisplayText) {
    
    this.cartDisplayText = cartDisplayText;
    return this;
  }

   /**
   * Recommend text to display to the customer
   * @return cartDisplayText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Recommend text to display to the customer")

  public String getCartDisplayText() {
    return cartDisplayText;
  }


  public void setCartDisplayText(String cartDisplayText) {
    this.cartDisplayText = cartDisplayText;
  }


  public CartBuysafe cartDisplayUrl(String cartDisplayUrl) {
    
    this.cartDisplayUrl = cartDisplayUrl;
    return this;
  }

   /**
   * URL associated with the recommended text
   * @return cartDisplayUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL associated with the recommended text")

  public String getCartDisplayUrl() {
    return cartDisplayUrl;
  }


  public void setCartDisplayUrl(String cartDisplayUrl) {
    this.cartDisplayUrl = cartDisplayUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartBuysafe cartBuysafe = (CartBuysafe) o;
    return Objects.equals(this.bondAvailable, cartBuysafe.bondAvailable) &&
        Objects.equals(this.bondCost, cartBuysafe.bondCost) &&
        Objects.equals(this.bondFree, cartBuysafe.bondFree) &&
        Objects.equals(this.bondWanted, cartBuysafe.bondWanted) &&
        Objects.equals(this.cartDisplayText, cartBuysafe.cartDisplayText) &&
        Objects.equals(this.cartDisplayUrl, cartBuysafe.cartDisplayUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bondAvailable, bondCost, bondFree, bondWanted, cartDisplayText, cartDisplayUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartBuysafe {\n");
    sb.append("    bondAvailable: ").append(toIndentedString(bondAvailable)).append("\n");
    sb.append("    bondCost: ").append(toIndentedString(bondCost)).append("\n");
    sb.append("    bondFree: ").append(toIndentedString(bondFree)).append("\n");
    sb.append("    bondWanted: ").append(toIndentedString(bondWanted)).append("\n");
    sb.append("    cartDisplayText: ").append(toIndentedString(cartDisplayText)).append("\n");
    sb.append("    cartDisplayUrl: ").append(toIndentedString(cartDisplayUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bond_available");
    openapiFields.add("bond_cost");
    openapiFields.add("bond_free");
    openapiFields.add("bond_wanted");
    openapiFields.add("cart_display_text");
    openapiFields.add("cart_display_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartBuysafe
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartBuysafe.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartBuysafe is not found in the empty JSON string", CartBuysafe.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartBuysafe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartBuysafe` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `bond_cost`
      if (jsonObj.getAsJsonObject("bond_cost") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("bond_cost"));
      }
      if (jsonObj.get("cart_display_text") != null && !jsonObj.get("cart_display_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_display_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_display_text").toString()));
      }
      if (jsonObj.get("cart_display_url") != null && !jsonObj.get("cart_display_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cart_display_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cart_display_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartBuysafe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartBuysafe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartBuysafe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartBuysafe.class));

       return (TypeAdapter<T>) new TypeAdapter<CartBuysafe>() {
           @Override
           public void write(JsonWriter out, CartBuysafe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartBuysafe read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartBuysafe given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartBuysafe
  * @throws IOException if the JSON string is invalid with respect to CartBuysafe
  */
  public static CartBuysafe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartBuysafe.class);
  }

 /**
  * Convert an instance of CartBuysafe to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


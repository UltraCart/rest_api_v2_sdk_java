/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportPageFilter;
import com.ultracart.admin.v2.models.ReportPageVisualization;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * ReportPage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-04T16:21:10.809-04:00")



public class ReportPage {
  @SerializedName("filters")
  private List<ReportPageFilter> filters = null;

  @SerializedName("height")
  private BigDecimal height = null;

  @SerializedName("settings")
  private String settings = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("visualizations")
  private List<ReportPageVisualization> visualizations = null;

  @SerializedName("width")
  private BigDecimal width = null;

  public ReportPage filters(List<ReportPageFilter> filters) {
    this.filters = filters;
    return this;
  }

  public ReportPage addFiltersItem(ReportPageFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<ReportPageFilter>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @ApiModelProperty(value = "")
  public List<ReportPageFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<ReportPageFilter> filters) {
    this.filters = filters;
  }

  public ReportPage height(BigDecimal height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the report page in inches
   * @return height
  **/
  @ApiModelProperty(value = "Height of the report page in inches")
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }

  public ReportPage settings(String settings) {
    this.settings = settings;
    return this;
  }

   /**
   * A JSON representation of the settings for this report
   * @return settings
  **/
  @ApiModelProperty(value = "A JSON representation of the settings for this report")
  public String getSettings() {
    return settings;
  }

  public void setSettings(String settings) {
    this.settings = settings;
  }

  public ReportPage title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ReportPage visualizations(List<ReportPageVisualization> visualizations) {
    this.visualizations = visualizations;
    return this;
  }

  public ReportPage addVisualizationsItem(ReportPageVisualization visualizationsItem) {
    if (this.visualizations == null) {
      this.visualizations = new ArrayList<ReportPageVisualization>();
    }
    this.visualizations.add(visualizationsItem);
    return this;
  }

   /**
   * Visualizations on the report page.
   * @return visualizations
  **/
  @ApiModelProperty(value = "Visualizations on the report page.")
  public List<ReportPageVisualization> getVisualizations() {
    return visualizations;
  }

  public void setVisualizations(List<ReportPageVisualization> visualizations) {
    this.visualizations = visualizations;
  }

  public ReportPage width(BigDecimal width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the report page in inches
   * @return width
  **/
  @ApiModelProperty(value = "Width of the report page in inches")
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPage reportPage = (ReportPage) o;
    return Objects.equals(this.filters, reportPage.filters) &&
        Objects.equals(this.height, reportPage.height) &&
        Objects.equals(this.settings, reportPage.settings) &&
        Objects.equals(this.title, reportPage.title) &&
        Objects.equals(this.visualizations, reportPage.visualizations) &&
        Objects.equals(this.width, reportPage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, height, settings, title, visualizations, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPage {\n");
    
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    visualizations: ").append(toIndentedString(visualizations)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


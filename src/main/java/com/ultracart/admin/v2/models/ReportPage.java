/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ReportPageFilter;
import com.ultracart.admin.v2.models.ReportPageVisualization;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportPage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-21T11:31:21.848-04:00[America/Indianapolis]")
public class ReportPage {
  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ReportPageFilter> filters = null;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private String settings;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VISUALIZATIONS = "visualizations";
  @SerializedName(SERIALIZED_NAME_VISUALIZATIONS)
  private List<ReportPageVisualization> visualizations = null;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private BigDecimal width;

  public ReportPage() { 
  }

  public ReportPage filters(List<ReportPageFilter> filters) {
    
    this.filters = filters;
    return this;
  }

  public ReportPage addFiltersItem(ReportPageFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ReportPageFilter> getFilters() {
    return filters;
  }


  public void setFilters(List<ReportPageFilter> filters) {
    this.filters = filters;
  }


  public ReportPage height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Height of the report page in inches
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Height of the report page in inches")

  public BigDecimal getHeight() {
    return height;
  }


  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public ReportPage settings(String settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * A JSON representation of the settings for this report
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON representation of the settings for this report")

  public String getSettings() {
    return settings;
  }


  public void setSettings(String settings) {
    this.settings = settings;
  }


  public ReportPage title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public ReportPage visualizations(List<ReportPageVisualization> visualizations) {
    
    this.visualizations = visualizations;
    return this;
  }

  public ReportPage addVisualizationsItem(ReportPageVisualization visualizationsItem) {
    if (this.visualizations == null) {
      this.visualizations = new ArrayList<>();
    }
    this.visualizations.add(visualizationsItem);
    return this;
  }

   /**
   * Visualizations on the report page.
   * @return visualizations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Visualizations on the report page.")

  public List<ReportPageVisualization> getVisualizations() {
    return visualizations;
  }


  public void setVisualizations(List<ReportPageVisualization> visualizations) {
    this.visualizations = visualizations;
  }


  public ReportPage width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * Width of the report page in inches
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Width of the report page in inches")

  public BigDecimal getWidth() {
    return width;
  }


  public void setWidth(BigDecimal width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPage reportPage = (ReportPage) o;
    return Objects.equals(this.filters, reportPage.filters) &&
        Objects.equals(this.height, reportPage.height) &&
        Objects.equals(this.settings, reportPage.settings) &&
        Objects.equals(this.title, reportPage.title) &&
        Objects.equals(this.visualizations, reportPage.visualizations) &&
        Objects.equals(this.width, reportPage.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, height, settings, title, visualizations, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPage {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    visualizations: ").append(toIndentedString(visualizations)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filters");
    openapiFields.add("height");
    openapiFields.add("settings");
    openapiFields.add("title");
    openapiFields.add("visualizations");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportPage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportPage.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportPage is not found in the empty JSON string", ReportPage.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportPage` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
      if (jsonArrayfilters != null) {
        // ensure the json data is an array
        if (!jsonObj.get("filters").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
        }

        // validate the optional field `filters` (array)
        for (int i = 0; i < jsonArrayfilters.size(); i++) {
          ReportPageFilter.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("settings").toString()));
      }
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      JsonArray jsonArrayvisualizations = jsonObj.getAsJsonArray("visualizations");
      if (jsonArrayvisualizations != null) {
        // ensure the json data is an array
        if (!jsonObj.get("visualizations").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `visualizations` to be an array in the JSON string but got `%s`", jsonObj.get("visualizations").toString()));
        }

        // validate the optional field `visualizations` (array)
        for (int i = 0; i < jsonArrayvisualizations.size(); i++) {
          ReportPageVisualization.validateJsonObject(jsonArrayvisualizations.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportPage.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportPage>() {
           @Override
           public void write(JsonWriter out, ReportPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportPage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportPage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportPage
  * @throws IOException if the JSON string is invalid with respect to ReportPage
  */
  public static ReportPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportPage.class);
  }

 /**
  * Convert an instance of ReportPage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ChannelPartner;
import com.ultracart.admin.v2.models.Country;
import com.ultracart.admin.v2.models.CustomerAffiliate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CustomerEditorValues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-06T11:19:49.553-05:00[America/Indianapolis]")
public class CustomerEditorValues {
  public static final String SERIALIZED_NAME_AFFILIATES = "affiliates";
  @SerializedName(SERIALIZED_NAME_AFFILIATES)
  private List<CustomerAffiliate> affiliates = null;

  public static final String SERIALIZED_NAME_CARD_EXP_MONTHS = "card_exp_months";
  @SerializedName(SERIALIZED_NAME_CARD_EXP_MONTHS)
  private List<String> cardExpMonths = null;

  public static final String SERIALIZED_NAME_CARD_EXP_YEARS = "card_exp_years";
  @SerializedName(SERIALIZED_NAME_CARD_EXP_YEARS)
  private List<String> cardExpYears = null;

  public static final String SERIALIZED_NAME_CARD_TYPES = "card_types";
  @SerializedName(SERIALIZED_NAME_CARD_TYPES)
  private List<String> cardTypes = null;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<Country> countries = null;

  public static final String SERIALIZED_NAME_EDI_CHANNEL_PARTNERS = "edi_channel_partners";
  @SerializedName(SERIALIZED_NAME_EDI_CHANNEL_PARTNERS)
  private List<ChannelPartner> ediChannelPartners = null;

  public static final String SERIALIZED_NAME_LOYALTY_LEDGER_DESCRIPTIONS = "loyalty_ledger_descriptions";
  @SerializedName(SERIALIZED_NAME_LOYALTY_LEDGER_DESCRIPTIONS)
  private List<String> loyaltyLedgerDescriptions = null;

  public static final String SERIALIZED_NAME_LOYALTY_PROGRAM_TYPE = "loyalty_program_type";
  @SerializedName(SERIALIZED_NAME_LOYALTY_PROGRAM_TYPE)
  private String loyaltyProgramType;

  public static final String SERIALIZED_NAME_QB_CLASSES = "qb_classes";
  @SerializedName(SERIALIZED_NAME_QB_CLASSES)
  private List<String> qbClasses = null;

  public static final String SERIALIZED_NAME_SALES_REP_CODES = "sales_rep_codes";
  @SerializedName(SERIALIZED_NAME_SALES_REP_CODES)
  private List<String> salesRepCodes = null;

  public static final String SERIALIZED_NAME_STATE_OPTIONAL_COUNTRIES = "state_optional_countries";
  @SerializedName(SERIALIZED_NAME_STATE_OPTIONAL_COUNTRIES)
  private List<Country> stateOptionalCountries = null;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private List<String> terms = null;

  public CustomerEditorValues() { 
  }

  public CustomerEditorValues affiliates(List<CustomerAffiliate> affiliates) {
    
    this.affiliates = affiliates;
    return this;
  }

  public CustomerEditorValues addAffiliatesItem(CustomerAffiliate affiliatesItem) {
    if (this.affiliates == null) {
      this.affiliates = new ArrayList<>();
    }
    this.affiliates.add(affiliatesItem);
    return this;
  }

   /**
   * affiliates
   * @return affiliates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "affiliates")

  public List<CustomerAffiliate> getAffiliates() {
    return affiliates;
  }


  public void setAffiliates(List<CustomerAffiliate> affiliates) {
    this.affiliates = affiliates;
  }


  public CustomerEditorValues cardExpMonths(List<String> cardExpMonths) {
    
    this.cardExpMonths = cardExpMonths;
    return this;
  }

  public CustomerEditorValues addCardExpMonthsItem(String cardExpMonthsItem) {
    if (this.cardExpMonths == null) {
      this.cardExpMonths = new ArrayList<>();
    }
    this.cardExpMonths.add(cardExpMonthsItem);
    return this;
  }

   /**
   * card_exp_months
   * @return cardExpMonths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "card_exp_months")

  public List<String> getCardExpMonths() {
    return cardExpMonths;
  }


  public void setCardExpMonths(List<String> cardExpMonths) {
    this.cardExpMonths = cardExpMonths;
  }


  public CustomerEditorValues cardExpYears(List<String> cardExpYears) {
    
    this.cardExpYears = cardExpYears;
    return this;
  }

  public CustomerEditorValues addCardExpYearsItem(String cardExpYearsItem) {
    if (this.cardExpYears == null) {
      this.cardExpYears = new ArrayList<>();
    }
    this.cardExpYears.add(cardExpYearsItem);
    return this;
  }

   /**
   * card_exp_years
   * @return cardExpYears
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "card_exp_years")

  public List<String> getCardExpYears() {
    return cardExpYears;
  }


  public void setCardExpYears(List<String> cardExpYears) {
    this.cardExpYears = cardExpYears;
  }


  public CustomerEditorValues cardTypes(List<String> cardTypes) {
    
    this.cardTypes = cardTypes;
    return this;
  }

  public CustomerEditorValues addCardTypesItem(String cardTypesItem) {
    if (this.cardTypes == null) {
      this.cardTypes = new ArrayList<>();
    }
    this.cardTypes.add(cardTypesItem);
    return this;
  }

   /**
   * card_types
   * @return cardTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "card_types")

  public List<String> getCardTypes() {
    return cardTypes;
  }


  public void setCardTypes(List<String> cardTypes) {
    this.cardTypes = cardTypes;
  }


  public CustomerEditorValues countries(List<Country> countries) {
    
    this.countries = countries;
    return this;
  }

  public CustomerEditorValues addCountriesItem(Country countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * countries
   * @return countries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "countries")

  public List<Country> getCountries() {
    return countries;
  }


  public void setCountries(List<Country> countries) {
    this.countries = countries;
  }


  public CustomerEditorValues ediChannelPartners(List<ChannelPartner> ediChannelPartners) {
    
    this.ediChannelPartners = ediChannelPartners;
    return this;
  }

  public CustomerEditorValues addEdiChannelPartnersItem(ChannelPartner ediChannelPartnersItem) {
    if (this.ediChannelPartners == null) {
      this.ediChannelPartners = new ArrayList<>();
    }
    this.ediChannelPartners.add(ediChannelPartnersItem);
    return this;
  }

   /**
   * EDI channel partners
   * @return ediChannelPartners
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EDI channel partners")

  public List<ChannelPartner> getEdiChannelPartners() {
    return ediChannelPartners;
  }


  public void setEdiChannelPartners(List<ChannelPartner> ediChannelPartners) {
    this.ediChannelPartners = ediChannelPartners;
  }


  public CustomerEditorValues loyaltyLedgerDescriptions(List<String> loyaltyLedgerDescriptions) {
    
    this.loyaltyLedgerDescriptions = loyaltyLedgerDescriptions;
    return this;
  }

  public CustomerEditorValues addLoyaltyLedgerDescriptionsItem(String loyaltyLedgerDescriptionsItem) {
    if (this.loyaltyLedgerDescriptions == null) {
      this.loyaltyLedgerDescriptions = new ArrayList<>();
    }
    this.loyaltyLedgerDescriptions.add(loyaltyLedgerDescriptionsItem);
    return this;
  }

   /**
   * loyalty_ledger_descriptions
   * @return loyaltyLedgerDescriptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "loyalty_ledger_descriptions")

  public List<String> getLoyaltyLedgerDescriptions() {
    return loyaltyLedgerDescriptions;
  }


  public void setLoyaltyLedgerDescriptions(List<String> loyaltyLedgerDescriptions) {
    this.loyaltyLedgerDescriptions = loyaltyLedgerDescriptions;
  }


  public CustomerEditorValues loyaltyProgramType(String loyaltyProgramType) {
    
    this.loyaltyProgramType = loyaltyProgramType;
    return this;
  }

   /**
   * loyalty_program_type
   * @return loyaltyProgramType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "loyalty_program_type")

  public String getLoyaltyProgramType() {
    return loyaltyProgramType;
  }


  public void setLoyaltyProgramType(String loyaltyProgramType) {
    this.loyaltyProgramType = loyaltyProgramType;
  }


  public CustomerEditorValues qbClasses(List<String> qbClasses) {
    
    this.qbClasses = qbClasses;
    return this;
  }

  public CustomerEditorValues addQbClassesItem(String qbClassesItem) {
    if (this.qbClasses == null) {
      this.qbClasses = new ArrayList<>();
    }
    this.qbClasses.add(qbClassesItem);
    return this;
  }

   /**
   * qb_classes
   * @return qbClasses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "qb_classes")

  public List<String> getQbClasses() {
    return qbClasses;
  }


  public void setQbClasses(List<String> qbClasses) {
    this.qbClasses = qbClasses;
  }


  public CustomerEditorValues salesRepCodes(List<String> salesRepCodes) {
    
    this.salesRepCodes = salesRepCodes;
    return this;
  }

  public CustomerEditorValues addSalesRepCodesItem(String salesRepCodesItem) {
    if (this.salesRepCodes == null) {
      this.salesRepCodes = new ArrayList<>();
    }
    this.salesRepCodes.add(salesRepCodesItem);
    return this;
  }

   /**
   * sales_rep_codes
   * @return salesRepCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sales_rep_codes")

  public List<String> getSalesRepCodes() {
    return salesRepCodes;
  }


  public void setSalesRepCodes(List<String> salesRepCodes) {
    this.salesRepCodes = salesRepCodes;
  }


  public CustomerEditorValues stateOptionalCountries(List<Country> stateOptionalCountries) {
    
    this.stateOptionalCountries = stateOptionalCountries;
    return this;
  }

  public CustomerEditorValues addStateOptionalCountriesItem(Country stateOptionalCountriesItem) {
    if (this.stateOptionalCountries == null) {
      this.stateOptionalCountries = new ArrayList<>();
    }
    this.stateOptionalCountries.add(stateOptionalCountriesItem);
    return this;
  }

   /**
   * state_optional_countries
   * @return stateOptionalCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "state_optional_countries")

  public List<Country> getStateOptionalCountries() {
    return stateOptionalCountries;
  }


  public void setStateOptionalCountries(List<Country> stateOptionalCountries) {
    this.stateOptionalCountries = stateOptionalCountries;
  }


  public CustomerEditorValues terms(List<String> terms) {
    
    this.terms = terms;
    return this;
  }

  public CustomerEditorValues addTermsItem(String termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<>();
    }
    this.terms.add(termsItem);
    return this;
  }

   /**
   * terms
   * @return terms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "terms")

  public List<String> getTerms() {
    return terms;
  }


  public void setTerms(List<String> terms) {
    this.terms = terms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerEditorValues customerEditorValues = (CustomerEditorValues) o;
    return Objects.equals(this.affiliates, customerEditorValues.affiliates) &&
        Objects.equals(this.cardExpMonths, customerEditorValues.cardExpMonths) &&
        Objects.equals(this.cardExpYears, customerEditorValues.cardExpYears) &&
        Objects.equals(this.cardTypes, customerEditorValues.cardTypes) &&
        Objects.equals(this.countries, customerEditorValues.countries) &&
        Objects.equals(this.ediChannelPartners, customerEditorValues.ediChannelPartners) &&
        Objects.equals(this.loyaltyLedgerDescriptions, customerEditorValues.loyaltyLedgerDescriptions) &&
        Objects.equals(this.loyaltyProgramType, customerEditorValues.loyaltyProgramType) &&
        Objects.equals(this.qbClasses, customerEditorValues.qbClasses) &&
        Objects.equals(this.salesRepCodes, customerEditorValues.salesRepCodes) &&
        Objects.equals(this.stateOptionalCountries, customerEditorValues.stateOptionalCountries) &&
        Objects.equals(this.terms, customerEditorValues.terms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliates, cardExpMonths, cardExpYears, cardTypes, countries, ediChannelPartners, loyaltyLedgerDescriptions, loyaltyProgramType, qbClasses, salesRepCodes, stateOptionalCountries, terms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerEditorValues {\n");
    sb.append("    affiliates: ").append(toIndentedString(affiliates)).append("\n");
    sb.append("    cardExpMonths: ").append(toIndentedString(cardExpMonths)).append("\n");
    sb.append("    cardExpYears: ").append(toIndentedString(cardExpYears)).append("\n");
    sb.append("    cardTypes: ").append(toIndentedString(cardTypes)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    ediChannelPartners: ").append(toIndentedString(ediChannelPartners)).append("\n");
    sb.append("    loyaltyLedgerDescriptions: ").append(toIndentedString(loyaltyLedgerDescriptions)).append("\n");
    sb.append("    loyaltyProgramType: ").append(toIndentedString(loyaltyProgramType)).append("\n");
    sb.append("    qbClasses: ").append(toIndentedString(qbClasses)).append("\n");
    sb.append("    salesRepCodes: ").append(toIndentedString(salesRepCodes)).append("\n");
    sb.append("    stateOptionalCountries: ").append(toIndentedString(stateOptionalCountries)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliates");
    openapiFields.add("card_exp_months");
    openapiFields.add("card_exp_years");
    openapiFields.add("card_types");
    openapiFields.add("countries");
    openapiFields.add("edi_channel_partners");
    openapiFields.add("loyalty_ledger_descriptions");
    openapiFields.add("loyalty_program_type");
    openapiFields.add("qb_classes");
    openapiFields.add("sales_rep_codes");
    openapiFields.add("state_optional_countries");
    openapiFields.add("terms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerEditorValues
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomerEditorValues.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerEditorValues is not found in the empty JSON string", CustomerEditorValues.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerEditorValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerEditorValues` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaffiliates = jsonObj.getAsJsonArray("affiliates");
      if (jsonArrayaffiliates != null) {
        // ensure the json data is an array
        if (!jsonObj.get("affiliates").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `affiliates` to be an array in the JSON string but got `%s`", jsonObj.get("affiliates").toString()));
        }

        // validate the optional field `affiliates` (array)
        for (int i = 0; i < jsonArrayaffiliates.size(); i++) {
          CustomerAffiliate.validateJsonObject(jsonArrayaffiliates.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("card_exp_months") != null && !jsonObj.get("card_exp_months").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_exp_months` to be an array in the JSON string but got `%s`", jsonObj.get("card_exp_months").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("card_exp_years") != null && !jsonObj.get("card_exp_years").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_exp_years` to be an array in the JSON string but got `%s`", jsonObj.get("card_exp_years").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("card_types") != null && !jsonObj.get("card_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_types` to be an array in the JSON string but got `%s`", jsonObj.get("card_types").toString()));
      }
      JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
      if (jsonArraycountries != null) {
        // ensure the json data is an array
        if (!jsonObj.get("countries").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
        }

        // validate the optional field `countries` (array)
        for (int i = 0; i < jsonArraycountries.size(); i++) {
          Country.validateJsonObject(jsonArraycountries.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayediChannelPartners = jsonObj.getAsJsonArray("edi_channel_partners");
      if (jsonArrayediChannelPartners != null) {
        // ensure the json data is an array
        if (!jsonObj.get("edi_channel_partners").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `edi_channel_partners` to be an array in the JSON string but got `%s`", jsonObj.get("edi_channel_partners").toString()));
        }

        // validate the optional field `edi_channel_partners` (array)
        for (int i = 0; i < jsonArrayediChannelPartners.size(); i++) {
          ChannelPartner.validateJsonObject(jsonArrayediChannelPartners.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("loyalty_ledger_descriptions") != null && !jsonObj.get("loyalty_ledger_descriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyalty_ledger_descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("loyalty_ledger_descriptions").toString()));
      }
      if (jsonObj.get("loyalty_program_type") != null && !jsonObj.get("loyalty_program_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loyalty_program_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loyalty_program_type").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("qb_classes") != null && !jsonObj.get("qb_classes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `qb_classes` to be an array in the JSON string but got `%s`", jsonObj.get("qb_classes").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("sales_rep_codes") != null && !jsonObj.get("sales_rep_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sales_rep_codes` to be an array in the JSON string but got `%s`", jsonObj.get("sales_rep_codes").toString()));
      }
      JsonArray jsonArraystateOptionalCountries = jsonObj.getAsJsonArray("state_optional_countries");
      if (jsonArraystateOptionalCountries != null) {
        // ensure the json data is an array
        if (!jsonObj.get("state_optional_countries").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `state_optional_countries` to be an array in the JSON string but got `%s`", jsonObj.get("state_optional_countries").toString()));
        }

        // validate the optional field `state_optional_countries` (array)
        for (int i = 0; i < jsonArraystateOptionalCountries.size(); i++) {
          Country.validateJsonObject(jsonArraystateOptionalCountries.get(i).getAsJsonObject());
        };
      }
      // ensure the json data is an array
      if (jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms` to be an array in the JSON string but got `%s`", jsonObj.get("terms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerEditorValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerEditorValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerEditorValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerEditorValues.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerEditorValues>() {
           @Override
           public void write(JsonWriter out, CustomerEditorValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerEditorValues read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerEditorValues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerEditorValues
  * @throws IOException if the JSON string is invalid with respect to CustomerEditorValues
  */
  public static CustomerEditorValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerEditorValues.class);
  }

 /**
  * Convert an instance of CustomerEditorValues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


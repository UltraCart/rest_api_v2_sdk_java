/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemThirdPartyEmailMarketing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-20T07:35:27.732-05:00[America/Indianapolis]")
public class ItemThirdPartyEmailMarketing {
  public static final String SERIALIZED_NAME_ADD_TAGS = "add_tags";
  @SerializedName(SERIALIZED_NAME_ADD_TAGS)
  private List<String> addTags = null;

  /**
   * Provider name
   */
  @JsonAdapter(ProviderNameEnum.Adapter.class)
  public enum ProviderNameEnum {
    ACTIVECAMPAIGN("ActiveCampaign"),
    
    AWEBER("AWeber"),
    
    CAMPAIGN_MONITOR("Campaign Monitor"),
    
    CONSTANTCONTACT("ConstantContact"),
    
    EMMA("Emma"),
    
    GETRESPONSE("GetResponse"),
    
    ICONTACT("iContact"),
    
    KLAVIYO("Klaviyo"),
    
    LYRIS("Lyris"),
    
    LYRISHQ("LyrisHQ"),
    
    MAILCHIMP("MailChimp"),
    
    SILVERPOP("SilverPop");

    private String value;

    ProviderNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderNameEnum fromValue(String value) {
      for (ProviderNameEnum b : ProviderNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "provider_name";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private ProviderNameEnum providerName;

  public static final String SERIALIZED_NAME_REMOVE_TAGS = "remove_tags";
  @SerializedName(SERIALIZED_NAME_REMOVE_TAGS)
  private List<String> removeTags = null;

  public static final String SERIALIZED_NAME_SUBSCRIBE_LISTS = "subscribe_lists";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_LISTS)
  private List<String> subscribeLists = null;

  public static final String SERIALIZED_NAME_UNSUBSCRIBE_LISTS = "unsubscribe_lists";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBE_LISTS)
  private List<String> unsubscribeLists = null;

  public ItemThirdPartyEmailMarketing() { 
  }

  public ItemThirdPartyEmailMarketing addTags(List<String> addTags) {
    
    this.addTags = addTags;
    return this;
  }

  public ItemThirdPartyEmailMarketing addAddTagsItem(String addTagsItem) {
    if (this.addTags == null) {
      this.addTags = new ArrayList<>();
    }
    this.addTags.add(addTagsItem);
    return this;
  }

   /**
   * Add tags
   * @return addTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Add tags")

  public List<String> getAddTags() {
    return addTags;
  }


  public void setAddTags(List<String> addTags) {
    this.addTags = addTags;
  }


  public ItemThirdPartyEmailMarketing providerName(ProviderNameEnum providerName) {
    
    this.providerName = providerName;
    return this;
  }

   /**
   * Provider name
   * @return providerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provider name")

  public ProviderNameEnum getProviderName() {
    return providerName;
  }


  public void setProviderName(ProviderNameEnum providerName) {
    this.providerName = providerName;
  }


  public ItemThirdPartyEmailMarketing removeTags(List<String> removeTags) {
    
    this.removeTags = removeTags;
    return this;
  }

  public ItemThirdPartyEmailMarketing addRemoveTagsItem(String removeTagsItem) {
    if (this.removeTags == null) {
      this.removeTags = new ArrayList<>();
    }
    this.removeTags.add(removeTagsItem);
    return this;
  }

   /**
   * Remove tags
   * @return removeTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Remove tags")

  public List<String> getRemoveTags() {
    return removeTags;
  }


  public void setRemoveTags(List<String> removeTags) {
    this.removeTags = removeTags;
  }


  public ItemThirdPartyEmailMarketing subscribeLists(List<String> subscribeLists) {
    
    this.subscribeLists = subscribeLists;
    return this;
  }

  public ItemThirdPartyEmailMarketing addSubscribeListsItem(String subscribeListsItem) {
    if (this.subscribeLists == null) {
      this.subscribeLists = new ArrayList<>();
    }
    this.subscribeLists.add(subscribeListsItem);
    return this;
  }

   /**
   * Subscribe to lists
   * @return subscribeLists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subscribe to lists")

  public List<String> getSubscribeLists() {
    return subscribeLists;
  }


  public void setSubscribeLists(List<String> subscribeLists) {
    this.subscribeLists = subscribeLists;
  }


  public ItemThirdPartyEmailMarketing unsubscribeLists(List<String> unsubscribeLists) {
    
    this.unsubscribeLists = unsubscribeLists;
    return this;
  }

  public ItemThirdPartyEmailMarketing addUnsubscribeListsItem(String unsubscribeListsItem) {
    if (this.unsubscribeLists == null) {
      this.unsubscribeLists = new ArrayList<>();
    }
    this.unsubscribeLists.add(unsubscribeListsItem);
    return this;
  }

   /**
   * Unsubscribe from lists
   * @return unsubscribeLists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unsubscribe from lists")

  public List<String> getUnsubscribeLists() {
    return unsubscribeLists;
  }


  public void setUnsubscribeLists(List<String> unsubscribeLists) {
    this.unsubscribeLists = unsubscribeLists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemThirdPartyEmailMarketing itemThirdPartyEmailMarketing = (ItemThirdPartyEmailMarketing) o;
    return Objects.equals(this.addTags, itemThirdPartyEmailMarketing.addTags) &&
        Objects.equals(this.providerName, itemThirdPartyEmailMarketing.providerName) &&
        Objects.equals(this.removeTags, itemThirdPartyEmailMarketing.removeTags) &&
        Objects.equals(this.subscribeLists, itemThirdPartyEmailMarketing.subscribeLists) &&
        Objects.equals(this.unsubscribeLists, itemThirdPartyEmailMarketing.unsubscribeLists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addTags, providerName, removeTags, subscribeLists, unsubscribeLists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemThirdPartyEmailMarketing {\n");
    sb.append("    addTags: ").append(toIndentedString(addTags)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    removeTags: ").append(toIndentedString(removeTags)).append("\n");
    sb.append("    subscribeLists: ").append(toIndentedString(subscribeLists)).append("\n");
    sb.append("    unsubscribeLists: ").append(toIndentedString(unsubscribeLists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_tags");
    openapiFields.add("provider_name");
    openapiFields.add("remove_tags");
    openapiFields.add("subscribe_lists");
    openapiFields.add("unsubscribe_lists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemThirdPartyEmailMarketing
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemThirdPartyEmailMarketing.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemThirdPartyEmailMarketing is not found in the empty JSON string", ItemThirdPartyEmailMarketing.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemThirdPartyEmailMarketing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemThirdPartyEmailMarketing` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("add_tags") != null && !jsonObj.get("add_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_tags` to be an array in the JSON string but got `%s`", jsonObj.get("add_tags").toString()));
      }
      if (jsonObj.get("provider_name") != null && !jsonObj.get("provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_name").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("remove_tags") != null && !jsonObj.get("remove_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remove_tags` to be an array in the JSON string but got `%s`", jsonObj.get("remove_tags").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("subscribe_lists") != null && !jsonObj.get("subscribe_lists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribe_lists` to be an array in the JSON string but got `%s`", jsonObj.get("subscribe_lists").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("unsubscribe_lists") != null && !jsonObj.get("unsubscribe_lists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribe_lists` to be an array in the JSON string but got `%s`", jsonObj.get("unsubscribe_lists").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemThirdPartyEmailMarketing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemThirdPartyEmailMarketing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemThirdPartyEmailMarketing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemThirdPartyEmailMarketing.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemThirdPartyEmailMarketing>() {
           @Override
           public void write(JsonWriter out, ItemThirdPartyEmailMarketing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemThirdPartyEmailMarketing read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemThirdPartyEmailMarketing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemThirdPartyEmailMarketing
  * @throws IOException if the JSON string is invalid with respect to ItemThirdPartyEmailMarketing
  */
  public static ItemThirdPartyEmailMarketing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemThirdPartyEmailMarketing.class);
  }

 /**
  * Convert an instance of ItemThirdPartyEmailMarketing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


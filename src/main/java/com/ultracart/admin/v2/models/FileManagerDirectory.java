/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FileManagerDirectory
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-23T14:43:54.064-05:00")



public class FileManagerDirectory {
  @SerializedName("active_theme_directory")
  private Boolean activeThemeDirectory = null;

  @SerializedName("favorite")
  private Boolean favorite = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("last_modified")
  private String lastModified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("parent_storefront_fs_directory_oid")
  private Integer parentStorefrontFsDirectoryOid = null;

  @SerializedName("part_of_active_theme")
  private Boolean partOfActiveTheme = null;

  @SerializedName("selected")
  private Boolean selected = null;

  @SerializedName("storefront_fs_directory_oid")
  private Integer storefrontFsDirectoryOid = null;

  @SerializedName("storefront_fs_file_oid")
  private Integer storefrontFsFileOid = null;

  @SerializedName("storefront_oid")
  private Integer storefrontOid = null;

  @SerializedName("type")
  private String type = null;

  public FileManagerDirectory activeThemeDirectory(Boolean activeThemeDirectory) {
    this.activeThemeDirectory = activeThemeDirectory;
    return this;
  }

   /**
   * Get activeThemeDirectory
   * @return activeThemeDirectory
  **/
  @ApiModelProperty(value = "")
  public Boolean isActiveThemeDirectory() {
    return activeThemeDirectory;
  }

  public void setActiveThemeDirectory(Boolean activeThemeDirectory) {
    this.activeThemeDirectory = activeThemeDirectory;
  }

  public FileManagerDirectory favorite(Boolean favorite) {
    this.favorite = favorite;
    return this;
  }

   /**
   * Get favorite
   * @return favorite
  **/
  @ApiModelProperty(value = "")
  public Boolean isFavorite() {
    return favorite;
  }

  public void setFavorite(Boolean favorite) {
    this.favorite = favorite;
  }

  public FileManagerDirectory hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @ApiModelProperty(value = "")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public FileManagerDirectory icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @ApiModelProperty(value = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public FileManagerDirectory lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @ApiModelProperty(value = "")
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }

  public FileManagerDirectory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FileManagerDirectory parentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get parentStorefrontFsDirectoryOid
   * @return parentStorefrontFsDirectoryOid
  **/
  @ApiModelProperty(value = "")
  public Integer getParentStorefrontFsDirectoryOid() {
    return parentStorefrontFsDirectoryOid;
  }

  public void setParentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
  }

  public FileManagerDirectory partOfActiveTheme(Boolean partOfActiveTheme) {
    this.partOfActiveTheme = partOfActiveTheme;
    return this;
  }

   /**
   * Get partOfActiveTheme
   * @return partOfActiveTheme
  **/
  @ApiModelProperty(value = "")
  public Boolean isPartOfActiveTheme() {
    return partOfActiveTheme;
  }

  public void setPartOfActiveTheme(Boolean partOfActiveTheme) {
    this.partOfActiveTheme = partOfActiveTheme;
  }

  public FileManagerDirectory selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

   /**
   * Get selected
   * @return selected
  **/
  @ApiModelProperty(value = "")
  public Boolean isSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }

  public FileManagerDirectory storefrontFsDirectoryOid(Integer storefrontFsDirectoryOid) {
    this.storefrontFsDirectoryOid = storefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get storefrontFsDirectoryOid
   * @return storefrontFsDirectoryOid
  **/
  @ApiModelProperty(value = "")
  public Integer getStorefrontFsDirectoryOid() {
    return storefrontFsDirectoryOid;
  }

  public void setStorefrontFsDirectoryOid(Integer storefrontFsDirectoryOid) {
    this.storefrontFsDirectoryOid = storefrontFsDirectoryOid;
  }

  public FileManagerDirectory storefrontFsFileOid(Integer storefrontFsFileOid) {
    this.storefrontFsFileOid = storefrontFsFileOid;
    return this;
  }

   /**
   * Get storefrontFsFileOid
   * @return storefrontFsFileOid
  **/
  @ApiModelProperty(value = "")
  public Integer getStorefrontFsFileOid() {
    return storefrontFsFileOid;
  }

  public void setStorefrontFsFileOid(Integer storefrontFsFileOid) {
    this.storefrontFsFileOid = storefrontFsFileOid;
  }

  public FileManagerDirectory storefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Get storefrontOid
   * @return storefrontOid
  **/
  @ApiModelProperty(value = "")
  public Integer getStorefrontOid() {
    return storefrontOid;
  }

  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }

  public FileManagerDirectory type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileManagerDirectory fileManagerDirectory = (FileManagerDirectory) o;
    return Objects.equals(this.activeThemeDirectory, fileManagerDirectory.activeThemeDirectory) &&
        Objects.equals(this.favorite, fileManagerDirectory.favorite) &&
        Objects.equals(this.hostname, fileManagerDirectory.hostname) &&
        Objects.equals(this.icon, fileManagerDirectory.icon) &&
        Objects.equals(this.lastModified, fileManagerDirectory.lastModified) &&
        Objects.equals(this.name, fileManagerDirectory.name) &&
        Objects.equals(this.parentStorefrontFsDirectoryOid, fileManagerDirectory.parentStorefrontFsDirectoryOid) &&
        Objects.equals(this.partOfActiveTheme, fileManagerDirectory.partOfActiveTheme) &&
        Objects.equals(this.selected, fileManagerDirectory.selected) &&
        Objects.equals(this.storefrontFsDirectoryOid, fileManagerDirectory.storefrontFsDirectoryOid) &&
        Objects.equals(this.storefrontFsFileOid, fileManagerDirectory.storefrontFsFileOid) &&
        Objects.equals(this.storefrontOid, fileManagerDirectory.storefrontOid) &&
        Objects.equals(this.type, fileManagerDirectory.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThemeDirectory, favorite, hostname, icon, lastModified, name, parentStorefrontFsDirectoryOid, partOfActiveTheme, selected, storefrontFsDirectoryOid, storefrontFsFileOid, storefrontOid, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileManagerDirectory {\n");
    
    sb.append("    activeThemeDirectory: ").append(toIndentedString(activeThemeDirectory)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentStorefrontFsDirectoryOid: ").append(toIndentedString(parentStorefrontFsDirectoryOid)).append("\n");
    sb.append("    partOfActiveTheme: ").append(toIndentedString(partOfActiveTheme)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    storefrontFsDirectoryOid: ").append(toIndentedString(storefrontFsDirectoryOid)).append("\n");
    sb.append("    storefrontFsFileOid: ").append(toIndentedString(storefrontFsFileOid)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * FileManagerDirectory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T12:05:11.750-05:00[America/Indianapolis]")
public class FileManagerDirectory {
  public static final String SERIALIZED_NAME_ACTIVE_THEME_DIRECTORY = "active_theme_directory";
  @SerializedName(SERIALIZED_NAME_ACTIVE_THEME_DIRECTORY)
  private Boolean activeThemeDirectory;

  public static final String SERIALIZED_NAME_FAVORITE = "favorite";
  @SerializedName(SERIALIZED_NAME_FAVORITE)
  private Boolean favorite;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_STOREFRONT_FS_DIRECTORY_OID = "parent_storefront_fs_directory_oid";
  @SerializedName(SERIALIZED_NAME_PARENT_STOREFRONT_FS_DIRECTORY_OID)
  private Integer parentStorefrontFsDirectoryOid;

  public static final String SERIALIZED_NAME_PART_OF_ACTIVE_THEME = "part_of_active_theme";
  @SerializedName(SERIALIZED_NAME_PART_OF_ACTIVE_THEME)
  private Boolean partOfActiveTheme;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_STOREFRONT_FS_DIRECTORY_OID = "storefront_fs_directory_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_FS_DIRECTORY_OID)
  private Integer storefrontFsDirectoryOid;

  public static final String SERIALIZED_NAME_STOREFRONT_FS_FILE_OID = "storefront_fs_file_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_FS_FILE_OID)
  private Integer storefrontFsFileOid;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public FileManagerDirectory() { 
  }

  public FileManagerDirectory activeThemeDirectory(Boolean activeThemeDirectory) {
    
    this.activeThemeDirectory = activeThemeDirectory;
    return this;
  }

   /**
   * Get activeThemeDirectory
   * @return activeThemeDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActiveThemeDirectory() {
    return activeThemeDirectory;
  }


  public void setActiveThemeDirectory(Boolean activeThemeDirectory) {
    this.activeThemeDirectory = activeThemeDirectory;
  }


  public FileManagerDirectory favorite(Boolean favorite) {
    
    this.favorite = favorite;
    return this;
  }

   /**
   * Get favorite
   * @return favorite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getFavorite() {
    return favorite;
  }


  public void setFavorite(Boolean favorite) {
    this.favorite = favorite;
  }


  public FileManagerDirectory hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public FileManagerDirectory icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIcon() {
    return icon;
  }


  public void setIcon(String icon) {
    this.icon = icon;
  }


  public FileManagerDirectory lastModified(String lastModified) {
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastModified() {
    return lastModified;
  }


  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }


  public FileManagerDirectory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FileManagerDirectory parentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get parentStorefrontFsDirectoryOid
   * @return parentStorefrontFsDirectoryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getParentStorefrontFsDirectoryOid() {
    return parentStorefrontFsDirectoryOid;
  }


  public void setParentStorefrontFsDirectoryOid(Integer parentStorefrontFsDirectoryOid) {
    this.parentStorefrontFsDirectoryOid = parentStorefrontFsDirectoryOid;
  }


  public FileManagerDirectory partOfActiveTheme(Boolean partOfActiveTheme) {
    
    this.partOfActiveTheme = partOfActiveTheme;
    return this;
  }

   /**
   * Get partOfActiveTheme
   * @return partOfActiveTheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getPartOfActiveTheme() {
    return partOfActiveTheme;
  }


  public void setPartOfActiveTheme(Boolean partOfActiveTheme) {
    this.partOfActiveTheme = partOfActiveTheme;
  }


  public FileManagerDirectory selected(Boolean selected) {
    
    this.selected = selected;
    return this;
  }

   /**
   * Get selected
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSelected() {
    return selected;
  }


  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public FileManagerDirectory storefrontFsDirectoryOid(Integer storefrontFsDirectoryOid) {
    
    this.storefrontFsDirectoryOid = storefrontFsDirectoryOid;
    return this;
  }

   /**
   * Get storefrontFsDirectoryOid
   * @return storefrontFsDirectoryOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStorefrontFsDirectoryOid() {
    return storefrontFsDirectoryOid;
  }


  public void setStorefrontFsDirectoryOid(Integer storefrontFsDirectoryOid) {
    this.storefrontFsDirectoryOid = storefrontFsDirectoryOid;
  }


  public FileManagerDirectory storefrontFsFileOid(Integer storefrontFsFileOid) {
    
    this.storefrontFsFileOid = storefrontFsFileOid;
    return this;
  }

   /**
   * Get storefrontFsFileOid
   * @return storefrontFsFileOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStorefrontFsFileOid() {
    return storefrontFsFileOid;
  }


  public void setStorefrontFsFileOid(Integer storefrontFsFileOid) {
    this.storefrontFsFileOid = storefrontFsFileOid;
  }


  public FileManagerDirectory storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Get storefrontOid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public FileManagerDirectory type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileManagerDirectory fileManagerDirectory = (FileManagerDirectory) o;
    return Objects.equals(this.activeThemeDirectory, fileManagerDirectory.activeThemeDirectory) &&
        Objects.equals(this.favorite, fileManagerDirectory.favorite) &&
        Objects.equals(this.hostname, fileManagerDirectory.hostname) &&
        Objects.equals(this.icon, fileManagerDirectory.icon) &&
        Objects.equals(this.lastModified, fileManagerDirectory.lastModified) &&
        Objects.equals(this.name, fileManagerDirectory.name) &&
        Objects.equals(this.parentStorefrontFsDirectoryOid, fileManagerDirectory.parentStorefrontFsDirectoryOid) &&
        Objects.equals(this.partOfActiveTheme, fileManagerDirectory.partOfActiveTheme) &&
        Objects.equals(this.selected, fileManagerDirectory.selected) &&
        Objects.equals(this.storefrontFsDirectoryOid, fileManagerDirectory.storefrontFsDirectoryOid) &&
        Objects.equals(this.storefrontFsFileOid, fileManagerDirectory.storefrontFsFileOid) &&
        Objects.equals(this.storefrontOid, fileManagerDirectory.storefrontOid) &&
        Objects.equals(this.type, fileManagerDirectory.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeThemeDirectory, favorite, hostname, icon, lastModified, name, parentStorefrontFsDirectoryOid, partOfActiveTheme, selected, storefrontFsDirectoryOid, storefrontFsFileOid, storefrontOid, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileManagerDirectory {\n");
    sb.append("    activeThemeDirectory: ").append(toIndentedString(activeThemeDirectory)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentStorefrontFsDirectoryOid: ").append(toIndentedString(parentStorefrontFsDirectoryOid)).append("\n");
    sb.append("    partOfActiveTheme: ").append(toIndentedString(partOfActiveTheme)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    storefrontFsDirectoryOid: ").append(toIndentedString(storefrontFsDirectoryOid)).append("\n");
    sb.append("    storefrontFsFileOid: ").append(toIndentedString(storefrontFsFileOid)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_theme_directory");
    openapiFields.add("favorite");
    openapiFields.add("hostname");
    openapiFields.add("icon");
    openapiFields.add("last_modified");
    openapiFields.add("name");
    openapiFields.add("parent_storefront_fs_directory_oid");
    openapiFields.add("part_of_active_theme");
    openapiFields.add("selected");
    openapiFields.add("storefront_fs_directory_oid");
    openapiFields.add("storefront_fs_file_oid");
    openapiFields.add("storefront_oid");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileManagerDirectory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (FileManagerDirectory.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileManagerDirectory is not found in the empty JSON string", FileManagerDirectory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FileManagerDirectory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileManagerDirectory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileManagerDirectory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileManagerDirectory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileManagerDirectory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileManagerDirectory.class));

       return (TypeAdapter<T>) new TypeAdapter<FileManagerDirectory>() {
           @Override
           public void write(JsonWriter out, FileManagerDirectory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileManagerDirectory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileManagerDirectory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileManagerDirectory
  * @throws IOException if the JSON string is invalid with respect to FileManagerDirectory
  */
  public static FileManagerDirectory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileManagerDirectory.class);
  }

 /**
  * Convert an instance of FileManagerDirectory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


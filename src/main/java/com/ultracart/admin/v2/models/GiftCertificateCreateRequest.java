/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * GiftCertificateCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-28T13:13:08.776-04:00[America/Indianapolis]")
public class GiftCertificateCreateRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION_DTS = "expiration_dts";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DTS)
  private String expirationDts;

  public static final String SERIALIZED_NAME_INITIAL_LEDGER_DESCRIPTION = "initial_ledger_description";
  @SerializedName(SERIALIZED_NAME_INITIAL_LEDGER_DESCRIPTION)
  private String initialLedgerDescription;

  public static final String SERIALIZED_NAME_MERCHANT_NOTE = "merchant_note";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NOTE)
  private String merchantNote;

  public GiftCertificateCreateRequest() { 
  }

  public GiftCertificateCreateRequest amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Initial amount of this gift certificate.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Initial amount of this gift certificate.")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public GiftCertificateCreateRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * The email address (customer/owner) associated with this gift certificate.
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email address (customer/owner) associated with this gift certificate.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public GiftCertificateCreateRequest expirationDts(String expirationDts) {
    
    this.expirationDts = expirationDts;
    return this;
  }

   /**
   * Expiration date time.
   * @return expirationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expiration date time.")

  public String getExpirationDts() {
    return expirationDts;
  }


  public void setExpirationDts(String expirationDts) {
    this.expirationDts = expirationDts;
  }


  public GiftCertificateCreateRequest initialLedgerDescription(String initialLedgerDescription) {
    
    this.initialLedgerDescription = initialLedgerDescription;
    return this;
  }

   /**
   * A brief description of how and/or why this gift certificate was created.
   * @return initialLedgerDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A brief description of how and/or why this gift certificate was created.")

  public String getInitialLedgerDescription() {
    return initialLedgerDescription;
  }


  public void setInitialLedgerDescription(String initialLedgerDescription) {
    this.initialLedgerDescription = initialLedgerDescription;
  }


  public GiftCertificateCreateRequest merchantNote(String merchantNote) {
    
    this.merchantNote = merchantNote;
    return this;
  }

   /**
   * Any internal details you wish to record about this gift certificate.
   * @return merchantNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any internal details you wish to record about this gift certificate.")

  public String getMerchantNote() {
    return merchantNote;
  }


  public void setMerchantNote(String merchantNote) {
    this.merchantNote = merchantNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GiftCertificateCreateRequest giftCertificateCreateRequest = (GiftCertificateCreateRequest) o;
    return Objects.equals(this.amount, giftCertificateCreateRequest.amount) &&
        Objects.equals(this.email, giftCertificateCreateRequest.email) &&
        Objects.equals(this.expirationDts, giftCertificateCreateRequest.expirationDts) &&
        Objects.equals(this.initialLedgerDescription, giftCertificateCreateRequest.initialLedgerDescription) &&
        Objects.equals(this.merchantNote, giftCertificateCreateRequest.merchantNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, email, expirationDts, initialLedgerDescription, merchantNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GiftCertificateCreateRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expirationDts: ").append(toIndentedString(expirationDts)).append("\n");
    sb.append("    initialLedgerDescription: ").append(toIndentedString(initialLedgerDescription)).append("\n");
    sb.append("    merchantNote: ").append(toIndentedString(merchantNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("email");
    openapiFields.add("expiration_dts");
    openapiFields.add("initial_ledger_description");
    openapiFields.add("merchant_note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GiftCertificateCreateRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GiftCertificateCreateRequest.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GiftCertificateCreateRequest is not found in the empty JSON string", GiftCertificateCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GiftCertificateCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GiftCertificateCreateRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("expiration_dts") != null && !jsonObj.get("expiration_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_dts").toString()));
      }
      if (jsonObj.get("initial_ledger_description") != null && !jsonObj.get("initial_ledger_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_ledger_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_ledger_description").toString()));
      }
      if (jsonObj.get("merchant_note") != null && !jsonObj.get("merchant_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GiftCertificateCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GiftCertificateCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GiftCertificateCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GiftCertificateCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GiftCertificateCreateRequest>() {
           @Override
           public void write(JsonWriter out, GiftCertificateCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GiftCertificateCreateRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GiftCertificateCreateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GiftCertificateCreateRequest
  * @throws IOException if the JSON string is invalid with respect to GiftCertificateCreateRequest
  */
  public static GiftCertificateCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GiftCertificateCreateRequest.class);
  }

 /**
  * Convert an instance of GiftCertificateCreateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


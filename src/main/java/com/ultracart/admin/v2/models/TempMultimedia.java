/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TempMultimedia
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-08-19T15:06:41.109-04:00")



public class TempMultimedia {
  @SerializedName("filename")
  private String filename = null;

  @SerializedName("height")
  private Integer height = null;

  /**
   * Multimedia type
   */
  @JsonAdapter(MultimediaTypeEnum.Adapter.class)
  public enum MultimediaTypeEnum {
    IMAGE("Image"),
    
    PDF("PDF"),
    
    TEXT("Text"),
    
    VIDEO("Video");

    private String value;

    MultimediaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultimediaTypeEnum fromValue(String text) {
      for (MultimediaTypeEnum b : MultimediaTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MultimediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultimediaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultimediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MultimediaTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("multimedia_type")
  private MultimediaTypeEnum multimediaType = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("temp_multimedia_oid")
  private Integer tempMultimediaOid = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("width")
  private Integer width = null;

  public TempMultimedia filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * Filename
   * @return filename
  **/
  @ApiModelProperty(value = "Filename")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public TempMultimedia height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * Height
   * @return height
  **/
  @ApiModelProperty(value = "Height")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public TempMultimedia multimediaType(MultimediaTypeEnum multimediaType) {
    this.multimediaType = multimediaType;
    return this;
  }

   /**
   * Multimedia type
   * @return multimediaType
  **/
  @ApiModelProperty(value = "Multimedia type")
  public MultimediaTypeEnum getMultimediaType() {
    return multimediaType;
  }

  public void setMultimediaType(MultimediaTypeEnum multimediaType) {
    this.multimediaType = multimediaType;
  }

  public TempMultimedia size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Size
   * @return size
  **/
  @ApiModelProperty(value = "Size")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public TempMultimedia tempMultimediaOid(Integer tempMultimediaOid) {
    this.tempMultimediaOid = tempMultimediaOid;
    return this;
  }

   /**
   * Temporary multimedia object identifier
   * @return tempMultimediaOid
  **/
  @ApiModelProperty(value = "Temporary multimedia object identifier")
  public Integer getTempMultimediaOid() {
    return tempMultimediaOid;
  }

  public void setTempMultimediaOid(Integer tempMultimediaOid) {
    this.tempMultimediaOid = tempMultimediaOid;
  }

  public TempMultimedia url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL
   * @return url
  **/
  @ApiModelProperty(value = "URL")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public TempMultimedia width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * Width
   * @return width
  **/
  @ApiModelProperty(value = "Width")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TempMultimedia tempMultimedia = (TempMultimedia) o;
    return Objects.equals(this.filename, tempMultimedia.filename) &&
        Objects.equals(this.height, tempMultimedia.height) &&
        Objects.equals(this.multimediaType, tempMultimedia.multimediaType) &&
        Objects.equals(this.size, tempMultimedia.size) &&
        Objects.equals(this.tempMultimediaOid, tempMultimedia.tempMultimediaOid) &&
        Objects.equals(this.url, tempMultimedia.url) &&
        Objects.equals(this.width, tempMultimedia.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filename, height, multimediaType, size, tempMultimediaOid, url, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TempMultimedia {\n");
    
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    multimediaType: ").append(toIndentedString(multimediaType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tempMultimediaOid: ").append(toIndentedString(tempMultimediaOid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TempMultimedia
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T16:33:02.540-04:00[America/Indianapolis]")
public class TempMultimedia {
  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  /**
   * Multimedia type
   */
  @JsonAdapter(MultimediaTypeEnum.Adapter.class)
  public enum MultimediaTypeEnum {
    IMAGE("Image"),
    
    PDF("PDF"),
    
    TEXT("Text"),
    
    VIDEO("Video");

    private String value;

    MultimediaTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultimediaTypeEnum fromValue(String value) {
      for (MultimediaTypeEnum b : MultimediaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultimediaTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultimediaTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultimediaTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultimediaTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MULTIMEDIA_TYPE = "multimedia_type";
  @SerializedName(SERIALIZED_NAME_MULTIMEDIA_TYPE)
  private MultimediaTypeEnum multimediaType;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_TEMP_MULTIMEDIA_OID = "temp_multimedia_oid";
  @SerializedName(SERIALIZED_NAME_TEMP_MULTIMEDIA_OID)
  private Integer tempMultimediaOid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public TempMultimedia() { 
  }

  public TempMultimedia filename(String filename) {
    
    this.filename = filename;
    return this;
  }

   /**
   * Filename
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filename")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    this.filename = filename;
  }


  public TempMultimedia height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * Height
   * @return height
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Height")

  public Integer getHeight() {
    return height;
  }


  public void setHeight(Integer height) {
    this.height = height;
  }


  public TempMultimedia multimediaType(MultimediaTypeEnum multimediaType) {
    
    this.multimediaType = multimediaType;
    return this;
  }

   /**
   * Multimedia type
   * @return multimediaType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multimedia type")

  public MultimediaTypeEnum getMultimediaType() {
    return multimediaType;
  }


  public void setMultimediaType(MultimediaTypeEnum multimediaType) {
    this.multimediaType = multimediaType;
  }


  public TempMultimedia size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * Size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Size")

  public Long getSize() {
    return size;
  }


  public void setSize(Long size) {
    this.size = size;
  }


  public TempMultimedia tempMultimediaOid(Integer tempMultimediaOid) {
    
    this.tempMultimediaOid = tempMultimediaOid;
    return this;
  }

   /**
   * Temporary multimedia object identifier
   * @return tempMultimediaOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Temporary multimedia object identifier")

  public Integer getTempMultimediaOid() {
    return tempMultimediaOid;
  }


  public void setTempMultimediaOid(Integer tempMultimediaOid) {
    this.tempMultimediaOid = tempMultimediaOid;
  }


  public TempMultimedia url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public TempMultimedia width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * Width
   * @return width
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Width")

  public Integer getWidth() {
    return width;
  }


  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TempMultimedia tempMultimedia = (TempMultimedia) o;
    return Objects.equals(this.filename, tempMultimedia.filename) &&
        Objects.equals(this.height, tempMultimedia.height) &&
        Objects.equals(this.multimediaType, tempMultimedia.multimediaType) &&
        Objects.equals(this.size, tempMultimedia.size) &&
        Objects.equals(this.tempMultimediaOid, tempMultimedia.tempMultimediaOid) &&
        Objects.equals(this.url, tempMultimedia.url) &&
        Objects.equals(this.width, tempMultimedia.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filename, height, multimediaType, size, tempMultimediaOid, url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TempMultimedia {\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    multimediaType: ").append(toIndentedString(multimediaType)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tempMultimediaOid: ").append(toIndentedString(tempMultimediaOid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filename");
    openapiFields.add("height");
    openapiFields.add("multimedia_type");
    openapiFields.add("size");
    openapiFields.add("temp_multimedia_oid");
    openapiFields.add("url");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TempMultimedia
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TempMultimedia.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TempMultimedia is not found in the empty JSON string", TempMultimedia.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TempMultimedia.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TempMultimedia` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if (jsonObj.get("multimedia_type") != null && !jsonObj.get("multimedia_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multimedia_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multimedia_type").toString()));
      }
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TempMultimedia.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TempMultimedia' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TempMultimedia> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TempMultimedia.class));

       return (TypeAdapter<T>) new TypeAdapter<TempMultimedia>() {
           @Override
           public void write(JsonWriter out, TempMultimedia value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TempMultimedia read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TempMultimedia given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TempMultimedia
  * @throws IOException if the JSON string is invalid with respect to TempMultimedia
  */
  public static TempMultimedia fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TempMultimedia.class);
  }

 /**
  * Convert an instance of TempMultimedia to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.AccountsReceivableRetryDayActivity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AccountsReceivableRetryConfig
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-20T11:32:05.396-05:00")



public class AccountsReceivableRetryConfig {
  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("allow_process_linked_accounts")
  private Boolean allowProcessLinkedAccounts = null;

  @SerializedName("cancel_auto_order")
  private Boolean cancelAutoOrder = null;

  @SerializedName("current_service_plan")
  private String currentServicePlan = null;

  @SerializedName("daily_activity_list")
  private List<AccountsReceivableRetryDayActivity> dailyActivityList = null;

  @SerializedName("managed_by_linked_account_merchant_id")
  private Boolean managedByLinkedAccountMerchantId = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("notify_emails")
  private List<String> notifyEmails = null;

  @SerializedName("notify_rejections")
  private Boolean notifyRejections = null;

  @SerializedName("notify_successes")
  private Boolean notifySuccesses = null;

  @SerializedName("process_linked_accounts")
  private Boolean processLinkedAccounts = null;

  @SerializedName("processing_percentage")
  private String processingPercentage = null;

  @SerializedName("reject_at_end")
  private Boolean rejectAtEnd = null;

  @SerializedName("trial_mode")
  private Boolean trialMode = null;

  @SerializedName("trial_mode_expiration_dts")
  private String trialModeExpirationDts = null;

  public AccountsReceivableRetryConfig active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * True if the retry should run daily.  False puts the retry service into an inactive state for this merchant.
   * @return active
  **/
  @ApiModelProperty(value = "True if the retry should run daily.  False puts the retry service into an inactive state for this merchant.")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public AccountsReceivableRetryConfig allowProcessLinkedAccounts(Boolean allowProcessLinkedAccounts) {
    this.allowProcessLinkedAccounts = allowProcessLinkedAccounts;
    return this;
  }

   /**
   * True if this account has linked accounts that it can process.
   * @return allowProcessLinkedAccounts
  **/
  @ApiModelProperty(value = "True if this account has linked accounts that it can process.")
  public Boolean isAllowProcessLinkedAccounts() {
    return allowProcessLinkedAccounts;
  }

  public void setAllowProcessLinkedAccounts(Boolean allowProcessLinkedAccounts) {
    this.allowProcessLinkedAccounts = allowProcessLinkedAccounts;
  }

  public AccountsReceivableRetryConfig cancelAutoOrder(Boolean cancelAutoOrder) {
    this.cancelAutoOrder = cancelAutoOrder;
    return this;
  }

   /**
   * If true also cancel the auto order if the order is rejected at the end
   * @return cancelAutoOrder
  **/
  @ApiModelProperty(value = "If true also cancel the auto order if the order is rejected at the end")
  public Boolean isCancelAutoOrder() {
    return cancelAutoOrder;
  }

  public void setCancelAutoOrder(Boolean cancelAutoOrder) {
    this.cancelAutoOrder = cancelAutoOrder;
  }

  public AccountsReceivableRetryConfig currentServicePlan(String currentServicePlan) {
    this.currentServicePlan = currentServicePlan;
    return this;
  }

   /**
   * The current service plan that the account is on.
   * @return currentServicePlan
  **/
  @ApiModelProperty(value = "The current service plan that the account is on.")
  public String getCurrentServicePlan() {
    return currentServicePlan;
  }

  public void setCurrentServicePlan(String currentServicePlan) {
    this.currentServicePlan = currentServicePlan;
  }

  public AccountsReceivableRetryConfig dailyActivityList(List<AccountsReceivableRetryDayActivity> dailyActivityList) {
    this.dailyActivityList = dailyActivityList;
    return this;
  }

  public AccountsReceivableRetryConfig addDailyActivityListItem(AccountsReceivableRetryDayActivity dailyActivityListItem) {
    if (this.dailyActivityList == null) {
      this.dailyActivityList = new ArrayList<AccountsReceivableRetryDayActivity>();
    }
    this.dailyActivityList.add(dailyActivityListItem);
    return this;
  }

   /**
   * A list of days and what actions should take place on those days after an order reaches accounts receivable
   * @return dailyActivityList
  **/
  @ApiModelProperty(value = "A list of days and what actions should take place on those days after an order reaches accounts receivable")
  public List<AccountsReceivableRetryDayActivity> getDailyActivityList() {
    return dailyActivityList;
  }

  public void setDailyActivityList(List<AccountsReceivableRetryDayActivity> dailyActivityList) {
    this.dailyActivityList = dailyActivityList;
  }

  public AccountsReceivableRetryConfig managedByLinkedAccountMerchantId(Boolean managedByLinkedAccountMerchantId) {
    this.managedByLinkedAccountMerchantId = managedByLinkedAccountMerchantId;
    return this;
  }

   /**
   * If not null, this account is managed by the specified parent merchant id.
   * @return managedByLinkedAccountMerchantId
  **/
  @ApiModelProperty(value = "If not null, this account is managed by the specified parent merchant id.")
  public Boolean isManagedByLinkedAccountMerchantId() {
    return managedByLinkedAccountMerchantId;
  }

  public void setManagedByLinkedAccountMerchantId(Boolean managedByLinkedAccountMerchantId) {
    this.managedByLinkedAccountMerchantId = managedByLinkedAccountMerchantId;
  }

  public AccountsReceivableRetryConfig merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * UltraCart merchant ID
   * @return merchantId
  **/
  @ApiModelProperty(value = "UltraCart merchant ID")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public AccountsReceivableRetryConfig notifyEmails(List<String> notifyEmails) {
    this.notifyEmails = notifyEmails;
    return this;
  }

  public AccountsReceivableRetryConfig addNotifyEmailsItem(String notifyEmailsItem) {
    if (this.notifyEmails == null) {
      this.notifyEmails = new ArrayList<String>();
    }
    this.notifyEmails.add(notifyEmailsItem);
    return this;
  }

   /**
   * A list of email addresses to receive summary notifications from the retry service.
   * @return notifyEmails
  **/
  @ApiModelProperty(value = "A list of email addresses to receive summary notifications from the retry service.")
  public List<String> getNotifyEmails() {
    return notifyEmails;
  }

  public void setNotifyEmails(List<String> notifyEmails) {
    this.notifyEmails = notifyEmails;
  }

  public AccountsReceivableRetryConfig notifyRejections(Boolean notifyRejections) {
    this.notifyRejections = notifyRejections;
    return this;
  }

   /**
   * If true, email addresses are notified of rejections.
   * @return notifyRejections
  **/
  @ApiModelProperty(value = "If true, email addresses are notified of rejections.")
  public Boolean isNotifyRejections() {
    return notifyRejections;
  }

  public void setNotifyRejections(Boolean notifyRejections) {
    this.notifyRejections = notifyRejections;
  }

  public AccountsReceivableRetryConfig notifySuccesses(Boolean notifySuccesses) {
    this.notifySuccesses = notifySuccesses;
    return this;
  }

   /**
   * If true, email addresses are notified of successful charges.
   * @return notifySuccesses
  **/
  @ApiModelProperty(value = "If true, email addresses are notified of successful charges.")
  public Boolean isNotifySuccesses() {
    return notifySuccesses;
  }

  public void setNotifySuccesses(Boolean notifySuccesses) {
    this.notifySuccesses = notifySuccesses;
  }

  public AccountsReceivableRetryConfig processLinkedAccounts(Boolean processLinkedAccounts) {
    this.processLinkedAccounts = processLinkedAccounts;
    return this;
  }

   /**
   * If true, all linked accounts are also processed using the same rules.
   * @return processLinkedAccounts
  **/
  @ApiModelProperty(value = "If true, all linked accounts are also processed using the same rules.")
  public Boolean isProcessLinkedAccounts() {
    return processLinkedAccounts;
  }

  public void setProcessLinkedAccounts(Boolean processLinkedAccounts) {
    this.processLinkedAccounts = processLinkedAccounts;
  }

  public AccountsReceivableRetryConfig processingPercentage(String processingPercentage) {
    this.processingPercentage = processingPercentage;
    return this;
  }

   /**
   * The percentage rate charged for the service.
   * @return processingPercentage
  **/
  @ApiModelProperty(value = "The percentage rate charged for the service.")
  public String getProcessingPercentage() {
    return processingPercentage;
  }

  public void setProcessingPercentage(String processingPercentage) {
    this.processingPercentage = processingPercentage;
  }

  public AccountsReceivableRetryConfig rejectAtEnd(Boolean rejectAtEnd) {
    this.rejectAtEnd = rejectAtEnd;
    return this;
  }

   /**
   * If true, the order is rejected the day after the last configured activity day
   * @return rejectAtEnd
  **/
  @ApiModelProperty(value = "If true, the order is rejected the day after the last configured activity day")
  public Boolean isRejectAtEnd() {
    return rejectAtEnd;
  }

  public void setRejectAtEnd(Boolean rejectAtEnd) {
    this.rejectAtEnd = rejectAtEnd;
  }

  public AccountsReceivableRetryConfig trialMode(Boolean trialMode) {
    this.trialMode = trialMode;
    return this;
  }

   /**
   * True if the account is currently in trial mode.  Set to false to exit trial mode.
   * @return trialMode
  **/
  @ApiModelProperty(value = "True if the account is currently in trial mode.  Set to false to exit trial mode.")
  public Boolean isTrialMode() {
    return trialMode;
  }

  public void setTrialMode(Boolean trialMode) {
    this.trialMode = trialMode;
  }

  public AccountsReceivableRetryConfig trialModeExpirationDts(String trialModeExpirationDts) {
    this.trialModeExpirationDts = trialModeExpirationDts;
    return this;
  }

   /**
   * The date when trial mode expires.  If this date is reached without exiting trial mode, the service will de-activate.
   * @return trialModeExpirationDts
  **/
  @ApiModelProperty(value = "The date when trial mode expires.  If this date is reached without exiting trial mode, the service will de-activate.")
  public String getTrialModeExpirationDts() {
    return trialModeExpirationDts;
  }

  public void setTrialModeExpirationDts(String trialModeExpirationDts) {
    this.trialModeExpirationDts = trialModeExpirationDts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountsReceivableRetryConfig accountsReceivableRetryConfig = (AccountsReceivableRetryConfig) o;
    return Objects.equals(this.active, accountsReceivableRetryConfig.active) &&
        Objects.equals(this.allowProcessLinkedAccounts, accountsReceivableRetryConfig.allowProcessLinkedAccounts) &&
        Objects.equals(this.cancelAutoOrder, accountsReceivableRetryConfig.cancelAutoOrder) &&
        Objects.equals(this.currentServicePlan, accountsReceivableRetryConfig.currentServicePlan) &&
        Objects.equals(this.dailyActivityList, accountsReceivableRetryConfig.dailyActivityList) &&
        Objects.equals(this.managedByLinkedAccountMerchantId, accountsReceivableRetryConfig.managedByLinkedAccountMerchantId) &&
        Objects.equals(this.merchantId, accountsReceivableRetryConfig.merchantId) &&
        Objects.equals(this.notifyEmails, accountsReceivableRetryConfig.notifyEmails) &&
        Objects.equals(this.notifyRejections, accountsReceivableRetryConfig.notifyRejections) &&
        Objects.equals(this.notifySuccesses, accountsReceivableRetryConfig.notifySuccesses) &&
        Objects.equals(this.processLinkedAccounts, accountsReceivableRetryConfig.processLinkedAccounts) &&
        Objects.equals(this.processingPercentage, accountsReceivableRetryConfig.processingPercentage) &&
        Objects.equals(this.rejectAtEnd, accountsReceivableRetryConfig.rejectAtEnd) &&
        Objects.equals(this.trialMode, accountsReceivableRetryConfig.trialMode) &&
        Objects.equals(this.trialModeExpirationDts, accountsReceivableRetryConfig.trialModeExpirationDts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, allowProcessLinkedAccounts, cancelAutoOrder, currentServicePlan, dailyActivityList, managedByLinkedAccountMerchantId, merchantId, notifyEmails, notifyRejections, notifySuccesses, processLinkedAccounts, processingPercentage, rejectAtEnd, trialMode, trialModeExpirationDts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountsReceivableRetryConfig {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    allowProcessLinkedAccounts: ").append(toIndentedString(allowProcessLinkedAccounts)).append("\n");
    sb.append("    cancelAutoOrder: ").append(toIndentedString(cancelAutoOrder)).append("\n");
    sb.append("    currentServicePlan: ").append(toIndentedString(currentServicePlan)).append("\n");
    sb.append("    dailyActivityList: ").append(toIndentedString(dailyActivityList)).append("\n");
    sb.append("    managedByLinkedAccountMerchantId: ").append(toIndentedString(managedByLinkedAccountMerchantId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    notifyEmails: ").append(toIndentedString(notifyEmails)).append("\n");
    sb.append("    notifyRejections: ").append(toIndentedString(notifyRejections)).append("\n");
    sb.append("    notifySuccesses: ").append(toIndentedString(notifySuccesses)).append("\n");
    sb.append("    processLinkedAccounts: ").append(toIndentedString(processLinkedAccounts)).append("\n");
    sb.append("    processingPercentage: ").append(toIndentedString(processingPercentage)).append("\n");
    sb.append("    rejectAtEnd: ").append(toIndentedString(rejectAtEnd)).append("\n");
    sb.append("    trialMode: ").append(toIndentedString(trialMode)).append("\n");
    sb.append("    trialModeExpirationDts: ").append(toIndentedString(trialModeExpirationDts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PaymentsConfigurationTestMethod
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-09-13T13:37:38.400-04:00")



public class PaymentsConfigurationTestMethod {
  @SerializedName("bank_account_number")
  private String bankAccountNumber = null;

  @SerializedName("bank_routing_number")
  private String bankRoutingNumber = null;

  @SerializedName("credit_card_number")
  private String creditCardNumber = null;

  @SerializedName("credit_card_number_existing")
  private String creditCardNumberExisting = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Payment action
   */
  @JsonAdapter(PaymentActionEnum.Adapter.class)
  public enum PaymentActionEnum {
    SKIP_PAYMENT("skip payment"),
    
    SKIP_PMT_REJ("skip pmt rej"),
    
    SKIP_PMT_CO("skip pmt co"),
    
    HOLD_IN_AR("hold in ar");

    private String value;

    PaymentActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentActionEnum fromValue(String text) {
      for (PaymentActionEnum b : PaymentActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("payment_action")
  private PaymentActionEnum paymentAction = null;

  @SerializedName("payment_method")
  private String paymentMethod = null;

  @SerializedName("payment_method_test_oid")
  private Integer paymentMethodTestOid = null;

  @SerializedName("skip_affiliate_transaction")
  private Boolean skipAffiliateTransaction = null;

  @SerializedName("skip_conversion_pixels")
  private Boolean skipConversionPixels = null;

  @SerializedName("skip_fraud_filter")
  private Boolean skipFraudFilter = null;

  public PaymentsConfigurationTestMethod bankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Bank account number
   * @return bankAccountNumber
  **/
  @ApiModelProperty(value = "Bank account number")
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }

  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }

  public PaymentsConfigurationTestMethod bankRoutingNumber(String bankRoutingNumber) {
    this.bankRoutingNumber = bankRoutingNumber;
    return this;
  }

   /**
   * Bank routing number
   * @return bankRoutingNumber
  **/
  @ApiModelProperty(value = "Bank routing number")
  public String getBankRoutingNumber() {
    return bankRoutingNumber;
  }

  public void setBankRoutingNumber(String bankRoutingNumber) {
    this.bankRoutingNumber = bankRoutingNumber;
  }

  public PaymentsConfigurationTestMethod creditCardNumber(String creditCardNumber) {
    this.creditCardNumber = creditCardNumber;
    return this;
  }

   /**
   * Credit card number
   * @return creditCardNumber
  **/
  @ApiModelProperty(value = "Credit card number")
  public String getCreditCardNumber() {
    return creditCardNumber;
  }

  public void setCreditCardNumber(String creditCardNumber) {
    this.creditCardNumber = creditCardNumber;
  }

  public PaymentsConfigurationTestMethod creditCardNumberExisting(String creditCardNumberExisting) {
    this.creditCardNumberExisting = creditCardNumberExisting;
    return this;
  }

   /**
   * The existing credit card number
   * @return creditCardNumberExisting
  **/
  @ApiModelProperty(value = "The existing credit card number")
  public String getCreditCardNumberExisting() {
    return creditCardNumberExisting;
  }

  public void setCreditCardNumberExisting(String creditCardNumberExisting) {
    this.creditCardNumberExisting = creditCardNumberExisting;
  }

  public PaymentsConfigurationTestMethod description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @ApiModelProperty(value = "Description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PaymentsConfigurationTestMethod paymentAction(PaymentActionEnum paymentAction) {
    this.paymentAction = paymentAction;
    return this;
  }

   /**
   * Payment action
   * @return paymentAction
  **/
  @ApiModelProperty(value = "Payment action")
  public PaymentActionEnum getPaymentAction() {
    return paymentAction;
  }

  public void setPaymentAction(PaymentActionEnum paymentAction) {
    this.paymentAction = paymentAction;
  }

  public PaymentsConfigurationTestMethod paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method
   * @return paymentMethod
  **/
  @ApiModelProperty(value = "Payment method")
  public String getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public PaymentsConfigurationTestMethod paymentMethodTestOid(Integer paymentMethodTestOid) {
    this.paymentMethodTestOid = paymentMethodTestOid;
    return this;
  }

   /**
   * Payment method test oid
   * @return paymentMethodTestOid
  **/
  @ApiModelProperty(value = "Payment method test oid")
  public Integer getPaymentMethodTestOid() {
    return paymentMethodTestOid;
  }

  public void setPaymentMethodTestOid(Integer paymentMethodTestOid) {
    this.paymentMethodTestOid = paymentMethodTestOid;
  }

  public PaymentsConfigurationTestMethod skipAffiliateTransaction(Boolean skipAffiliateTransaction) {
    this.skipAffiliateTransaction = skipAffiliateTransaction;
    return this;
  }

   /**
   * Skip affiliate transaction
   * @return skipAffiliateTransaction
  **/
  @ApiModelProperty(value = "Skip affiliate transaction")
  public Boolean isSkipAffiliateTransaction() {
    return skipAffiliateTransaction;
  }

  public void setSkipAffiliateTransaction(Boolean skipAffiliateTransaction) {
    this.skipAffiliateTransaction = skipAffiliateTransaction;
  }

  public PaymentsConfigurationTestMethod skipConversionPixels(Boolean skipConversionPixels) {
    this.skipConversionPixels = skipConversionPixels;
    return this;
  }

   /**
   * If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites
   * @return skipConversionPixels
  **/
  @ApiModelProperty(value = "If true, skips recording any conversion pixels to avoid sending test orders to your analysis sites")
  public Boolean isSkipConversionPixels() {
    return skipConversionPixels;
  }

  public void setSkipConversionPixels(Boolean skipConversionPixels) {
    this.skipConversionPixels = skipConversionPixels;
  }

  public PaymentsConfigurationTestMethod skipFraudFilter(Boolean skipFraudFilter) {
    this.skipFraudFilter = skipFraudFilter;
    return this;
  }

   /**
   * Skip fraud filter
   * @return skipFraudFilter
  **/
  @ApiModelProperty(value = "Skip fraud filter")
  public Boolean isSkipFraudFilter() {
    return skipFraudFilter;
  }

  public void setSkipFraudFilter(Boolean skipFraudFilter) {
    this.skipFraudFilter = skipFraudFilter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsConfigurationTestMethod paymentsConfigurationTestMethod = (PaymentsConfigurationTestMethod) o;
    return Objects.equals(this.bankAccountNumber, paymentsConfigurationTestMethod.bankAccountNumber) &&
        Objects.equals(this.bankRoutingNumber, paymentsConfigurationTestMethod.bankRoutingNumber) &&
        Objects.equals(this.creditCardNumber, paymentsConfigurationTestMethod.creditCardNumber) &&
        Objects.equals(this.creditCardNumberExisting, paymentsConfigurationTestMethod.creditCardNumberExisting) &&
        Objects.equals(this.description, paymentsConfigurationTestMethod.description) &&
        Objects.equals(this.paymentAction, paymentsConfigurationTestMethod.paymentAction) &&
        Objects.equals(this.paymentMethod, paymentsConfigurationTestMethod.paymentMethod) &&
        Objects.equals(this.paymentMethodTestOid, paymentsConfigurationTestMethod.paymentMethodTestOid) &&
        Objects.equals(this.skipAffiliateTransaction, paymentsConfigurationTestMethod.skipAffiliateTransaction) &&
        Objects.equals(this.skipConversionPixels, paymentsConfigurationTestMethod.skipConversionPixels) &&
        Objects.equals(this.skipFraudFilter, paymentsConfigurationTestMethod.skipFraudFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankAccountNumber, bankRoutingNumber, creditCardNumber, creditCardNumberExisting, description, paymentAction, paymentMethod, paymentMethodTestOid, skipAffiliateTransaction, skipConversionPixels, skipFraudFilter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsConfigurationTestMethod {\n");
    
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    bankRoutingNumber: ").append(toIndentedString(bankRoutingNumber)).append("\n");
    sb.append("    creditCardNumber: ").append(toIndentedString(creditCardNumber)).append("\n");
    sb.append("    creditCardNumberExisting: ").append(toIndentedString(creditCardNumberExisting)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    paymentAction: ").append(toIndentedString(paymentAction)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentMethodTestOid: ").append(toIndentedString(paymentMethodTestOid)).append("\n");
    sb.append("    skipAffiliateTransaction: ").append(toIndentedString(skipAffiliateTransaction)).append("\n");
    sb.append("    skipConversionPixels: ").append(toIndentedString(skipConversionPixels)).append("\n");
    sb.append("    skipFraudFilter: ").append(toIndentedString(skipFraudFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * AffiliateClickQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-01T11:46:50.322-04:00[America/Indianapolis]")
public class AffiliateClickQuery {
  public static final String SERIALIZED_NAME_AFFILIATE_LINK_OID = "affiliate_link_oid";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_LINK_OID)
  private Integer affiliateLinkOid;

  public static final String SERIALIZED_NAME_AFFILIATE_OID = "affiliate_oid";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_OID)
  private Integer affiliateOid;

  public static final String SERIALIZED_NAME_CLICK_DTS_BEGIN = "click_dts_begin";
  @SerializedName(SERIALIZED_NAME_CLICK_DTS_BEGIN)
  private String clickDtsBegin;

  public static final String SERIALIZED_NAME_CLICK_DTS_END = "click_dts_end";
  @SerializedName(SERIALIZED_NAME_CLICK_DTS_END)
  private String clickDtsEnd;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_SUB_ID = "sub_id";
  @SerializedName(SERIALIZED_NAME_SUB_ID)
  private String subId;

  public AffiliateClickQuery() { 
  }

  public AffiliateClickQuery affiliateLinkOid(Integer affiliateLinkOid) {
    
    this.affiliateLinkOid = affiliateLinkOid;
    return this;
  }

   /**
   * Unique object identifier for for the link that this click is associated with
   * @return affiliateLinkOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique object identifier for for the link that this click is associated with")

  public Integer getAffiliateLinkOid() {
    return affiliateLinkOid;
  }


  public void setAffiliateLinkOid(Integer affiliateLinkOid) {
    this.affiliateLinkOid = affiliateLinkOid;
  }


  public AffiliateClickQuery affiliateOid(Integer affiliateOid) {
    
    this.affiliateOid = affiliateOid;
    return this;
  }

   /**
   * Affiliate ID associated with the click
   * @return affiliateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliate ID associated with the click")

  public Integer getAffiliateOid() {
    return affiliateOid;
  }


  public void setAffiliateOid(Integer affiliateOid) {
    this.affiliateOid = affiliateOid;
  }


  public AffiliateClickQuery clickDtsBegin(String clickDtsBegin) {
    
    this.clickDtsBegin = clickDtsBegin;
    return this;
  }

   /**
   * Minimum click date/time to return
   * @return clickDtsBegin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum click date/time to return")

  public String getClickDtsBegin() {
    return clickDtsBegin;
  }


  public void setClickDtsBegin(String clickDtsBegin) {
    this.clickDtsBegin = clickDtsBegin;
  }


  public AffiliateClickQuery clickDtsEnd(String clickDtsEnd) {
    
    this.clickDtsEnd = clickDtsEnd;
    return this;
  }

   /**
   * Maximum click date/time to return
   * @return clickDtsEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum click date/time to return")

  public String getClickDtsEnd() {
    return clickDtsEnd;
  }


  public void setClickDtsEnd(String clickDtsEnd) {
    this.clickDtsEnd = clickDtsEnd;
  }


  public AffiliateClickQuery ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP address that generated the click
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP address that generated the click")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public AffiliateClickQuery subId(String subId) {
    
    this.subId = subId;
    return this;
  }

   /**
   * Sub ID value passed on the click
   * @return subId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sub ID value passed on the click")

  public String getSubId() {
    return subId;
  }


  public void setSubId(String subId) {
    this.subId = subId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AffiliateClickQuery affiliateClickQuery = (AffiliateClickQuery) o;
    return Objects.equals(this.affiliateLinkOid, affiliateClickQuery.affiliateLinkOid) &&
        Objects.equals(this.affiliateOid, affiliateClickQuery.affiliateOid) &&
        Objects.equals(this.clickDtsBegin, affiliateClickQuery.clickDtsBegin) &&
        Objects.equals(this.clickDtsEnd, affiliateClickQuery.clickDtsEnd) &&
        Objects.equals(this.ipAddress, affiliateClickQuery.ipAddress) &&
        Objects.equals(this.subId, affiliateClickQuery.subId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliateLinkOid, affiliateOid, clickDtsBegin, clickDtsEnd, ipAddress, subId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AffiliateClickQuery {\n");
    sb.append("    affiliateLinkOid: ").append(toIndentedString(affiliateLinkOid)).append("\n");
    sb.append("    affiliateOid: ").append(toIndentedString(affiliateOid)).append("\n");
    sb.append("    clickDtsBegin: ").append(toIndentedString(clickDtsBegin)).append("\n");
    sb.append("    clickDtsEnd: ").append(toIndentedString(clickDtsEnd)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    subId: ").append(toIndentedString(subId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliate_link_oid");
    openapiFields.add("affiliate_oid");
    openapiFields.add("click_dts_begin");
    openapiFields.add("click_dts_end");
    openapiFields.add("ip_address");
    openapiFields.add("sub_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AffiliateClickQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AffiliateClickQuery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AffiliateClickQuery is not found in the empty JSON string", AffiliateClickQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AffiliateClickQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AffiliateClickQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("click_dts_begin") != null && !jsonObj.get("click_dts_begin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `click_dts_begin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("click_dts_begin").toString()));
      }
      if (jsonObj.get("click_dts_end") != null && !jsonObj.get("click_dts_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `click_dts_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("click_dts_end").toString()));
      }
      if (jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if (jsonObj.get("sub_id") != null && !jsonObj.get("sub_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AffiliateClickQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AffiliateClickQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AffiliateClickQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AffiliateClickQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<AffiliateClickQuery>() {
           @Override
           public void write(JsonWriter out, AffiliateClickQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AffiliateClickQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AffiliateClickQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AffiliateClickQuery
  * @throws IOException if the JSON string is invalid with respect to AffiliateClickQuery
  */
  public static AffiliateClickQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AffiliateClickQuery.class);
  }

 /**
  * Convert an instance of AffiliateClickQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


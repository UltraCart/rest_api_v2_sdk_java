/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailListCustomer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T15:59:09.011-04:00[America/Indianapolis]")
public class EmailListCustomer {
  public static final String SERIALIZED_NAME_ADD_DTS = "add_dts";
  @SerializedName(SERIALIZED_NAME_ADD_DTS)
  private String addDts;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_CUSTOMER_UUID = "email_customer_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_CUSTOMER_UUID)
  private String emailCustomerUuid;

  public static final String SERIALIZED_NAME_EMAIL_LIST_MEMBER_UUID = "email_list_member_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_LIST_MEMBER_UUID)
  private String emailListMemberUuid;

  public EmailListCustomer() { 
  }

  public EmailListCustomer addDts(String addDts) {
    
    this.addDts = addDts;
    return this;
  }

   /**
   * Added timestamp
   * @return addDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Added timestamp")

  public String getAddDts() {
    return addDts;
  }


  public void setAddDts(String addDts) {
    this.addDts = addDts;
  }


  public EmailListCustomer email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public EmailListCustomer emailCustomerUuid(String emailCustomerUuid) {
    
    this.emailCustomerUuid = emailCustomerUuid;
    return this;
  }

   /**
   * Email customer UUID
   * @return emailCustomerUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email customer UUID")

  public String getEmailCustomerUuid() {
    return emailCustomerUuid;
  }


  public void setEmailCustomerUuid(String emailCustomerUuid) {
    this.emailCustomerUuid = emailCustomerUuid;
  }


  public EmailListCustomer emailListMemberUuid(String emailListMemberUuid) {
    
    this.emailListMemberUuid = emailListMemberUuid;
    return this;
  }

   /**
   * Email list member UUID
   * @return emailListMemberUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email list member UUID")

  public String getEmailListMemberUuid() {
    return emailListMemberUuid;
  }


  public void setEmailListMemberUuid(String emailListMemberUuid) {
    this.emailListMemberUuid = emailListMemberUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailListCustomer emailListCustomer = (EmailListCustomer) o;
    return Objects.equals(this.addDts, emailListCustomer.addDts) &&
        Objects.equals(this.email, emailListCustomer.email) &&
        Objects.equals(this.emailCustomerUuid, emailListCustomer.emailCustomerUuid) &&
        Objects.equals(this.emailListMemberUuid, emailListCustomer.emailListMemberUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addDts, email, emailCustomerUuid, emailListMemberUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailListCustomer {\n");
    sb.append("    addDts: ").append(toIndentedString(addDts)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailCustomerUuid: ").append(toIndentedString(emailCustomerUuid)).append("\n");
    sb.append("    emailListMemberUuid: ").append(toIndentedString(emailListMemberUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_dts");
    openapiFields.add("email");
    openapiFields.add("email_customer_uuid");
    openapiFields.add("email_list_member_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailListCustomer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailListCustomer.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailListCustomer is not found in the empty JSON string", EmailListCustomer.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailListCustomer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailListCustomer` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("add_dts") != null && !jsonObj.get("add_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("add_dts").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (jsonObj.get("email_customer_uuid") != null && !jsonObj.get("email_customer_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_customer_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_customer_uuid").toString()));
      }
      if (jsonObj.get("email_list_member_uuid") != null && !jsonObj.get("email_list_member_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_list_member_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_list_member_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailListCustomer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailListCustomer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailListCustomer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailListCustomer.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailListCustomer>() {
           @Override
           public void write(JsonWriter out, EmailListCustomer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailListCustomer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailListCustomer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailListCustomer
  * @throws IOException if the JSON string is invalid with respect to EmailListCustomer
  */
  public static EmailListCustomer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailListCustomer.class);
  }

 /**
  * Convert an instance of EmailListCustomer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ReportPageVisualizationMetric
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-03-28T12:52:52.425-04:00")



public class ReportPageVisualizationMetric {
  /**
   * Aggregation to perform
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    SUM("sum"),
    
    COUNT("count"),
    
    MIN("min"),
    
    MAX("max"),
    
    AVG("avg"),
    
    NONE("none");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String text) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AggregationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("aggregation")
  private AggregationEnum aggregation = null;

  @SerializedName("as")
  private String as = null;

  @SerializedName("column")
  private String column = null;

  @SerializedName("round")
  private Integer round = null;

  public ReportPageVisualizationMetric aggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Aggregation to perform
   * @return aggregation
  **/
  @ApiModelProperty(value = "Aggregation to perform")
  public AggregationEnum getAggregation() {
    return aggregation;
  }

  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }

  public ReportPageVisualizationMetric as(String as) {
    this.as = as;
    return this;
  }

   /**
   * Return the column as a different name
   * @return as
  **/
  @ApiModelProperty(value = "Return the column as a different name")
  public String getAs() {
    return as;
  }

  public void setAs(String as) {
    this.as = as;
  }

  public ReportPageVisualizationMetric column(String column) {
    this.column = column;
    return this;
  }

   /**
   * Get column
   * @return column
  **/
  @ApiModelProperty(value = "")
  public String getColumn() {
    return column;
  }

  public void setColumn(String column) {
    this.column = column;
  }

  public ReportPageVisualizationMetric round(Integer round) {
    this.round = round;
    return this;
  }

   /**
   * Number of places after the decimal point to round the number to.
   * @return round
  **/
  @ApiModelProperty(value = "Number of places after the decimal point to round the number to.")
  public Integer getRound() {
    return round;
  }

  public void setRound(Integer round) {
    this.round = round;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPageVisualizationMetric reportPageVisualizationMetric = (ReportPageVisualizationMetric) o;
    return Objects.equals(this.aggregation, reportPageVisualizationMetric.aggregation) &&
        Objects.equals(this.as, reportPageVisualizationMetric.as) &&
        Objects.equals(this.column, reportPageVisualizationMetric.column) &&
        Objects.equals(this.round, reportPageVisualizationMetric.round);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregation, as, column, round);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPageVisualizationMetric {\n");
    
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    as: ").append(toIndentedString(as)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


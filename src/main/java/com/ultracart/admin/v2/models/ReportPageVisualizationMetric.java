/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportPageVisualizationMetric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T15:30:33.009-04:00[America/Indianapolis]")
public class ReportPageVisualizationMetric {
  /**
   * Aggregation to perform
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    SUM("sum"),
    
    COUNT("count"),
    
    MIN("min"),
    
    MAX("max"),
    
    AVG("avg"),
    
    NONE("none");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private AggregationEnum aggregation;

  public static final String SERIALIZED_NAME_AS = "as";
  @SerializedName(SERIALIZED_NAME_AS)
  private String as;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_ROUND = "round";
  @SerializedName(SERIALIZED_NAME_ROUND)
  private Integer round;

  public ReportPageVisualizationMetric() { 
  }

  public ReportPageVisualizationMetric aggregation(AggregationEnum aggregation) {
    
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Aggregation to perform
   * @return aggregation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Aggregation to perform")

  public AggregationEnum getAggregation() {
    return aggregation;
  }


  public void setAggregation(AggregationEnum aggregation) {
    this.aggregation = aggregation;
  }


  public ReportPageVisualizationMetric as(String as) {
    
    this.as = as;
    return this;
  }

   /**
   * Return the column as a different name
   * @return as
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Return the column as a different name")

  public String getAs() {
    return as;
  }


  public void setAs(String as) {
    this.as = as;
  }


  public ReportPageVisualizationMetric column(String column) {
    
    this.column = column;
    return this;
  }

   /**
   * Get column
   * @return column
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumn() {
    return column;
  }


  public void setColumn(String column) {
    this.column = column;
  }


  public ReportPageVisualizationMetric round(Integer round) {
    
    this.round = round;
    return this;
  }

   /**
   * Number of places after the decimal point to round the number to.
   * @return round
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of places after the decimal point to round the number to.")

  public Integer getRound() {
    return round;
  }


  public void setRound(Integer round) {
    this.round = round;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPageVisualizationMetric reportPageVisualizationMetric = (ReportPageVisualizationMetric) o;
    return Objects.equals(this.aggregation, reportPageVisualizationMetric.aggregation) &&
        Objects.equals(this.as, reportPageVisualizationMetric.as) &&
        Objects.equals(this.column, reportPageVisualizationMetric.column) &&
        Objects.equals(this.round, reportPageVisualizationMetric.round);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregation, as, column, round);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPageVisualizationMetric {\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    as: ").append(toIndentedString(as)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregation");
    openapiFields.add("as");
    openapiFields.add("column");
    openapiFields.add("round");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportPageVisualizationMetric
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportPageVisualizationMetric.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportPageVisualizationMetric is not found in the empty JSON string", ReportPageVisualizationMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportPageVisualizationMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportPageVisualizationMetric` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("aggregation") != null && !jsonObj.get("aggregation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregation").toString()));
      }
      if (jsonObj.get("as") != null && !jsonObj.get("as").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as").toString()));
      }
      if (jsonObj.get("column") != null && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportPageVisualizationMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportPageVisualizationMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportPageVisualizationMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportPageVisualizationMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportPageVisualizationMetric>() {
           @Override
           public void write(JsonWriter out, ReportPageVisualizationMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportPageVisualizationMetric read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportPageVisualizationMetric given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportPageVisualizationMetric
  * @throws IOException if the JSON string is invalid with respect to ReportPageVisualizationMetric
  */
  public static ReportPageVisualizationMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportPageVisualizationMetric.class);
  }

 /**
  * Convert an instance of ReportPageVisualizationMetric to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


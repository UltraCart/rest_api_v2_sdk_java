/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderAffiliateLedger
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-21T13:52:41.854-05:00[America/Indianapolis]")
public class OrderAffiliateLedger {
  public static final String SERIALIZED_NAME_ASSIGNED_BY_USER = "assigned_by_user";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BY_USER)
  private String assignedByUser;

  public static final String SERIALIZED_NAME_ITEM_ID = "item_id";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_TIER_NUMBER = "tier_number";
  @SerializedName(SERIALIZED_NAME_TIER_NUMBER)
  private Integer tierNumber;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transaction_amount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private BigDecimal transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT_PAID = "transaction_amount_paid";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT_PAID)
  private BigDecimal transactionAmountPaid;

  public static final String SERIALIZED_NAME_TRANSACTION_DTS = "transaction_dts";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DTS)
  private String transactionDts;

  public static final String SERIALIZED_NAME_TRANSACTION_MEMO = "transaction_memo";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_MEMO)
  private String transactionMemo;

  public static final String SERIALIZED_NAME_TRANSACTION_PERCENTAGE = "transaction_percentage";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_PERCENTAGE)
  private BigDecimal transactionPercentage;

  /**
   * The state of the transaction
   */
  @JsonAdapter(TransactionStateEnum.Adapter.class)
  public enum TransactionStateEnum {
    PENDING("Pending"),
    
    POSTED("Posted"),
    
    APPROVED("Approved"),
    
    PAID("Paid"),
    
    REJECTED("Rejected"),
    
    PARTIALLY_PAID("Partially Paid");

    private String value;

    TransactionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStateEnum fromValue(String value) {
      for (TransactionStateEnum b : TransactionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATE = "transaction_state";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATE)
  private TransactionStateEnum transactionState;

  public OrderAffiliateLedger() { 
  }

  public OrderAffiliateLedger assignedByUser(String assignedByUser) {
    
    this.assignedByUser = assignedByUser;
    return this;
  }

   /**
   * UltraCart user name that assigned this commission if manually assigned
   * @return assignedByUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UltraCart user name that assigned this commission if manually assigned")

  public String getAssignedByUser() {
    return assignedByUser;
  }


  public void setAssignedByUser(String assignedByUser) {
    this.assignedByUser = assignedByUser;
  }


  public OrderAffiliateLedger itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * Item ID that this ledger record is associated with
   * @return itemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Item ID that this ledger record is associated with")

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public OrderAffiliateLedger tierNumber(Integer tierNumber) {
    
    this.tierNumber = tierNumber;
    return this;
  }

   /**
   * Tier number of this affiliate in the commission calculation
   * @return tierNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tier number of this affiliate in the commission calculation")

  public Integer getTierNumber() {
    return tierNumber;
  }


  public void setTierNumber(Integer tierNumber) {
    this.tierNumber = tierNumber;
  }


  public OrderAffiliateLedger transactionAmount(BigDecimal transactionAmount) {
    
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Amount of the transaction
   * @return transactionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of the transaction")

  public BigDecimal getTransactionAmount() {
    return transactionAmount;
  }


  public void setTransactionAmount(BigDecimal transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public OrderAffiliateLedger transactionAmountPaid(BigDecimal transactionAmountPaid) {
    
    this.transactionAmountPaid = transactionAmountPaid;
    return this;
  }

   /**
   * The amount that has been paid so far on the transaction
   * @return transactionAmountPaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount that has been paid so far on the transaction")

  public BigDecimal getTransactionAmountPaid() {
    return transactionAmountPaid;
  }


  public void setTransactionAmountPaid(BigDecimal transactionAmountPaid) {
    this.transactionAmountPaid = transactionAmountPaid;
  }


  public OrderAffiliateLedger transactionDts(String transactionDts) {
    
    this.transactionDts = transactionDts;
    return this;
  }

   /**
   * The date/time that the affiliate ledger was generated for the transaction
   * @return transactionDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date/time that the affiliate ledger was generated for the transaction")

  public String getTransactionDts() {
    return transactionDts;
  }


  public void setTransactionDts(String transactionDts) {
    this.transactionDts = transactionDts;
  }


  public OrderAffiliateLedger transactionMemo(String transactionMemo) {
    
    this.transactionMemo = transactionMemo;
    return this;
  }

   /**
   * Details of the transaction suitable for display to the affiliate
   * @return transactionMemo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the transaction suitable for display to the affiliate")

  public String getTransactionMemo() {
    return transactionMemo;
  }


  public void setTransactionMemo(String transactionMemo) {
    this.transactionMemo = transactionMemo;
  }


  public OrderAffiliateLedger transactionPercentage(BigDecimal transactionPercentage) {
    
    this.transactionPercentage = transactionPercentage;
    return this;
  }

   /**
   * The percentage earned on the transaction
   * @return transactionPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage earned on the transaction")

  public BigDecimal getTransactionPercentage() {
    return transactionPercentage;
  }


  public void setTransactionPercentage(BigDecimal transactionPercentage) {
    this.transactionPercentage = transactionPercentage;
  }


  public OrderAffiliateLedger transactionState(TransactionStateEnum transactionState) {
    
    this.transactionState = transactionState;
    return this;
  }

   /**
   * The state of the transaction
   * @return transactionState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state of the transaction")

  public TransactionStateEnum getTransactionState() {
    return transactionState;
  }


  public void setTransactionState(TransactionStateEnum transactionState) {
    this.transactionState = transactionState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderAffiliateLedger orderAffiliateLedger = (OrderAffiliateLedger) o;
    return Objects.equals(this.assignedByUser, orderAffiliateLedger.assignedByUser) &&
        Objects.equals(this.itemId, orderAffiliateLedger.itemId) &&
        Objects.equals(this.tierNumber, orderAffiliateLedger.tierNumber) &&
        Objects.equals(this.transactionAmount, orderAffiliateLedger.transactionAmount) &&
        Objects.equals(this.transactionAmountPaid, orderAffiliateLedger.transactionAmountPaid) &&
        Objects.equals(this.transactionDts, orderAffiliateLedger.transactionDts) &&
        Objects.equals(this.transactionMemo, orderAffiliateLedger.transactionMemo) &&
        Objects.equals(this.transactionPercentage, orderAffiliateLedger.transactionPercentage) &&
        Objects.equals(this.transactionState, orderAffiliateLedger.transactionState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedByUser, itemId, tierNumber, transactionAmount, transactionAmountPaid, transactionDts, transactionMemo, transactionPercentage, transactionState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderAffiliateLedger {\n");
    sb.append("    assignedByUser: ").append(toIndentedString(assignedByUser)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    tierNumber: ").append(toIndentedString(tierNumber)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionAmountPaid: ").append(toIndentedString(transactionAmountPaid)).append("\n");
    sb.append("    transactionDts: ").append(toIndentedString(transactionDts)).append("\n");
    sb.append("    transactionMemo: ").append(toIndentedString(transactionMemo)).append("\n");
    sb.append("    transactionPercentage: ").append(toIndentedString(transactionPercentage)).append("\n");
    sb.append("    transactionState: ").append(toIndentedString(transactionState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assigned_by_user");
    openapiFields.add("item_id");
    openapiFields.add("tier_number");
    openapiFields.add("transaction_amount");
    openapiFields.add("transaction_amount_paid");
    openapiFields.add("transaction_dts");
    openapiFields.add("transaction_memo");
    openapiFields.add("transaction_percentage");
    openapiFields.add("transaction_state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderAffiliateLedger
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderAffiliateLedger.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderAffiliateLedger is not found in the empty JSON string", OrderAffiliateLedger.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderAffiliateLedger.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderAffiliateLedger` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("assigned_by_user") != null && !jsonObj.get("assigned_by_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_by_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_by_user").toString()));
      }
      if (jsonObj.get("item_id") != null && !jsonObj.get("item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_id").toString()));
      }
      if (jsonObj.get("transaction_dts") != null && !jsonObj.get("transaction_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_dts").toString()));
      }
      if (jsonObj.get("transaction_memo") != null && !jsonObj.get("transaction_memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_memo").toString()));
      }
      if (jsonObj.get("transaction_state") != null && !jsonObj.get("transaction_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderAffiliateLedger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderAffiliateLedger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderAffiliateLedger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderAffiliateLedger.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderAffiliateLedger>() {
           @Override
           public void write(JsonWriter out, OrderAffiliateLedger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderAffiliateLedger read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderAffiliateLedger given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderAffiliateLedger
  * @throws IOException if the JSON string is invalid with respect to OrderAffiliateLedger
  */
  public static OrderAffiliateLedger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderAffiliateLedger.class);
  }

 /**
  * Convert an instance of OrderAffiliateLedger to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ScreenRecordingHeatmapUrl
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-11-21T14:37:23.421-05:00")



public class ScreenRecordingHeatmapUrl {
  @SerializedName("histogram_data")
  private List<Integer> histogramData = null;

  @SerializedName("histogram_interval")
  private String histogramInterval = null;

  @SerializedName("histogram_start_dts")
  private String histogramStartDts = null;

  @SerializedName("page_rank")
  private Integer pageRank = null;

  @SerializedName("session_count")
  private Integer sessionCount = null;

  @SerializedName("url")
  private String url = null;

  public ScreenRecordingHeatmapUrl histogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
    return this;
  }

  public ScreenRecordingHeatmapUrl addHistogramDataItem(Integer histogramDataItem) {
    if (this.histogramData == null) {
      this.histogramData = new ArrayList<Integer>();
    }
    this.histogramData.add(histogramDataItem);
    return this;
  }

   /**
   * Get histogramData
   * @return histogramData
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getHistogramData() {
    return histogramData;
  }

  public void setHistogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
  }

  public ScreenRecordingHeatmapUrl histogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
    return this;
  }

   /**
   * Get histogramInterval
   * @return histogramInterval
  **/
  @ApiModelProperty(value = "")
  public String getHistogramInterval() {
    return histogramInterval;
  }

  public void setHistogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
  }

  public ScreenRecordingHeatmapUrl histogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
    return this;
  }

   /**
   * Get histogramStartDts
   * @return histogramStartDts
  **/
  @ApiModelProperty(value = "")
  public String getHistogramStartDts() {
    return histogramStartDts;
  }

  public void setHistogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
  }

  public ScreenRecordingHeatmapUrl pageRank(Integer pageRank) {
    this.pageRank = pageRank;
    return this;
  }

   /**
   * Get pageRank
   * @return pageRank
  **/
  @ApiModelProperty(value = "")
  public Integer getPageRank() {
    return pageRank;
  }

  public void setPageRank(Integer pageRank) {
    this.pageRank = pageRank;
  }

  public ScreenRecordingHeatmapUrl sessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Get sessionCount
   * @return sessionCount
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionCount() {
    return sessionCount;
  }

  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }

  public ScreenRecordingHeatmapUrl url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingHeatmapUrl screenRecordingHeatmapUrl = (ScreenRecordingHeatmapUrl) o;
    return Objects.equals(this.histogramData, screenRecordingHeatmapUrl.histogramData) &&
        Objects.equals(this.histogramInterval, screenRecordingHeatmapUrl.histogramInterval) &&
        Objects.equals(this.histogramStartDts, screenRecordingHeatmapUrl.histogramStartDts) &&
        Objects.equals(this.pageRank, screenRecordingHeatmapUrl.pageRank) &&
        Objects.equals(this.sessionCount, screenRecordingHeatmapUrl.sessionCount) &&
        Objects.equals(this.url, screenRecordingHeatmapUrl.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(histogramData, histogramInterval, histogramStartDts, pageRank, sessionCount, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingHeatmapUrl {\n");
    
    sb.append("    histogramData: ").append(toIndentedString(histogramData)).append("\n");
    sb.append("    histogramInterval: ").append(toIndentedString(histogramInterval)).append("\n");
    sb.append("    histogramStartDts: ").append(toIndentedString(histogramStartDts)).append("\n");
    sb.append("    pageRank: ").append(toIndentedString(pageRank)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


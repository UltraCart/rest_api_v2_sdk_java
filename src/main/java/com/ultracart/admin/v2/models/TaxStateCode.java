/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxStateCode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-13T10:18:15.535-05:00[America/Indianapolis]")
public class TaxStateCode {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_STATE_CODE = "state_code";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_STATE_NAME = "state_name";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public TaxStateCode() { 
  }

  public TaxStateCode accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxStateCode stateCode(String stateCode) {
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State code (2 characters
   * @return stateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State code (2 characters")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }


  public TaxStateCode stateName(String stateName) {
    
    this.stateName = stateName;
    return this;
  }

   /**
   * State name
   * @return stateName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State name")

  public String getStateName() {
    return stateName;
  }


  public void setStateName(String stateName) {
    this.stateName = stateName;
  }


  public TaxStateCode taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxStateCode taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxStateCode taxStateCode = (TaxStateCode) o;
    return Objects.equals(this.accountingCode, taxStateCode.accountingCode) &&
        Objects.equals(this.stateCode, taxStateCode.stateCode) &&
        Objects.equals(this.stateName, taxStateCode.stateName) &&
        Objects.equals(this.taxRate, taxStateCode.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxStateCode.taxRateFormatted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, stateCode, stateName, taxRate, taxRateFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxStateCode {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("state_code");
    openapiFields.add("state_name");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxStateCode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxStateCode.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxStateCode is not found in the empty JSON string", TaxStateCode.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxStateCode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxStateCode` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      if (jsonObj.get("state_code") != null && !jsonObj.get("state_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_code").toString()));
      }
      if (jsonObj.get("state_name") != null && !jsonObj.get("state_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_name").toString()));
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxStateCode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxStateCode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxStateCode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxStateCode.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxStateCode>() {
           @Override
           public void write(JsonWriter out, TaxStateCode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxStateCode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxStateCode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxStateCode
  * @throws IOException if the JSON string is invalid with respect to TaxStateCode
  */
  public static TaxStateCode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxStateCode.class);
  }

 /**
  * Convert an instance of TaxStateCode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Customer;
import com.ultracart.admin.v2.models.OrderAffiliate;
import com.ultracart.admin.v2.models.OrderAutoOrder;
import com.ultracart.admin.v2.models.OrderBilling;
import com.ultracart.admin.v2.models.OrderBuysafe;
import com.ultracart.admin.v2.models.OrderChannelPartner;
import com.ultracart.admin.v2.models.OrderCheckout;
import com.ultracart.admin.v2.models.OrderCoupon;
import com.ultracart.admin.v2.models.OrderDigitalOrder;
import com.ultracart.admin.v2.models.OrderEdi;
import com.ultracart.admin.v2.models.OrderFraudScore;
import com.ultracart.admin.v2.models.OrderGift;
import com.ultracart.admin.v2.models.OrderGiftCertificate;
import com.ultracart.admin.v2.models.OrderInternal;
import com.ultracart.admin.v2.models.OrderItem;
import com.ultracart.admin.v2.models.OrderLinkedShipment;
import com.ultracart.admin.v2.models.OrderMarketing;
import com.ultracart.admin.v2.models.OrderPayment;
import com.ultracart.admin.v2.models.OrderPointOfSale;
import com.ultracart.admin.v2.models.OrderProperty;
import com.ultracart.admin.v2.models.OrderQuote;
import com.ultracart.admin.v2.models.OrderSalesforce;
import com.ultracart.admin.v2.models.OrderShipping;
import com.ultracart.admin.v2.models.OrderSummary;
import com.ultracart.admin.v2.models.OrderTag;
import com.ultracart.admin.v2.models.OrderTaxes;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-25T15:35:19.757-05:00[America/Indianapolis]")
public class Order {
  public static final String SERIALIZED_NAME_AFFILIATES = "affiliates";
  @SerializedName(SERIALIZED_NAME_AFFILIATES)
  private List<OrderAffiliate> affiliates = null;

  public static final String SERIALIZED_NAME_AUTO_ORDER = "auto_order";
  @SerializedName(SERIALIZED_NAME_AUTO_ORDER)
  private OrderAutoOrder autoOrder;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private OrderBilling billing;

  public static final String SERIALIZED_NAME_BUYSAFE = "buysafe";
  @SerializedName(SERIALIZED_NAME_BUYSAFE)
  private OrderBuysafe buysafe;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER = "channel_partner";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER)
  private OrderChannelPartner channelPartner;

  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private OrderCheckout checkout;

  public static final String SERIALIZED_NAME_COUPONS = "coupons";
  @SerializedName(SERIALIZED_NAME_COUPONS)
  private List<OrderCoupon> coupons = null;

  public static final String SERIALIZED_NAME_CREATION_DTS = "creation_dts";
  @SerializedName(SERIALIZED_NAME_CREATION_DTS)
  private String creationDts;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  /**
   * Current stage that the order is in.
   */
  @JsonAdapter(CurrentStageEnum.Adapter.class)
  public enum CurrentStageEnum {
    ACCOUNTS_RECEIVABLE("Accounts Receivable"),
    
    PENDING_CLEARANCE("Pending Clearance"),
    
    FRAUD_REVIEW("Fraud Review"),
    
    REJECTED("Rejected"),
    
    SHIPPING_DEPARTMENT("Shipping Department"),
    
    COMPLETED_ORDER("Completed Order"),
    
    QUOTE_REQUEST("Quote Request"),
    
    QUOTE_SENT("Quote Sent"),
    
    LEAST_COST_ROUTING("Least Cost Routing"),
    
    UNKNOWN("Unknown"),
    
    PRE_ORDERED("Pre-ordered"),
    
    ADVANCED_ORDER_ROUTING("Advanced Order Routing");

    private String value;

    CurrentStageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentStageEnum fromValue(String value) {
      for (CurrentStageEnum b : CurrentStageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrentStageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrentStageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENT_STAGE = "current_stage";
  @SerializedName(SERIALIZED_NAME_CURRENT_STAGE)
  private CurrentStageEnum currentStage;

  public static final String SERIALIZED_NAME_CUSTOMER_PROFILE = "customer_profile";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_PROFILE)
  private Customer customerProfile;

  public static final String SERIALIZED_NAME_DIGITAL_ORDER = "digital_order";
  @SerializedName(SERIALIZED_NAME_DIGITAL_ORDER)
  private OrderDigitalOrder digitalOrder;

  public static final String SERIALIZED_NAME_EDI = "edi";
  @SerializedName(SERIALIZED_NAME_EDI)
  private OrderEdi edi;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchange_rate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private BigDecimal exchangeRate;

  public static final String SERIALIZED_NAME_FRAUD_SCORE = "fraud_score";
  @SerializedName(SERIALIZED_NAME_FRAUD_SCORE)
  private OrderFraudScore fraudScore;

  public static final String SERIALIZED_NAME_GIFT = "gift";
  @SerializedName(SERIALIZED_NAME_GIFT)
  private OrderGift gift;

  public static final String SERIALIZED_NAME_GIFT_CERTIFICATE = "gift_certificate";
  @SerializedName(SERIALIZED_NAME_GIFT_CERTIFICATE)
  private OrderGiftCertificate giftCertificate;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private OrderInternal internal;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItem> items = null;

  public static final String SERIALIZED_NAME_LANGUAGE_ISO_CODE = "language_iso_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_ISO_CODE)
  private String languageIsoCode;

  public static final String SERIALIZED_NAME_LINKED_SHIPMENT = "linked_shipment";
  @SerializedName(SERIALIZED_NAME_LINKED_SHIPMENT)
  private OrderLinkedShipment linkedShipment;

  public static final String SERIALIZED_NAME_MARKETING = "marketing";
  @SerializedName(SERIALIZED_NAME_MARKETING)
  private OrderMarketing marketing;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private OrderPayment payment;

  public static final String SERIALIZED_NAME_POINT_OF_SALE = "point_of_sale";
  @SerializedName(SERIALIZED_NAME_POINT_OF_SALE)
  private OrderPointOfSale pointOfSale;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<OrderProperty> properties = null;

  public static final String SERIALIZED_NAME_QUOTE = "quote";
  @SerializedName(SERIALIZED_NAME_QUOTE)
  private OrderQuote quote;

  public static final String SERIALIZED_NAME_REFUND_DTS = "refund_dts";
  @SerializedName(SERIALIZED_NAME_REFUND_DTS)
  private String refundDts;

  public static final String SERIALIZED_NAME_REJECT_DTS = "reject_dts";
  @SerializedName(SERIALIZED_NAME_REJECT_DTS)
  private String rejectDts;

  public static final String SERIALIZED_NAME_SALESFORCE = "salesforce";
  @SerializedName(SERIALIZED_NAME_SALESFORCE)
  private OrderSalesforce salesforce;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private OrderShipping shipping;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private OrderSummary summary;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<OrderTag> tags = null;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private OrderTaxes taxes;

  public Order() { 
  }

  public Order affiliates(List<OrderAffiliate> affiliates) {
    
    this.affiliates = affiliates;
    return this;
  }

  public Order addAffiliatesItem(OrderAffiliate affiliatesItem) {
    if (this.affiliates == null) {
      this.affiliates = new ArrayList<>();
    }
    this.affiliates.add(affiliatesItem);
    return this;
  }

   /**
   * Affiliates if any were associated with the order.  The first one in the array sent the order and each subsequent affiliate is the recruiter that earns a downline commission.
   * @return affiliates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Affiliates if any were associated with the order.  The first one in the array sent the order and each subsequent affiliate is the recruiter that earns a downline commission.")

  public List<OrderAffiliate> getAffiliates() {
    return affiliates;
  }


  public void setAffiliates(List<OrderAffiliate> affiliates) {
    this.affiliates = affiliates;
  }


  public Order autoOrder(OrderAutoOrder autoOrder) {
    
    this.autoOrder = autoOrder;
    return this;
  }

   /**
   * Get autoOrder
   * @return autoOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderAutoOrder getAutoOrder() {
    return autoOrder;
  }


  public void setAutoOrder(OrderAutoOrder autoOrder) {
    this.autoOrder = autoOrder;
  }


  public Order billing(OrderBilling billing) {
    
    this.billing = billing;
    return this;
  }

   /**
   * Get billing
   * @return billing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderBilling getBilling() {
    return billing;
  }


  public void setBilling(OrderBilling billing) {
    this.billing = billing;
  }


  public Order buysafe(OrderBuysafe buysafe) {
    
    this.buysafe = buysafe;
    return this;
  }

   /**
   * Get buysafe
   * @return buysafe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderBuysafe getBuysafe() {
    return buysafe;
  }


  public void setBuysafe(OrderBuysafe buysafe) {
    this.buysafe = buysafe;
  }


  public Order channelPartner(OrderChannelPartner channelPartner) {
    
    this.channelPartner = channelPartner;
    return this;
  }

   /**
   * Get channelPartner
   * @return channelPartner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderChannelPartner getChannelPartner() {
    return channelPartner;
  }


  public void setChannelPartner(OrderChannelPartner channelPartner) {
    this.channelPartner = channelPartner;
  }


  public Order checkout(OrderCheckout checkout) {
    
    this.checkout = checkout;
    return this;
  }

   /**
   * Get checkout
   * @return checkout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderCheckout getCheckout() {
    return checkout;
  }


  public void setCheckout(OrderCheckout checkout) {
    this.checkout = checkout;
  }


  public Order coupons(List<OrderCoupon> coupons) {
    
    this.coupons = coupons;
    return this;
  }

  public Order addCouponsItem(OrderCoupon couponsItem) {
    if (this.coupons == null) {
      this.coupons = new ArrayList<>();
    }
    this.coupons.add(couponsItem);
    return this;
  }

   /**
   * Coupons
   * @return coupons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupons")

  public List<OrderCoupon> getCoupons() {
    return coupons;
  }


  public void setCoupons(List<OrderCoupon> coupons) {
    this.coupons = coupons;
  }


  public Order creationDts(String creationDts) {
    
    this.creationDts = creationDts;
    return this;
  }

   /**
   * Date/time that the order was created
   * @return creationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the order was created")

  public String getCreationDts() {
    return creationDts;
  }


  public void setCreationDts(String creationDts) {
    this.creationDts = creationDts;
  }


  public Order currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Currency code that the customer used if different than the merchant&#39;s base currency code
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency code that the customer used if different than the merchant's base currency code")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Order currentStage(CurrentStageEnum currentStage) {
    
    this.currentStage = currentStage;
    return this;
  }

   /**
   * Current stage that the order is in.
   * @return currentStage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Current stage that the order is in.")

  public CurrentStageEnum getCurrentStage() {
    return currentStage;
  }


  public void setCurrentStage(CurrentStageEnum currentStage) {
    this.currentStage = currentStage;
  }


  public Order customerProfile(Customer customerProfile) {
    
    this.customerProfile = customerProfile;
    return this;
  }

   /**
   * Get customerProfile
   * @return customerProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomerProfile() {
    return customerProfile;
  }


  public void setCustomerProfile(Customer customerProfile) {
    this.customerProfile = customerProfile;
  }


  public Order digitalOrder(OrderDigitalOrder digitalOrder) {
    
    this.digitalOrder = digitalOrder;
    return this;
  }

   /**
   * Get digitalOrder
   * @return digitalOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderDigitalOrder getDigitalOrder() {
    return digitalOrder;
  }


  public void setDigitalOrder(OrderDigitalOrder digitalOrder) {
    this.digitalOrder = digitalOrder;
  }


  public Order edi(OrderEdi edi) {
    
    this.edi = edi;
    return this;
  }

   /**
   * Get edi
   * @return edi
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderEdi getEdi() {
    return edi;
  }


  public void setEdi(OrderEdi edi) {
    this.edi = edi;
  }


  public Order exchangeRate(BigDecimal exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Exchange rate at the time the order was placed if currency code is different than the base currency
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exchange rate at the time the order was placed if currency code is different than the base currency")

  public BigDecimal getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(BigDecimal exchangeRate) {
    this.exchangeRate = exchangeRate;
  }


  public Order fraudScore(OrderFraudScore fraudScore) {
    
    this.fraudScore = fraudScore;
    return this;
  }

   /**
   * Get fraudScore
   * @return fraudScore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderFraudScore getFraudScore() {
    return fraudScore;
  }


  public void setFraudScore(OrderFraudScore fraudScore) {
    this.fraudScore = fraudScore;
  }


  public Order gift(OrderGift gift) {
    
    this.gift = gift;
    return this;
  }

   /**
   * Get gift
   * @return gift
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderGift getGift() {
    return gift;
  }


  public void setGift(OrderGift gift) {
    this.gift = gift;
  }


  public Order giftCertificate(OrderGiftCertificate giftCertificate) {
    
    this.giftCertificate = giftCertificate;
    return this;
  }

   /**
   * Get giftCertificate
   * @return giftCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderGiftCertificate getGiftCertificate() {
    return giftCertificate;
  }


  public void setGiftCertificate(OrderGiftCertificate giftCertificate) {
    this.giftCertificate = giftCertificate;
  }


  public Order internal(OrderInternal internal) {
    
    this.internal = internal;
    return this;
  }

   /**
   * Get internal
   * @return internal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderInternal getInternal() {
    return internal;
  }


  public void setInternal(OrderInternal internal) {
    this.internal = internal;
  }


  public Order items(List<OrderItem> items) {
    
    this.items = items;
    return this;
  }

  public Order addItemsItem(OrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Items")

  public List<OrderItem> getItems() {
    return items;
  }


  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public Order languageIsoCode(String languageIsoCode) {
    
    this.languageIsoCode = languageIsoCode;
    return this;
  }

   /**
   * Three letter ISO-639 language code used by the customer during the checkout if different than the default language
   * @return languageIsoCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Three letter ISO-639 language code used by the customer during the checkout if different than the default language")

  public String getLanguageIsoCode() {
    return languageIsoCode;
  }


  public void setLanguageIsoCode(String languageIsoCode) {
    this.languageIsoCode = languageIsoCode;
  }


  public Order linkedShipment(OrderLinkedShipment linkedShipment) {
    
    this.linkedShipment = linkedShipment;
    return this;
  }

   /**
   * Get linkedShipment
   * @return linkedShipment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderLinkedShipment getLinkedShipment() {
    return linkedShipment;
  }


  public void setLinkedShipment(OrderLinkedShipment linkedShipment) {
    this.linkedShipment = linkedShipment;
  }


  public Order marketing(OrderMarketing marketing) {
    
    this.marketing = marketing;
    return this;
  }

   /**
   * Get marketing
   * @return marketing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderMarketing getMarketing() {
    return marketing;
  }


  public void setMarketing(OrderMarketing marketing) {
    this.marketing = marketing;
  }


  public Order merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * UltraCart merchant ID owning this order
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UltraCart merchant ID owning this order")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Order orderId(String orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Order ID
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Order ID")

  public String getOrderId() {
    return orderId;
  }


  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Order payment(OrderPayment payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPayment getPayment() {
    return payment;
  }


  public void setPayment(OrderPayment payment) {
    this.payment = payment;
  }


  public Order pointOfSale(OrderPointOfSale pointOfSale) {
    
    this.pointOfSale = pointOfSale;
    return this;
  }

   /**
   * Get pointOfSale
   * @return pointOfSale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPointOfSale getPointOfSale() {
    return pointOfSale;
  }


  public void setPointOfSale(OrderPointOfSale pointOfSale) {
    this.pointOfSale = pointOfSale;
  }


  public Order properties(List<OrderProperty> properties) {
    
    this.properties = properties;
    return this;
  }

  public Order addPropertiesItem(OrderProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Properties, available only through update, not through insert due to the nature of how properties are handled internally
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Properties, available only through update, not through insert due to the nature of how properties are handled internally")

  public List<OrderProperty> getProperties() {
    return properties;
  }


  public void setProperties(List<OrderProperty> properties) {
    this.properties = properties;
  }


  public Order quote(OrderQuote quote) {
    
    this.quote = quote;
    return this;
  }

   /**
   * Get quote
   * @return quote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderQuote getQuote() {
    return quote;
  }


  public void setQuote(OrderQuote quote) {
    this.quote = quote;
  }


  public Order refundDts(String refundDts) {
    
    this.refundDts = refundDts;
    return this;
  }

   /**
   * If the order was refunded, the date/time that the last refund occurred
   * @return refundDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the order was refunded, the date/time that the last refund occurred")

  public String getRefundDts() {
    return refundDts;
  }


  public void setRefundDts(String refundDts) {
    this.refundDts = refundDts;
  }


  public Order rejectDts(String rejectDts) {
    
    this.rejectDts = rejectDts;
    return this;
  }

   /**
   * If the order was rejected, the date/time that the rejection occurred
   * @return rejectDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the order was rejected, the date/time that the rejection occurred")

  public String getRejectDts() {
    return rejectDts;
  }


  public void setRejectDts(String rejectDts) {
    this.rejectDts = rejectDts;
  }


  public Order salesforce(OrderSalesforce salesforce) {
    
    this.salesforce = salesforce;
    return this;
  }

   /**
   * Get salesforce
   * @return salesforce
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderSalesforce getSalesforce() {
    return salesforce;
  }


  public void setSalesforce(OrderSalesforce salesforce) {
    this.salesforce = salesforce;
  }


  public Order shipping(OrderShipping shipping) {
    
    this.shipping = shipping;
    return this;
  }

   /**
   * Get shipping
   * @return shipping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderShipping getShipping() {
    return shipping;
  }


  public void setShipping(OrderShipping shipping) {
    this.shipping = shipping;
  }


  public Order summary(OrderSummary summary) {
    
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderSummary getSummary() {
    return summary;
  }


  public void setSummary(OrderSummary summary) {
    this.summary = summary;
  }


  public Order tags(List<OrderTag> tags) {
    
    this.tags = tags;
    return this;
  }

  public Order addTagsItem(OrderTag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * tags, available only through update, not through insert due to the nature of how tags are handled internally
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tags, available only through update, not through insert due to the nature of how tags are handled internally")

  public List<OrderTag> getTags() {
    return tags;
  }


  public void setTags(List<OrderTag> tags) {
    this.tags = tags;
  }


  public Order taxes(OrderTaxes taxes) {
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderTaxes getTaxes() {
    return taxes;
  }


  public void setTaxes(OrderTaxes taxes) {
    this.taxes = taxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.affiliates, order.affiliates) &&
        Objects.equals(this.autoOrder, order.autoOrder) &&
        Objects.equals(this.billing, order.billing) &&
        Objects.equals(this.buysafe, order.buysafe) &&
        Objects.equals(this.channelPartner, order.channelPartner) &&
        Objects.equals(this.checkout, order.checkout) &&
        Objects.equals(this.coupons, order.coupons) &&
        Objects.equals(this.creationDts, order.creationDts) &&
        Objects.equals(this.currencyCode, order.currencyCode) &&
        Objects.equals(this.currentStage, order.currentStage) &&
        Objects.equals(this.customerProfile, order.customerProfile) &&
        Objects.equals(this.digitalOrder, order.digitalOrder) &&
        Objects.equals(this.edi, order.edi) &&
        Objects.equals(this.exchangeRate, order.exchangeRate) &&
        Objects.equals(this.fraudScore, order.fraudScore) &&
        Objects.equals(this.gift, order.gift) &&
        Objects.equals(this.giftCertificate, order.giftCertificate) &&
        Objects.equals(this.internal, order.internal) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.languageIsoCode, order.languageIsoCode) &&
        Objects.equals(this.linkedShipment, order.linkedShipment) &&
        Objects.equals(this.marketing, order.marketing) &&
        Objects.equals(this.merchantId, order.merchantId) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.payment, order.payment) &&
        Objects.equals(this.pointOfSale, order.pointOfSale) &&
        Objects.equals(this.properties, order.properties) &&
        Objects.equals(this.quote, order.quote) &&
        Objects.equals(this.refundDts, order.refundDts) &&
        Objects.equals(this.rejectDts, order.rejectDts) &&
        Objects.equals(this.salesforce, order.salesforce) &&
        Objects.equals(this.shipping, order.shipping) &&
        Objects.equals(this.summary, order.summary) &&
        Objects.equals(this.tags, order.tags) &&
        Objects.equals(this.taxes, order.taxes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affiliates, autoOrder, billing, buysafe, channelPartner, checkout, coupons, creationDts, currencyCode, currentStage, customerProfile, digitalOrder, edi, exchangeRate, fraudScore, gift, giftCertificate, internal, items, languageIsoCode, linkedShipment, marketing, merchantId, orderId, payment, pointOfSale, properties, quote, refundDts, rejectDts, salesforce, shipping, summary, tags, taxes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    affiliates: ").append(toIndentedString(affiliates)).append("\n");
    sb.append("    autoOrder: ").append(toIndentedString(autoOrder)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    buysafe: ").append(toIndentedString(buysafe)).append("\n");
    sb.append("    channelPartner: ").append(toIndentedString(channelPartner)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    coupons: ").append(toIndentedString(coupons)).append("\n");
    sb.append("    creationDts: ").append(toIndentedString(creationDts)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    currentStage: ").append(toIndentedString(currentStage)).append("\n");
    sb.append("    customerProfile: ").append(toIndentedString(customerProfile)).append("\n");
    sb.append("    digitalOrder: ").append(toIndentedString(digitalOrder)).append("\n");
    sb.append("    edi: ").append(toIndentedString(edi)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    fraudScore: ").append(toIndentedString(fraudScore)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    giftCertificate: ").append(toIndentedString(giftCertificate)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    languageIsoCode: ").append(toIndentedString(languageIsoCode)).append("\n");
    sb.append("    linkedShipment: ").append(toIndentedString(linkedShipment)).append("\n");
    sb.append("    marketing: ").append(toIndentedString(marketing)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    pointOfSale: ").append(toIndentedString(pointOfSale)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    refundDts: ").append(toIndentedString(refundDts)).append("\n");
    sb.append("    rejectDts: ").append(toIndentedString(rejectDts)).append("\n");
    sb.append("    salesforce: ").append(toIndentedString(salesforce)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affiliates");
    openapiFields.add("auto_order");
    openapiFields.add("billing");
    openapiFields.add("buysafe");
    openapiFields.add("channel_partner");
    openapiFields.add("checkout");
    openapiFields.add("coupons");
    openapiFields.add("creation_dts");
    openapiFields.add("currency_code");
    openapiFields.add("current_stage");
    openapiFields.add("customer_profile");
    openapiFields.add("digital_order");
    openapiFields.add("edi");
    openapiFields.add("exchange_rate");
    openapiFields.add("fraud_score");
    openapiFields.add("gift");
    openapiFields.add("gift_certificate");
    openapiFields.add("internal");
    openapiFields.add("items");
    openapiFields.add("language_iso_code");
    openapiFields.add("linked_shipment");
    openapiFields.add("marketing");
    openapiFields.add("merchant_id");
    openapiFields.add("order_id");
    openapiFields.add("payment");
    openapiFields.add("point_of_sale");
    openapiFields.add("properties");
    openapiFields.add("quote");
    openapiFields.add("refund_dts");
    openapiFields.add("reject_dts");
    openapiFields.add("salesforce");
    openapiFields.add("shipping");
    openapiFields.add("summary");
    openapiFields.add("Tags");
    openapiFields.add("taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Order
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Order.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayaffiliates = jsonObj.getAsJsonArray("affiliates");
      if (jsonArrayaffiliates != null) {
        // ensure the json data is an array
        if (!jsonObj.get("affiliates").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `affiliates` to be an array in the JSON string but got `%s`", jsonObj.get("affiliates").toString()));
        }

        // validate the optional field `affiliates` (array)
        for (int i = 0; i < jsonArrayaffiliates.size(); i++) {
          OrderAffiliate.validateJsonObject(jsonArrayaffiliates.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `auto_order`
      if (jsonObj.getAsJsonObject("auto_order") != null) {
        OrderAutoOrder.validateJsonObject(jsonObj.getAsJsonObject("auto_order"));
      }
      // validate the optional field `billing`
      if (jsonObj.getAsJsonObject("billing") != null) {
        OrderBilling.validateJsonObject(jsonObj.getAsJsonObject("billing"));
      }
      // validate the optional field `buysafe`
      if (jsonObj.getAsJsonObject("buysafe") != null) {
        OrderBuysafe.validateJsonObject(jsonObj.getAsJsonObject("buysafe"));
      }
      // validate the optional field `channel_partner`
      if (jsonObj.getAsJsonObject("channel_partner") != null) {
        OrderChannelPartner.validateJsonObject(jsonObj.getAsJsonObject("channel_partner"));
      }
      // validate the optional field `checkout`
      if (jsonObj.getAsJsonObject("checkout") != null) {
        OrderCheckout.validateJsonObject(jsonObj.getAsJsonObject("checkout"));
      }
      JsonArray jsonArraycoupons = jsonObj.getAsJsonArray("coupons");
      if (jsonArraycoupons != null) {
        // ensure the json data is an array
        if (!jsonObj.get("coupons").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `coupons` to be an array in the JSON string but got `%s`", jsonObj.get("coupons").toString()));
        }

        // validate the optional field `coupons` (array)
        for (int i = 0; i < jsonArraycoupons.size(); i++) {
          OrderCoupon.validateJsonObject(jsonArraycoupons.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("creation_dts") != null && !jsonObj.get("creation_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_dts").toString()));
      }
      if (jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if (jsonObj.get("current_stage") != null && !jsonObj.get("current_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_stage").toString()));
      }
      // validate the optional field `customer_profile`
      if (jsonObj.getAsJsonObject("customer_profile") != null) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer_profile"));
      }
      // validate the optional field `digital_order`
      if (jsonObj.getAsJsonObject("digital_order") != null) {
        OrderDigitalOrder.validateJsonObject(jsonObj.getAsJsonObject("digital_order"));
      }
      // validate the optional field `edi`
      if (jsonObj.getAsJsonObject("edi") != null) {
        OrderEdi.validateJsonObject(jsonObj.getAsJsonObject("edi"));
      }
      // validate the optional field `fraud_score`
      if (jsonObj.getAsJsonObject("fraud_score") != null) {
        OrderFraudScore.validateJsonObject(jsonObj.getAsJsonObject("fraud_score"));
      }
      // validate the optional field `gift`
      if (jsonObj.getAsJsonObject("gift") != null) {
        OrderGift.validateJsonObject(jsonObj.getAsJsonObject("gift"));
      }
      // validate the optional field `gift_certificate`
      if (jsonObj.getAsJsonObject("gift_certificate") != null) {
        OrderGiftCertificate.validateJsonObject(jsonObj.getAsJsonObject("gift_certificate"));
      }
      // validate the optional field `internal`
      if (jsonObj.getAsJsonObject("internal") != null) {
        OrderInternal.validateJsonObject(jsonObj.getAsJsonObject("internal"));
      }
      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      if (jsonArrayitems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
        }

        // validate the optional field `items` (array)
        for (int i = 0; i < jsonArrayitems.size(); i++) {
          OrderItem.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("language_iso_code") != null && !jsonObj.get("language_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_iso_code").toString()));
      }
      // validate the optional field `linked_shipment`
      if (jsonObj.getAsJsonObject("linked_shipment") != null) {
        OrderLinkedShipment.validateJsonObject(jsonObj.getAsJsonObject("linked_shipment"));
      }
      // validate the optional field `marketing`
      if (jsonObj.getAsJsonObject("marketing") != null) {
        OrderMarketing.validateJsonObject(jsonObj.getAsJsonObject("marketing"));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      // validate the optional field `payment`
      if (jsonObj.getAsJsonObject("payment") != null) {
        OrderPayment.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
      // validate the optional field `point_of_sale`
      if (jsonObj.getAsJsonObject("point_of_sale") != null) {
        OrderPointOfSale.validateJsonObject(jsonObj.getAsJsonObject("point_of_sale"));
      }
      JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
      if (jsonArrayproperties != null) {
        // ensure the json data is an array
        if (!jsonObj.get("properties").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
        }

        // validate the optional field `properties` (array)
        for (int i = 0; i < jsonArrayproperties.size(); i++) {
          OrderProperty.validateJsonObject(jsonArrayproperties.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `quote`
      if (jsonObj.getAsJsonObject("quote") != null) {
        OrderQuote.validateJsonObject(jsonObj.getAsJsonObject("quote"));
      }
      if (jsonObj.get("refund_dts") != null && !jsonObj.get("refund_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_dts").toString()));
      }
      if (jsonObj.get("reject_dts") != null && !jsonObj.get("reject_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reject_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reject_dts").toString()));
      }
      // validate the optional field `salesforce`
      if (jsonObj.getAsJsonObject("salesforce") != null) {
        OrderSalesforce.validateJsonObject(jsonObj.getAsJsonObject("salesforce"));
      }
      // validate the optional field `shipping`
      if (jsonObj.getAsJsonObject("shipping") != null) {
        OrderShipping.validateJsonObject(jsonObj.getAsJsonObject("shipping"));
      }
      // validate the optional field `summary`
      if (jsonObj.getAsJsonObject("summary") != null) {
        OrderSummary.validateJsonObject(jsonObj.getAsJsonObject("summary"));
      }
      JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
      if (jsonArraytags != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Tags").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
        }

        // validate the optional field `Tags` (array)
        for (int i = 0; i < jsonArraytags.size(); i++) {
          OrderTag.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
        };
      }
      // validate the optional field `taxes`
      if (jsonObj.getAsJsonObject("taxes") != null) {
        OrderTaxes.validateJsonObject(jsonObj.getAsJsonObject("taxes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


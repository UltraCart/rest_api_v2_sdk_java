/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CustomerStoreCreditLedgerEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomerStoreCredit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-08-19T15:06:41.109-04:00")



public class CustomerStoreCredit {
  @SerializedName("available")
  private BigDecimal available = null;

  @SerializedName("expiring")
  private BigDecimal expiring = null;

  @SerializedName("future_ledgers")
  private List<CustomerStoreCreditLedgerEntry> futureLedgers = null;

  @SerializedName("past_ledgers")
  private List<CustomerStoreCreditLedgerEntry> pastLedgers = null;

  @SerializedName("total")
  private BigDecimal total = null;

  @SerializedName("vesting")
  private BigDecimal vesting = null;

  public CustomerStoreCredit available(BigDecimal available) {
    this.available = available;
    return this;
  }

   /**
   * Available store credit which is defined as unused and vested
   * @return available
  **/
  @ApiModelProperty(value = "Available store credit which is defined as unused and vested")
  public BigDecimal getAvailable() {
    return available;
  }

  public void setAvailable(BigDecimal available) {
    this.available = available;
  }

  public CustomerStoreCredit expiring(BigDecimal expiring) {
    this.expiring = expiring;
    return this;
  }

   /**
   * Amount of store credit expiring within 30 days
   * @return expiring
  **/
  @ApiModelProperty(value = "Amount of store credit expiring within 30 days")
  public BigDecimal getExpiring() {
    return expiring;
  }

  public void setExpiring(BigDecimal expiring) {
    this.expiring = expiring;
  }

  public CustomerStoreCredit futureLedgers(List<CustomerStoreCreditLedgerEntry> futureLedgers) {
    this.futureLedgers = futureLedgers;
    return this;
  }

  public CustomerStoreCredit addFutureLedgersItem(CustomerStoreCreditLedgerEntry futureLedgersItem) {
    if (this.futureLedgers == null) {
      this.futureLedgers = new ArrayList<CustomerStoreCreditLedgerEntry>();
    }
    this.futureLedgers.add(futureLedgersItem);
    return this;
  }

   /**
   * Array of future ledger entries including expiring entries
   * @return futureLedgers
  **/
  @ApiModelProperty(value = "Array of future ledger entries including expiring entries")
  public List<CustomerStoreCreditLedgerEntry> getFutureLedgers() {
    return futureLedgers;
  }

  public void setFutureLedgers(List<CustomerStoreCreditLedgerEntry> futureLedgers) {
    this.futureLedgers = futureLedgers;
  }

  public CustomerStoreCredit pastLedgers(List<CustomerStoreCreditLedgerEntry> pastLedgers) {
    this.pastLedgers = pastLedgers;
    return this;
  }

  public CustomerStoreCredit addPastLedgersItem(CustomerStoreCreditLedgerEntry pastLedgersItem) {
    if (this.pastLedgers == null) {
      this.pastLedgers = new ArrayList<CustomerStoreCreditLedgerEntry>();
    }
    this.pastLedgers.add(pastLedgersItem);
    return this;
  }

   /**
   * Array of past ledger entries including accrual, usage, and expiring entries
   * @return pastLedgers
  **/
  @ApiModelProperty(value = "Array of past ledger entries including accrual, usage, and expiring entries")
  public List<CustomerStoreCreditLedgerEntry> getPastLedgers() {
    return pastLedgers;
  }

  public void setPastLedgers(List<CustomerStoreCreditLedgerEntry> pastLedgers) {
    this.pastLedgers = pastLedgers;
  }

  public CustomerStoreCredit total(BigDecimal total) {
    this.total = total;
    return this;
  }

   /**
   * Total lifetime store credit for this customer.
   * @return total
  **/
  @ApiModelProperty(value = "Total lifetime store credit for this customer.")
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }

  public CustomerStoreCredit vesting(BigDecimal vesting) {
    this.vesting = vesting;
    return this;
  }

   /**
   * Amount of store credit vesting
   * @return vesting
  **/
  @ApiModelProperty(value = "Amount of store credit vesting")
  public BigDecimal getVesting() {
    return vesting;
  }

  public void setVesting(BigDecimal vesting) {
    this.vesting = vesting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerStoreCredit customerStoreCredit = (CustomerStoreCredit) o;
    return Objects.equals(this.available, customerStoreCredit.available) &&
        Objects.equals(this.expiring, customerStoreCredit.expiring) &&
        Objects.equals(this.futureLedgers, customerStoreCredit.futureLedgers) &&
        Objects.equals(this.pastLedgers, customerStoreCredit.pastLedgers) &&
        Objects.equals(this.total, customerStoreCredit.total) &&
        Objects.equals(this.vesting, customerStoreCredit.vesting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, expiring, futureLedgers, pastLedgers, total, vesting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerStoreCredit {\n");
    
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    expiring: ").append(toIndentedString(expiring)).append("\n");
    sb.append("    futureLedgers: ").append(toIndentedString(futureLedgers)).append("\n");
    sb.append("    pastLedgers: ").append(toIndentedString(pastLedgers)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    vesting: ").append(toIndentedString(vesting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


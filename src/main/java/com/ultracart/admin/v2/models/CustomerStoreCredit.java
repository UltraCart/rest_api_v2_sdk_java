/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CustomerStoreCreditLedgerEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CustomerStoreCredit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-23T00:47:02.286-04:00[America/Indianapolis]")
public class CustomerStoreCredit {
  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private BigDecimal available;

  public static final String SERIALIZED_NAME_EXPIRING = "expiring";
  @SerializedName(SERIALIZED_NAME_EXPIRING)
  private BigDecimal expiring;

  public static final String SERIALIZED_NAME_FUTURE_LEDGERS = "future_ledgers";
  @SerializedName(SERIALIZED_NAME_FUTURE_LEDGERS)
  private List<CustomerStoreCreditLedgerEntry> futureLedgers = null;

  public static final String SERIALIZED_NAME_PAST_LEDGERS = "past_ledgers";
  @SerializedName(SERIALIZED_NAME_PAST_LEDGERS)
  private List<CustomerStoreCreditLedgerEntry> pastLedgers = null;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_VESTING = "vesting";
  @SerializedName(SERIALIZED_NAME_VESTING)
  private BigDecimal vesting;

  public CustomerStoreCredit() { 
  }

  public CustomerStoreCredit available(BigDecimal available) {
    
    this.available = available;
    return this;
  }

   /**
   * Available store credit which is defined as unused and vested
   * @return available
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Available store credit which is defined as unused and vested")

  public BigDecimal getAvailable() {
    return available;
  }


  public void setAvailable(BigDecimal available) {
    this.available = available;
  }


  public CustomerStoreCredit expiring(BigDecimal expiring) {
    
    this.expiring = expiring;
    return this;
  }

   /**
   * Amount of store credit expiring within 30 days
   * @return expiring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of store credit expiring within 30 days")

  public BigDecimal getExpiring() {
    return expiring;
  }


  public void setExpiring(BigDecimal expiring) {
    this.expiring = expiring;
  }


  public CustomerStoreCredit futureLedgers(List<CustomerStoreCreditLedgerEntry> futureLedgers) {
    
    this.futureLedgers = futureLedgers;
    return this;
  }

  public CustomerStoreCredit addFutureLedgersItem(CustomerStoreCreditLedgerEntry futureLedgersItem) {
    if (this.futureLedgers == null) {
      this.futureLedgers = new ArrayList<>();
    }
    this.futureLedgers.add(futureLedgersItem);
    return this;
  }

   /**
   * Array of future ledger entries including expiring entries
   * @return futureLedgers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of future ledger entries including expiring entries")

  public List<CustomerStoreCreditLedgerEntry> getFutureLedgers() {
    return futureLedgers;
  }


  public void setFutureLedgers(List<CustomerStoreCreditLedgerEntry> futureLedgers) {
    this.futureLedgers = futureLedgers;
  }


  public CustomerStoreCredit pastLedgers(List<CustomerStoreCreditLedgerEntry> pastLedgers) {
    
    this.pastLedgers = pastLedgers;
    return this;
  }

  public CustomerStoreCredit addPastLedgersItem(CustomerStoreCreditLedgerEntry pastLedgersItem) {
    if (this.pastLedgers == null) {
      this.pastLedgers = new ArrayList<>();
    }
    this.pastLedgers.add(pastLedgersItem);
    return this;
  }

   /**
   * Array of past ledger entries including accrual, usage, and expiring entries
   * @return pastLedgers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of past ledger entries including accrual, usage, and expiring entries")

  public List<CustomerStoreCreditLedgerEntry> getPastLedgers() {
    return pastLedgers;
  }


  public void setPastLedgers(List<CustomerStoreCreditLedgerEntry> pastLedgers) {
    this.pastLedgers = pastLedgers;
  }


  public CustomerStoreCredit total(BigDecimal total) {
    
    this.total = total;
    return this;
  }

   /**
   * Total lifetime store credit for this customer.
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total lifetime store credit for this customer.")

  public BigDecimal getTotal() {
    return total;
  }


  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public CustomerStoreCredit vesting(BigDecimal vesting) {
    
    this.vesting = vesting;
    return this;
  }

   /**
   * Amount of store credit vesting
   * @return vesting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount of store credit vesting")

  public BigDecimal getVesting() {
    return vesting;
  }


  public void setVesting(BigDecimal vesting) {
    this.vesting = vesting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerStoreCredit customerStoreCredit = (CustomerStoreCredit) o;
    return Objects.equals(this.available, customerStoreCredit.available) &&
        Objects.equals(this.expiring, customerStoreCredit.expiring) &&
        Objects.equals(this.futureLedgers, customerStoreCredit.futureLedgers) &&
        Objects.equals(this.pastLedgers, customerStoreCredit.pastLedgers) &&
        Objects.equals(this.total, customerStoreCredit.total) &&
        Objects.equals(this.vesting, customerStoreCredit.vesting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, expiring, futureLedgers, pastLedgers, total, vesting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerStoreCredit {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    expiring: ").append(toIndentedString(expiring)).append("\n");
    sb.append("    futureLedgers: ").append(toIndentedString(futureLedgers)).append("\n");
    sb.append("    pastLedgers: ").append(toIndentedString(pastLedgers)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    vesting: ").append(toIndentedString(vesting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available");
    openapiFields.add("expiring");
    openapiFields.add("future_ledgers");
    openapiFields.add("past_ledgers");
    openapiFields.add("total");
    openapiFields.add("vesting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomerStoreCredit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CustomerStoreCredit.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerStoreCredit is not found in the empty JSON string", CustomerStoreCredit.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CustomerStoreCredit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerStoreCredit` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayfutureLedgers = jsonObj.getAsJsonArray("future_ledgers");
      if (jsonArrayfutureLedgers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("future_ledgers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `future_ledgers` to be an array in the JSON string but got `%s`", jsonObj.get("future_ledgers").toString()));
        }

        // validate the optional field `future_ledgers` (array)
        for (int i = 0; i < jsonArrayfutureLedgers.size(); i++) {
          CustomerStoreCreditLedgerEntry.validateJsonObject(jsonArrayfutureLedgers.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraypastLedgers = jsonObj.getAsJsonArray("past_ledgers");
      if (jsonArraypastLedgers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("past_ledgers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `past_ledgers` to be an array in the JSON string but got `%s`", jsonObj.get("past_ledgers").toString()));
        }

        // validate the optional field `past_ledgers` (array)
        for (int i = 0; i < jsonArraypastLedgers.size(); i++) {
          CustomerStoreCreditLedgerEntry.validateJsonObject(jsonArraypastLedgers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerStoreCredit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerStoreCredit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerStoreCredit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerStoreCredit.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerStoreCredit>() {
           @Override
           public void write(JsonWriter out, CustomerStoreCredit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerStoreCredit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomerStoreCredit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomerStoreCredit
  * @throws IOException if the JSON string is invalid with respect to CustomerStoreCredit
  */
  public static CustomerStoreCredit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerStoreCredit.class);
  }

 /**
  * Convert an instance of CustomerStoreCredit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


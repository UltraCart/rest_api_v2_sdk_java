/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailDashboardActivity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-11T14:02:08.222-04:00[America/Indianapolis]")
public class EmailDashboardActivity {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ACTIVITY_DTS = "activity_dts";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_DTS)
  private String activityDts;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destination_name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_DESTINATION_UUID = "destination_uuid";
  @SerializedName(SERIALIZED_NAME_DESTINATION_UUID)
  private String destinationUuid;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IS_LIST = "is_list";
  @SerializedName(SERIALIZED_NAME_IS_LIST)
  private Boolean isList;

  public static final String SERIALIZED_NAME_IS_SEGMENT = "is_segment";
  @SerializedName(SERIALIZED_NAME_IS_SEGMENT)
  private Boolean isSegment;

  public EmailDashboardActivity() { 
  }

  public EmailDashboardActivity action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * Type of action such as add, remove, subscribe, unsubscribe
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of action such as add, remove, subscribe, unsubscribe")

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public EmailDashboardActivity activityDts(String activityDts) {
    
    this.activityDts = activityDts;
    return this;
  }

   /**
   * Date/time of the activity
   * @return activityDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time of the activity")

  public String getActivityDts() {
    return activityDts;
  }


  public void setActivityDts(String activityDts) {
    this.activityDts = activityDts;
  }


  public EmailDashboardActivity destinationName(String destinationName) {
    
    this.destinationName = destinationName;
    return this;
  }

   /**
   * List or segment name
   * @return destinationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List or segment name")

  public String getDestinationName() {
    return destinationName;
  }


  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public EmailDashboardActivity destinationUuid(String destinationUuid) {
    
    this.destinationUuid = destinationUuid;
    return this;
  }

   /**
   * List or segment uuid
   * @return destinationUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List or segment uuid")

  public String getDestinationUuid() {
    return destinationUuid;
  }


  public void setDestinationUuid(String destinationUuid) {
    this.destinationUuid = destinationUuid;
  }


  public EmailDashboardActivity email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email address
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email address")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public EmailDashboardActivity isList(Boolean isList) {
    
    this.isList = isList;
    return this;
  }

   /**
   * true if activity is related to list
   * @return isList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true if activity is related to list")

  public Boolean getIsList() {
    return isList;
  }


  public void setIsList(Boolean isList) {
    this.isList = isList;
  }


  public EmailDashboardActivity isSegment(Boolean isSegment) {
    
    this.isSegment = isSegment;
    return this;
  }

   /**
   * true if activity is related to segment
   * @return isSegment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true if activity is related to segment")

  public Boolean getIsSegment() {
    return isSegment;
  }


  public void setIsSegment(Boolean isSegment) {
    this.isSegment = isSegment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailDashboardActivity emailDashboardActivity = (EmailDashboardActivity) o;
    return Objects.equals(this.action, emailDashboardActivity.action) &&
        Objects.equals(this.activityDts, emailDashboardActivity.activityDts) &&
        Objects.equals(this.destinationName, emailDashboardActivity.destinationName) &&
        Objects.equals(this.destinationUuid, emailDashboardActivity.destinationUuid) &&
        Objects.equals(this.email, emailDashboardActivity.email) &&
        Objects.equals(this.isList, emailDashboardActivity.isList) &&
        Objects.equals(this.isSegment, emailDashboardActivity.isSegment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, activityDts, destinationName, destinationUuid, email, isList, isSegment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailDashboardActivity {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    activityDts: ").append(toIndentedString(activityDts)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    destinationUuid: ").append(toIndentedString(destinationUuid)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    isList: ").append(toIndentedString(isList)).append("\n");
    sb.append("    isSegment: ").append(toIndentedString(isSegment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("activity_dts");
    openapiFields.add("destination_name");
    openapiFields.add("destination_uuid");
    openapiFields.add("email");
    openapiFields.add("is_list");
    openapiFields.add("is_segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailDashboardActivity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailDashboardActivity.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailDashboardActivity is not found in the empty JSON string", EmailDashboardActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailDashboardActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailDashboardActivity` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("activity_dts") != null && !jsonObj.get("activity_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_dts").toString()));
      }
      if (jsonObj.get("destination_name") != null && !jsonObj.get("destination_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_name").toString()));
      }
      if (jsonObj.get("destination_uuid") != null && !jsonObj.get("destination_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_uuid").toString()));
      }
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailDashboardActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailDashboardActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailDashboardActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailDashboardActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailDashboardActivity>() {
           @Override
           public void write(JsonWriter out, EmailDashboardActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailDashboardActivity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailDashboardActivity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailDashboardActivity
  * @throws IOException if the JSON string is invalid with respect to EmailDashboardActivity
  */
  public static EmailDashboardActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailDashboardActivity.class);
  }

 /**
  * Convert an instance of EmailDashboardActivity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


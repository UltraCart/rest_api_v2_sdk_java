/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.TaxCity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxCounty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-01T11:46:50.322-04:00[America/Indianapolis]")
public class TaxCounty {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_CITIES = "cities";
  @SerializedName(SERIALIZED_NAME_CITIES)
  private List<TaxCity> cities = null;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_COUNTY_OID = "county_oid";
  @SerializedName(SERIALIZED_NAME_COUNTY_OID)
  private Integer countyOid;

  public static final String SERIALIZED_NAME_DONT_COLLECT_CITY = "dont_collect_city";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_CITY)
  private Boolean dontCollectCity;

  public static final String SERIALIZED_NAME_DONT_COLLECT_COUNTY = "dont_collect_county";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_COUNTY)
  private Boolean dontCollectCounty;

  public static final String SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE = "dont_collect_postal_code";
  @SerializedName(SERIALIZED_NAME_DONT_COLLECT_POSTAL_CODE)
  private Boolean dontCollectPostalCode;

  public static final String SERIALIZED_NAME_STATE_OID = "state_oid";
  @SerializedName(SERIALIZED_NAME_STATE_OID)
  private Integer stateOid;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TAX_RATE_FORMATTED = "tax_rate_formatted";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_FORMATTED)
  private String taxRateFormatted;

  public TaxCounty() { 
  }

  public TaxCounty accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Accounting code for programs such as QuickBooks
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accounting code for programs such as QuickBooks")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public TaxCounty cities(List<TaxCity> cities) {
    
    this.cities = cities;
    return this;
  }

  public TaxCounty addCitiesItem(TaxCity citiesItem) {
    if (this.cities == null) {
      this.cities = new ArrayList<>();
    }
    this.cities.add(citiesItem);
    return this;
  }

   /**
   * Cities within this city
   * @return cities
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cities within this city")

  public List<TaxCity> getCities() {
    return cities;
  }


  public void setCities(List<TaxCity> cities) {
    this.cities = cities;
  }


  public TaxCounty county(String county) {
    
    this.county = county;
    return this;
  }

   /**
   * County
   * @return county
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "County")

  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    this.county = county;
  }


  public TaxCounty countyOid(Integer countyOid) {
    
    this.countyOid = countyOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return countyOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getCountyOid() {
    return countyOid;
  }


  public void setCountyOid(Integer countyOid) {
    this.countyOid = countyOid;
  }


  public TaxCounty dontCollectCity(Boolean dontCollectCity) {
    
    this.dontCollectCity = dontCollectCity;
    return this;
  }

   /**
   * Flag instructing engine to not collect city tax for this county
   * @return dontCollectCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect city tax for this county")

  public Boolean getDontCollectCity() {
    return dontCollectCity;
  }


  public void setDontCollectCity(Boolean dontCollectCity) {
    this.dontCollectCity = dontCollectCity;
  }


  public TaxCounty dontCollectCounty(Boolean dontCollectCounty) {
    
    this.dontCollectCounty = dontCollectCounty;
    return this;
  }

   /**
   * Flag instructing engine to not collect county tax for this county
   * @return dontCollectCounty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect county tax for this county")

  public Boolean getDontCollectCounty() {
    return dontCollectCounty;
  }


  public void setDontCollectCounty(Boolean dontCollectCounty) {
    this.dontCollectCounty = dontCollectCounty;
  }


  public TaxCounty dontCollectPostalCode(Boolean dontCollectPostalCode) {
    
    this.dontCollectPostalCode = dontCollectPostalCode;
    return this;
  }

   /**
   * Flag instructing engine to not collect postal code tax for this county
   * @return dontCollectPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag instructing engine to not collect postal code tax for this county")

  public Boolean getDontCollectPostalCode() {
    return dontCollectPostalCode;
  }


  public void setDontCollectPostalCode(Boolean dontCollectPostalCode) {
    this.dontCollectPostalCode = dontCollectPostalCode;
  }


  public TaxCounty stateOid(Integer stateOid) {
    
    this.stateOid = stateOid;
    return this;
  }

   /**
   * Tax record object identifier used internally by database
   * @return stateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax record object identifier used internally by database")

  public Integer getStateOid() {
    return stateOid;
  }


  public void setStateOid(Integer stateOid) {
    this.stateOid = stateOid;
  }


  public TaxCounty taxRate(BigDecimal taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Tax Rate
   * @return taxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax Rate")

  public BigDecimal getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TaxCounty taxRateFormatted(String taxRateFormatted) {
    
    this.taxRateFormatted = taxRateFormatted;
    return this;
  }

   /**
   * Tax rate formatted
   * @return taxRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tax rate formatted")

  public String getTaxRateFormatted() {
    return taxRateFormatted;
  }


  public void setTaxRateFormatted(String taxRateFormatted) {
    this.taxRateFormatted = taxRateFormatted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxCounty taxCounty = (TaxCounty) o;
    return Objects.equals(this.accountingCode, taxCounty.accountingCode) &&
        Objects.equals(this.cities, taxCounty.cities) &&
        Objects.equals(this.county, taxCounty.county) &&
        Objects.equals(this.countyOid, taxCounty.countyOid) &&
        Objects.equals(this.dontCollectCity, taxCounty.dontCollectCity) &&
        Objects.equals(this.dontCollectCounty, taxCounty.dontCollectCounty) &&
        Objects.equals(this.dontCollectPostalCode, taxCounty.dontCollectPostalCode) &&
        Objects.equals(this.stateOid, taxCounty.stateOid) &&
        Objects.equals(this.taxRate, taxCounty.taxRate) &&
        Objects.equals(this.taxRateFormatted, taxCounty.taxRateFormatted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, cities, county, countyOid, dontCollectCity, dontCollectCounty, dontCollectPostalCode, stateOid, taxRate, taxRateFormatted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxCounty {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    cities: ").append(toIndentedString(cities)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    countyOid: ").append(toIndentedString(countyOid)).append("\n");
    sb.append("    dontCollectCity: ").append(toIndentedString(dontCollectCity)).append("\n");
    sb.append("    dontCollectCounty: ").append(toIndentedString(dontCollectCounty)).append("\n");
    sb.append("    dontCollectPostalCode: ").append(toIndentedString(dontCollectPostalCode)).append("\n");
    sb.append("    stateOid: ").append(toIndentedString(stateOid)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxRateFormatted: ").append(toIndentedString(taxRateFormatted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("cities");
    openapiFields.add("county");
    openapiFields.add("county_oid");
    openapiFields.add("dont_collect_city");
    openapiFields.add("dont_collect_county");
    openapiFields.add("dont_collect_postal_code");
    openapiFields.add("state_oid");
    openapiFields.add("tax_rate");
    openapiFields.add("tax_rate_formatted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxCounty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxCounty.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxCounty is not found in the empty JSON string", TaxCounty.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxCounty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxCounty` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      JsonArray jsonArraycities = jsonObj.getAsJsonArray("cities");
      if (jsonArraycities != null) {
        // ensure the json data is an array
        if (!jsonObj.get("cities").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `cities` to be an array in the JSON string but got `%s`", jsonObj.get("cities").toString()));
        }

        // validate the optional field `cities` (array)
        for (int i = 0; i < jsonArraycities.size(); i++) {
          TaxCity.validateJsonObject(jsonArraycities.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("county") != null && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if (jsonObj.get("tax_rate_formatted") != null && !jsonObj.get("tax_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_rate_formatted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxCounty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxCounty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxCounty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxCounty.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxCounty>() {
           @Override
           public void write(JsonWriter out, TaxCounty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxCounty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxCounty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxCounty
  * @throws IOException if the JSON string is invalid with respect to TaxCounty
  */
  public static TaxCounty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxCounty.class);
  }

 /**
  * Convert an instance of TaxCounty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


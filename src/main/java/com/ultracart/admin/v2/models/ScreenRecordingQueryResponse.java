/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Error;
import com.ultracart.admin.v2.models.ResponseMetadata;
import com.ultracart.admin.v2.models.ScreenRecording;
import com.ultracart.admin.v2.models.ScreenRecordingFilter;
import com.ultracart.admin.v2.models.ScreenRecordingFilterValues;
import com.ultracart.admin.v2.models.Warning;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ScreenRecordingQueryResponse
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-07-10T16:24:10.804-04:00")



public class ScreenRecordingQueryResponse {
  @SerializedName("checkout_only")
  private Boolean checkoutOnly = null;

  @SerializedName("error")
  private Error error = null;

  @SerializedName("filter")
  private ScreenRecordingFilter filter = null;

  @SerializedName("filter_values")
  private ScreenRecordingFilterValues filterValues = null;

  @SerializedName("histogram_data")
  private List<Integer> histogramData = null;

  @SerializedName("histogram_interval")
  private String histogramInterval = null;

  @SerializedName("histogram_start_dts")
  private String histogramStartDts = null;

  @SerializedName("metadata")
  private ResponseMetadata metadata = null;

  @SerializedName("screen_recordings")
  private List<ScreenRecording> screenRecordings = null;

  @SerializedName("success")
  private Boolean success = null;

  @SerializedName("warning")
  private Warning warning = null;

  public ScreenRecordingQueryResponse checkoutOnly(Boolean checkoutOnly) {
    this.checkoutOnly = checkoutOnly;
    return this;
  }

   /**
   * Get checkoutOnly
   * @return checkoutOnly
  **/
  @ApiModelProperty(value = "")
  public Boolean isCheckoutOnly() {
    return checkoutOnly;
  }

  public void setCheckoutOnly(Boolean checkoutOnly) {
    this.checkoutOnly = checkoutOnly;
  }

  public ScreenRecordingQueryResponse error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @ApiModelProperty(value = "")
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }

  public ScreenRecordingQueryResponse filter(ScreenRecordingFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public ScreenRecordingFilter getFilter() {
    return filter;
  }

  public void setFilter(ScreenRecordingFilter filter) {
    this.filter = filter;
  }

  public ScreenRecordingQueryResponse filterValues(ScreenRecordingFilterValues filterValues) {
    this.filterValues = filterValues;
    return this;
  }

   /**
   * Get filterValues
   * @return filterValues
  **/
  @ApiModelProperty(value = "")
  public ScreenRecordingFilterValues getFilterValues() {
    return filterValues;
  }

  public void setFilterValues(ScreenRecordingFilterValues filterValues) {
    this.filterValues = filterValues;
  }

  public ScreenRecordingQueryResponse histogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
    return this;
  }

  public ScreenRecordingQueryResponse addHistogramDataItem(Integer histogramDataItem) {
    if (this.histogramData == null) {
      this.histogramData = new ArrayList<Integer>();
    }
    this.histogramData.add(histogramDataItem);
    return this;
  }

   /**
   * Get histogramData
   * @return histogramData
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getHistogramData() {
    return histogramData;
  }

  public void setHistogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
  }

  public ScreenRecordingQueryResponse histogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
    return this;
  }

   /**
   * Get histogramInterval
   * @return histogramInterval
  **/
  @ApiModelProperty(value = "")
  public String getHistogramInterval() {
    return histogramInterval;
  }

  public void setHistogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
  }

  public ScreenRecordingQueryResponse histogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
    return this;
  }

   /**
   * Get histogramStartDts
   * @return histogramStartDts
  **/
  @ApiModelProperty(value = "")
  public String getHistogramStartDts() {
    return histogramStartDts;
  }

  public void setHistogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
  }

  public ScreenRecordingQueryResponse metadata(ResponseMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public ResponseMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ResponseMetadata metadata) {
    this.metadata = metadata;
  }

  public ScreenRecordingQueryResponse screenRecordings(List<ScreenRecording> screenRecordings) {
    this.screenRecordings = screenRecordings;
    return this;
  }

  public ScreenRecordingQueryResponse addScreenRecordingsItem(ScreenRecording screenRecordingsItem) {
    if (this.screenRecordings == null) {
      this.screenRecordings = new ArrayList<ScreenRecording>();
    }
    this.screenRecordings.add(screenRecordingsItem);
    return this;
  }

   /**
   * Get screenRecordings
   * @return screenRecordings
  **/
  @ApiModelProperty(value = "")
  public List<ScreenRecording> getScreenRecordings() {
    return screenRecordings;
  }

  public void setScreenRecordings(List<ScreenRecording> screenRecordings) {
    this.screenRecordings = screenRecordings;
  }

  public ScreenRecordingQueryResponse success(Boolean success) {
    this.success = success;
    return this;
  }

   /**
   * Indicates if API call was successful
   * @return success
  **/
  @ApiModelProperty(value = "Indicates if API call was successful")
  public Boolean isSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }

  public ScreenRecordingQueryResponse warning(Warning warning) {
    this.warning = warning;
    return this;
  }

   /**
   * Get warning
   * @return warning
  **/
  @ApiModelProperty(value = "")
  public Warning getWarning() {
    return warning;
  }

  public void setWarning(Warning warning) {
    this.warning = warning;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingQueryResponse screenRecordingQueryResponse = (ScreenRecordingQueryResponse) o;
    return Objects.equals(this.checkoutOnly, screenRecordingQueryResponse.checkoutOnly) &&
        Objects.equals(this.error, screenRecordingQueryResponse.error) &&
        Objects.equals(this.filter, screenRecordingQueryResponse.filter) &&
        Objects.equals(this.filterValues, screenRecordingQueryResponse.filterValues) &&
        Objects.equals(this.histogramData, screenRecordingQueryResponse.histogramData) &&
        Objects.equals(this.histogramInterval, screenRecordingQueryResponse.histogramInterval) &&
        Objects.equals(this.histogramStartDts, screenRecordingQueryResponse.histogramStartDts) &&
        Objects.equals(this.metadata, screenRecordingQueryResponse.metadata) &&
        Objects.equals(this.screenRecordings, screenRecordingQueryResponse.screenRecordings) &&
        Objects.equals(this.success, screenRecordingQueryResponse.success) &&
        Objects.equals(this.warning, screenRecordingQueryResponse.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkoutOnly, error, filter, filterValues, histogramData, histogramInterval, histogramStartDts, metadata, screenRecordings, success, warning);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingQueryResponse {\n");
    
    sb.append("    checkoutOnly: ").append(toIndentedString(checkoutOnly)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterValues: ").append(toIndentedString(filterValues)).append("\n");
    sb.append("    histogramData: ").append(toIndentedString(histogramData)).append("\n");
    sb.append("    histogramInterval: ").append(toIndentedString(histogramInterval)).append("\n");
    sb.append("    histogramStartDts: ").append(toIndentedString(histogramStartDts)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    screenRecordings: ").append(toIndentedString(screenRecordings)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


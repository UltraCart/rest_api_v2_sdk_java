/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.EmailListCustomer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailListCustomersResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-30T16:03:10.019-05:00[America/Indianapolis]")
public class EmailListCustomersResponse {
  public static final String SERIALIZED_NAME_CUSTOMERS = "customers";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS)
  private List<EmailListCustomer> customers = null;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "page_number";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_TOTAL_CUSTOMERS = "total_customers";
  @SerializedName(SERIALIZED_NAME_TOTAL_CUSTOMERS)
  private Integer totalCustomers;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "total_pages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public EmailListCustomersResponse() { 
  }

  public EmailListCustomersResponse customers(List<EmailListCustomer> customers) {
    
    this.customers = customers;
    return this;
  }

  public EmailListCustomersResponse addCustomersItem(EmailListCustomer customersItem) {
    if (this.customers == null) {
      this.customers = new ArrayList<>();
    }
    this.customers.add(customersItem);
    return this;
  }

   /**
   * Customers on the page
   * @return customers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Customers on the page")

  public List<EmailListCustomer> getCustomers() {
    return customers;
  }


  public void setCustomers(List<EmailListCustomer> customers) {
    this.customers = customers;
  }


  public EmailListCustomersResponse pageNumber(Integer pageNumber) {
    
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Page number (one based offset)
   * @return pageNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Page number (one based offset)")

  public Integer getPageNumber() {
    return pageNumber;
  }


  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public EmailListCustomersResponse pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Number of records per page
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of records per page")

  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public EmailListCustomersResponse totalCustomers(Integer totalCustomers) {
    
    this.totalCustomers = totalCustomers;
    return this;
  }

   /**
   * Total customers
   * @return totalCustomers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total customers")

  public Integer getTotalCustomers() {
    return totalCustomers;
  }


  public void setTotalCustomers(Integer totalCustomers) {
    this.totalCustomers = totalCustomers;
  }


  public EmailListCustomersResponse totalPages(Integer totalPages) {
    
    this.totalPages = totalPages;
    return this;
  }

   /**
   * Total number of pages
   * @return totalPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of pages")

  public Integer getTotalPages() {
    return totalPages;
  }


  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailListCustomersResponse emailListCustomersResponse = (EmailListCustomersResponse) o;
    return Objects.equals(this.customers, emailListCustomersResponse.customers) &&
        Objects.equals(this.pageNumber, emailListCustomersResponse.pageNumber) &&
        Objects.equals(this.pageSize, emailListCustomersResponse.pageSize) &&
        Objects.equals(this.totalCustomers, emailListCustomersResponse.totalCustomers) &&
        Objects.equals(this.totalPages, emailListCustomersResponse.totalPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customers, pageNumber, pageSize, totalCustomers, totalPages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailListCustomersResponse {\n");
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    totalCustomers: ").append(toIndentedString(totalCustomers)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customers");
    openapiFields.add("page_number");
    openapiFields.add("page_size");
    openapiFields.add("total_customers");
    openapiFields.add("total_pages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailListCustomersResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailListCustomersResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailListCustomersResponse is not found in the empty JSON string", EmailListCustomersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailListCustomersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailListCustomersResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraycustomers = jsonObj.getAsJsonArray("customers");
      if (jsonArraycustomers != null) {
        // ensure the json data is an array
        if (!jsonObj.get("customers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `customers` to be an array in the JSON string but got `%s`", jsonObj.get("customers").toString()));
        }

        // validate the optional field `customers` (array)
        for (int i = 0; i < jsonArraycustomers.size(); i++) {
          EmailListCustomer.validateJsonObject(jsonArraycustomers.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailListCustomersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailListCustomersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailListCustomersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailListCustomersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailListCustomersResponse>() {
           @Override
           public void write(JsonWriter out, EmailListCustomersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailListCustomersResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailListCustomersResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailListCustomersResponse
  * @throws IOException if the JSON string is invalid with respect to EmailListCustomersResponse
  */
  public static EmailListCustomersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailListCustomersResponse.class);
  }

 /**
  * Convert an instance of EmailListCustomersResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


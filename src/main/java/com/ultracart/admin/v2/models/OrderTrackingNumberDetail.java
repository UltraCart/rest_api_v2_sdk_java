/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderTrackingNumberDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-21T11:31:21.848-04:00[America/Indianapolis]")
public class OrderTrackingNumberDetail {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_EVENT_DTS = "event_dts";
  @SerializedName(SERIALIZED_NAME_EVENT_DTS)
  private String eventDts;

  public static final String SERIALIZED_NAME_EVENT_LOCAL_DATE = "event_local_date";
  @SerializedName(SERIALIZED_NAME_EVENT_LOCAL_DATE)
  private String eventLocalDate;

  public static final String SERIALIZED_NAME_EVENT_LOCAL_TIME = "event_local_time";
  @SerializedName(SERIALIZED_NAME_EVENT_LOCAL_TIME)
  private String eventLocalTime;

  public static final String SERIALIZED_NAME_EVENT_TIMEZONE_ID = "event_timezone_id";
  @SerializedName(SERIALIZED_NAME_EVENT_TIMEZONE_ID)
  private String eventTimezoneId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBTAG = "subtag";
  @SerializedName(SERIALIZED_NAME_SUBTAG)
  private String subtag;

  public static final String SERIALIZED_NAME_SUBTAG_MESSAGE = "subtag_message";
  @SerializedName(SERIALIZED_NAME_SUBTAG_MESSAGE)
  private String subtagMessage;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TAG_DESCRIPTION = "tag_description";
  @SerializedName(SERIALIZED_NAME_TAG_DESCRIPTION)
  private String tagDescription;

  public static final String SERIALIZED_NAME_TAG_ICON = "tag_icon";
  @SerializedName(SERIALIZED_NAME_TAG_ICON)
  private String tagIcon;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public OrderTrackingNumberDetail() { 
  }

  public OrderTrackingNumberDetail city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public OrderTrackingNumberDetail eventDts(String eventDts) {
    
    this.eventDts = eventDts;
    return this;
  }

   /**
   * ISO 8601 timestamp that the event occurred
   * @return eventDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 timestamp that the event occurred")

  public String getEventDts() {
    return eventDts;
  }


  public void setEventDts(String eventDts) {
    this.eventDts = eventDts;
  }


  public OrderTrackingNumberDetail eventLocalDate(String eventLocalDate) {
    
    this.eventLocalDate = eventLocalDate;
    return this;
  }

   /**
   * Get eventLocalDate
   * @return eventLocalDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventLocalDate() {
    return eventLocalDate;
  }


  public void setEventLocalDate(String eventLocalDate) {
    this.eventLocalDate = eventLocalDate;
  }


  public OrderTrackingNumberDetail eventLocalTime(String eventLocalTime) {
    
    this.eventLocalTime = eventLocalTime;
    return this;
  }

   /**
   * Get eventLocalTime
   * @return eventLocalTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEventLocalTime() {
    return eventLocalTime;
  }


  public void setEventLocalTime(String eventLocalTime) {
    this.eventLocalTime = eventLocalTime;
  }


  public OrderTrackingNumberDetail eventTimezoneId(String eventTimezoneId) {
    
    this.eventTimezoneId = eventTimezoneId;
    return this;
  }

   /**
   * Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.
   * @return eventTimezoneId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timezone the event occurred in.  Use this in conjunction with event_dts to format a local date/time.")

  public String getEventTimezoneId() {
    return eventTimezoneId;
  }


  public void setEventTimezoneId(String eventTimezoneId) {
    this.eventTimezoneId = eventTimezoneId;
  }


  public OrderTrackingNumberDetail state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public OrderTrackingNumberDetail subtag(String subtag) {
    
    this.subtag = subtag;
    return this;
  }

   /**
   * Get subtag
   * @return subtag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubtag() {
    return subtag;
  }


  public void setSubtag(String subtag) {
    this.subtag = subtag;
  }


  public OrderTrackingNumberDetail subtagMessage(String subtagMessage) {
    
    this.subtagMessage = subtagMessage;
    return this;
  }

   /**
   * Get subtagMessage
   * @return subtagMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubtagMessage() {
    return subtagMessage;
  }


  public void setSubtagMessage(String subtagMessage) {
    this.subtagMessage = subtagMessage;
  }


  public OrderTrackingNumberDetail tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  public OrderTrackingNumberDetail tagDescription(String tagDescription) {
    
    this.tagDescription = tagDescription;
    return this;
  }

   /**
   * Get tagDescription
   * @return tagDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagDescription() {
    return tagDescription;
  }


  public void setTagDescription(String tagDescription) {
    this.tagDescription = tagDescription;
  }


  public OrderTrackingNumberDetail tagIcon(String tagIcon) {
    
    this.tagIcon = tagIcon;
    return this;
  }

   /**
   * Get tagIcon
   * @return tagIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTagIcon() {
    return tagIcon;
  }


  public void setTagIcon(String tagIcon) {
    this.tagIcon = tagIcon;
  }


  public OrderTrackingNumberDetail zip(String zip) {
    
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTrackingNumberDetail orderTrackingNumberDetail = (OrderTrackingNumberDetail) o;
    return Objects.equals(this.city, orderTrackingNumberDetail.city) &&
        Objects.equals(this.eventDts, orderTrackingNumberDetail.eventDts) &&
        Objects.equals(this.eventLocalDate, orderTrackingNumberDetail.eventLocalDate) &&
        Objects.equals(this.eventLocalTime, orderTrackingNumberDetail.eventLocalTime) &&
        Objects.equals(this.eventTimezoneId, orderTrackingNumberDetail.eventTimezoneId) &&
        Objects.equals(this.state, orderTrackingNumberDetail.state) &&
        Objects.equals(this.subtag, orderTrackingNumberDetail.subtag) &&
        Objects.equals(this.subtagMessage, orderTrackingNumberDetail.subtagMessage) &&
        Objects.equals(this.tag, orderTrackingNumberDetail.tag) &&
        Objects.equals(this.tagDescription, orderTrackingNumberDetail.tagDescription) &&
        Objects.equals(this.tagIcon, orderTrackingNumberDetail.tagIcon) &&
        Objects.equals(this.zip, orderTrackingNumberDetail.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, eventDts, eventLocalDate, eventLocalTime, eventTimezoneId, state, subtag, subtagMessage, tag, tagDescription, tagIcon, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTrackingNumberDetail {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    eventDts: ").append(toIndentedString(eventDts)).append("\n");
    sb.append("    eventLocalDate: ").append(toIndentedString(eventLocalDate)).append("\n");
    sb.append("    eventLocalTime: ").append(toIndentedString(eventLocalTime)).append("\n");
    sb.append("    eventTimezoneId: ").append(toIndentedString(eventTimezoneId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subtag: ").append(toIndentedString(subtag)).append("\n");
    sb.append("    subtagMessage: ").append(toIndentedString(subtagMessage)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tagDescription: ").append(toIndentedString(tagDescription)).append("\n");
    sb.append("    tagIcon: ").append(toIndentedString(tagIcon)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("event_dts");
    openapiFields.add("event_local_date");
    openapiFields.add("event_local_time");
    openapiFields.add("event_timezone_id");
    openapiFields.add("state");
    openapiFields.add("subtag");
    openapiFields.add("subtag_message");
    openapiFields.add("tag");
    openapiFields.add("tag_description");
    openapiFields.add("tag_icon");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderTrackingNumberDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderTrackingNumberDetail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTrackingNumberDetail is not found in the empty JSON string", OrderTrackingNumberDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderTrackingNumberDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTrackingNumberDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (jsonObj.get("event_dts") != null && !jsonObj.get("event_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_dts").toString()));
      }
      if (jsonObj.get("event_local_date") != null && !jsonObj.get("event_local_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_local_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_local_date").toString()));
      }
      if (jsonObj.get("event_local_time") != null && !jsonObj.get("event_local_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_local_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_local_time").toString()));
      }
      if (jsonObj.get("event_timezone_id") != null && !jsonObj.get("event_timezone_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_timezone_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_timezone_id").toString()));
      }
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("subtag") != null && !jsonObj.get("subtag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtag").toString()));
      }
      if (jsonObj.get("subtag_message") != null && !jsonObj.get("subtag_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtag_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtag_message").toString()));
      }
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (jsonObj.get("tag_description") != null && !jsonObj.get("tag_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_description").toString()));
      }
      if (jsonObj.get("tag_icon") != null && !jsonObj.get("tag_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_icon").toString()));
      }
      if (jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTrackingNumberDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTrackingNumberDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTrackingNumberDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTrackingNumberDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTrackingNumberDetail>() {
           @Override
           public void write(JsonWriter out, OrderTrackingNumberDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTrackingNumberDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderTrackingNumberDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderTrackingNumberDetail
  * @throws IOException if the JSON string is invalid with respect to OrderTrackingNumberDetail
  */
  public static OrderTrackingNumberDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTrackingNumberDetail.class);
  }

 /**
  * Convert an instance of OrderTrackingNumberDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


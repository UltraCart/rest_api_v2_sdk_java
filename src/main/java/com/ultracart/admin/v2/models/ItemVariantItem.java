/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemVariantItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-04T10:02:29.437-04:00[America/Indianapolis]")
public class ItemVariantItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MERCHANT_ITEM_MULTIMEDIA_OID = "merchant_item_multimedia_oid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ITEM_MULTIMEDIA_OID)
  private Integer merchantItemMultimediaOid;

  public static final String SERIALIZED_NAME_VARIANT_MERCHANT_ITEM_ID = "variant_merchant_item_id";
  @SerializedName(SERIALIZED_NAME_VARIANT_MERCHANT_ITEM_ID)
  private String variantMerchantItemId;

  public static final String SERIALIZED_NAME_VARIANT_MERCHANT_ITEM_OID = "variant_merchant_item_oid";
  @SerializedName(SERIALIZED_NAME_VARIANT_MERCHANT_ITEM_OID)
  private Integer variantMerchantItemOid;

  public static final String SERIALIZED_NAME_VARIATION_OPTIONS = "variation_options";
  @SerializedName(SERIALIZED_NAME_VARIATION_OPTIONS)
  private List<String> variationOptions = null;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<String> variations = null;

  public ItemVariantItem() { 
  }

  public ItemVariantItem description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ItemVariantItem merchantItemMultimediaOid(Integer merchantItemMultimediaOid) {
    
    this.merchantItemMultimediaOid = merchantItemMultimediaOid;
    return this;
  }

   /**
   * Multimedia object identifier
   * @return merchantItemMultimediaOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multimedia object identifier")

  public Integer getMerchantItemMultimediaOid() {
    return merchantItemMultimediaOid;
  }


  public void setMerchantItemMultimediaOid(Integer merchantItemMultimediaOid) {
    this.merchantItemMultimediaOid = merchantItemMultimediaOid;
  }


  public ItemVariantItem variantMerchantItemId(String variantMerchantItemId) {
    
    this.variantMerchantItemId = variantMerchantItemId;
    return this;
  }

   /**
   * Variant item id
   * @return variantMerchantItemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variant item id")

  public String getVariantMerchantItemId() {
    return variantMerchantItemId;
  }


  public void setVariantMerchantItemId(String variantMerchantItemId) {
    this.variantMerchantItemId = variantMerchantItemId;
  }


  public ItemVariantItem variantMerchantItemOid(Integer variantMerchantItemOid) {
    
    this.variantMerchantItemOid = variantMerchantItemOid;
    return this;
  }

   /**
   * Variant item object identifier
   * @return variantMerchantItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variant item object identifier")

  public Integer getVariantMerchantItemOid() {
    return variantMerchantItemOid;
  }


  public void setVariantMerchantItemOid(Integer variantMerchantItemOid) {
    this.variantMerchantItemOid = variantMerchantItemOid;
  }


  public ItemVariantItem variationOptions(List<String> variationOptions) {
    
    this.variationOptions = variationOptions;
    return this;
  }

  public ItemVariantItem addVariationOptionsItem(String variationOptionsItem) {
    if (this.variationOptions == null) {
      this.variationOptions = new ArrayList<>();
    }
    this.variationOptions.add(variationOptionsItem);
    return this;
  }

   /**
   * Variation options
   * @return variationOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variation options")

  public List<String> getVariationOptions() {
    return variationOptions;
  }


  public void setVariationOptions(List<String> variationOptions) {
    this.variationOptions = variationOptions;
  }


  public ItemVariantItem variations(List<String> variations) {
    
    this.variations = variations;
    return this;
  }

  public ItemVariantItem addVariationsItem(String variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Variations
   * @return variations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variations")

  public List<String> getVariations() {
    return variations;
  }


  public void setVariations(List<String> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemVariantItem itemVariantItem = (ItemVariantItem) o;
    return Objects.equals(this.description, itemVariantItem.description) &&
        Objects.equals(this.merchantItemMultimediaOid, itemVariantItem.merchantItemMultimediaOid) &&
        Objects.equals(this.variantMerchantItemId, itemVariantItem.variantMerchantItemId) &&
        Objects.equals(this.variantMerchantItemOid, itemVariantItem.variantMerchantItemOid) &&
        Objects.equals(this.variationOptions, itemVariantItem.variationOptions) &&
        Objects.equals(this.variations, itemVariantItem.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, merchantItemMultimediaOid, variantMerchantItemId, variantMerchantItemOid, variationOptions, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemVariantItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    merchantItemMultimediaOid: ").append(toIndentedString(merchantItemMultimediaOid)).append("\n");
    sb.append("    variantMerchantItemId: ").append(toIndentedString(variantMerchantItemId)).append("\n");
    sb.append("    variantMerchantItemOid: ").append(toIndentedString(variantMerchantItemOid)).append("\n");
    sb.append("    variationOptions: ").append(toIndentedString(variationOptions)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("merchant_item_multimedia_oid");
    openapiFields.add("variant_merchant_item_id");
    openapiFields.add("variant_merchant_item_oid");
    openapiFields.add("variation_options");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemVariantItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemVariantItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemVariantItem is not found in the empty JSON string", ItemVariantItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemVariantItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemVariantItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("variant_merchant_item_id") != null && !jsonObj.get("variant_merchant_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant_merchant_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant_merchant_item_id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("variation_options") != null && !jsonObj.get("variation_options").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variation_options` to be an array in the JSON string but got `%s`", jsonObj.get("variation_options").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("variations") != null && !jsonObj.get("variations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemVariantItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemVariantItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemVariantItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemVariantItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemVariantItem>() {
           @Override
           public void write(JsonWriter out, ItemVariantItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemVariantItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemVariantItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemVariantItem
  * @throws IOException if the JSON string is invalid with respect to ItemVariantItem
  */
  public static ItemVariantItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemVariantItem.class);
  }

 /**
  * Convert an instance of ItemVariantItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


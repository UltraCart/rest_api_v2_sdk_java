/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemPricingTierLimit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-28T11:17:18.756-04:00[America/Indianapolis]")
public class ItemPricingTierLimit {
  public static final String SERIALIZED_NAME_CUMULATIVE_ORDER_LIMIT = "cumulative_order_limit";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_ORDER_LIMIT)
  private Integer cumulativeOrderLimit;

  public static final String SERIALIZED_NAME_EXEMPT_FROM_MINIMUM_ITEM_COUNT = "exempt_from_minimum_item_count";
  @SerializedName(SERIALIZED_NAME_EXEMPT_FROM_MINIMUM_ITEM_COUNT)
  private Boolean exemptFromMinimumItemCount;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ORDER_LIMIT = "individual_order_limit";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ORDER_LIMIT)
  private Integer individualOrderLimit;

  public static final String SERIALIZED_NAME_MULTIPLE_QUANTITY = "multiple_quantity";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_QUANTITY)
  private Integer multipleQuantity;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_VALIDITY = "payment_method_validity";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_VALIDITY)
  private List<String> paymentMethodValidity = null;

  public ItemPricingTierLimit() { 
  }

  public ItemPricingTierLimit cumulativeOrderLimit(Integer cumulativeOrderLimit) {
    
    this.cumulativeOrderLimit = cumulativeOrderLimit;
    return this;
  }

   /**
   * Cumulative order limit
   * @return cumulativeOrderLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cumulative order limit")

  public Integer getCumulativeOrderLimit() {
    return cumulativeOrderLimit;
  }


  public void setCumulativeOrderLimit(Integer cumulativeOrderLimit) {
    this.cumulativeOrderLimit = cumulativeOrderLimit;
  }


  public ItemPricingTierLimit exemptFromMinimumItemCount(Boolean exemptFromMinimumItemCount) {
    
    this.exemptFromMinimumItemCount = exemptFromMinimumItemCount;
    return this;
  }

   /**
   * Exempt from Minimum Item Count
   * @return exemptFromMinimumItemCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exempt from Minimum Item Count")

  public Boolean getExemptFromMinimumItemCount() {
    return exemptFromMinimumItemCount;
  }


  public void setExemptFromMinimumItemCount(Boolean exemptFromMinimumItemCount) {
    this.exemptFromMinimumItemCount = exemptFromMinimumItemCount;
  }


  public ItemPricingTierLimit individualOrderLimit(Integer individualOrderLimit) {
    
    this.individualOrderLimit = individualOrderLimit;
    return this;
  }

   /**
   * Individual order limit
   * @return individualOrderLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Individual order limit")

  public Integer getIndividualOrderLimit() {
    return individualOrderLimit;
  }


  public void setIndividualOrderLimit(Integer individualOrderLimit) {
    this.individualOrderLimit = individualOrderLimit;
  }


  public ItemPricingTierLimit multipleQuantity(Integer multipleQuantity) {
    
    this.multipleQuantity = multipleQuantity;
    return this;
  }

   /**
   * Multiple quantity
   * @return multipleQuantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multiple quantity")

  public Integer getMultipleQuantity() {
    return multipleQuantity;
  }


  public void setMultipleQuantity(Integer multipleQuantity) {
    this.multipleQuantity = multipleQuantity;
  }


  public ItemPricingTierLimit paymentMethodValidity(List<String> paymentMethodValidity) {
    
    this.paymentMethodValidity = paymentMethodValidity;
    return this;
  }

  public ItemPricingTierLimit addPaymentMethodValidityItem(String paymentMethodValidityItem) {
    if (this.paymentMethodValidity == null) {
      this.paymentMethodValidity = new ArrayList<>();
    }
    this.paymentMethodValidity.add(paymentMethodValidityItem);
    return this;
  }

   /**
   * Payment method validity
   * @return paymentMethodValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method validity")

  public List<String> getPaymentMethodValidity() {
    return paymentMethodValidity;
  }


  public void setPaymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPricingTierLimit itemPricingTierLimit = (ItemPricingTierLimit) o;
    return Objects.equals(this.cumulativeOrderLimit, itemPricingTierLimit.cumulativeOrderLimit) &&
        Objects.equals(this.exemptFromMinimumItemCount, itemPricingTierLimit.exemptFromMinimumItemCount) &&
        Objects.equals(this.individualOrderLimit, itemPricingTierLimit.individualOrderLimit) &&
        Objects.equals(this.multipleQuantity, itemPricingTierLimit.multipleQuantity) &&
        Objects.equals(this.paymentMethodValidity, itemPricingTierLimit.paymentMethodValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativeOrderLimit, exemptFromMinimumItemCount, individualOrderLimit, multipleQuantity, paymentMethodValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPricingTierLimit {\n");
    sb.append("    cumulativeOrderLimit: ").append(toIndentedString(cumulativeOrderLimit)).append("\n");
    sb.append("    exemptFromMinimumItemCount: ").append(toIndentedString(exemptFromMinimumItemCount)).append("\n");
    sb.append("    individualOrderLimit: ").append(toIndentedString(individualOrderLimit)).append("\n");
    sb.append("    multipleQuantity: ").append(toIndentedString(multipleQuantity)).append("\n");
    sb.append("    paymentMethodValidity: ").append(toIndentedString(paymentMethodValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cumulative_order_limit");
    openapiFields.add("exempt_from_minimum_item_count");
    openapiFields.add("individual_order_limit");
    openapiFields.add("multiple_quantity");
    openapiFields.add("payment_method_validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemPricingTierLimit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemPricingTierLimit.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemPricingTierLimit is not found in the empty JSON string", ItemPricingTierLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemPricingTierLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemPricingTierLimit` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("payment_method_validity") != null && !jsonObj.get("payment_method_validity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_validity` to be an array in the JSON string but got `%s`", jsonObj.get("payment_method_validity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemPricingTierLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemPricingTierLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemPricingTierLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemPricingTierLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemPricingTierLimit>() {
           @Override
           public void write(JsonWriter out, ItemPricingTierLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemPricingTierLimit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemPricingTierLimit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemPricingTierLimit
  * @throws IOException if the JSON string is invalid with respect to ItemPricingTierLimit
  */
  public static ItemPricingTierLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemPricingTierLimit.class);
  }

 /**
  * Convert an instance of ItemPricingTierLimit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


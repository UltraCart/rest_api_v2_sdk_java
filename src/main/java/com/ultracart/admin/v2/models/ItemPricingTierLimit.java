/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ItemPricingTierLimit
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-08-04T13:55:37.247-04:00")



public class ItemPricingTierLimit {
  @SerializedName("cumulative_order_limit")
  private Integer cumulativeOrderLimit = null;

  @SerializedName("exempt_from_minimum_item_count")
  private Boolean exemptFromMinimumItemCount = null;

  @SerializedName("individual_order_limit")
  private Integer individualOrderLimit = null;

  @SerializedName("multiple_quantity")
  private Integer multipleQuantity = null;

  @SerializedName("payment_method_validity")
  private List<String> paymentMethodValidity = null;

  public ItemPricingTierLimit cumulativeOrderLimit(Integer cumulativeOrderLimit) {
    this.cumulativeOrderLimit = cumulativeOrderLimit;
    return this;
  }

   /**
   * Cumulative order limit
   * @return cumulativeOrderLimit
  **/
  @ApiModelProperty(value = "Cumulative order limit")
  public Integer getCumulativeOrderLimit() {
    return cumulativeOrderLimit;
  }

  public void setCumulativeOrderLimit(Integer cumulativeOrderLimit) {
    this.cumulativeOrderLimit = cumulativeOrderLimit;
  }

  public ItemPricingTierLimit exemptFromMinimumItemCount(Boolean exemptFromMinimumItemCount) {
    this.exemptFromMinimumItemCount = exemptFromMinimumItemCount;
    return this;
  }

   /**
   * Exempt from Minimum Item Count
   * @return exemptFromMinimumItemCount
  **/
  @ApiModelProperty(value = "Exempt from Minimum Item Count")
  public Boolean isExemptFromMinimumItemCount() {
    return exemptFromMinimumItemCount;
  }

  public void setExemptFromMinimumItemCount(Boolean exemptFromMinimumItemCount) {
    this.exemptFromMinimumItemCount = exemptFromMinimumItemCount;
  }

  public ItemPricingTierLimit individualOrderLimit(Integer individualOrderLimit) {
    this.individualOrderLimit = individualOrderLimit;
    return this;
  }

   /**
   * Individual order limit
   * @return individualOrderLimit
  **/
  @ApiModelProperty(value = "Individual order limit")
  public Integer getIndividualOrderLimit() {
    return individualOrderLimit;
  }

  public void setIndividualOrderLimit(Integer individualOrderLimit) {
    this.individualOrderLimit = individualOrderLimit;
  }

  public ItemPricingTierLimit multipleQuantity(Integer multipleQuantity) {
    this.multipleQuantity = multipleQuantity;
    return this;
  }

   /**
   * Multiple quantity
   * @return multipleQuantity
  **/
  @ApiModelProperty(value = "Multiple quantity")
  public Integer getMultipleQuantity() {
    return multipleQuantity;
  }

  public void setMultipleQuantity(Integer multipleQuantity) {
    this.multipleQuantity = multipleQuantity;
  }

  public ItemPricingTierLimit paymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
    return this;
  }

  public ItemPricingTierLimit addPaymentMethodValidityItem(String paymentMethodValidityItem) {
    if (this.paymentMethodValidity == null) {
      this.paymentMethodValidity = new ArrayList<String>();
    }
    this.paymentMethodValidity.add(paymentMethodValidityItem);
    return this;
  }

   /**
   * Payment method validity
   * @return paymentMethodValidity
  **/
  @ApiModelProperty(value = "Payment method validity")
  public List<String> getPaymentMethodValidity() {
    return paymentMethodValidity;
  }

  public void setPaymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPricingTierLimit itemPricingTierLimit = (ItemPricingTierLimit) o;
    return Objects.equals(this.cumulativeOrderLimit, itemPricingTierLimit.cumulativeOrderLimit) &&
        Objects.equals(this.exemptFromMinimumItemCount, itemPricingTierLimit.exemptFromMinimumItemCount) &&
        Objects.equals(this.individualOrderLimit, itemPricingTierLimit.individualOrderLimit) &&
        Objects.equals(this.multipleQuantity, itemPricingTierLimit.multipleQuantity) &&
        Objects.equals(this.paymentMethodValidity, itemPricingTierLimit.paymentMethodValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cumulativeOrderLimit, exemptFromMinimumItemCount, individualOrderLimit, multipleQuantity, paymentMethodValidity);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPricingTierLimit {\n");
    
    sb.append("    cumulativeOrderLimit: ").append(toIndentedString(cumulativeOrderLimit)).append("\n");
    sb.append("    exemptFromMinimumItemCount: ").append(toIndentedString(exemptFromMinimumItemCount)).append("\n");
    sb.append("    individualOrderLimit: ").append(toIndentedString(individualOrderLimit)).append("\n");
    sb.append("    multipleQuantity: ").append(toIndentedString(multipleQuantity)).append("\n");
    sb.append("    paymentMethodValidity: ").append(toIndentedString(paymentMethodValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


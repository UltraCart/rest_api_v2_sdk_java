/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * CouponAutoApplyCondition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-17T16:36:15.597-04:00")



public class CouponAutoApplyCondition {
  @SerializedName("coupon_code")
  private String couponCode = null;

  @SerializedName("minimum_subtotal")
  private BigDecimal minimumSubtotal = null;

  @SerializedName("required_item_id")
  private String requiredItemId = null;

  public CouponAutoApplyCondition couponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

   /**
   * Get couponCode
   * @return couponCode
  **/
  @ApiModelProperty(value = "")
  public String getCouponCode() {
    return couponCode;
  }

  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }

  public CouponAutoApplyCondition minimumSubtotal(BigDecimal minimumSubtotal) {
    this.minimumSubtotal = minimumSubtotal;
    return this;
  }

   /**
   * The minimum subtotal that must be purchased to receive this coupon. Item and subtotal are exclusive.  Only one can be populated.
   * @return minimumSubtotal
  **/
  @ApiModelProperty(value = "The minimum subtotal that must be purchased to receive this coupon. Item and subtotal are exclusive.  Only one can be populated.")
  public BigDecimal getMinimumSubtotal() {
    return minimumSubtotal;
  }

  public void setMinimumSubtotal(BigDecimal minimumSubtotal) {
    this.minimumSubtotal = minimumSubtotal;
  }

  public CouponAutoApplyCondition requiredItemId(String requiredItemId) {
    this.requiredItemId = requiredItemId;
    return this;
  }

   /**
   * The item that must be purchased to receive this coupon. Item and subtotal are exclusive.  Only one can be populated.
   * @return requiredItemId
  **/
  @ApiModelProperty(value = "The item that must be purchased to receive this coupon. Item and subtotal are exclusive.  Only one can be populated.")
  public String getRequiredItemId() {
    return requiredItemId;
  }

  public void setRequiredItemId(String requiredItemId) {
    this.requiredItemId = requiredItemId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponAutoApplyCondition couponAutoApplyCondition = (CouponAutoApplyCondition) o;
    return Objects.equals(this.couponCode, couponAutoApplyCondition.couponCode) &&
        Objects.equals(this.minimumSubtotal, couponAutoApplyCondition.minimumSubtotal) &&
        Objects.equals(this.requiredItemId, couponAutoApplyCondition.requiredItemId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(couponCode, minimumSubtotal, requiredItemId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponAutoApplyCondition {\n");
    
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    minimumSubtotal: ").append(toIndentedString(minimumSubtotal)).append("\n");
    sb.append("    requiredItemId: ").append(toIndentedString(requiredItemId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


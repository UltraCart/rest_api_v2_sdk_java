/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * CouponFreeItemAndShippingWithSubtotal
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-06-17T16:12:48.896-04:00")



public class CouponFreeItemAndShippingWithSubtotal {
  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("items")
  private List<String> items = null;

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("shipping_methods")
  private List<String> shippingMethods = null;

  @SerializedName("subtotal_amount")
  private BigDecimal subtotalAmount = null;

  public CouponFreeItemAndShippingWithSubtotal currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * The ISO-4217 three letter currency code the customer is viewing prices in
   * @return currencyCode
  **/
  @ApiModelProperty(value = "The ISO-4217 three letter currency code the customer is viewing prices in")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public CouponFreeItemAndShippingWithSubtotal items(List<String> items) {
    this.items = items;
    return this;
  }

  public CouponFreeItemAndShippingWithSubtotal addItemsItem(String itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<String>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * A list of items that are eligible for this discount_price.
   * @return items
  **/
  @ApiModelProperty(value = "A list of items that are eligible for this discount_price.")
  public List<String> getItems() {
    return items;
  }

  public void setItems(List<String> items) {
    this.items = items;
  }

  public CouponFreeItemAndShippingWithSubtotal limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The limit of free items that may be received when purchasing multiple items
   * @return limit
  **/
  @ApiModelProperty(value = "The limit of free items that may be received when purchasing multiple items")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public CouponFreeItemAndShippingWithSubtotal shippingMethods(List<String> shippingMethods) {
    this.shippingMethods = shippingMethods;
    return this;
  }

  public CouponFreeItemAndShippingWithSubtotal addShippingMethodsItem(String shippingMethodsItem) {
    if (this.shippingMethods == null) {
      this.shippingMethods = new ArrayList<String>();
    }
    this.shippingMethods.add(shippingMethodsItem);
    return this;
  }

   /**
   * One or more shipping methods that may be free
   * @return shippingMethods
  **/
  @ApiModelProperty(value = "One or more shipping methods that may be free")
  public List<String> getShippingMethods() {
    return shippingMethods;
  }

  public void setShippingMethods(List<String> shippingMethods) {
    this.shippingMethods = shippingMethods;
  }

  public CouponFreeItemAndShippingWithSubtotal subtotalAmount(BigDecimal subtotalAmount) {
    this.subtotalAmount = subtotalAmount;
    return this;
  }

   /**
   * The amount of subtotal required to receive the discount percent
   * @return subtotalAmount
  **/
  @ApiModelProperty(value = "The amount of subtotal required to receive the discount percent")
  public BigDecimal getSubtotalAmount() {
    return subtotalAmount;
  }

  public void setSubtotalAmount(BigDecimal subtotalAmount) {
    this.subtotalAmount = subtotalAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponFreeItemAndShippingWithSubtotal couponFreeItemAndShippingWithSubtotal = (CouponFreeItemAndShippingWithSubtotal) o;
    return Objects.equals(this.currencyCode, couponFreeItemAndShippingWithSubtotal.currencyCode) &&
        Objects.equals(this.items, couponFreeItemAndShippingWithSubtotal.items) &&
        Objects.equals(this.limit, couponFreeItemAndShippingWithSubtotal.limit) &&
        Objects.equals(this.shippingMethods, couponFreeItemAndShippingWithSubtotal.shippingMethods) &&
        Objects.equals(this.subtotalAmount, couponFreeItemAndShippingWithSubtotal.subtotalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, items, limit, shippingMethods, subtotalAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponFreeItemAndShippingWithSubtotal {\n");
    
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    shippingMethods: ").append(toIndentedString(shippingMethods)).append("\n");
    sb.append("    subtotalAmount: ").append(toIndentedString(subtotalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.CartPaymentAffirm;
import com.ultracart.admin.v2.models.CartPaymentAmazon;
import com.ultracart.admin.v2.models.CartPaymentCheck;
import com.ultracart.admin.v2.models.CartPaymentCreditCard;
import com.ultracart.admin.v2.models.CartPaymentPurchaseOrder;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-05T11:02:37.171-05:00[America/Indianapolis]")
public class CartPayment {
  public static final String SERIALIZED_NAME_AFFIRM = "affirm";
  @SerializedName(SERIALIZED_NAME_AFFIRM)
  private CartPaymentAffirm affirm;

  public static final String SERIALIZED_NAME_AMAZON = "amazon";
  @SerializedName(SERIALIZED_NAME_AMAZON)
  private CartPaymentAmazon amazon;

  public static final String SERIALIZED_NAME_CHECK = "check";
  @SerializedName(SERIALIZED_NAME_CHECK)
  private CartPaymentCheck check;

  public static final String SERIALIZED_NAME_CREDIT_CARD = "credit_card";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD)
  private CartPaymentCreditCard creditCard;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private CartPaymentPurchaseOrder purchaseOrder;

  public static final String SERIALIZED_NAME_RTG_CODE = "rtg_code";
  @SerializedName(SERIALIZED_NAME_RTG_CODE)
  private String rtgCode;

  public CartPayment() { 
  }

  public CartPayment affirm(CartPaymentAffirm affirm) {
    
    this.affirm = affirm;
    return this;
  }

   /**
   * Get affirm
   * @return affirm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPaymentAffirm getAffirm() {
    return affirm;
  }


  public void setAffirm(CartPaymentAffirm affirm) {
    this.affirm = affirm;
  }


  public CartPayment amazon(CartPaymentAmazon amazon) {
    
    this.amazon = amazon;
    return this;
  }

   /**
   * Get amazon
   * @return amazon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPaymentAmazon getAmazon() {
    return amazon;
  }


  public void setAmazon(CartPaymentAmazon amazon) {
    this.amazon = amazon;
  }


  public CartPayment check(CartPaymentCheck check) {
    
    this.check = check;
    return this;
  }

   /**
   * Get check
   * @return check
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPaymentCheck getCheck() {
    return check;
  }


  public void setCheck(CartPaymentCheck check) {
    this.check = check;
  }


  public CartPayment creditCard(CartPaymentCreditCard creditCard) {
    
    this.creditCard = creditCard;
    return this;
  }

   /**
   * Get creditCard
   * @return creditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPaymentCreditCard getCreditCard() {
    return creditCard;
  }


  public void setCreditCard(CartPaymentCreditCard creditCard) {
    this.creditCard = creditCard;
  }


  public CartPayment paymentMethod(String paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Payment method
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public CartPayment purchaseOrder(CartPaymentPurchaseOrder purchaseOrder) {
    
    this.purchaseOrder = purchaseOrder;
    return this;
  }

   /**
   * Get purchaseOrder
   * @return purchaseOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CartPaymentPurchaseOrder getPurchaseOrder() {
    return purchaseOrder;
  }


  public void setPurchaseOrder(CartPaymentPurchaseOrder purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public CartPayment rtgCode(String rtgCode) {
    
    this.rtgCode = rtgCode;
    return this;
  }

   /**
   * Rotating transaction gateway code
   * @return rtgCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rotating transaction gateway code")

  public String getRtgCode() {
    return rtgCode;
  }


  public void setRtgCode(String rtgCode) {
    this.rtgCode = rtgCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartPayment cartPayment = (CartPayment) o;
    return Objects.equals(this.affirm, cartPayment.affirm) &&
        Objects.equals(this.amazon, cartPayment.amazon) &&
        Objects.equals(this.check, cartPayment.check) &&
        Objects.equals(this.creditCard, cartPayment.creditCard) &&
        Objects.equals(this.paymentMethod, cartPayment.paymentMethod) &&
        Objects.equals(this.purchaseOrder, cartPayment.purchaseOrder) &&
        Objects.equals(this.rtgCode, cartPayment.rtgCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affirm, amazon, check, creditCard, paymentMethod, purchaseOrder, rtgCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartPayment {\n");
    sb.append("    affirm: ").append(toIndentedString(affirm)).append("\n");
    sb.append("    amazon: ").append(toIndentedString(amazon)).append("\n");
    sb.append("    check: ").append(toIndentedString(check)).append("\n");
    sb.append("    creditCard: ").append(toIndentedString(creditCard)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    rtgCode: ").append(toIndentedString(rtgCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affirm");
    openapiFields.add("amazon");
    openapiFields.add("check");
    openapiFields.add("credit_card");
    openapiFields.add("payment_method");
    openapiFields.add("purchase_order");
    openapiFields.add("rtg_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartPayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartPayment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartPayment is not found in the empty JSON string", CartPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartPayment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `affirm`
      if (jsonObj.getAsJsonObject("affirm") != null) {
        CartPaymentAffirm.validateJsonObject(jsonObj.getAsJsonObject("affirm"));
      }
      // validate the optional field `amazon`
      if (jsonObj.getAsJsonObject("amazon") != null) {
        CartPaymentAmazon.validateJsonObject(jsonObj.getAsJsonObject("amazon"));
      }
      // validate the optional field `check`
      if (jsonObj.getAsJsonObject("check") != null) {
        CartPaymentCheck.validateJsonObject(jsonObj.getAsJsonObject("check"));
      }
      // validate the optional field `credit_card`
      if (jsonObj.getAsJsonObject("credit_card") != null) {
        CartPaymentCreditCard.validateJsonObject(jsonObj.getAsJsonObject("credit_card"));
      }
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method").toString()));
      }
      // validate the optional field `purchase_order`
      if (jsonObj.getAsJsonObject("purchase_order") != null) {
        CartPaymentPurchaseOrder.validateJsonObject(jsonObj.getAsJsonObject("purchase_order"));
      }
      if (jsonObj.get("rtg_code") != null && !jsonObj.get("rtg_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rtg_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rtg_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<CartPayment>() {
           @Override
           public void write(JsonWriter out, CartPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartPayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartPayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartPayment
  * @throws IOException if the JSON string is invalid with respect to CartPayment
  */
  public static CartPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartPayment.class);
  }

 /**
  * Convert an instance of CartPayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


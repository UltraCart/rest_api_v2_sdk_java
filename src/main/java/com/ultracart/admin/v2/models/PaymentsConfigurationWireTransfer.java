/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.PaymentsConfigurationRestrictions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PaymentsConfigurationWireTransfer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-09-07T13:52:55.704-04:00")



public class PaymentsConfigurationWireTransfer {
  @SerializedName("accept_wire_transfer")
  private Boolean acceptWireTransfer = null;

  @SerializedName("account_number")
  private String accountNumber = null;

  @SerializedName("accounting_code")
  private String accountingCode = null;

  @SerializedName("bank_address")
  private String bankAddress = null;

  @SerializedName("deposit_to_account")
  private String depositToAccount = null;

  @SerializedName("intermediate_routing_number")
  private String intermediateRoutingNumber = null;

  @SerializedName("restrictions")
  private PaymentsConfigurationRestrictions restrictions = null;

  @SerializedName("routing_number")
  private String routingNumber = null;

  @SerializedName("surcharge_accounting_code")
  private String surchargeAccountingCode = null;

  @SerializedName("surcharge_fee")
  private BigDecimal surchargeFee = null;

  @SerializedName("surcharge_percentage")
  private BigDecimal surchargePercentage = null;

  public PaymentsConfigurationWireTransfer acceptWireTransfer(Boolean acceptWireTransfer) {
    this.acceptWireTransfer = acceptWireTransfer;
    return this;
  }

   /**
   * Master flag indicating this merchant accepts wire transfers
   * @return acceptWireTransfer
  **/
  @ApiModelProperty(value = "Master flag indicating this merchant accepts wire transfers")
  public Boolean isAcceptWireTransfer() {
    return acceptWireTransfer;
  }

  public void setAcceptWireTransfer(Boolean acceptWireTransfer) {
    this.acceptWireTransfer = acceptWireTransfer;
  }

  public PaymentsConfigurationWireTransfer accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * account_number
   * @return accountNumber
  **/
  @ApiModelProperty(value = "account_number")
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  public PaymentsConfigurationWireTransfer accountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * Optional Quickbooks accounting code
   * @return accountingCode
  **/
  @ApiModelProperty(value = "Optional Quickbooks accounting code")
  public String getAccountingCode() {
    return accountingCode;
  }

  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }

  public PaymentsConfigurationWireTransfer bankAddress(String bankAddress) {
    this.bankAddress = bankAddress;
    return this;
  }

   /**
   * Bank address
   * @return bankAddress
  **/
  @ApiModelProperty(value = "Bank address")
  public String getBankAddress() {
    return bankAddress;
  }

  public void setBankAddress(String bankAddress) {
    this.bankAddress = bankAddress;
  }

  public PaymentsConfigurationWireTransfer depositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
    return this;
  }

   /**
   * Optional Quickbooks deposit to account
   * @return depositToAccount
  **/
  @ApiModelProperty(value = "Optional Quickbooks deposit to account")
  public String getDepositToAccount() {
    return depositToAccount;
  }

  public void setDepositToAccount(String depositToAccount) {
    this.depositToAccount = depositToAccount;
  }

  public PaymentsConfigurationWireTransfer intermediateRoutingNumber(String intermediateRoutingNumber) {
    this.intermediateRoutingNumber = intermediateRoutingNumber;
    return this;
  }

   /**
   * Intermediate routing number
   * @return intermediateRoutingNumber
  **/
  @ApiModelProperty(value = "Intermediate routing number")
  public String getIntermediateRoutingNumber() {
    return intermediateRoutingNumber;
  }

  public void setIntermediateRoutingNumber(String intermediateRoutingNumber) {
    this.intermediateRoutingNumber = intermediateRoutingNumber;
  }

  public PaymentsConfigurationWireTransfer restrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @ApiModelProperty(value = "")
  public PaymentsConfigurationRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(PaymentsConfigurationRestrictions restrictions) {
    this.restrictions = restrictions;
  }

  public PaymentsConfigurationWireTransfer routingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Routing number
   * @return routingNumber
  **/
  @ApiModelProperty(value = "Routing number")
  public String getRoutingNumber() {
    return routingNumber;
  }

  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }

  public PaymentsConfigurationWireTransfer surchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
    return this;
  }

   /**
   * If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount
   * @return surchargeAccountingCode
  **/
  @ApiModelProperty(value = "If a surcharge is present and this merchant is integrated with Quickbooks, this is the accounting code for the surcharge amount")
  public String getSurchargeAccountingCode() {
    return surchargeAccountingCode;
  }

  public void setSurchargeAccountingCode(String surchargeAccountingCode) {
    this.surchargeAccountingCode = surchargeAccountingCode;
  }

  public PaymentsConfigurationWireTransfer surchargeFee(BigDecimal surchargeFee) {
    this.surchargeFee = surchargeFee;
    return this;
  }

   /**
   * surcharge_fee
   * @return surchargeFee
  **/
  @ApiModelProperty(value = "surcharge_fee")
  public BigDecimal getSurchargeFee() {
    return surchargeFee;
  }

  public void setSurchargeFee(BigDecimal surchargeFee) {
    this.surchargeFee = surchargeFee;
  }

  public PaymentsConfigurationWireTransfer surchargePercentage(BigDecimal surchargePercentage) {
    this.surchargePercentage = surchargePercentage;
    return this;
  }

   /**
   * surcharge_percentage
   * @return surchargePercentage
  **/
  @ApiModelProperty(value = "surcharge_percentage")
  public BigDecimal getSurchargePercentage() {
    return surchargePercentage;
  }

  public void setSurchargePercentage(BigDecimal surchargePercentage) {
    this.surchargePercentage = surchargePercentage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsConfigurationWireTransfer paymentsConfigurationWireTransfer = (PaymentsConfigurationWireTransfer) o;
    return Objects.equals(this.acceptWireTransfer, paymentsConfigurationWireTransfer.acceptWireTransfer) &&
        Objects.equals(this.accountNumber, paymentsConfigurationWireTransfer.accountNumber) &&
        Objects.equals(this.accountingCode, paymentsConfigurationWireTransfer.accountingCode) &&
        Objects.equals(this.bankAddress, paymentsConfigurationWireTransfer.bankAddress) &&
        Objects.equals(this.depositToAccount, paymentsConfigurationWireTransfer.depositToAccount) &&
        Objects.equals(this.intermediateRoutingNumber, paymentsConfigurationWireTransfer.intermediateRoutingNumber) &&
        Objects.equals(this.restrictions, paymentsConfigurationWireTransfer.restrictions) &&
        Objects.equals(this.routingNumber, paymentsConfigurationWireTransfer.routingNumber) &&
        Objects.equals(this.surchargeAccountingCode, paymentsConfigurationWireTransfer.surchargeAccountingCode) &&
        Objects.equals(this.surchargeFee, paymentsConfigurationWireTransfer.surchargeFee) &&
        Objects.equals(this.surchargePercentage, paymentsConfigurationWireTransfer.surchargePercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptWireTransfer, accountNumber, accountingCode, bankAddress, depositToAccount, intermediateRoutingNumber, restrictions, routingNumber, surchargeAccountingCode, surchargeFee, surchargePercentage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsConfigurationWireTransfer {\n");
    
    sb.append("    acceptWireTransfer: ").append(toIndentedString(acceptWireTransfer)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    bankAddress: ").append(toIndentedString(bankAddress)).append("\n");
    sb.append("    depositToAccount: ").append(toIndentedString(depositToAccount)).append("\n");
    sb.append("    intermediateRoutingNumber: ").append(toIndentedString(intermediateRoutingNumber)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    surchargeAccountingCode: ").append(toIndentedString(surchargeAccountingCode)).append("\n");
    sb.append("    surchargeFee: ").append(toIndentedString(surchargeFee)).append("\n");
    sb.append("    surchargePercentage: ").append(toIndentedString(surchargePercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TransactionEmailOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-21T17:03:04.149-05:00[America/Indianapolis]")
public class TransactionEmailOption {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MERCHANT_EMAIL_DELIVERY_OPTION_OID = "merchantEmailDeliveryOptionOid";
  @SerializedName(SERIALIZED_NAME_MERCHANT_EMAIL_DELIVERY_OPTION_OID)
  private Integer merchantEmailDeliveryOptionOid;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SELECTED = "selected";
  @SerializedName(SERIALIZED_NAME_SELECTED)
  private Boolean selected;

  public static final String SERIALIZED_NAME_STORE_FRONT_OID = "storeFrontOid";
  @SerializedName(SERIALIZED_NAME_STORE_FRONT_OID)
  private Integer storeFrontOid;

  public static final String SERIALIZED_NAME_TEMPLATE_DISPLAY = "templateDisplay";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DISPLAY)
  private String templateDisplay;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "templateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private String templateType;

  public TransactionEmailOption() { 
  }

  public TransactionEmailOption description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TransactionEmailOption merchantEmailDeliveryOptionOid(Integer merchantEmailDeliveryOptionOid) {
    
    this.merchantEmailDeliveryOptionOid = merchantEmailDeliveryOptionOid;
    return this;
  }

   /**
   * Get merchantEmailDeliveryOptionOid
   * @return merchantEmailDeliveryOptionOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMerchantEmailDeliveryOptionOid() {
    return merchantEmailDeliveryOptionOid;
  }


  public void setMerchantEmailDeliveryOptionOid(Integer merchantEmailDeliveryOptionOid) {
    this.merchantEmailDeliveryOptionOid = merchantEmailDeliveryOptionOid;
  }


  public TransactionEmailOption merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public TransactionEmailOption name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TransactionEmailOption selected(Boolean selected) {
    
    this.selected = selected;
    return this;
  }

   /**
   * Get selected
   * @return selected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSelected() {
    return selected;
  }


  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  public TransactionEmailOption storeFrontOid(Integer storeFrontOid) {
    
    this.storeFrontOid = storeFrontOid;
    return this;
  }

   /**
   * Get storeFrontOid
   * @return storeFrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getStoreFrontOid() {
    return storeFrontOid;
  }


  public void setStoreFrontOid(Integer storeFrontOid) {
    this.storeFrontOid = storeFrontOid;
  }


  public TransactionEmailOption templateDisplay(String templateDisplay) {
    
    this.templateDisplay = templateDisplay;
    return this;
  }

   /**
   * Get templateDisplay
   * @return templateDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplateDisplay() {
    return templateDisplay;
  }


  public void setTemplateDisplay(String templateDisplay) {
    this.templateDisplay = templateDisplay;
  }


  public TransactionEmailOption templateType(String templateType) {
    
    this.templateType = templateType;
    return this;
  }

   /**
   * Get templateType
   * @return templateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTemplateType() {
    return templateType;
  }


  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionEmailOption transactionEmailOption = (TransactionEmailOption) o;
    return Objects.equals(this.description, transactionEmailOption.description) &&
        Objects.equals(this.merchantEmailDeliveryOptionOid, transactionEmailOption.merchantEmailDeliveryOptionOid) &&
        Objects.equals(this.merchantId, transactionEmailOption.merchantId) &&
        Objects.equals(this.name, transactionEmailOption.name) &&
        Objects.equals(this.selected, transactionEmailOption.selected) &&
        Objects.equals(this.storeFrontOid, transactionEmailOption.storeFrontOid) &&
        Objects.equals(this.templateDisplay, transactionEmailOption.templateDisplay) &&
        Objects.equals(this.templateType, transactionEmailOption.templateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, merchantEmailDeliveryOptionOid, merchantId, name, selected, storeFrontOid, templateDisplay, templateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionEmailOption {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    merchantEmailDeliveryOptionOid: ").append(toIndentedString(merchantEmailDeliveryOptionOid)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("    storeFrontOid: ").append(toIndentedString(storeFrontOid)).append("\n");
    sb.append("    templateDisplay: ").append(toIndentedString(templateDisplay)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("merchantEmailDeliveryOptionOid");
    openapiFields.add("merchantId");
    openapiFields.add("name");
    openapiFields.add("selected");
    openapiFields.add("storeFrontOid");
    openapiFields.add("templateDisplay");
    openapiFields.add("templateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionEmailOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TransactionEmailOption.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionEmailOption is not found in the empty JSON string", TransactionEmailOption.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactionEmailOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionEmailOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("merchantId") != null && !jsonObj.get("merchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantId").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("templateDisplay") != null && !jsonObj.get("templateDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateDisplay").toString()));
      }
      if (jsonObj.get("templateType") != null && !jsonObj.get("templateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionEmailOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionEmailOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionEmailOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionEmailOption.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionEmailOption>() {
           @Override
           public void write(JsonWriter out, TransactionEmailOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionEmailOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionEmailOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionEmailOption
  * @throws IOException if the JSON string is invalid with respect to TransactionEmailOption
  */
  public static TransactionEmailOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionEmailOption.class);
  }

 /**
  * Convert an instance of TransactionEmailOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


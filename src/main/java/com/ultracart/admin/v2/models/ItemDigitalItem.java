/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemDigitalItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-11T09:49:01.664-04:00[America/Indianapolis]")
public class ItemDigitalItem {
  public static final String SERIALIZED_NAME_CREATION_DTS = "creation_dts";
  @SerializedName(SERIALIZED_NAME_CREATION_DTS)
  private String creationDts;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Long fileSize;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_ORIGINAL_FILENAME = "original_filename";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILENAME)
  private String originalFilename;

  public ItemDigitalItem() { 
  }

  public ItemDigitalItem creationDts(String creationDts) {
    
    this.creationDts = creationDts;
    return this;
  }

   /**
   * File creation date
   * @return creationDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File creation date")

  public String getCreationDts() {
    return creationDts;
  }


  public void setCreationDts(String creationDts) {
    this.creationDts = creationDts;
  }


  public ItemDigitalItem description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the digital item
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the digital item")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ItemDigitalItem fileSize(Long fileSize) {
    
    this.fileSize = fileSize;
    return this;
  }

   /**
   * File size
   * @return fileSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File size")

  public Long getFileSize() {
    return fileSize;
  }


  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }


  public ItemDigitalItem mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Mime type associated with the file
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mime type associated with the file")

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public ItemDigitalItem originalFilename(String originalFilename) {
    
    this.originalFilename = originalFilename;
    return this;
  }

   /**
   * Original filename
   * @return originalFilename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Original filename")

  public String getOriginalFilename() {
    return originalFilename;
  }


  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemDigitalItem itemDigitalItem = (ItemDigitalItem) o;
    return Objects.equals(this.creationDts, itemDigitalItem.creationDts) &&
        Objects.equals(this.description, itemDigitalItem.description) &&
        Objects.equals(this.fileSize, itemDigitalItem.fileSize) &&
        Objects.equals(this.mimeType, itemDigitalItem.mimeType) &&
        Objects.equals(this.originalFilename, itemDigitalItem.originalFilename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDts, description, fileSize, mimeType, originalFilename);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemDigitalItem {\n");
    sb.append("    creationDts: ").append(toIndentedString(creationDts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_dts");
    openapiFields.add("description");
    openapiFields.add("file_size");
    openapiFields.add("mime_type");
    openapiFields.add("original_filename");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemDigitalItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemDigitalItem.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemDigitalItem is not found in the empty JSON string", ItemDigitalItem.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemDigitalItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemDigitalItem` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("creation_dts") != null && !jsonObj.get("creation_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_dts").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if (jsonObj.get("original_filename") != null && !jsonObj.get("original_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_filename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemDigitalItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemDigitalItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemDigitalItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemDigitalItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemDigitalItem>() {
           @Override
           public void write(JsonWriter out, ItemDigitalItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemDigitalItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemDigitalItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemDigitalItem
  * @throws IOException if the JSON string is invalid with respect to ItemDigitalItem
  */
  public static ItemDigitalItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemDigitalItem.class);
  }

 /**
  * Convert an instance of ItemDigitalItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


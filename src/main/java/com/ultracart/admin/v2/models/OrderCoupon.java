/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * OrderCoupon
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-21T17:03:04.149-05:00[America/Indianapolis]")
public class OrderCoupon {
  public static final String SERIALIZED_NAME_ACCOUNTING_CODE = "accounting_code";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_CODE)
  private String accountingCode;

  public static final String SERIALIZED_NAME_AUTOMATICALLY_APPLIED = "automatically_applied";
  @SerializedName(SERIALIZED_NAME_AUTOMATICALLY_APPLIED)
  private Boolean automaticallyApplied;

  public static final String SERIALIZED_NAME_BASE_COUPON_CODE = "base_coupon_code";
  @SerializedName(SERIALIZED_NAME_BASE_COUPON_CODE)
  private String baseCouponCode;

  public static final String SERIALIZED_NAME_COUPON_CODE = "coupon_code";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE)
  private String couponCode;

  public static final String SERIALIZED_NAME_HDIE_FROM_CUSTOMER = "hdie_from_customer";
  @SerializedName(SERIALIZED_NAME_HDIE_FROM_CUSTOMER)
  private Boolean hdieFromCustomer;

  public OrderCoupon() { 
  }

  public OrderCoupon accountingCode(String accountingCode) {
    
    this.accountingCode = accountingCode;
    return this;
  }

   /**
   * QuickBooks accounting code for this coupon
   * @return accountingCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "QuickBooks accounting code for this coupon")

  public String getAccountingCode() {
    return accountingCode;
  }


  public void setAccountingCode(String accountingCode) {
    this.accountingCode = accountingCode;
  }


  public OrderCoupon automaticallyApplied(Boolean automaticallyApplied) {
    
    this.automaticallyApplied = automaticallyApplied;
    return this;
  }

   /**
   * Whether or not the coupon was automatically applied to the order
   * @return automaticallyApplied
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the coupon was automatically applied to the order")

  public Boolean getAutomaticallyApplied() {
    return automaticallyApplied;
  }


  public void setAutomaticallyApplied(Boolean automaticallyApplied) {
    this.automaticallyApplied = automaticallyApplied;
  }


  public OrderCoupon baseCouponCode(String baseCouponCode) {
    
    this.baseCouponCode = baseCouponCode;
    return this;
  }

   /**
   * Coupon code configured by the merchant.  Will differ if the customer used a one time coupon code generated off this base coupon
   * @return baseCouponCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupon code configured by the merchant.  Will differ if the customer used a one time coupon code generated off this base coupon")

  public String getBaseCouponCode() {
    return baseCouponCode;
  }


  public void setBaseCouponCode(String baseCouponCode) {
    this.baseCouponCode = baseCouponCode;
  }


  public OrderCoupon couponCode(String couponCode) {
    
    this.couponCode = couponCode;
    return this;
  }

   /**
   * Coupon code entered by the customer
   * @return couponCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Coupon code entered by the customer")

  public String getCouponCode() {
    return couponCode;
  }


  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public OrderCoupon hdieFromCustomer(Boolean hdieFromCustomer) {
    
    this.hdieFromCustomer = hdieFromCustomer;
    return this;
  }

   /**
   * True if this coupon is hidde from the customer
   * @return hdieFromCustomer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this coupon is hidde from the customer")

  public Boolean getHdieFromCustomer() {
    return hdieFromCustomer;
  }


  public void setHdieFromCustomer(Boolean hdieFromCustomer) {
    this.hdieFromCustomer = hdieFromCustomer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderCoupon orderCoupon = (OrderCoupon) o;
    return Objects.equals(this.accountingCode, orderCoupon.accountingCode) &&
        Objects.equals(this.automaticallyApplied, orderCoupon.automaticallyApplied) &&
        Objects.equals(this.baseCouponCode, orderCoupon.baseCouponCode) &&
        Objects.equals(this.couponCode, orderCoupon.couponCode) &&
        Objects.equals(this.hdieFromCustomer, orderCoupon.hdieFromCustomer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingCode, automaticallyApplied, baseCouponCode, couponCode, hdieFromCustomer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderCoupon {\n");
    sb.append("    accountingCode: ").append(toIndentedString(accountingCode)).append("\n");
    sb.append("    automaticallyApplied: ").append(toIndentedString(automaticallyApplied)).append("\n");
    sb.append("    baseCouponCode: ").append(toIndentedString(baseCouponCode)).append("\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    hdieFromCustomer: ").append(toIndentedString(hdieFromCustomer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounting_code");
    openapiFields.add("automatically_applied");
    openapiFields.add("base_coupon_code");
    openapiFields.add("coupon_code");
    openapiFields.add("hdie_from_customer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderCoupon
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderCoupon.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderCoupon is not found in the empty JSON string", OrderCoupon.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderCoupon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderCoupon` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("accounting_code") != null && !jsonObj.get("accounting_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accounting_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accounting_code").toString()));
      }
      if (jsonObj.get("base_coupon_code") != null && !jsonObj.get("base_coupon_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_coupon_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_coupon_code").toString()));
      }
      if (jsonObj.get("coupon_code") != null && !jsonObj.get("coupon_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderCoupon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderCoupon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderCoupon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderCoupon.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderCoupon>() {
           @Override
           public void write(JsonWriter out, OrderCoupon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderCoupon read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderCoupon given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderCoupon
  * @throws IOException if the JSON string is invalid with respect to OrderCoupon
  */
  public static OrderCoupon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderCoupon.class);
  }

 /**
  * Convert an instance of OrderCoupon to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


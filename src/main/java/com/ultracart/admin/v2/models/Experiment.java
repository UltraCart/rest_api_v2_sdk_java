/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ExperimentVariation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Experiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T12:05:11.750-05:00[America/Indianapolis]")
public class Experiment {
  public static final String SERIALIZED_NAME_CONTAINER_ID = "container_id";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ID)
  private String containerId;

  public static final String SERIALIZED_NAME_DURATION_DAYS = "duration_days";
  @SerializedName(SERIALIZED_NAME_DURATION_DAYS)
  private Integer durationDays;

  public static final String SERIALIZED_NAME_END_DTS = "end_dts";
  @SerializedName(SERIALIZED_NAME_END_DTS)
  private String endDts;

  public static final String SERIALIZED_NAME_EQUAL_WEIGHTING = "equal_weighting";
  @SerializedName(SERIALIZED_NAME_EQUAL_WEIGHTING)
  private Boolean equalWeighting;

  public static final String SERIALIZED_NAME_EXPERIMENT_TYPE = "experiment_type";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_TYPE)
  private String experimentType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE)
  private String objective;

  public static final String SERIALIZED_NAME_OBJECTIVE_PARAMETER = "objective_parameter";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE_PARAMETER)
  private String objectiveParameter;

  public static final String SERIALIZED_NAME_OPTIMIZATION_TYPE = "optimization_type";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_TYPE)
  private String optimizationType;

  public static final String SERIALIZED_NAME_SESSION_COUNT = "session_count";
  @SerializedName(SERIALIZED_NAME_SESSION_COUNT)
  private Integer sessionCount;

  public static final String SERIALIZED_NAME_START_DTS = "start_dts";
  @SerializedName(SERIALIZED_NAME_START_DTS)
  private String startDts;

  /**
   * Status of the experiment
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("Running"),
    
    ENDED("Ended"),
    
    DELETED("Deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STOREFRONT_EXPERIMENT_OID = "storefront_experiment_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_EXPERIMENT_OID)
  private Integer storefrontExperimentOid;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<ExperimentVariation> variations = null;

  public Experiment() { 
  }

  public Experiment containerId(String containerId) {
    
    this.containerId = containerId;
    return this;
  }

   /**
   * Contained ID where the experiment element was located
   * @return containerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Contained ID where the experiment element was located")

  public String getContainerId() {
    return containerId;
  }


  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }


  public Experiment durationDays(Integer durationDays) {
    
    this.durationDays = durationDays;
    return this;
  }

   /**
   * Duration in days
   * @return durationDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Duration in days")

  public Integer getDurationDays() {
    return durationDays;
  }


  public void setDurationDays(Integer durationDays) {
    this.durationDays = durationDays;
  }


  public Experiment endDts(String endDts) {
    
    this.endDts = endDts;
    return this;
  }

   /**
   * End date/time
   * @return endDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "End date/time")

  public String getEndDts() {
    return endDts;
  }


  public void setEndDts(String endDts) {
    this.endDts = endDts;
  }


  public Experiment equalWeighting(Boolean equalWeighting) {
    
    this.equalWeighting = equalWeighting;
    return this;
  }

   /**
   * Whether or not traffic is equally weighted or shifts over time during the experiment
   * @return equalWeighting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not traffic is equally weighted or shifts over time during the experiment")

  public Boolean getEqualWeighting() {
    return equalWeighting;
  }


  public void setEqualWeighting(Boolean equalWeighting) {
    this.equalWeighting = equalWeighting;
  }


  public Experiment experimentType(String experimentType) {
    
    this.experimentType = experimentType;
    return this;
  }

   /**
   * The type of experiment
   * @return experimentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of experiment")

  public String getExperimentType() {
    return experimentType;
  }


  public void setExperimentType(String experimentType) {
    this.experimentType = experimentType;
  }


  public Experiment id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Experiment id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Experiment id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Experiment name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Experiment name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Experiment name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Experiment notes(String notes) {
    
    this.notes = notes;
    return this;
  }

   /**
   * Notes about the experiment
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Notes about the experiment")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Experiment objective(String objective) {
    
    this.objective = objective;
    return this;
  }

   /**
   * Objective that is being optimized
   * @return objective
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Objective that is being optimized")

  public String getObjective() {
    return objective;
  }


  public void setObjective(String objective) {
    this.objective = objective;
  }


  public Experiment objectiveParameter(String objectiveParameter) {
    
    this.objectiveParameter = objectiveParameter;
    return this;
  }

   /**
   * Objective parameter (such as event name) that is being optimized
   * @return objectiveParameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Objective parameter (such as event name) that is being optimized")

  public String getObjectiveParameter() {
    return objectiveParameter;
  }


  public void setObjectiveParameter(String objectiveParameter) {
    this.objectiveParameter = objectiveParameter;
  }


  public Experiment optimizationType(String optimizationType) {
    
    this.optimizationType = optimizationType;
    return this;
  }

   /**
   * Type of optimization
   * @return optimizationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of optimization")

  public String getOptimizationType() {
    return optimizationType;
  }


  public void setOptimizationType(String optimizationType) {
    this.optimizationType = optimizationType;
  }


  public Experiment sessionCount(Integer sessionCount) {
    
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Total number of sessions in the experiment
   * @return sessionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of sessions in the experiment")

  public Integer getSessionCount() {
    return sessionCount;
  }


  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }


  public Experiment startDts(String startDts) {
    
    this.startDts = startDts;
    return this;
  }

   /**
   * Start date/time
   * @return startDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start date/time")

  public String getStartDts() {
    return startDts;
  }


  public void setStartDts(String startDts) {
    this.startDts = startDts;
  }


  public Experiment status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the experiment
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the experiment")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Experiment storefrontExperimentOid(Integer storefrontExperimentOid) {
    
    this.storefrontExperimentOid = storefrontExperimentOid;
    return this;
  }

   /**
   * Storefront Experiment Oid
   * @return storefrontExperimentOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storefront Experiment Oid")

  public Integer getStorefrontExperimentOid() {
    return storefrontExperimentOid;
  }


  public void setStorefrontExperimentOid(Integer storefrontExperimentOid) {
    this.storefrontExperimentOid = storefrontExperimentOid;
  }


  public Experiment storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Storefront oid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storefront oid")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public Experiment uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * URI the experiment was started on
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URI the experiment was started on")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    this.uri = uri;
  }


  public Experiment variations(List<ExperimentVariation> variations) {
    
    this.variations = variations;
    return this;
  }

  public Experiment addVariationsItem(ExperimentVariation variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Variations being tested in the experiment
   * @return variations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Variations being tested in the experiment")

  public List<ExperimentVariation> getVariations() {
    return variations;
  }


  public void setVariations(List<ExperimentVariation> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Experiment experiment = (Experiment) o;
    return Objects.equals(this.containerId, experiment.containerId) &&
        Objects.equals(this.durationDays, experiment.durationDays) &&
        Objects.equals(this.endDts, experiment.endDts) &&
        Objects.equals(this.equalWeighting, experiment.equalWeighting) &&
        Objects.equals(this.experimentType, experiment.experimentType) &&
        Objects.equals(this.id, experiment.id) &&
        Objects.equals(this.name, experiment.name) &&
        Objects.equals(this.notes, experiment.notes) &&
        Objects.equals(this.objective, experiment.objective) &&
        Objects.equals(this.objectiveParameter, experiment.objectiveParameter) &&
        Objects.equals(this.optimizationType, experiment.optimizationType) &&
        Objects.equals(this.sessionCount, experiment.sessionCount) &&
        Objects.equals(this.startDts, experiment.startDts) &&
        Objects.equals(this.status, experiment.status) &&
        Objects.equals(this.storefrontExperimentOid, experiment.storefrontExperimentOid) &&
        Objects.equals(this.storefrontOid, experiment.storefrontOid) &&
        Objects.equals(this.uri, experiment.uri) &&
        Objects.equals(this.variations, experiment.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerId, durationDays, endDts, equalWeighting, experimentType, id, name, notes, objective, objectiveParameter, optimizationType, sessionCount, startDts, status, storefrontExperimentOid, storefrontOid, uri, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Experiment {\n");
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    durationDays: ").append(toIndentedString(durationDays)).append("\n");
    sb.append("    endDts: ").append(toIndentedString(endDts)).append("\n");
    sb.append("    equalWeighting: ").append(toIndentedString(equalWeighting)).append("\n");
    sb.append("    experimentType: ").append(toIndentedString(experimentType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    objectiveParameter: ").append(toIndentedString(objectiveParameter)).append("\n");
    sb.append("    optimizationType: ").append(toIndentedString(optimizationType)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    startDts: ").append(toIndentedString(startDts)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storefrontExperimentOid: ").append(toIndentedString(storefrontExperimentOid)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container_id");
    openapiFields.add("duration_days");
    openapiFields.add("end_dts");
    openapiFields.add("equal_weighting");
    openapiFields.add("experiment_type");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("objective");
    openapiFields.add("objective_parameter");
    openapiFields.add("optimization_type");
    openapiFields.add("session_count");
    openapiFields.add("start_dts");
    openapiFields.add("status");
    openapiFields.add("storefront_experiment_oid");
    openapiFields.add("storefront_oid");
    openapiFields.add("uri");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Experiment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Experiment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Experiment is not found in the empty JSON string", Experiment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Experiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Experiment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("container_id") != null && !jsonObj.get("container_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_id").toString()));
      }
      if (jsonObj.get("end_dts") != null && !jsonObj.get("end_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_dts").toString()));
      }
      if (jsonObj.get("experiment_type") != null && !jsonObj.get("experiment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experiment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experiment_type").toString()));
      }
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("objective") != null && !jsonObj.get("objective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objective").toString()));
      }
      if (jsonObj.get("objective_parameter") != null && !jsonObj.get("objective_parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objective_parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objective_parameter").toString()));
      }
      if (jsonObj.get("optimization_type") != null && !jsonObj.get("optimization_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optimization_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optimization_type").toString()));
      }
      if (jsonObj.get("start_dts") != null && !jsonObj.get("start_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_dts").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
      if (jsonArrayvariations != null) {
        // ensure the json data is an array
        if (!jsonObj.get("variations").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
        }

        // validate the optional field `variations` (array)
        for (int i = 0; i < jsonArrayvariations.size(); i++) {
          ExperimentVariation.validateJsonObject(jsonArrayvariations.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Experiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Experiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Experiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Experiment.class));

       return (TypeAdapter<T>) new TypeAdapter<Experiment>() {
           @Override
           public void write(JsonWriter out, Experiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Experiment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Experiment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Experiment
  * @throws IOException if the JSON string is invalid with respect to Experiment
  */
  public static Experiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Experiment.class);
  }

 /**
  * Convert an instance of Experiment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


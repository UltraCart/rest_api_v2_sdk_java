/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ExperimentVariation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Experiment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-20T15:10:12.127-04:00")



public class Experiment {
  @SerializedName("container_id")
  private String containerId = null;

  @SerializedName("duration_days")
  private Integer durationDays = null;

  @SerializedName("end_dts")
  private String endDts = null;

  @SerializedName("equal_weighting")
  private Boolean equalWeighting = null;

  @SerializedName("experiment_type")
  private String experimentType = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("notes")
  private String notes = null;

  @SerializedName("objective")
  private String objective = null;

  @SerializedName("objective_parameter")
  private String objectiveParameter = null;

  @SerializedName("optimization_type")
  private String optimizationType = null;

  @SerializedName("session_count")
  private Integer sessionCount = null;

  @SerializedName("start_dts")
  private String startDts = null;

  /**
   * Status of the experiment
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("Running"),
    
    ENDED("Ended"),
    
    DELETED("Deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("storefront_experiment_oid")
  private Integer storefrontExperimentOid = null;

  @SerializedName("storefront_oid")
  private Integer storefrontOid = null;

  @SerializedName("uri")
  private String uri = null;

  @SerializedName("variations")
  private List<ExperimentVariation> variations = null;

  public Experiment containerId(String containerId) {
    this.containerId = containerId;
    return this;
  }

   /**
   * Contained ID where the experiment element was located
   * @return containerId
  **/
  @ApiModelProperty(value = "Contained ID where the experiment element was located")
  public String getContainerId() {
    return containerId;
  }

  public void setContainerId(String containerId) {
    this.containerId = containerId;
  }

  public Experiment durationDays(Integer durationDays) {
    this.durationDays = durationDays;
    return this;
  }

   /**
   * Duration in days
   * @return durationDays
  **/
  @ApiModelProperty(value = "Duration in days")
  public Integer getDurationDays() {
    return durationDays;
  }

  public void setDurationDays(Integer durationDays) {
    this.durationDays = durationDays;
  }

  public Experiment endDts(String endDts) {
    this.endDts = endDts;
    return this;
  }

   /**
   * End date/time
   * @return endDts
  **/
  @ApiModelProperty(value = "End date/time")
  public String getEndDts() {
    return endDts;
  }

  public void setEndDts(String endDts) {
    this.endDts = endDts;
  }

  public Experiment equalWeighting(Boolean equalWeighting) {
    this.equalWeighting = equalWeighting;
    return this;
  }

   /**
   * Whether or not traffic is equally weighted or shifts over time during the experiment
   * @return equalWeighting
  **/
  @ApiModelProperty(value = "Whether or not traffic is equally weighted or shifts over time during the experiment")
  public Boolean isEqualWeighting() {
    return equalWeighting;
  }

  public void setEqualWeighting(Boolean equalWeighting) {
    this.equalWeighting = equalWeighting;
  }

  public Experiment experimentType(String experimentType) {
    this.experimentType = experimentType;
    return this;
  }

   /**
   * The type of experiment
   * @return experimentType
  **/
  @ApiModelProperty(value = "The type of experiment")
  public String getExperimentType() {
    return experimentType;
  }

  public void setExperimentType(String experimentType) {
    this.experimentType = experimentType;
  }

  public Experiment id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Experiment id
   * @return id
  **/
  @ApiModelProperty(value = "Experiment id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Experiment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Experiment name
   * @return name
  **/
  @ApiModelProperty(value = "Experiment name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Experiment notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes about the experiment
   * @return notes
  **/
  @ApiModelProperty(value = "Notes about the experiment")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Experiment objective(String objective) {
    this.objective = objective;
    return this;
  }

   /**
   * Objective that is being optimized
   * @return objective
  **/
  @ApiModelProperty(value = "Objective that is being optimized")
  public String getObjective() {
    return objective;
  }

  public void setObjective(String objective) {
    this.objective = objective;
  }

  public Experiment objectiveParameter(String objectiveParameter) {
    this.objectiveParameter = objectiveParameter;
    return this;
  }

   /**
   * Objective parameter (such as event name) that is being optimized
   * @return objectiveParameter
  **/
  @ApiModelProperty(value = "Objective parameter (such as event name) that is being optimized")
  public String getObjectiveParameter() {
    return objectiveParameter;
  }

  public void setObjectiveParameter(String objectiveParameter) {
    this.objectiveParameter = objectiveParameter;
  }

  public Experiment optimizationType(String optimizationType) {
    this.optimizationType = optimizationType;
    return this;
  }

   /**
   * Type of optimization
   * @return optimizationType
  **/
  @ApiModelProperty(value = "Type of optimization")
  public String getOptimizationType() {
    return optimizationType;
  }

  public void setOptimizationType(String optimizationType) {
    this.optimizationType = optimizationType;
  }

  public Experiment sessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Total number of sessions in the experiment
   * @return sessionCount
  **/
  @ApiModelProperty(value = "Total number of sessions in the experiment")
  public Integer getSessionCount() {
    return sessionCount;
  }

  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }

  public Experiment startDts(String startDts) {
    this.startDts = startDts;
    return this;
  }

   /**
   * Start date/time
   * @return startDts
  **/
  @ApiModelProperty(value = "Start date/time")
  public String getStartDts() {
    return startDts;
  }

  public void setStartDts(String startDts) {
    this.startDts = startDts;
  }

  public Experiment status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the experiment
   * @return status
  **/
  @ApiModelProperty(value = "Status of the experiment")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Experiment storefrontExperimentOid(Integer storefrontExperimentOid) {
    this.storefrontExperimentOid = storefrontExperimentOid;
    return this;
  }

   /**
   * Storefront Experiment Oid
   * @return storefrontExperimentOid
  **/
  @ApiModelProperty(value = "Storefront Experiment Oid")
  public Integer getStorefrontExperimentOid() {
    return storefrontExperimentOid;
  }

  public void setStorefrontExperimentOid(Integer storefrontExperimentOid) {
    this.storefrontExperimentOid = storefrontExperimentOid;
  }

  public Experiment storefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Storefront oid
   * @return storefrontOid
  **/
  @ApiModelProperty(value = "Storefront oid")
  public Integer getStorefrontOid() {
    return storefrontOid;
  }

  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }

  public Experiment uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI the experiment was started on
   * @return uri
  **/
  @ApiModelProperty(value = "URI the experiment was started on")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public Experiment variations(List<ExperimentVariation> variations) {
    this.variations = variations;
    return this;
  }

  public Experiment addVariationsItem(ExperimentVariation variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<ExperimentVariation>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * Variations being tested in the experiment
   * @return variations
  **/
  @ApiModelProperty(value = "Variations being tested in the experiment")
  public List<ExperimentVariation> getVariations() {
    return variations;
  }

  public void setVariations(List<ExperimentVariation> variations) {
    this.variations = variations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Experiment experiment = (Experiment) o;
    return Objects.equals(this.containerId, experiment.containerId) &&
        Objects.equals(this.durationDays, experiment.durationDays) &&
        Objects.equals(this.endDts, experiment.endDts) &&
        Objects.equals(this.equalWeighting, experiment.equalWeighting) &&
        Objects.equals(this.experimentType, experiment.experimentType) &&
        Objects.equals(this.id, experiment.id) &&
        Objects.equals(this.name, experiment.name) &&
        Objects.equals(this.notes, experiment.notes) &&
        Objects.equals(this.objective, experiment.objective) &&
        Objects.equals(this.objectiveParameter, experiment.objectiveParameter) &&
        Objects.equals(this.optimizationType, experiment.optimizationType) &&
        Objects.equals(this.sessionCount, experiment.sessionCount) &&
        Objects.equals(this.startDts, experiment.startDts) &&
        Objects.equals(this.status, experiment.status) &&
        Objects.equals(this.storefrontExperimentOid, experiment.storefrontExperimentOid) &&
        Objects.equals(this.storefrontOid, experiment.storefrontOid) &&
        Objects.equals(this.uri, experiment.uri) &&
        Objects.equals(this.variations, experiment.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerId, durationDays, endDts, equalWeighting, experimentType, id, name, notes, objective, objectiveParameter, optimizationType, sessionCount, startDts, status, storefrontExperimentOid, storefrontOid, uri, variations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Experiment {\n");
    
    sb.append("    containerId: ").append(toIndentedString(containerId)).append("\n");
    sb.append("    durationDays: ").append(toIndentedString(durationDays)).append("\n");
    sb.append("    endDts: ").append(toIndentedString(endDts)).append("\n");
    sb.append("    equalWeighting: ").append(toIndentedString(equalWeighting)).append("\n");
    sb.append("    experimentType: ").append(toIndentedString(experimentType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    objectiveParameter: ").append(toIndentedString(objectiveParameter)).append("\n");
    sb.append("    optimizationType: ").append(toIndentedString(optimizationType)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    startDts: ").append(toIndentedString(startDts)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storefrontExperimentOid: ").append(toIndentedString(storefrontExperimentOid)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ScreenRecordingSegment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-09T16:30:26.529-05:00[America/Indianapolis]")
public class ScreenRecordingSegment {
  public static final String SERIALIZED_NAME_CREATE_DTS = "create_dts";
  @SerializedName(SERIALIZED_NAME_CREATE_DTS)
  private String createDts;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private ScreenRecordingFilter filter;

  public static final String SERIALIZED_NAME_HISTOGRAM_DATA = "histogram_data";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_DATA)
  private List<Integer> histogramData = null;

  public static final String SERIALIZED_NAME_HISTOGRAM_INTERVAL = "histogram_interval";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_INTERVAL)
  private String histogramInterval;

  public static final String SERIALIZED_NAME_HISTOGRAM_START_DTS = "histogram_start_dts";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_START_DTS)
  private String histogramStartDts;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCREEN_RECORDING_SEGMENT_OID = "screen_recording_segment_oid";
  @SerializedName(SERIALIZED_NAME_SCREEN_RECORDING_SEGMENT_OID)
  private Integer screenRecordingSegmentOid;

  public static final String SERIALIZED_NAME_SESSION_COUNT = "session_count";
  @SerializedName(SERIALIZED_NAME_SESSION_COUNT)
  private Integer sessionCount;

  public static final String SERIALIZED_NAME_SESSION_COUNT_LAST_UPDATE_DTS = "session_count_last_update_dts";
  @SerializedName(SERIALIZED_NAME_SESSION_COUNT_LAST_UPDATE_DTS)
  private String sessionCountLastUpdateDts;

  public ScreenRecordingSegment() { 
  }

  public ScreenRecordingSegment createDts(String createDts) {
    
    this.createDts = createDts;
    return this;
  }

   /**
   * Get createDts
   * @return createDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreateDts() {
    return createDts;
  }


  public void setCreateDts(String createDts) {
    this.createDts = createDts;
  }


  public ScreenRecordingSegment description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ScreenRecordingSegment filter(ScreenRecordingFilter filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScreenRecordingFilter getFilter() {
    return filter;
  }


  public void setFilter(ScreenRecordingFilter filter) {
    this.filter = filter;
  }


  public ScreenRecordingSegment histogramData(List<Integer> histogramData) {
    
    this.histogramData = histogramData;
    return this;
  }

  public ScreenRecordingSegment addHistogramDataItem(Integer histogramDataItem) {
    if (this.histogramData == null) {
      this.histogramData = new ArrayList<>();
    }
    this.histogramData.add(histogramDataItem);
    return this;
  }

   /**
   * Get histogramData
   * @return histogramData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getHistogramData() {
    return histogramData;
  }


  public void setHistogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
  }


  public ScreenRecordingSegment histogramInterval(String histogramInterval) {
    
    this.histogramInterval = histogramInterval;
    return this;
  }

   /**
   * Get histogramInterval
   * @return histogramInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHistogramInterval() {
    return histogramInterval;
  }


  public void setHistogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
  }


  public ScreenRecordingSegment histogramStartDts(String histogramStartDts) {
    
    this.histogramStartDts = histogramStartDts;
    return this;
  }

   /**
   * Get histogramStartDts
   * @return histogramStartDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHistogramStartDts() {
    return histogramStartDts;
  }


  public void setHistogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
  }


  public ScreenRecordingSegment name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ScreenRecordingSegment screenRecordingSegmentOid(Integer screenRecordingSegmentOid) {
    
    this.screenRecordingSegmentOid = screenRecordingSegmentOid;
    return this;
  }

   /**
   * Get screenRecordingSegmentOid
   * @return screenRecordingSegmentOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getScreenRecordingSegmentOid() {
    return screenRecordingSegmentOid;
  }


  public void setScreenRecordingSegmentOid(Integer screenRecordingSegmentOid) {
    this.screenRecordingSegmentOid = screenRecordingSegmentOid;
  }


  public ScreenRecordingSegment sessionCount(Integer sessionCount) {
    
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Get sessionCount
   * @return sessionCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSessionCount() {
    return sessionCount;
  }


  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }


  public ScreenRecordingSegment sessionCountLastUpdateDts(String sessionCountLastUpdateDts) {
    
    this.sessionCountLastUpdateDts = sessionCountLastUpdateDts;
    return this;
  }

   /**
   * Get sessionCountLastUpdateDts
   * @return sessionCountLastUpdateDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSessionCountLastUpdateDts() {
    return sessionCountLastUpdateDts;
  }


  public void setSessionCountLastUpdateDts(String sessionCountLastUpdateDts) {
    this.sessionCountLastUpdateDts = sessionCountLastUpdateDts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingSegment screenRecordingSegment = (ScreenRecordingSegment) o;
    return Objects.equals(this.createDts, screenRecordingSegment.createDts) &&
        Objects.equals(this.description, screenRecordingSegment.description) &&
        Objects.equals(this.filter, screenRecordingSegment.filter) &&
        Objects.equals(this.histogramData, screenRecordingSegment.histogramData) &&
        Objects.equals(this.histogramInterval, screenRecordingSegment.histogramInterval) &&
        Objects.equals(this.histogramStartDts, screenRecordingSegment.histogramStartDts) &&
        Objects.equals(this.name, screenRecordingSegment.name) &&
        Objects.equals(this.screenRecordingSegmentOid, screenRecordingSegment.screenRecordingSegmentOid) &&
        Objects.equals(this.sessionCount, screenRecordingSegment.sessionCount) &&
        Objects.equals(this.sessionCountLastUpdateDts, screenRecordingSegment.sessionCountLastUpdateDts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createDts, description, filter, histogramData, histogramInterval, histogramStartDts, name, screenRecordingSegmentOid, sessionCount, sessionCountLastUpdateDts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingSegment {\n");
    sb.append("    createDts: ").append(toIndentedString(createDts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    histogramData: ").append(toIndentedString(histogramData)).append("\n");
    sb.append("    histogramInterval: ").append(toIndentedString(histogramInterval)).append("\n");
    sb.append("    histogramStartDts: ").append(toIndentedString(histogramStartDts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    screenRecordingSegmentOid: ").append(toIndentedString(screenRecordingSegmentOid)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    sessionCountLastUpdateDts: ").append(toIndentedString(sessionCountLastUpdateDts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("create_dts");
    openapiFields.add("description");
    openapiFields.add("filter");
    openapiFields.add("histogram_data");
    openapiFields.add("histogram_interval");
    openapiFields.add("histogram_start_dts");
    openapiFields.add("name");
    openapiFields.add("screen_recording_segment_oid");
    openapiFields.add("session_count");
    openapiFields.add("session_count_last_update_dts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScreenRecordingSegment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ScreenRecordingSegment.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScreenRecordingSegment is not found in the empty JSON string", ScreenRecordingSegment.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ScreenRecordingSegment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScreenRecordingSegment` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("create_dts") != null && !jsonObj.get("create_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_dts").toString()));
      }
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.getAsJsonObject("filter") != null) {
        ScreenRecordingFilter.validateJsonObject(jsonObj.getAsJsonObject("filter"));
      }
      // ensure the json data is an array
      if (jsonObj.get("histogram_data") != null && !jsonObj.get("histogram_data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogram_data` to be an array in the JSON string but got `%s`", jsonObj.get("histogram_data").toString()));
      }
      if (jsonObj.get("histogram_interval") != null && !jsonObj.get("histogram_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogram_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("histogram_interval").toString()));
      }
      if (jsonObj.get("histogram_start_dts") != null && !jsonObj.get("histogram_start_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogram_start_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("histogram_start_dts").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("session_count_last_update_dts") != null && !jsonObj.get("session_count_last_update_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_count_last_update_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_count_last_update_dts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScreenRecordingSegment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScreenRecordingSegment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScreenRecordingSegment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScreenRecordingSegment.class));

       return (TypeAdapter<T>) new TypeAdapter<ScreenRecordingSegment>() {
           @Override
           public void write(JsonWriter out, ScreenRecordingSegment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScreenRecordingSegment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScreenRecordingSegment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScreenRecordingSegment
  * @throws IOException if the JSON string is invalid with respect to ScreenRecordingSegment
  */
  public static ScreenRecordingSegment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScreenRecordingSegment.class);
  }

 /**
  * Convert an instance of ScreenRecordingSegment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


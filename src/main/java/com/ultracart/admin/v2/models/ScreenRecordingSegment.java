/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ScreenRecordingFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ScreenRecordingSegment
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-07-29T15:46:00.238-04:00")



public class ScreenRecordingSegment {
  @SerializedName("create_dts")
  private String createDts = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("filter")
  private ScreenRecordingFilter filter = null;

  @SerializedName("histogram_data")
  private List<Integer> histogramData = null;

  @SerializedName("histogram_interval")
  private String histogramInterval = null;

  @SerializedName("histogram_start_dts")
  private String histogramStartDts = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("screen_recording_segment_oid")
  private Integer screenRecordingSegmentOid = null;

  @SerializedName("session_count")
  private Integer sessionCount = null;

  @SerializedName("session_count_last_update_dts")
  private String sessionCountLastUpdateDts = null;

  public ScreenRecordingSegment createDts(String createDts) {
    this.createDts = createDts;
    return this;
  }

   /**
   * Get createDts
   * @return createDts
  **/
  @ApiModelProperty(value = "")
  public String getCreateDts() {
    return createDts;
  }

  public void setCreateDts(String createDts) {
    this.createDts = createDts;
  }

  public ScreenRecordingSegment description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ScreenRecordingSegment filter(ScreenRecordingFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public ScreenRecordingFilter getFilter() {
    return filter;
  }

  public void setFilter(ScreenRecordingFilter filter) {
    this.filter = filter;
  }

  public ScreenRecordingSegment histogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
    return this;
  }

  public ScreenRecordingSegment addHistogramDataItem(Integer histogramDataItem) {
    if (this.histogramData == null) {
      this.histogramData = new ArrayList<Integer>();
    }
    this.histogramData.add(histogramDataItem);
    return this;
  }

   /**
   * Get histogramData
   * @return histogramData
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getHistogramData() {
    return histogramData;
  }

  public void setHistogramData(List<Integer> histogramData) {
    this.histogramData = histogramData;
  }

  public ScreenRecordingSegment histogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
    return this;
  }

   /**
   * Get histogramInterval
   * @return histogramInterval
  **/
  @ApiModelProperty(value = "")
  public String getHistogramInterval() {
    return histogramInterval;
  }

  public void setHistogramInterval(String histogramInterval) {
    this.histogramInterval = histogramInterval;
  }

  public ScreenRecordingSegment histogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
    return this;
  }

   /**
   * Get histogramStartDts
   * @return histogramStartDts
  **/
  @ApiModelProperty(value = "")
  public String getHistogramStartDts() {
    return histogramStartDts;
  }

  public void setHistogramStartDts(String histogramStartDts) {
    this.histogramStartDts = histogramStartDts;
  }

  public ScreenRecordingSegment name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ScreenRecordingSegment screenRecordingSegmentOid(Integer screenRecordingSegmentOid) {
    this.screenRecordingSegmentOid = screenRecordingSegmentOid;
    return this;
  }

   /**
   * Get screenRecordingSegmentOid
   * @return screenRecordingSegmentOid
  **/
  @ApiModelProperty(value = "")
  public Integer getScreenRecordingSegmentOid() {
    return screenRecordingSegmentOid;
  }

  public void setScreenRecordingSegmentOid(Integer screenRecordingSegmentOid) {
    this.screenRecordingSegmentOid = screenRecordingSegmentOid;
  }

  public ScreenRecordingSegment sessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Get sessionCount
   * @return sessionCount
  **/
  @ApiModelProperty(value = "")
  public Integer getSessionCount() {
    return sessionCount;
  }

  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }

  public ScreenRecordingSegment sessionCountLastUpdateDts(String sessionCountLastUpdateDts) {
    this.sessionCountLastUpdateDts = sessionCountLastUpdateDts;
    return this;
  }

   /**
   * Get sessionCountLastUpdateDts
   * @return sessionCountLastUpdateDts
  **/
  @ApiModelProperty(value = "")
  public String getSessionCountLastUpdateDts() {
    return sessionCountLastUpdateDts;
  }

  public void setSessionCountLastUpdateDts(String sessionCountLastUpdateDts) {
    this.sessionCountLastUpdateDts = sessionCountLastUpdateDts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScreenRecordingSegment screenRecordingSegment = (ScreenRecordingSegment) o;
    return Objects.equals(this.createDts, screenRecordingSegment.createDts) &&
        Objects.equals(this.description, screenRecordingSegment.description) &&
        Objects.equals(this.filter, screenRecordingSegment.filter) &&
        Objects.equals(this.histogramData, screenRecordingSegment.histogramData) &&
        Objects.equals(this.histogramInterval, screenRecordingSegment.histogramInterval) &&
        Objects.equals(this.histogramStartDts, screenRecordingSegment.histogramStartDts) &&
        Objects.equals(this.name, screenRecordingSegment.name) &&
        Objects.equals(this.screenRecordingSegmentOid, screenRecordingSegment.screenRecordingSegmentOid) &&
        Objects.equals(this.sessionCount, screenRecordingSegment.sessionCount) &&
        Objects.equals(this.sessionCountLastUpdateDts, screenRecordingSegment.sessionCountLastUpdateDts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createDts, description, filter, histogramData, histogramInterval, histogramStartDts, name, screenRecordingSegmentOid, sessionCount, sessionCountLastUpdateDts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScreenRecordingSegment {\n");
    
    sb.append("    createDts: ").append(toIndentedString(createDts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    histogramData: ").append(toIndentedString(histogramData)).append("\n");
    sb.append("    histogramInterval: ").append(toIndentedString(histogramInterval)).append("\n");
    sb.append("    histogramStartDts: ").append(toIndentedString(histogramStartDts)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    screenRecordingSegmentOid: ").append(toIndentedString(screenRecordingSegmentOid)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    sessionCountLastUpdateDts: ").append(toIndentedString(sessionCountLastUpdateDts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxJarConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-10T12:05:11.750-05:00[America/Indianapolis]")
public class TaxJarConfig {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_ESTIMATE_ONLY = "estimate_only";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_ONLY)
  private Boolean estimateOnly;

  public static final String SERIALIZED_NAME_SEND_OUTSIDE_NEXUS = "send_outside_nexus";
  @SerializedName(SERIALIZED_NAME_SEND_OUTSIDE_NEXUS)
  private Boolean sendOutsideNexus;

  public static final String SERIALIZED_NAME_SEND_TEST_ORDERS = "send_test_orders";
  @SerializedName(SERIALIZED_NAME_SEND_TEST_ORDERS)
  private Boolean sendTestOrders;

  public static final String SERIALIZED_NAME_SKIP_CHANNEL_ORDERS = "skip_channel_orders";
  @SerializedName(SERIALIZED_NAME_SKIP_CHANNEL_ORDERS)
  private Boolean skipChannelOrders;

  public static final String SERIALIZED_NAME_USE_DISTRIBUTION_CENTER_FROM = "use_distribution_center_from";
  @SerializedName(SERIALIZED_NAME_USE_DISTRIBUTION_CENTER_FROM)
  private Boolean useDistributionCenterFrom;

  public TaxJarConfig() { 
  }

  public TaxJarConfig active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * True if TaxJar is active for this merchant
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if TaxJar is active for this merchant")

  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public TaxJarConfig apiKey(String apiKey) {
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * TaxJar API key
   * @return apiKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "TaxJar API key")

  public String getApiKey() {
    return apiKey;
  }


  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public TaxJarConfig estimateOnly(Boolean estimateOnly) {
    
    this.estimateOnly = estimateOnly;
    return this;
  }

   /**
   * True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar
   * @return estimateOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this TaxJar configuration is to estimate taxes only and not report placed orders to TaxJar")

  public Boolean getEstimateOnly() {
    return estimateOnly;
  }


  public void setEstimateOnly(Boolean estimateOnly) {
    this.estimateOnly = estimateOnly;
  }


  public TaxJarConfig sendOutsideNexus(Boolean sendOutsideNexus) {
    
    this.sendOutsideNexus = sendOutsideNexus;
    return this;
  }

   /**
   * Send orders outside your nexus TaxJar.  The default is to not transmit outside orders to TaxJar to reduce API calls.  However, this will prevent TaxJar from dynamically creating new Nexus when thresholds are exceeded for a state.
   * @return sendOutsideNexus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send orders outside your nexus TaxJar.  The default is to not transmit outside orders to TaxJar to reduce API calls.  However, this will prevent TaxJar from dynamically creating new Nexus when thresholds are exceeded for a state.")

  public Boolean getSendOutsideNexus() {
    return sendOutsideNexus;
  }


  public void setSendOutsideNexus(Boolean sendOutsideNexus) {
    this.sendOutsideNexus = sendOutsideNexus;
  }


  public TaxJarConfig sendTestOrders(Boolean sendTestOrders) {
    
    this.sendTestOrders = sendTestOrders;
    return this;
  }

   /**
   * Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar.
   * @return sendTestOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Send test orders through to TaxJar.  The default is to not transmit test orders to TaxJar.")

  public Boolean getSendTestOrders() {
    return sendTestOrders;
  }


  public void setSendTestOrders(Boolean sendTestOrders) {
    this.sendTestOrders = sendTestOrders;
  }


  public TaxJarConfig skipChannelOrders(Boolean skipChannelOrders) {
    
    this.skipChannelOrders = skipChannelOrders;
    return this;
  }

   /**
   * Do not send channel partner orders to TaxJar.  Set this to true if your channel partner reports tax on their own.
   * @return skipChannelOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Do not send channel partner orders to TaxJar.  Set this to true if your channel partner reports tax on their own.")

  public Boolean getSkipChannelOrders() {
    return skipChannelOrders;
  }


  public void setSkipChannelOrders(Boolean skipChannelOrders) {
    this.skipChannelOrders = skipChannelOrders;
  }


  public TaxJarConfig useDistributionCenterFrom(Boolean useDistributionCenterFrom) {
    
    this.useDistributionCenterFrom = useDistributionCenterFrom;
    return this;
  }

   /**
   * Use distribution center from address
   * @return useDistributionCenterFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Use distribution center from address")

  public Boolean getUseDistributionCenterFrom() {
    return useDistributionCenterFrom;
  }


  public void setUseDistributionCenterFrom(Boolean useDistributionCenterFrom) {
    this.useDistributionCenterFrom = useDistributionCenterFrom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxJarConfig taxJarConfig = (TaxJarConfig) o;
    return Objects.equals(this.active, taxJarConfig.active) &&
        Objects.equals(this.apiKey, taxJarConfig.apiKey) &&
        Objects.equals(this.estimateOnly, taxJarConfig.estimateOnly) &&
        Objects.equals(this.sendOutsideNexus, taxJarConfig.sendOutsideNexus) &&
        Objects.equals(this.sendTestOrders, taxJarConfig.sendTestOrders) &&
        Objects.equals(this.skipChannelOrders, taxJarConfig.skipChannelOrders) &&
        Objects.equals(this.useDistributionCenterFrom, taxJarConfig.useDistributionCenterFrom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, apiKey, estimateOnly, sendOutsideNexus, sendTestOrders, skipChannelOrders, useDistributionCenterFrom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxJarConfig {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    estimateOnly: ").append(toIndentedString(estimateOnly)).append("\n");
    sb.append("    sendOutsideNexus: ").append(toIndentedString(sendOutsideNexus)).append("\n");
    sb.append("    sendTestOrders: ").append(toIndentedString(sendTestOrders)).append("\n");
    sb.append("    skipChannelOrders: ").append(toIndentedString(skipChannelOrders)).append("\n");
    sb.append("    useDistributionCenterFrom: ").append(toIndentedString(useDistributionCenterFrom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("api_key");
    openapiFields.add("estimate_only");
    openapiFields.add("send_outside_nexus");
    openapiFields.add("send_test_orders");
    openapiFields.add("skip_channel_orders");
    openapiFields.add("use_distribution_center_from");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxJarConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxJarConfig.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxJarConfig is not found in the empty JSON string", TaxJarConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxJarConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxJarConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxJarConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxJarConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxJarConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxJarConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxJarConfig>() {
           @Override
           public void write(JsonWriter out, TaxJarConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxJarConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxJarConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxJarConfig
  * @throws IOException if the JSON string is invalid with respect to TaxJarConfig
  */
  public static TaxJarConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxJarConfig.class);
  }

 /**
  * Convert an instance of TaxJarConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


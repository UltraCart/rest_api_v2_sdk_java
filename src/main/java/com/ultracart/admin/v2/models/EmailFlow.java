/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * EmailFlow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-28T14:28:45.064-04:00[America/Indianapolis]")
public class EmailFlow {
  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_CONCURRENT_ENROLLMENTS = "allow_multiple_concurrent_enrollments";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_CONCURRENT_ENROLLMENTS)
  private Boolean allowMultipleConcurrentEnrollments;

  public static final String SERIALIZED_NAME_BACK_POPULATING = "back_populating";
  @SerializedName(SERIALIZED_NAME_BACK_POPULATING)
  private Boolean backPopulating;

  public static final String SERIALIZED_NAME_CLICK_RATE_FORMATTED = "click_rate_formatted";
  @SerializedName(SERIALIZED_NAME_CLICK_RATE_FORMATTED)
  private String clickRateFormatted;

  public static final String SERIALIZED_NAME_CREATED_DTS = "created_dts";
  @SerializedName(SERIALIZED_NAME_CREATED_DTS)
  private String createdDts;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_EMAIL_COMMUNICATION_SEQUENCE_UUID = "email_communication_sequence_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_COMMUNICATION_SEQUENCE_UUID)
  private String emailCommunicationSequenceUuid;

  public static final String SERIALIZED_NAME_EMAIL_FLOW_UUID = "email_flow_uuid";
  @SerializedName(SERIALIZED_NAME_EMAIL_FLOW_UUID)
  private String emailFlowUuid;

  public static final String SERIALIZED_NAME_END_ONCE_CUSTOMER_PURCHASES = "end_once_customer_purchases";
  @SerializedName(SERIALIZED_NAME_END_ONCE_CUSTOMER_PURCHASES)
  private Boolean endOnceCustomerPurchases;

  public static final String SERIALIZED_NAME_END_ONCE_CUSTOMER_PURCHASES_ANYWHERE = "end_once_customer_purchases_anywhere";
  @SerializedName(SERIALIZED_NAME_END_ONCE_CUSTOMER_PURCHASES_ANYWHERE)
  private Boolean endOnceCustomerPurchasesAnywhere;

  public static final String SERIALIZED_NAME_ENROLLED_CUSTOMERS = "enrolled_customers";
  @SerializedName(SERIALIZED_NAME_ENROLLED_CUSTOMERS)
  private Integer enrolledCustomers;

  public static final String SERIALIZED_NAME_ESP_DOMAIN_USER = "esp_domain_user";
  @SerializedName(SERIALIZED_NAME_ESP_DOMAIN_USER)
  private String espDomainUser;

  public static final String SERIALIZED_NAME_ESP_DOMAIN_UUID = "esp_domain_uuid";
  @SerializedName(SERIALIZED_NAME_ESP_DOMAIN_UUID)
  private String espDomainUuid;

  public static final String SERIALIZED_NAME_ESP_FLOW_FOLDER_UUID = "esp_flow_folder_uuid";
  @SerializedName(SERIALIZED_NAME_ESP_FLOW_FOLDER_UUID)
  private String espFlowFolderUuid;

  public static final String SERIALIZED_NAME_ESP_FRIENDLY_NAME = "esp_friendly_name";
  @SerializedName(SERIALIZED_NAME_ESP_FRIENDLY_NAME)
  private String espFriendlyName;

  public static final String SERIALIZED_NAME_FILTER_PROFILE_EQUATION_JSON = "filter_profile_equation_json";
  @SerializedName(SERIALIZED_NAME_FILTER_PROFILE_EQUATION_JSON)
  private String filterProfileEquationJson;

  public static final String SERIALIZED_NAME_LIBRARY_ITEM_OID = "library_item_oid";
  @SerializedName(SERIALIZED_NAME_LIBRARY_ITEM_OID)
  private Integer libraryItemOid;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPEN_RATE_FORMATTED = "open_rate_formatted";
  @SerializedName(SERIALIZED_NAME_OPEN_RATE_FORMATTED)
  private String openRateFormatted;

  public static final String SERIALIZED_NAME_REVENUE_FORMATTED = "revenue_formatted";
  @SerializedName(SERIALIZED_NAME_REVENUE_FORMATTED)
  private String revenueFormatted;

  public static final String SERIALIZED_NAME_REVENUE_PER_CUSTOMER_FORMATTED = "revenue_per_customer_formatted";
  @SerializedName(SERIALIZED_NAME_REVENUE_PER_CUSTOMER_FORMATTED)
  private String revenuePerCustomerFormatted;

  public static final String SERIALIZED_NAME_SCREENSHOT_LARGE_FULL_URL = "screenshot_large_full_url";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_LARGE_FULL_URL)
  private String screenshotLargeFullUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DTS = "status_dts";
  @SerializedName(SERIALIZED_NAME_STATUS_DTS)
  private String statusDts;

  public static final String SERIALIZED_NAME_STOREFRONT_OID = "storefront_oid";
  @SerializedName(SERIALIZED_NAME_STOREFRONT_OID)
  private Integer storefrontOid;

  public static final String SERIALIZED_NAME_TRIGGER_PARAMETER = "trigger_parameter";
  @SerializedName(SERIALIZED_NAME_TRIGGER_PARAMETER)
  private String triggerParameter;

  public static final String SERIALIZED_NAME_TRIGGER_PARAMETER_NAME = "trigger_parameter_name";
  @SerializedName(SERIALIZED_NAME_TRIGGER_PARAMETER_NAME)
  private String triggerParameterName;

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "trigger_type";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private String triggerType;

  public EmailFlow() { 
  }

  public EmailFlow allowMultipleConcurrentEnrollments(Boolean allowMultipleConcurrentEnrollments) {
    
    this.allowMultipleConcurrentEnrollments = allowMultipleConcurrentEnrollments;
    return this;
  }

   /**
   * True if a customer may be enrolled in this flow multiple times
   * @return allowMultipleConcurrentEnrollments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if a customer may be enrolled in this flow multiple times")

  public Boolean getAllowMultipleConcurrentEnrollments() {
    return allowMultipleConcurrentEnrollments;
  }


  public void setAllowMultipleConcurrentEnrollments(Boolean allowMultipleConcurrentEnrollments) {
    this.allowMultipleConcurrentEnrollments = allowMultipleConcurrentEnrollments;
  }


  public EmailFlow backPopulating(Boolean backPopulating) {
    
    this.backPopulating = backPopulating;
    return this;
  }

   /**
   * True if the flow is currently performing a back population.
   * @return backPopulating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the flow is currently performing a back population.")

  public Boolean getBackPopulating() {
    return backPopulating;
  }


  public void setBackPopulating(Boolean backPopulating) {
    this.backPopulating = backPopulating;
  }


  public EmailFlow clickRateFormatted(String clickRateFormatted) {
    
    this.clickRateFormatted = clickRateFormatted;
    return this;
  }

   /**
   * Click rate of emails, formatted
   * @return clickRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Click rate of emails, formatted")

  public String getClickRateFormatted() {
    return clickRateFormatted;
  }


  public void setClickRateFormatted(String clickRateFormatted) {
    this.clickRateFormatted = clickRateFormatted;
  }


  public EmailFlow createdDts(String createdDts) {
    
    this.createdDts = createdDts;
    return this;
  }

   /**
   * Created date
   * @return createdDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Created date")

  public String getCreatedDts() {
    return createdDts;
  }


  public void setCreatedDts(String createdDts) {
    this.createdDts = createdDts;
  }


  public EmailFlow deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * True if this campaign was deleted
   * @return deleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this campaign was deleted")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public EmailFlow emailCommunicationSequenceUuid(String emailCommunicationSequenceUuid) {
    
    this.emailCommunicationSequenceUuid = emailCommunicationSequenceUuid;
    return this;
  }

   /**
   * Email communication sequence UUID
   * @return emailCommunicationSequenceUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email communication sequence UUID")

  public String getEmailCommunicationSequenceUuid() {
    return emailCommunicationSequenceUuid;
  }


  public void setEmailCommunicationSequenceUuid(String emailCommunicationSequenceUuid) {
    this.emailCommunicationSequenceUuid = emailCommunicationSequenceUuid;
  }


  public EmailFlow emailFlowUuid(String emailFlowUuid) {
    
    this.emailFlowUuid = emailFlowUuid;
    return this;
  }

   /**
   * Email flow UUID
   * @return emailFlowUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email flow UUID")

  public String getEmailFlowUuid() {
    return emailFlowUuid;
  }


  public void setEmailFlowUuid(String emailFlowUuid) {
    this.emailFlowUuid = emailFlowUuid;
  }


  public EmailFlow endOnceCustomerPurchases(Boolean endOnceCustomerPurchases) {
    
    this.endOnceCustomerPurchases = endOnceCustomerPurchases;
    return this;
  }

   /**
   * True if the customer should end the flow once they purchase from an email on this flow
   * @return endOnceCustomerPurchases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer should end the flow once they purchase from an email on this flow")

  public Boolean getEndOnceCustomerPurchases() {
    return endOnceCustomerPurchases;
  }


  public void setEndOnceCustomerPurchases(Boolean endOnceCustomerPurchases) {
    this.endOnceCustomerPurchases = endOnceCustomerPurchases;
  }


  public EmailFlow endOnceCustomerPurchasesAnywhere(Boolean endOnceCustomerPurchasesAnywhere) {
    
    this.endOnceCustomerPurchasesAnywhere = endOnceCustomerPurchasesAnywhere;
    return this;
  }

   /**
   * True if the customer should end the flow once they purchase from any source
   * @return endOnceCustomerPurchasesAnywhere
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer should end the flow once they purchase from any source")

  public Boolean getEndOnceCustomerPurchasesAnywhere() {
    return endOnceCustomerPurchasesAnywhere;
  }


  public void setEndOnceCustomerPurchasesAnywhere(Boolean endOnceCustomerPurchasesAnywhere) {
    this.endOnceCustomerPurchasesAnywhere = endOnceCustomerPurchasesAnywhere;
  }


  public EmailFlow enrolledCustomers(Integer enrolledCustomers) {
    
    this.enrolledCustomers = enrolledCustomers;
    return this;
  }

   /**
   * Number of enrolled customers.
   * @return enrolledCustomers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of enrolled customers.")

  public Integer getEnrolledCustomers() {
    return enrolledCustomers;
  }


  public void setEnrolledCustomers(Integer enrolledCustomers) {
    this.enrolledCustomers = enrolledCustomers;
  }


  public EmailFlow espDomainUser(String espDomainUser) {
    
    this.espDomainUser = espDomainUser;
    return this;
  }

   /**
   * Username of sending email
   * @return espDomainUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Username of sending email")

  public String getEspDomainUser() {
    return espDomainUser;
  }


  public void setEspDomainUser(String espDomainUser) {
    this.espDomainUser = espDomainUser;
  }


  public EmailFlow espDomainUuid(String espDomainUuid) {
    
    this.espDomainUuid = espDomainUuid;
    return this;
  }

   /**
   * UUID of sending domain
   * @return espDomainUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "UUID of sending domain")

  public String getEspDomainUuid() {
    return espDomainUuid;
  }


  public void setEspDomainUuid(String espDomainUuid) {
    this.espDomainUuid = espDomainUuid;
  }


  public EmailFlow espFlowFolderUuid(String espFlowFolderUuid) {
    
    this.espFlowFolderUuid = espFlowFolderUuid;
    return this;
  }

   /**
   * Flow folder UUID.  Null for uncategorized
   * @return espFlowFolderUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flow folder UUID.  Null for uncategorized")

  public String getEspFlowFolderUuid() {
    return espFlowFolderUuid;
  }


  public void setEspFlowFolderUuid(String espFlowFolderUuid) {
    this.espFlowFolderUuid = espFlowFolderUuid;
  }


  public EmailFlow espFriendlyName(String espFriendlyName) {
    
    this.espFriendlyName = espFriendlyName;
    return this;
  }

   /**
   * Friendly name of the sending email
   * @return espFriendlyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Friendly name of the sending email")

  public String getEspFriendlyName() {
    return espFriendlyName;
  }


  public void setEspFriendlyName(String espFriendlyName) {
    this.espFriendlyName = espFriendlyName;
  }


  public EmailFlow filterProfileEquationJson(String filterProfileEquationJson) {
    
    this.filterProfileEquationJson = filterProfileEquationJson;
    return this;
  }

   /**
   * File profile equation json
   * @return filterProfileEquationJson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File profile equation json")

  public String getFilterProfileEquationJson() {
    return filterProfileEquationJson;
  }


  public void setFilterProfileEquationJson(String filterProfileEquationJson) {
    this.filterProfileEquationJson = filterProfileEquationJson;
  }


  public EmailFlow libraryItemOid(Integer libraryItemOid) {
    
    this.libraryItemOid = libraryItemOid;
    return this;
  }

   /**
   * If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
   * @return libraryItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.")

  public Integer getLibraryItemOid() {
    return libraryItemOid;
  }


  public void setLibraryItemOid(Integer libraryItemOid) {
    this.libraryItemOid = libraryItemOid;
  }


  public EmailFlow merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant ID")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public EmailFlow name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of email flow
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of email flow")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public EmailFlow openRateFormatted(String openRateFormatted) {
    
    this.openRateFormatted = openRateFormatted;
    return this;
  }

   /**
   * Open rate of emails, formatted
   * @return openRateFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Open rate of emails, formatted")

  public String getOpenRateFormatted() {
    return openRateFormatted;
  }


  public void setOpenRateFormatted(String openRateFormatted) {
    this.openRateFormatted = openRateFormatted;
  }


  public EmailFlow revenueFormatted(String revenueFormatted) {
    
    this.revenueFormatted = revenueFormatted;
    return this;
  }

   /**
   * Revenue, formatted
   * @return revenueFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revenue, formatted")

  public String getRevenueFormatted() {
    return revenueFormatted;
  }


  public void setRevenueFormatted(String revenueFormatted) {
    this.revenueFormatted = revenueFormatted;
  }


  public EmailFlow revenuePerCustomerFormatted(String revenuePerCustomerFormatted) {
    
    this.revenuePerCustomerFormatted = revenuePerCustomerFormatted;
    return this;
  }

   /**
   * Revenue per customer, formatted
   * @return revenuePerCustomerFormatted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Revenue per customer, formatted")

  public String getRevenuePerCustomerFormatted() {
    return revenuePerCustomerFormatted;
  }


  public void setRevenuePerCustomerFormatted(String revenuePerCustomerFormatted) {
    this.revenuePerCustomerFormatted = revenuePerCustomerFormatted;
  }


  public EmailFlow screenshotLargeFullUrl(String screenshotLargeFullUrl) {
    
    this.screenshotLargeFullUrl = screenshotLargeFullUrl;
    return this;
  }

   /**
   * URL to a large full length screenshot
   * @return screenshotLargeFullUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to a large full length screenshot")

  public String getScreenshotLargeFullUrl() {
    return screenshotLargeFullUrl;
  }


  public void setScreenshotLargeFullUrl(String screenshotLargeFullUrl) {
    this.screenshotLargeFullUrl = screenshotLargeFullUrl;
  }


  public EmailFlow status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the campaign of draft, archived, active, and inactive
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the campaign of draft, archived, active, and inactive")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public EmailFlow statusDts(String statusDts) {
    
    this.statusDts = statusDts;
    return this;
  }

   /**
   * Timestamp when the last status change happened
   * @return statusDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp when the last status change happened")

  public String getStatusDts() {
    return statusDts;
  }


  public void setStatusDts(String statusDts) {
    this.statusDts = statusDts;
  }


  public EmailFlow storefrontOid(Integer storefrontOid) {
    
    this.storefrontOid = storefrontOid;
    return this;
  }

   /**
   * Storefront oid
   * @return storefrontOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storefront oid")

  public Integer getStorefrontOid() {
    return storefrontOid;
  }


  public void setStorefrontOid(Integer storefrontOid) {
    this.storefrontOid = storefrontOid;
  }


  public EmailFlow triggerParameter(String triggerParameter) {
    
    this.triggerParameter = triggerParameter;
    return this;
  }

   /**
   * Trigger parameter
   * @return triggerParameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trigger parameter")

  public String getTriggerParameter() {
    return triggerParameter;
  }


  public void setTriggerParameter(String triggerParameter) {
    this.triggerParameter = triggerParameter;
  }


  public EmailFlow triggerParameterName(String triggerParameterName) {
    
    this.triggerParameterName = triggerParameterName;
    return this;
  }

   /**
   * Trigger parameter name
   * @return triggerParameterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trigger parameter name")

  public String getTriggerParameterName() {
    return triggerParameterName;
  }


  public void setTriggerParameterName(String triggerParameterName) {
    this.triggerParameterName = triggerParameterName;
  }


  public EmailFlow triggerType(String triggerType) {
    
    this.triggerType = triggerType;
    return this;
  }

   /**
   * Trigger type
   * @return triggerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trigger type")

  public String getTriggerType() {
    return triggerType;
  }


  public void setTriggerType(String triggerType) {
    this.triggerType = triggerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailFlow emailFlow = (EmailFlow) o;
    return Objects.equals(this.allowMultipleConcurrentEnrollments, emailFlow.allowMultipleConcurrentEnrollments) &&
        Objects.equals(this.backPopulating, emailFlow.backPopulating) &&
        Objects.equals(this.clickRateFormatted, emailFlow.clickRateFormatted) &&
        Objects.equals(this.createdDts, emailFlow.createdDts) &&
        Objects.equals(this.deleted, emailFlow.deleted) &&
        Objects.equals(this.emailCommunicationSequenceUuid, emailFlow.emailCommunicationSequenceUuid) &&
        Objects.equals(this.emailFlowUuid, emailFlow.emailFlowUuid) &&
        Objects.equals(this.endOnceCustomerPurchases, emailFlow.endOnceCustomerPurchases) &&
        Objects.equals(this.endOnceCustomerPurchasesAnywhere, emailFlow.endOnceCustomerPurchasesAnywhere) &&
        Objects.equals(this.enrolledCustomers, emailFlow.enrolledCustomers) &&
        Objects.equals(this.espDomainUser, emailFlow.espDomainUser) &&
        Objects.equals(this.espDomainUuid, emailFlow.espDomainUuid) &&
        Objects.equals(this.espFlowFolderUuid, emailFlow.espFlowFolderUuid) &&
        Objects.equals(this.espFriendlyName, emailFlow.espFriendlyName) &&
        Objects.equals(this.filterProfileEquationJson, emailFlow.filterProfileEquationJson) &&
        Objects.equals(this.libraryItemOid, emailFlow.libraryItemOid) &&
        Objects.equals(this.merchantId, emailFlow.merchantId) &&
        Objects.equals(this.name, emailFlow.name) &&
        Objects.equals(this.openRateFormatted, emailFlow.openRateFormatted) &&
        Objects.equals(this.revenueFormatted, emailFlow.revenueFormatted) &&
        Objects.equals(this.revenuePerCustomerFormatted, emailFlow.revenuePerCustomerFormatted) &&
        Objects.equals(this.screenshotLargeFullUrl, emailFlow.screenshotLargeFullUrl) &&
        Objects.equals(this.status, emailFlow.status) &&
        Objects.equals(this.statusDts, emailFlow.statusDts) &&
        Objects.equals(this.storefrontOid, emailFlow.storefrontOid) &&
        Objects.equals(this.triggerParameter, emailFlow.triggerParameter) &&
        Objects.equals(this.triggerParameterName, emailFlow.triggerParameterName) &&
        Objects.equals(this.triggerType, emailFlow.triggerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowMultipleConcurrentEnrollments, backPopulating, clickRateFormatted, createdDts, deleted, emailCommunicationSequenceUuid, emailFlowUuid, endOnceCustomerPurchases, endOnceCustomerPurchasesAnywhere, enrolledCustomers, espDomainUser, espDomainUuid, espFlowFolderUuid, espFriendlyName, filterProfileEquationJson, libraryItemOid, merchantId, name, openRateFormatted, revenueFormatted, revenuePerCustomerFormatted, screenshotLargeFullUrl, status, statusDts, storefrontOid, triggerParameter, triggerParameterName, triggerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailFlow {\n");
    sb.append("    allowMultipleConcurrentEnrollments: ").append(toIndentedString(allowMultipleConcurrentEnrollments)).append("\n");
    sb.append("    backPopulating: ").append(toIndentedString(backPopulating)).append("\n");
    sb.append("    clickRateFormatted: ").append(toIndentedString(clickRateFormatted)).append("\n");
    sb.append("    createdDts: ").append(toIndentedString(createdDts)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    emailCommunicationSequenceUuid: ").append(toIndentedString(emailCommunicationSequenceUuid)).append("\n");
    sb.append("    emailFlowUuid: ").append(toIndentedString(emailFlowUuid)).append("\n");
    sb.append("    endOnceCustomerPurchases: ").append(toIndentedString(endOnceCustomerPurchases)).append("\n");
    sb.append("    endOnceCustomerPurchasesAnywhere: ").append(toIndentedString(endOnceCustomerPurchasesAnywhere)).append("\n");
    sb.append("    enrolledCustomers: ").append(toIndentedString(enrolledCustomers)).append("\n");
    sb.append("    espDomainUser: ").append(toIndentedString(espDomainUser)).append("\n");
    sb.append("    espDomainUuid: ").append(toIndentedString(espDomainUuid)).append("\n");
    sb.append("    espFlowFolderUuid: ").append(toIndentedString(espFlowFolderUuid)).append("\n");
    sb.append("    espFriendlyName: ").append(toIndentedString(espFriendlyName)).append("\n");
    sb.append("    filterProfileEquationJson: ").append(toIndentedString(filterProfileEquationJson)).append("\n");
    sb.append("    libraryItemOid: ").append(toIndentedString(libraryItemOid)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    openRateFormatted: ").append(toIndentedString(openRateFormatted)).append("\n");
    sb.append("    revenueFormatted: ").append(toIndentedString(revenueFormatted)).append("\n");
    sb.append("    revenuePerCustomerFormatted: ").append(toIndentedString(revenuePerCustomerFormatted)).append("\n");
    sb.append("    screenshotLargeFullUrl: ").append(toIndentedString(screenshotLargeFullUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDts: ").append(toIndentedString(statusDts)).append("\n");
    sb.append("    storefrontOid: ").append(toIndentedString(storefrontOid)).append("\n");
    sb.append("    triggerParameter: ").append(toIndentedString(triggerParameter)).append("\n");
    sb.append("    triggerParameterName: ").append(toIndentedString(triggerParameterName)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_multiple_concurrent_enrollments");
    openapiFields.add("back_populating");
    openapiFields.add("click_rate_formatted");
    openapiFields.add("created_dts");
    openapiFields.add("deleted");
    openapiFields.add("email_communication_sequence_uuid");
    openapiFields.add("email_flow_uuid");
    openapiFields.add("end_once_customer_purchases");
    openapiFields.add("end_once_customer_purchases_anywhere");
    openapiFields.add("enrolled_customers");
    openapiFields.add("esp_domain_user");
    openapiFields.add("esp_domain_uuid");
    openapiFields.add("esp_flow_folder_uuid");
    openapiFields.add("esp_friendly_name");
    openapiFields.add("filter_profile_equation_json");
    openapiFields.add("library_item_oid");
    openapiFields.add("merchant_id");
    openapiFields.add("name");
    openapiFields.add("open_rate_formatted");
    openapiFields.add("revenue_formatted");
    openapiFields.add("revenue_per_customer_formatted");
    openapiFields.add("screenshot_large_full_url");
    openapiFields.add("status");
    openapiFields.add("status_dts");
    openapiFields.add("storefront_oid");
    openapiFields.add("trigger_parameter");
    openapiFields.add("trigger_parameter_name");
    openapiFields.add("trigger_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmailFlow
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EmailFlow.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailFlow is not found in the empty JSON string", EmailFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EmailFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailFlow` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("click_rate_formatted") != null && !jsonObj.get("click_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `click_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("click_rate_formatted").toString()));
      }
      if (jsonObj.get("created_dts") != null && !jsonObj.get("created_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_dts").toString()));
      }
      if (jsonObj.get("email_communication_sequence_uuid") != null && !jsonObj.get("email_communication_sequence_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_communication_sequence_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_communication_sequence_uuid").toString()));
      }
      if (jsonObj.get("email_flow_uuid") != null && !jsonObj.get("email_flow_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_flow_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_flow_uuid").toString()));
      }
      if (jsonObj.get("esp_domain_user") != null && !jsonObj.get("esp_domain_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_domain_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_domain_user").toString()));
      }
      if (jsonObj.get("esp_domain_uuid") != null && !jsonObj.get("esp_domain_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_domain_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_domain_uuid").toString()));
      }
      if (jsonObj.get("esp_flow_folder_uuid") != null && !jsonObj.get("esp_flow_folder_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_flow_folder_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_flow_folder_uuid").toString()));
      }
      if (jsonObj.get("esp_friendly_name") != null && !jsonObj.get("esp_friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esp_friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esp_friendly_name").toString()));
      }
      if (jsonObj.get("filter_profile_equation_json") != null && !jsonObj.get("filter_profile_equation_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_profile_equation_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_profile_equation_json").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("open_rate_formatted") != null && !jsonObj.get("open_rate_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_rate_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_rate_formatted").toString()));
      }
      if (jsonObj.get("revenue_formatted") != null && !jsonObj.get("revenue_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenue_formatted").toString()));
      }
      if (jsonObj.get("revenue_per_customer_formatted") != null && !jsonObj.get("revenue_per_customer_formatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_per_customer_formatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenue_per_customer_formatted").toString()));
      }
      if (jsonObj.get("screenshot_large_full_url") != null && !jsonObj.get("screenshot_large_full_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshot_large_full_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenshot_large_full_url").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("status_dts") != null && !jsonObj.get("status_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_dts").toString()));
      }
      if (jsonObj.get("trigger_parameter") != null && !jsonObj.get("trigger_parameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_parameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_parameter").toString()));
      }
      if (jsonObj.get("trigger_parameter_name") != null && !jsonObj.get("trigger_parameter_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_parameter_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_parameter_name").toString()));
      }
      if (jsonObj.get("trigger_type") != null && !jsonObj.get("trigger_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailFlow>() {
           @Override
           public void write(JsonWriter out, EmailFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailFlow read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailFlow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailFlow
  * @throws IOException if the JSON string is invalid with respect to EmailFlow
  */
  public static EmailFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailFlow.class);
  }

 /**
  * Convert an instance of EmailFlow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


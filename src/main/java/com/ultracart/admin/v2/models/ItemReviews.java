/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemReview;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemReviews
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-20T12:50:59.354-04:00[America/Indianapolis]")
public class ItemReviews {
  public static final String SERIALIZED_NAME_HAS_APPROVED_REVIEW = "has_approved_review";
  @SerializedName(SERIALIZED_NAME_HAS_APPROVED_REVIEW)
  private Boolean hasApprovedReview;

  public static final String SERIALIZED_NAME_HAS_REVIEW = "has_review";
  @SerializedName(SERIALIZED_NAME_HAS_REVIEW)
  private Boolean hasReview;

  public static final String SERIALIZED_NAME_INDIVIDUAL_REVIEWS = "individual_reviews";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_REVIEWS)
  private List<ItemReview> individualReviews = null;

  public static final String SERIALIZED_NAME_REVIEW_COUNT = "review_count";
  @SerializedName(SERIALIZED_NAME_REVIEW_COUNT)
  private Integer reviewCount;

  public static final String SERIALIZED_NAME_REVIEW_OVERALL = "review_overall";
  @SerializedName(SERIALIZED_NAME_REVIEW_OVERALL)
  private BigDecimal reviewOverall;

  public static final String SERIALIZED_NAME_REVIEW_TEMPLATE_NAME = "review_template_name";
  @SerializedName(SERIALIZED_NAME_REVIEW_TEMPLATE_NAME)
  private String reviewTemplateName;

  public static final String SERIALIZED_NAME_REVIEW_TEMPLATE_OID = "review_template_oid";
  @SerializedName(SERIALIZED_NAME_REVIEW_TEMPLATE_OID)
  private Integer reviewTemplateOid;

  public static final String SERIALIZED_NAME_REVIEWABLE = "reviewable";
  @SerializedName(SERIALIZED_NAME_REVIEWABLE)
  private Boolean reviewable;

  public static final String SERIALIZED_NAME_SHARE_REVIEWS_WITH_MERCHANT_ITEM_ID = "share_reviews_with_merchant_item_id";
  @SerializedName(SERIALIZED_NAME_SHARE_REVIEWS_WITH_MERCHANT_ITEM_ID)
  private String shareReviewsWithMerchantItemId;

  public static final String SERIALIZED_NAME_SHARE_REVIEWS_WITH_MERCHANT_ITEM_OID = "share_reviews_with_merchant_item_oid";
  @SerializedName(SERIALIZED_NAME_SHARE_REVIEWS_WITH_MERCHANT_ITEM_OID)
  private Integer shareReviewsWithMerchantItemOid;

  public ItemReviews() { 
  }

  public ItemReviews hasApprovedReview(Boolean hasApprovedReview) {
    
    this.hasApprovedReview = hasApprovedReview;
    return this;
  }

   /**
   * True if the item has an approved review
   * @return hasApprovedReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the item has an approved review")

  public Boolean getHasApprovedReview() {
    return hasApprovedReview;
  }


  public void setHasApprovedReview(Boolean hasApprovedReview) {
    this.hasApprovedReview = hasApprovedReview;
  }


  public ItemReviews hasReview(Boolean hasReview) {
    
    this.hasReview = hasReview;
    return this;
  }

   /**
   * True if the item has a review
   * @return hasReview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the item has a review")

  public Boolean getHasReview() {
    return hasReview;
  }


  public void setHasReview(Boolean hasReview) {
    this.hasReview = hasReview;
  }


  public ItemReviews individualReviews(List<ItemReview> individualReviews) {
    
    this.individualReviews = individualReviews;
    return this;
  }

  public ItemReviews addIndividualReviewsItem(ItemReview individualReviewsItem) {
    if (this.individualReviews == null) {
      this.individualReviews = new ArrayList<>();
    }
    this.individualReviews.add(individualReviewsItem);
    return this;
  }

   /**
   * Get individualReviews
   * @return individualReviews
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ItemReview> getIndividualReviews() {
    return individualReviews;
  }


  public void setIndividualReviews(List<ItemReview> individualReviews) {
    this.individualReviews = individualReviews;
  }


  public ItemReviews reviewCount(Integer reviewCount) {
    
    this.reviewCount = reviewCount;
    return this;
  }

   /**
   * Number of approved reviews
   * @return reviewCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of approved reviews")

  public Integer getReviewCount() {
    return reviewCount;
  }


  public void setReviewCount(Integer reviewCount) {
    this.reviewCount = reviewCount;
  }


  public ItemReviews reviewOverall(BigDecimal reviewOverall) {
    
    this.reviewOverall = reviewOverall;
    return this;
  }

   /**
   * Overall score of reviews
   * @return reviewOverall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overall score of reviews")

  public BigDecimal getReviewOverall() {
    return reviewOverall;
  }


  public void setReviewOverall(BigDecimal reviewOverall) {
    this.reviewOverall = reviewOverall;
  }


  public ItemReviews reviewTemplateName(String reviewTemplateName) {
    
    this.reviewTemplateName = reviewTemplateName;
    return this;
  }

   /**
   * Review template name
   * @return reviewTemplateName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Review template name")

  public String getReviewTemplateName() {
    return reviewTemplateName;
  }


  public void setReviewTemplateName(String reviewTemplateName) {
    this.reviewTemplateName = reviewTemplateName;
  }


  public ItemReviews reviewTemplateOid(Integer reviewTemplateOid) {
    
    this.reviewTemplateOid = reviewTemplateOid;
    return this;
  }

   /**
   * Review template object identifier
   * @return reviewTemplateOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Review template object identifier")

  public Integer getReviewTemplateOid() {
    return reviewTemplateOid;
  }


  public void setReviewTemplateOid(Integer reviewTemplateOid) {
    this.reviewTemplateOid = reviewTemplateOid;
  }


  public ItemReviews reviewable(Boolean reviewable) {
    
    this.reviewable = reviewable;
    return this;
  }

   /**
   * True if the item is reviewable
   * @return reviewable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the item is reviewable")

  public Boolean getReviewable() {
    return reviewable;
  }


  public void setReviewable(Boolean reviewable) {
    this.reviewable = reviewable;
  }


  public ItemReviews shareReviewsWithMerchantItemId(String shareReviewsWithMerchantItemId) {
    
    this.shareReviewsWithMerchantItemId = shareReviewsWithMerchantItemId;
    return this;
  }

   /**
   * Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field.
   * @return shareReviewsWithMerchantItemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Share reviews with item id.  To set, use the share_reviews_with_merchant_item_oid field.")

  public String getShareReviewsWithMerchantItemId() {
    return shareReviewsWithMerchantItemId;
  }


  public void setShareReviewsWithMerchantItemId(String shareReviewsWithMerchantItemId) {
    this.shareReviewsWithMerchantItemId = shareReviewsWithMerchantItemId;
  }


  public ItemReviews shareReviewsWithMerchantItemOid(Integer shareReviewsWithMerchantItemOid) {
    
    this.shareReviewsWithMerchantItemOid = shareReviewsWithMerchantItemOid;
    return this;
  }

   /**
   * Share reviews with item oid.  To null out this field, set teh value to zero.
   * @return shareReviewsWithMerchantItemOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Share reviews with item oid.  To null out this field, set teh value to zero.")

  public Integer getShareReviewsWithMerchantItemOid() {
    return shareReviewsWithMerchantItemOid;
  }


  public void setShareReviewsWithMerchantItemOid(Integer shareReviewsWithMerchantItemOid) {
    this.shareReviewsWithMerchantItemOid = shareReviewsWithMerchantItemOid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemReviews itemReviews = (ItemReviews) o;
    return Objects.equals(this.hasApprovedReview, itemReviews.hasApprovedReview) &&
        Objects.equals(this.hasReview, itemReviews.hasReview) &&
        Objects.equals(this.individualReviews, itemReviews.individualReviews) &&
        Objects.equals(this.reviewCount, itemReviews.reviewCount) &&
        Objects.equals(this.reviewOverall, itemReviews.reviewOverall) &&
        Objects.equals(this.reviewTemplateName, itemReviews.reviewTemplateName) &&
        Objects.equals(this.reviewTemplateOid, itemReviews.reviewTemplateOid) &&
        Objects.equals(this.reviewable, itemReviews.reviewable) &&
        Objects.equals(this.shareReviewsWithMerchantItemId, itemReviews.shareReviewsWithMerchantItemId) &&
        Objects.equals(this.shareReviewsWithMerchantItemOid, itemReviews.shareReviewsWithMerchantItemOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasApprovedReview, hasReview, individualReviews, reviewCount, reviewOverall, reviewTemplateName, reviewTemplateOid, reviewable, shareReviewsWithMerchantItemId, shareReviewsWithMerchantItemOid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemReviews {\n");
    sb.append("    hasApprovedReview: ").append(toIndentedString(hasApprovedReview)).append("\n");
    sb.append("    hasReview: ").append(toIndentedString(hasReview)).append("\n");
    sb.append("    individualReviews: ").append(toIndentedString(individualReviews)).append("\n");
    sb.append("    reviewCount: ").append(toIndentedString(reviewCount)).append("\n");
    sb.append("    reviewOverall: ").append(toIndentedString(reviewOverall)).append("\n");
    sb.append("    reviewTemplateName: ").append(toIndentedString(reviewTemplateName)).append("\n");
    sb.append("    reviewTemplateOid: ").append(toIndentedString(reviewTemplateOid)).append("\n");
    sb.append("    reviewable: ").append(toIndentedString(reviewable)).append("\n");
    sb.append("    shareReviewsWithMerchantItemId: ").append(toIndentedString(shareReviewsWithMerchantItemId)).append("\n");
    sb.append("    shareReviewsWithMerchantItemOid: ").append(toIndentedString(shareReviewsWithMerchantItemOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("has_approved_review");
    openapiFields.add("has_review");
    openapiFields.add("individual_reviews");
    openapiFields.add("review_count");
    openapiFields.add("review_overall");
    openapiFields.add("review_template_name");
    openapiFields.add("review_template_oid");
    openapiFields.add("reviewable");
    openapiFields.add("share_reviews_with_merchant_item_id");
    openapiFields.add("share_reviews_with_merchant_item_oid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemReviews
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemReviews.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemReviews is not found in the empty JSON string", ItemReviews.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemReviews.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemReviews` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayindividualReviews = jsonObj.getAsJsonArray("individual_reviews");
      if (jsonArrayindividualReviews != null) {
        // ensure the json data is an array
        if (!jsonObj.get("individual_reviews").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `individual_reviews` to be an array in the JSON string but got `%s`", jsonObj.get("individual_reviews").toString()));
        }

        // validate the optional field `individual_reviews` (array)
        for (int i = 0; i < jsonArrayindividualReviews.size(); i++) {
          ItemReview.validateJsonObject(jsonArrayindividualReviews.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("review_template_name") != null && !jsonObj.get("review_template_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_template_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_template_name").toString()));
      }
      if (jsonObj.get("share_reviews_with_merchant_item_id") != null && !jsonObj.get("share_reviews_with_merchant_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_reviews_with_merchant_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_reviews_with_merchant_item_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemReviews.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemReviews' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemReviews> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemReviews.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemReviews>() {
           @Override
           public void write(JsonWriter out, ItemReviews value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemReviews read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemReviews given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemReviews
  * @throws IOException if the JSON string is invalid with respect to ItemReviews
  */
  public static ItemReviews fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemReviews.class);
  }

 /**
  * Convert an instance of ItemReviews to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.RtgCurrency;
import com.ultracart.admin.v2.models.RtgDayOfMonthRestriction;
import com.ultracart.admin.v2.models.RtgDayOfWeekRestriction;
import com.ultracart.admin.v2.models.RtgThemeRestriction;
import com.ultracart.admin.v2.models.TransactionGateway;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * RotatingTransactionGateway
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-02-16T09:05:04.845-05:00")



public class RotatingTransactionGateway {
  @SerializedName("additional_native_currency_codes")
  private List<RtgCurrency> additionalNativeCurrencyCodes = null;

  @SerializedName("auto_order_cancel_unless_response_name")
  private String autoOrderCancelUnlessResponseName = null;

  @SerializedName("auto_order_cancel_unless_response_values")
  private List<String> autoOrderCancelUnlessResponseValues = null;

  @SerializedName("base_currency_code")
  private String baseCurrencyCode = null;

  @SerializedName("cascade_code")
  private String cascadeCode = null;

  @SerializedName("cascade_codes")
  private List<String> cascadeCodes = null;

  @SerializedName("cascade_daily_auto_order_code")
  private String cascadeDailyAutoOrderCode = null;

  @SerializedName("charge_appears_on_statement_as")
  private String chargeAppearsOnStatementAs = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("current_daily")
  private BigDecimal currentDaily = null;

  @SerializedName("current_daily_auto_order")
  private BigDecimal currentDailyAutoOrder = null;

  @SerializedName("current_monthly")
  private BigDecimal currentMonthly = null;

  @SerializedName("customer_service_email")
  private String customerServiceEmail = null;

  @SerializedName("customer_service_phone")
  private String customerServicePhone = null;

  @SerializedName("day_of_month_restrictions")
  private List<RtgDayOfMonthRestriction> dayOfMonthRestrictions = null;

  @SerializedName("day_of_week_restrictions")
  private List<RtgDayOfWeekRestriction> dayOfWeekRestrictions = null;

  @SerializedName("deactivate_after_failures")
  private Integer deactivateAfterFailures = null;

  @SerializedName("end_date")
  private String endDate = null;

  @SerializedName("gateways")
  private List<TransactionGateway> gateways = null;

  @SerializedName("maximum_daily")
  private BigDecimal maximumDaily = null;

  @SerializedName("maximum_daily_auto_order")
  private BigDecimal maximumDailyAutoOrder = null;

  @SerializedName("maximum_monthly")
  private BigDecimal maximumMonthly = null;

  @SerializedName("next_daily_auto_order_reset")
  private String nextDailyAutoOrderReset = null;

  @SerializedName("next_daily_reset")
  private String nextDailyReset = null;

  @SerializedName("next_monthly_reset")
  private String nextMonthlyReset = null;

  @SerializedName("order_total")
  private BigDecimal orderTotal = null;

  /**
   * The math operator used to determine if the order total is allowed to process through this gateway.
   */
  @JsonAdapter(OrderTotalComparisonEnum.Adapter.class)
  public enum OrderTotalComparisonEnum {
    LESS_THAN("<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    EQUAL("="),
    
    GREATER_THAN(">"),
    
    GREATER_THAN_OR_EQUAL_TO(">=");

    private String value;

    OrderTotalComparisonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderTotalComparisonEnum fromValue(String text) {
      for (OrderTotalComparisonEnum b : OrderTotalComparisonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrderTotalComparisonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderTotalComparisonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderTotalComparisonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderTotalComparisonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("order_total_comparison")
  private OrderTotalComparisonEnum orderTotalComparison = null;

  @SerializedName("rebill_auto_orders_against_this_rtg_code")
  private String rebillAutoOrdersAgainstThisRtgCode = null;

  @SerializedName("reserve_days")
  private Integer reserveDays = null;

  @SerializedName("reserve_percentage")
  private BigDecimal reservePercentage = null;

  @SerializedName("reserve_refunded")
  private Boolean reserveRefunded = null;

  @SerializedName("reserves_released_through")
  private String reservesReleasedThrough = null;

  @SerializedName("rotating_transaction_gateway_oid")
  private Integer rotatingTransactionGatewayOid = null;

  @SerializedName("selected_gateway_name")
  private String selectedGatewayName = null;

  @SerializedName("show_cascade_codes")
  private Boolean showCascadeCodes = null;

  @SerializedName("show_merchant_account_profiles")
  private Boolean showMerchantAccountProfiles = null;

  @SerializedName("start_date")
  private String startDate = null;

  /**
   * A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    INACTIVE("inactive"),
    
    STANDBY("standby");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("theme_restrictions")
  private List<RtgThemeRestriction> themeRestrictions = null;

  @SerializedName("traffic_percentage")
  private BigDecimal trafficPercentage = null;

  @SerializedName("trial_daily_amount")
  private Integer trialDailyAmount = null;

  @SerializedName("trial_daily_limit")
  private Integer trialDailyLimit = null;

  @SerializedName("trial_monthly_amount")
  private Integer trialMonthlyAmount = null;

  @SerializedName("trial_monthly_limit")
  private Integer trialMonthlyLimit = null;

  public RotatingTransactionGateway additionalNativeCurrencyCodes(List<RtgCurrency> additionalNativeCurrencyCodes) {
    this.additionalNativeCurrencyCodes = additionalNativeCurrencyCodes;
    return this;
  }

  public RotatingTransactionGateway addAdditionalNativeCurrencyCodesItem(RtgCurrency additionalNativeCurrencyCodesItem) {
    if (this.additionalNativeCurrencyCodes == null) {
      this.additionalNativeCurrencyCodes = new ArrayList<RtgCurrency>();
    }
    this.additionalNativeCurrencyCodes.add(additionalNativeCurrencyCodesItem);
    return this;
  }

   /**
   * An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency.
   * @return additionalNativeCurrencyCodes
  **/
  @ApiModelProperty(value = "An array of all currencies known to the UltraCart system and a boolean indicating whether this gateway supports that currency.")
  public List<RtgCurrency> getAdditionalNativeCurrencyCodes() {
    return additionalNativeCurrencyCodes;
  }

  public void setAdditionalNativeCurrencyCodes(List<RtgCurrency> additionalNativeCurrencyCodes) {
    this.additionalNativeCurrencyCodes = additionalNativeCurrencyCodes;
  }

  public RotatingTransactionGateway autoOrderCancelUnlessResponseName(String autoOrderCancelUnlessResponseName) {
    this.autoOrderCancelUnlessResponseName = autoOrderCancelUnlessResponseName;
    return this;
  }

   /**
   * Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array
   * @return autoOrderCancelUnlessResponseName
  **/
  @ApiModelProperty(value = "Advanced feature for canceling an auto order unless the transaction gateway response contains a field with this name.  If specified, this field must exist and the value must equal a value in the auto_order_cancel_unless_response_values array")
  public String getAutoOrderCancelUnlessResponseName() {
    return autoOrderCancelUnlessResponseName;
  }

  public void setAutoOrderCancelUnlessResponseName(String autoOrderCancelUnlessResponseName) {
    this.autoOrderCancelUnlessResponseName = autoOrderCancelUnlessResponseName;
  }

  public RotatingTransactionGateway autoOrderCancelUnlessResponseValues(List<String> autoOrderCancelUnlessResponseValues) {
    this.autoOrderCancelUnlessResponseValues = autoOrderCancelUnlessResponseValues;
    return this;
  }

  public RotatingTransactionGateway addAutoOrderCancelUnlessResponseValuesItem(String autoOrderCancelUnlessResponseValuesItem) {
    if (this.autoOrderCancelUnlessResponseValues == null) {
      this.autoOrderCancelUnlessResponseValues = new ArrayList<String>();
    }
    this.autoOrderCancelUnlessResponseValues.add(autoOrderCancelUnlessResponseValuesItem);
    return this;
  }

   /**
   * Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled.
   * @return autoOrderCancelUnlessResponseValues
  **/
  @ApiModelProperty(value = "Advanced feature for canceling an auto order unless the transaction gateway response contains a field with the name specified in auto_order_cancel_unless_response_name.  If specified, this field must exist and the value must equal a value in this array.  If nothing matches, the auto order is canceled.")
  public List<String> getAutoOrderCancelUnlessResponseValues() {
    return autoOrderCancelUnlessResponseValues;
  }

  public void setAutoOrderCancelUnlessResponseValues(List<String> autoOrderCancelUnlessResponseValues) {
    this.autoOrderCancelUnlessResponseValues = autoOrderCancelUnlessResponseValues;
  }

  public RotatingTransactionGateway baseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
    return this;
  }

   /**
   * The base currency code for your gateway.  For example, USD.
   * @return baseCurrencyCode
  **/
  @ApiModelProperty(value = "The base currency code for your gateway.  For example, USD.")
  public String getBaseCurrencyCode() {
    return baseCurrencyCode;
  }

  public void setBaseCurrencyCode(String baseCurrencyCode) {
    this.baseCurrencyCode = baseCurrencyCode;
  }

  public RotatingTransactionGateway cascadeCode(String cascadeCode) {
    this.cascadeCode = cascadeCode;
    return this;
  }

   /**
   * Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction.
   * @return cascadeCode
  **/
  @ApiModelProperty(value = "Optional field specifying a different rotating gateway to use if this gateway fails to process the transaction.")
  public String getCascadeCode() {
    return cascadeCode;
  }

  public void setCascadeCode(String cascadeCode) {
    this.cascadeCode = cascadeCode;
  }

  public RotatingTransactionGateway cascadeCodes(List<String> cascadeCodes) {
    this.cascadeCodes = cascadeCodes;
    return this;
  }

  public RotatingTransactionGateway addCascadeCodesItem(String cascadeCodesItem) {
    if (this.cascadeCodes == null) {
      this.cascadeCodes = new ArrayList<String>();
    }
    this.cascadeCodes.add(cascadeCodesItem);
    return this;
  }

   /**
   * A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway
   * @return cascadeCodes
  **/
  @ApiModelProperty(value = "A list of other rotating transaction gateways that can be used as a lookup to assign actions based on failures of this gateway")
  public List<String> getCascadeCodes() {
    return cascadeCodes;
  }

  public void setCascadeCodes(List<String> cascadeCodes) {
    this.cascadeCodes = cascadeCodes;
  }

  public RotatingTransactionGateway cascadeDailyAutoOrderCode(String cascadeDailyAutoOrderCode) {
    this.cascadeDailyAutoOrderCode = cascadeDailyAutoOrderCode;
    return this;
  }

   /**
   * The code for the next rotating gateway that should be used when this gateway reaches a daily limit
   * @return cascadeDailyAutoOrderCode
  **/
  @ApiModelProperty(value = "The code for the next rotating gateway that should be used when this gateway reaches a daily limit")
  public String getCascadeDailyAutoOrderCode() {
    return cascadeDailyAutoOrderCode;
  }

  public void setCascadeDailyAutoOrderCode(String cascadeDailyAutoOrderCode) {
    this.cascadeDailyAutoOrderCode = cascadeDailyAutoOrderCode;
  }

  public RotatingTransactionGateway chargeAppearsOnStatementAs(String chargeAppearsOnStatementAs) {
    this.chargeAppearsOnStatementAs = chargeAppearsOnStatementAs;
    return this;
  }

   /**
   * Optional field providing an alternate Charge Appears As value for this rotating gateway
   * @return chargeAppearsOnStatementAs
  **/
  @ApiModelProperty(value = "Optional field providing an alternate Charge Appears As value for this rotating gateway")
  public String getChargeAppearsOnStatementAs() {
    return chargeAppearsOnStatementAs;
  }

  public void setChargeAppearsOnStatementAs(String chargeAppearsOnStatementAs) {
    this.chargeAppearsOnStatementAs = chargeAppearsOnStatementAs;
  }

  public RotatingTransactionGateway code(String code) {
    this.code = code;
    return this;
  }

   /**
   * A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways
   * @return code
  **/
  @ApiModelProperty(value = "A human friendly short code used to recognize and differentiate this rotating gateway with other rotating gateways")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public RotatingTransactionGateway currentDaily(BigDecimal currentDaily) {
    this.currentDaily = currentDaily;
    return this;
  }

   /**
   * The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
   * @return currentDaily
  **/
  @ApiModelProperty(value = "The current daily dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.")
  public BigDecimal getCurrentDaily() {
    return currentDaily;
  }

  public void setCurrentDaily(BigDecimal currentDaily) {
    this.currentDaily = currentDaily;
  }

  public RotatingTransactionGateway currentDailyAutoOrder(BigDecimal currentDailyAutoOrder) {
    this.currentDailyAutoOrder = currentDailyAutoOrder;
    return this;
  }

   /**
   * The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
   * @return currentDailyAutoOrder
  **/
  @ApiModelProperty(value = "The current daily dollar amount of auto orders (recurring) this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.")
  public BigDecimal getCurrentDailyAutoOrder() {
    return currentDailyAutoOrder;
  }

  public void setCurrentDailyAutoOrder(BigDecimal currentDailyAutoOrder) {
    this.currentDailyAutoOrder = currentDailyAutoOrder;
  }

  public RotatingTransactionGateway currentMonthly(BigDecimal currentMonthly) {
    this.currentMonthly = currentMonthly;
    return this;
  }

   /**
   * The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.
   * @return currentMonthly
  **/
  @ApiModelProperty(value = "The current monthly dollar amount this gateway has processed.  Providing this will allow UltraCart to track the monthly amount going forward.")
  public BigDecimal getCurrentMonthly() {
    return currentMonthly;
  }

  public void setCurrentMonthly(BigDecimal currentMonthly) {
    this.currentMonthly = currentMonthly;
  }

  public RotatingTransactionGateway customerServiceEmail(String customerServiceEmail) {
    this.customerServiceEmail = customerServiceEmail;
    return this;
  }

   /**
   * The customer service email address for this gateway
   * @return customerServiceEmail
  **/
  @ApiModelProperty(value = "The customer service email address for this gateway")
  public String getCustomerServiceEmail() {
    return customerServiceEmail;
  }

  public void setCustomerServiceEmail(String customerServiceEmail) {
    this.customerServiceEmail = customerServiceEmail;
  }

  public RotatingTransactionGateway customerServicePhone(String customerServicePhone) {
    this.customerServicePhone = customerServicePhone;
    return this;
  }

   /**
   * The customer service phone number for this gateway
   * @return customerServicePhone
  **/
  @ApiModelProperty(value = "The customer service phone number for this gateway")
  public String getCustomerServicePhone() {
    return customerServicePhone;
  }

  public void setCustomerServicePhone(String customerServicePhone) {
    this.customerServicePhone = customerServicePhone;
  }

  public RotatingTransactionGateway dayOfMonthRestrictions(List<RtgDayOfMonthRestriction> dayOfMonthRestrictions) {
    this.dayOfMonthRestrictions = dayOfMonthRestrictions;
    return this;
  }

  public RotatingTransactionGateway addDayOfMonthRestrictionsItem(RtgDayOfMonthRestriction dayOfMonthRestrictionsItem) {
    if (this.dayOfMonthRestrictions == null) {
      this.dayOfMonthRestrictions = new ArrayList<RtgDayOfMonthRestriction>();
    }
    this.dayOfMonthRestrictions.add(dayOfMonthRestrictionsItem);
    return this;
  }

   /**
   * Array containing all 31 (possible) days and any optional restrictions for one or more days.
   * @return dayOfMonthRestrictions
  **/
  @ApiModelProperty(value = "Array containing all 31 (possible) days and any optional restrictions for one or more days.")
  public List<RtgDayOfMonthRestriction> getDayOfMonthRestrictions() {
    return dayOfMonthRestrictions;
  }

  public void setDayOfMonthRestrictions(List<RtgDayOfMonthRestriction> dayOfMonthRestrictions) {
    this.dayOfMonthRestrictions = dayOfMonthRestrictions;
  }

  public RotatingTransactionGateway dayOfWeekRestrictions(List<RtgDayOfWeekRestriction> dayOfWeekRestrictions) {
    this.dayOfWeekRestrictions = dayOfWeekRestrictions;
    return this;
  }

  public RotatingTransactionGateway addDayOfWeekRestrictionsItem(RtgDayOfWeekRestriction dayOfWeekRestrictionsItem) {
    if (this.dayOfWeekRestrictions == null) {
      this.dayOfWeekRestrictions = new ArrayList<RtgDayOfWeekRestriction>();
    }
    this.dayOfWeekRestrictions.add(dayOfWeekRestrictionsItem);
    return this;
  }

   /**
   * Array containing all seven days of the week and any optional restrictions for one or more days
   * @return dayOfWeekRestrictions
  **/
  @ApiModelProperty(value = "Array containing all seven days of the week and any optional restrictions for one or more days")
  public List<RtgDayOfWeekRestriction> getDayOfWeekRestrictions() {
    return dayOfWeekRestrictions;
  }

  public void setDayOfWeekRestrictions(List<RtgDayOfWeekRestriction> dayOfWeekRestrictions) {
    this.dayOfWeekRestrictions = dayOfWeekRestrictions;
  }

  public RotatingTransactionGateway deactivateAfterFailures(Integer deactivateAfterFailures) {
    this.deactivateAfterFailures = deactivateAfterFailures;
    return this;
  }

   /**
   * If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures.
   * @return deactivateAfterFailures
  **/
  @ApiModelProperty(value = "If non-zero, this gateway will be deactivated after reaching this amount of consecutive failures.")
  public Integer getDeactivateAfterFailures() {
    return deactivateAfterFailures;
  }

  public void setDeactivateAfterFailures(Integer deactivateAfterFailures) {
    this.deactivateAfterFailures = deactivateAfterFailures;
  }

  public RotatingTransactionGateway endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Optional field to specify an absolute date when this gateway should stop accepting transactions
   * @return endDate
  **/
  @ApiModelProperty(value = "Optional field to specify an absolute date when this gateway should stop accepting transactions")
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public RotatingTransactionGateway gateways(List<TransactionGateway> gateways) {
    this.gateways = gateways;
    return this;
  }

  public RotatingTransactionGateway addGatewaysItem(TransactionGateway gatewaysItem) {
    if (this.gateways == null) {
      this.gateways = new ArrayList<TransactionGateway>();
    }
    this.gateways.add(gatewaysItem);
    return this;
  }

   /**
   * An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used.
   * @return gateways
  **/
  @ApiModelProperty(value = "An array of all transaction gateways, not just the one currently configured for this rotating gateway. This allows for easy switching to another gateway.  The enabled property on the transaction gateway indicates which one is actually being used.")
  public List<TransactionGateway> getGateways() {
    return gateways;
  }

  public void setGateways(List<TransactionGateway> gateways) {
    this.gateways = gateways;
  }

  public RotatingTransactionGateway maximumDaily(BigDecimal maximumDaily) {
    this.maximumDaily = maximumDaily;
    return this;
  }

   /**
   * The maximum daily dollar amount this gateway may process
   * @return maximumDaily
  **/
  @ApiModelProperty(value = "The maximum daily dollar amount this gateway may process")
  public BigDecimal getMaximumDaily() {
    return maximumDaily;
  }

  public void setMaximumDaily(BigDecimal maximumDaily) {
    this.maximumDaily = maximumDaily;
  }

  public RotatingTransactionGateway maximumDailyAutoOrder(BigDecimal maximumDailyAutoOrder) {
    this.maximumDailyAutoOrder = maximumDailyAutoOrder;
    return this;
  }

   /**
   * The maximum daily dollar amount of auto orders (recurring) this gateway may process
   * @return maximumDailyAutoOrder
  **/
  @ApiModelProperty(value = "The maximum daily dollar amount of auto orders (recurring) this gateway may process")
  public BigDecimal getMaximumDailyAutoOrder() {
    return maximumDailyAutoOrder;
  }

  public void setMaximumDailyAutoOrder(BigDecimal maximumDailyAutoOrder) {
    this.maximumDailyAutoOrder = maximumDailyAutoOrder;
  }

  public RotatingTransactionGateway maximumMonthly(BigDecimal maximumMonthly) {
    this.maximumMonthly = maximumMonthly;
    return this;
  }

   /**
   * The maximum monthly dollar amount this gateway may process.
   * @return maximumMonthly
  **/
  @ApiModelProperty(value = "The maximum monthly dollar amount this gateway may process.")
  public BigDecimal getMaximumMonthly() {
    return maximumMonthly;
  }

  public void setMaximumMonthly(BigDecimal maximumMonthly) {
    this.maximumMonthly = maximumMonthly;
  }

  public RotatingTransactionGateway nextDailyAutoOrderReset(String nextDailyAutoOrderReset) {
    this.nextDailyAutoOrderReset = nextDailyAutoOrderReset;
    return this;
  }

   /**
   * The date and time when this gateway daily limit for auto orders will reset
   * @return nextDailyAutoOrderReset
  **/
  @ApiModelProperty(value = "The date and time when this gateway daily limit for auto orders will reset")
  public String getNextDailyAutoOrderReset() {
    return nextDailyAutoOrderReset;
  }

  public void setNextDailyAutoOrderReset(String nextDailyAutoOrderReset) {
    this.nextDailyAutoOrderReset = nextDailyAutoOrderReset;
  }

  public RotatingTransactionGateway nextDailyReset(String nextDailyReset) {
    this.nextDailyReset = nextDailyReset;
    return this;
  }

   /**
   * The date and time when this gateway daily limit will reset
   * @return nextDailyReset
  **/
  @ApiModelProperty(value = "The date and time when this gateway daily limit will reset")
  public String getNextDailyReset() {
    return nextDailyReset;
  }

  public void setNextDailyReset(String nextDailyReset) {
    this.nextDailyReset = nextDailyReset;
  }

  public RotatingTransactionGateway nextMonthlyReset(String nextMonthlyReset) {
    this.nextMonthlyReset = nextMonthlyReset;
    return this;
  }

   /**
   * The date and time when this gateway monthly limit will reset
   * @return nextMonthlyReset
  **/
  @ApiModelProperty(value = "The date and time when this gateway monthly limit will reset")
  public String getNextMonthlyReset() {
    return nextMonthlyReset;
  }

  public void setNextMonthlyReset(String nextMonthlyReset) {
    this.nextMonthlyReset = nextMonthlyReset;
  }

  public RotatingTransactionGateway orderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
    return this;
  }

   /**
   * This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway.
   * @return orderTotal
  **/
  @ApiModelProperty(value = "This optional field is combined with order_total_comparison to determine if an order should be processed thorugh this gateway.")
  public BigDecimal getOrderTotal() {
    return orderTotal;
  }

  public void setOrderTotal(BigDecimal orderTotal) {
    this.orderTotal = orderTotal;
  }

  public RotatingTransactionGateway orderTotalComparison(OrderTotalComparisonEnum orderTotalComparison) {
    this.orderTotalComparison = orderTotalComparison;
    return this;
  }

   /**
   * The math operator used to determine if the order total is allowed to process through this gateway.
   * @return orderTotalComparison
  **/
  @ApiModelProperty(value = "The math operator used to determine if the order total is allowed to process through this gateway.")
  public OrderTotalComparisonEnum getOrderTotalComparison() {
    return orderTotalComparison;
  }

  public void setOrderTotalComparison(OrderTotalComparisonEnum orderTotalComparison) {
    this.orderTotalComparison = orderTotalComparison;
  }

  public RotatingTransactionGateway rebillAutoOrdersAgainstThisRtgCode(String rebillAutoOrdersAgainstThisRtgCode) {
    this.rebillAutoOrdersAgainstThisRtgCode = rebillAutoOrdersAgainstThisRtgCode;
    return this;
  }

   /**
   * If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv.
   * @return rebillAutoOrdersAgainstThisRtgCode
  **/
  @ApiModelProperty(value = "If specified auto orders (rebills) are routed to this rotating gateway.  This may be needed because rebills lack a credit card cvv.")
  public String getRebillAutoOrdersAgainstThisRtgCode() {
    return rebillAutoOrdersAgainstThisRtgCode;
  }

  public void setRebillAutoOrdersAgainstThisRtgCode(String rebillAutoOrdersAgainstThisRtgCode) {
    this.rebillAutoOrdersAgainstThisRtgCode = rebillAutoOrdersAgainstThisRtgCode;
  }

  public RotatingTransactionGateway reserveDays(Integer reserveDays) {
    this.reserveDays = reserveDays;
    return this;
  }

   /**
   * The number of days that your gateway holds any reserves.  This aids in profitability reporting.
   * @return reserveDays
  **/
  @ApiModelProperty(value = "The number of days that your gateway holds any reserves.  This aids in profitability reporting.")
  public Integer getReserveDays() {
    return reserveDays;
  }

  public void setReserveDays(Integer reserveDays) {
    this.reserveDays = reserveDays;
  }

  public RotatingTransactionGateway reservePercentage(BigDecimal reservePercentage) {
    this.reservePercentage = reservePercentage;
    return this;
  }

   /**
   * The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting.
   * @return reservePercentage
  **/
  @ApiModelProperty(value = "The percentage of an order which your gateway is holding in reserve.  This aids in profitability reporting.")
  public BigDecimal getReservePercentage() {
    return reservePercentage;
  }

  public void setReservePercentage(BigDecimal reservePercentage) {
    this.reservePercentage = reservePercentage;
  }

  public RotatingTransactionGateway reserveRefunded(Boolean reserveRefunded) {
    this.reserveRefunded = reserveRefunded;
    return this;
  }

   /**
   * If true, reserves are refunded when an order is refunded.  This aids in profitability reporting.
   * @return reserveRefunded
  **/
  @ApiModelProperty(value = "If true, reserves are refunded when an order is refunded.  This aids in profitability reporting.")
  public Boolean isReserveRefunded() {
    return reserveRefunded;
  }

  public void setReserveRefunded(Boolean reserveRefunded) {
    this.reserveRefunded = reserveRefunded;
  }

  public RotatingTransactionGateway reservesReleasedThrough(String reservesReleasedThrough) {
    this.reservesReleasedThrough = reservesReleasedThrough;
    return this;
  }

   /**
   * An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.
   * @return reservesReleasedThrough
  **/
  @ApiModelProperty(value = "An optional date specifying the date up to which your gateway has released all reserve funds.  This aids in profitability reporting.")
  public String getReservesReleasedThrough() {
    return reservesReleasedThrough;
  }

  public void setReservesReleasedThrough(String reservesReleasedThrough) {
    this.reservesReleasedThrough = reservesReleasedThrough;
  }

  public RotatingTransactionGateway rotatingTransactionGatewayOid(Integer rotatingTransactionGatewayOid) {
    this.rotatingTransactionGatewayOid = rotatingTransactionGatewayOid;
    return this;
  }

   /**
   * Internal identifier used to store and retrieve this gateway information
   * @return rotatingTransactionGatewayOid
  **/
  @ApiModelProperty(value = "Internal identifier used to store and retrieve this gateway information")
  public Integer getRotatingTransactionGatewayOid() {
    return rotatingTransactionGatewayOid;
  }

  public void setRotatingTransactionGatewayOid(Integer rotatingTransactionGatewayOid) {
    this.rotatingTransactionGatewayOid = rotatingTransactionGatewayOid;
  }

  public RotatingTransactionGateway selectedGatewayName(String selectedGatewayName) {
    this.selectedGatewayName = selectedGatewayName;
    return this;
  }

   /**
   * The name of the currently selected transaction gateway used by this rotating gateway
   * @return selectedGatewayName
  **/
  @ApiModelProperty(value = "The name of the currently selected transaction gateway used by this rotating gateway")
  public String getSelectedGatewayName() {
    return selectedGatewayName;
  }

  public void setSelectedGatewayName(String selectedGatewayName) {
    this.selectedGatewayName = selectedGatewayName;
  }

  public RotatingTransactionGateway showCascadeCodes(Boolean showCascadeCodes) {
    this.showCascadeCodes = showCascadeCodes;
    return this;
  }

   /**
   * A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown
   * @return showCascadeCodes
  **/
  @ApiModelProperty(value = "A boolean used by the builtin UltraCart UI to determine if cascading rtg codes should be shown")
  public Boolean isShowCascadeCodes() {
    return showCascadeCodes;
  }

  public void setShowCascadeCodes(Boolean showCascadeCodes) {
    this.showCascadeCodes = showCascadeCodes;
  }

  public RotatingTransactionGateway showMerchantAccountProfiles(Boolean showMerchantAccountProfiles) {
    this.showMerchantAccountProfiles = showMerchantAccountProfiles;
    return this;
  }

   /**
   * A flag to help the UltraCart UI to know whether to show merchant account profiles or not.
   * @return showMerchantAccountProfiles
  **/
  @ApiModelProperty(value = "A flag to help the UltraCart UI to know whether to show merchant account profiles or not.")
  public Boolean isShowMerchantAccountProfiles() {
    return showMerchantAccountProfiles;
  }

  public void setShowMerchantAccountProfiles(Boolean showMerchantAccountProfiles) {
    this.showMerchantAccountProfiles = showMerchantAccountProfiles;
  }

  public RotatingTransactionGateway startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Optional field to specify an absolute date when this gateway should begin accepting transactions
   * @return startDate
  **/
  @ApiModelProperty(value = "Optional field to specify an absolute date when this gateway should begin accepting transactions")
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public RotatingTransactionGateway status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.
   * @return status
  **/
  @ApiModelProperty(value = "A field used to take a gateway offline without removing/deleting the configuration. Inactive marks the gateway as completely unusable.  Standby takes the gateway offline and will not be used unless all other active gateways fail.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public RotatingTransactionGateway themeRestrictions(List<RtgThemeRestriction> themeRestrictions) {
    this.themeRestrictions = themeRestrictions;
    return this;
  }

  public RotatingTransactionGateway addThemeRestrictionsItem(RtgThemeRestriction themeRestrictionsItem) {
    if (this.themeRestrictions == null) {
      this.themeRestrictions = new ArrayList<RtgThemeRestriction>();
    }
    this.themeRestrictions.add(themeRestrictionsItem);
    return this;
  }

   /**
   * Optional restrictions by theme/storefront
   * @return themeRestrictions
  **/
  @ApiModelProperty(value = "Optional restrictions by theme/storefront")
  public List<RtgThemeRestriction> getThemeRestrictions() {
    return themeRestrictions;
  }

  public void setThemeRestrictions(List<RtgThemeRestriction> themeRestrictions) {
    this.themeRestrictions = themeRestrictions;
  }

  public RotatingTransactionGateway trafficPercentage(BigDecimal trafficPercentage) {
    this.trafficPercentage = trafficPercentage;
    return this;
  }

   /**
   * Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway
   * @return trafficPercentage
  **/
  @ApiModelProperty(value = "Required field between 0 and 1 that dictates the percentage of traffic that should flow through this gateway")
  public BigDecimal getTrafficPercentage() {
    return trafficPercentage;
  }

  public void setTrafficPercentage(BigDecimal trafficPercentage) {
    this.trafficPercentage = trafficPercentage;
  }

  public RotatingTransactionGateway trialDailyAmount(Integer trialDailyAmount) {
    this.trialDailyAmount = trialDailyAmount;
    return this;
  }

   /**
   * If specified, limits the total daily count of trial orders
   * @return trialDailyAmount
  **/
  @ApiModelProperty(value = "If specified, limits the total daily count of trial orders")
  public Integer getTrialDailyAmount() {
    return trialDailyAmount;
  }

  public void setTrialDailyAmount(Integer trialDailyAmount) {
    this.trialDailyAmount = trialDailyAmount;
  }

  public RotatingTransactionGateway trialDailyLimit(Integer trialDailyLimit) {
    this.trialDailyLimit = trialDailyLimit;
    return this;
  }

   /**
   * If specified, limits the total daily dollar amount of trial orders
   * @return trialDailyLimit
  **/
  @ApiModelProperty(value = "If specified, limits the total daily dollar amount of trial orders")
  public Integer getTrialDailyLimit() {
    return trialDailyLimit;
  }

  public void setTrialDailyLimit(Integer trialDailyLimit) {
    this.trialDailyLimit = trialDailyLimit;
  }

  public RotatingTransactionGateway trialMonthlyAmount(Integer trialMonthlyAmount) {
    this.trialMonthlyAmount = trialMonthlyAmount;
    return this;
  }

   /**
   * If specified, limits the total month dollar amount of trial orders
   * @return trialMonthlyAmount
  **/
  @ApiModelProperty(value = "If specified, limits the total month dollar amount of trial orders")
  public Integer getTrialMonthlyAmount() {
    return trialMonthlyAmount;
  }

  public void setTrialMonthlyAmount(Integer trialMonthlyAmount) {
    this.trialMonthlyAmount = trialMonthlyAmount;
  }

  public RotatingTransactionGateway trialMonthlyLimit(Integer trialMonthlyLimit) {
    this.trialMonthlyLimit = trialMonthlyLimit;
    return this;
  }

   /**
   * If specified, limits the total month count of trial orders
   * @return trialMonthlyLimit
  **/
  @ApiModelProperty(value = "If specified, limits the total month count of trial orders")
  public Integer getTrialMonthlyLimit() {
    return trialMonthlyLimit;
  }

  public void setTrialMonthlyLimit(Integer trialMonthlyLimit) {
    this.trialMonthlyLimit = trialMonthlyLimit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RotatingTransactionGateway rotatingTransactionGateway = (RotatingTransactionGateway) o;
    return Objects.equals(this.additionalNativeCurrencyCodes, rotatingTransactionGateway.additionalNativeCurrencyCodes) &&
        Objects.equals(this.autoOrderCancelUnlessResponseName, rotatingTransactionGateway.autoOrderCancelUnlessResponseName) &&
        Objects.equals(this.autoOrderCancelUnlessResponseValues, rotatingTransactionGateway.autoOrderCancelUnlessResponseValues) &&
        Objects.equals(this.baseCurrencyCode, rotatingTransactionGateway.baseCurrencyCode) &&
        Objects.equals(this.cascadeCode, rotatingTransactionGateway.cascadeCode) &&
        Objects.equals(this.cascadeCodes, rotatingTransactionGateway.cascadeCodes) &&
        Objects.equals(this.cascadeDailyAutoOrderCode, rotatingTransactionGateway.cascadeDailyAutoOrderCode) &&
        Objects.equals(this.chargeAppearsOnStatementAs, rotatingTransactionGateway.chargeAppearsOnStatementAs) &&
        Objects.equals(this.code, rotatingTransactionGateway.code) &&
        Objects.equals(this.currentDaily, rotatingTransactionGateway.currentDaily) &&
        Objects.equals(this.currentDailyAutoOrder, rotatingTransactionGateway.currentDailyAutoOrder) &&
        Objects.equals(this.currentMonthly, rotatingTransactionGateway.currentMonthly) &&
        Objects.equals(this.customerServiceEmail, rotatingTransactionGateway.customerServiceEmail) &&
        Objects.equals(this.customerServicePhone, rotatingTransactionGateway.customerServicePhone) &&
        Objects.equals(this.dayOfMonthRestrictions, rotatingTransactionGateway.dayOfMonthRestrictions) &&
        Objects.equals(this.dayOfWeekRestrictions, rotatingTransactionGateway.dayOfWeekRestrictions) &&
        Objects.equals(this.deactivateAfterFailures, rotatingTransactionGateway.deactivateAfterFailures) &&
        Objects.equals(this.endDate, rotatingTransactionGateway.endDate) &&
        Objects.equals(this.gateways, rotatingTransactionGateway.gateways) &&
        Objects.equals(this.maximumDaily, rotatingTransactionGateway.maximumDaily) &&
        Objects.equals(this.maximumDailyAutoOrder, rotatingTransactionGateway.maximumDailyAutoOrder) &&
        Objects.equals(this.maximumMonthly, rotatingTransactionGateway.maximumMonthly) &&
        Objects.equals(this.nextDailyAutoOrderReset, rotatingTransactionGateway.nextDailyAutoOrderReset) &&
        Objects.equals(this.nextDailyReset, rotatingTransactionGateway.nextDailyReset) &&
        Objects.equals(this.nextMonthlyReset, rotatingTransactionGateway.nextMonthlyReset) &&
        Objects.equals(this.orderTotal, rotatingTransactionGateway.orderTotal) &&
        Objects.equals(this.orderTotalComparison, rotatingTransactionGateway.orderTotalComparison) &&
        Objects.equals(this.rebillAutoOrdersAgainstThisRtgCode, rotatingTransactionGateway.rebillAutoOrdersAgainstThisRtgCode) &&
        Objects.equals(this.reserveDays, rotatingTransactionGateway.reserveDays) &&
        Objects.equals(this.reservePercentage, rotatingTransactionGateway.reservePercentage) &&
        Objects.equals(this.reserveRefunded, rotatingTransactionGateway.reserveRefunded) &&
        Objects.equals(this.reservesReleasedThrough, rotatingTransactionGateway.reservesReleasedThrough) &&
        Objects.equals(this.rotatingTransactionGatewayOid, rotatingTransactionGateway.rotatingTransactionGatewayOid) &&
        Objects.equals(this.selectedGatewayName, rotatingTransactionGateway.selectedGatewayName) &&
        Objects.equals(this.showCascadeCodes, rotatingTransactionGateway.showCascadeCodes) &&
        Objects.equals(this.showMerchantAccountProfiles, rotatingTransactionGateway.showMerchantAccountProfiles) &&
        Objects.equals(this.startDate, rotatingTransactionGateway.startDate) &&
        Objects.equals(this.status, rotatingTransactionGateway.status) &&
        Objects.equals(this.themeRestrictions, rotatingTransactionGateway.themeRestrictions) &&
        Objects.equals(this.trafficPercentage, rotatingTransactionGateway.trafficPercentage) &&
        Objects.equals(this.trialDailyAmount, rotatingTransactionGateway.trialDailyAmount) &&
        Objects.equals(this.trialDailyLimit, rotatingTransactionGateway.trialDailyLimit) &&
        Objects.equals(this.trialMonthlyAmount, rotatingTransactionGateway.trialMonthlyAmount) &&
        Objects.equals(this.trialMonthlyLimit, rotatingTransactionGateway.trialMonthlyLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalNativeCurrencyCodes, autoOrderCancelUnlessResponseName, autoOrderCancelUnlessResponseValues, baseCurrencyCode, cascadeCode, cascadeCodes, cascadeDailyAutoOrderCode, chargeAppearsOnStatementAs, code, currentDaily, currentDailyAutoOrder, currentMonthly, customerServiceEmail, customerServicePhone, dayOfMonthRestrictions, dayOfWeekRestrictions, deactivateAfterFailures, endDate, gateways, maximumDaily, maximumDailyAutoOrder, maximumMonthly, nextDailyAutoOrderReset, nextDailyReset, nextMonthlyReset, orderTotal, orderTotalComparison, rebillAutoOrdersAgainstThisRtgCode, reserveDays, reservePercentage, reserveRefunded, reservesReleasedThrough, rotatingTransactionGatewayOid, selectedGatewayName, showCascadeCodes, showMerchantAccountProfiles, startDate, status, themeRestrictions, trafficPercentage, trialDailyAmount, trialDailyLimit, trialMonthlyAmount, trialMonthlyLimit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RotatingTransactionGateway {\n");
    
    sb.append("    additionalNativeCurrencyCodes: ").append(toIndentedString(additionalNativeCurrencyCodes)).append("\n");
    sb.append("    autoOrderCancelUnlessResponseName: ").append(toIndentedString(autoOrderCancelUnlessResponseName)).append("\n");
    sb.append("    autoOrderCancelUnlessResponseValues: ").append(toIndentedString(autoOrderCancelUnlessResponseValues)).append("\n");
    sb.append("    baseCurrencyCode: ").append(toIndentedString(baseCurrencyCode)).append("\n");
    sb.append("    cascadeCode: ").append(toIndentedString(cascadeCode)).append("\n");
    sb.append("    cascadeCodes: ").append(toIndentedString(cascadeCodes)).append("\n");
    sb.append("    cascadeDailyAutoOrderCode: ").append(toIndentedString(cascadeDailyAutoOrderCode)).append("\n");
    sb.append("    chargeAppearsOnStatementAs: ").append(toIndentedString(chargeAppearsOnStatementAs)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    currentDaily: ").append(toIndentedString(currentDaily)).append("\n");
    sb.append("    currentDailyAutoOrder: ").append(toIndentedString(currentDailyAutoOrder)).append("\n");
    sb.append("    currentMonthly: ").append(toIndentedString(currentMonthly)).append("\n");
    sb.append("    customerServiceEmail: ").append(toIndentedString(customerServiceEmail)).append("\n");
    sb.append("    customerServicePhone: ").append(toIndentedString(customerServicePhone)).append("\n");
    sb.append("    dayOfMonthRestrictions: ").append(toIndentedString(dayOfMonthRestrictions)).append("\n");
    sb.append("    dayOfWeekRestrictions: ").append(toIndentedString(dayOfWeekRestrictions)).append("\n");
    sb.append("    deactivateAfterFailures: ").append(toIndentedString(deactivateAfterFailures)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("    maximumDaily: ").append(toIndentedString(maximumDaily)).append("\n");
    sb.append("    maximumDailyAutoOrder: ").append(toIndentedString(maximumDailyAutoOrder)).append("\n");
    sb.append("    maximumMonthly: ").append(toIndentedString(maximumMonthly)).append("\n");
    sb.append("    nextDailyAutoOrderReset: ").append(toIndentedString(nextDailyAutoOrderReset)).append("\n");
    sb.append("    nextDailyReset: ").append(toIndentedString(nextDailyReset)).append("\n");
    sb.append("    nextMonthlyReset: ").append(toIndentedString(nextMonthlyReset)).append("\n");
    sb.append("    orderTotal: ").append(toIndentedString(orderTotal)).append("\n");
    sb.append("    orderTotalComparison: ").append(toIndentedString(orderTotalComparison)).append("\n");
    sb.append("    rebillAutoOrdersAgainstThisRtgCode: ").append(toIndentedString(rebillAutoOrdersAgainstThisRtgCode)).append("\n");
    sb.append("    reserveDays: ").append(toIndentedString(reserveDays)).append("\n");
    sb.append("    reservePercentage: ").append(toIndentedString(reservePercentage)).append("\n");
    sb.append("    reserveRefunded: ").append(toIndentedString(reserveRefunded)).append("\n");
    sb.append("    reservesReleasedThrough: ").append(toIndentedString(reservesReleasedThrough)).append("\n");
    sb.append("    rotatingTransactionGatewayOid: ").append(toIndentedString(rotatingTransactionGatewayOid)).append("\n");
    sb.append("    selectedGatewayName: ").append(toIndentedString(selectedGatewayName)).append("\n");
    sb.append("    showCascadeCodes: ").append(toIndentedString(showCascadeCodes)).append("\n");
    sb.append("    showMerchantAccountProfiles: ").append(toIndentedString(showMerchantAccountProfiles)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    themeRestrictions: ").append(toIndentedString(themeRestrictions)).append("\n");
    sb.append("    trafficPercentage: ").append(toIndentedString(trafficPercentage)).append("\n");
    sb.append("    trialDailyAmount: ").append(toIndentedString(trialDailyAmount)).append("\n");
    sb.append("    trialDailyLimit: ").append(toIndentedString(trialDailyLimit)).append("\n");
    sb.append("    trialMonthlyAmount: ").append(toIndentedString(trialMonthlyAmount)).append("\n");
    sb.append("    trialMonthlyLimit: ").append(toIndentedString(trialMonthlyLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


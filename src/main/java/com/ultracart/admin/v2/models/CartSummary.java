/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Currency;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * CartSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-28T09:32:40.339-05:00[America/Indianapolis]")
public class CartSummary {
  public static final String SERIALIZED_NAME_ARBITRARY_SHIPPING_HANDLING_TOTAL = "arbitrary_shipping_handling_total";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_SHIPPING_HANDLING_TOTAL)
  private Currency arbitraryShippingHandlingTotal;

  public static final String SERIALIZED_NAME_ARBITRARY_TAX = "arbitrary_tax";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAX)
  private Currency arbitraryTax;

  public static final String SERIALIZED_NAME_ARBITRARY_TAX_RATE = "arbitrary_tax_rate";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAX_RATE)
  private Currency arbitraryTaxRate;

  public static final String SERIALIZED_NAME_ARBITRARY_TAXABLE_SUBTOTAL = "arbitrary_taxable_subtotal";
  @SerializedName(SERIALIZED_NAME_ARBITRARY_TAXABLE_SUBTOTAL)
  private Currency arbitraryTaxableSubtotal;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_AMOUNT = "health_benefit_card_amount";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_AMOUNT)
  private Currency healthBenefitCardAmount;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_BALANCE = "health_benefit_card_balance";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_BALANCE)
  private Currency healthBenefitCardBalance;

  public static final String SERIALIZED_NAME_HEALTH_BENEFIT_CARD_REQUIREMENTS = "health_benefit_card_requirements";
  @SerializedName(SERIALIZED_NAME_HEALTH_BENEFIT_CARD_REQUIREMENTS)
  private String healthBenefitCardRequirements;

  public static final String SERIALIZED_NAME_INTERNAL_GIFT_CERTIFICATE_AMOUNT = "internal_gift_certificate_amount";
  @SerializedName(SERIALIZED_NAME_INTERNAL_GIFT_CERTIFICATE_AMOUNT)
  private Currency internalGiftCertificateAmount;

  public static final String SERIALIZED_NAME_SHIPPING_HANDLING = "shipping_handling";
  @SerializedName(SERIALIZED_NAME_SHIPPING_HANDLING)
  private Currency shippingHandling;

  public static final String SERIALIZED_NAME_SHIPPING_HANDLING_DISCOUNT = "shipping_handling_discount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_HANDLING_DISCOUNT)
  private Currency shippingHandlingDiscount;

  public static final String SERIALIZED_NAME_SHIPPING_HANDLING_WITH_DISCOUNT = "shipping_handling_with_discount";
  @SerializedName(SERIALIZED_NAME_SHIPPING_HANDLING_WITH_DISCOUNT)
  private Currency shippingHandlingWithDiscount;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Currency subtotal;

  public static final String SERIALIZED_NAME_SUBTOTAL_DISCOUNT = "subtotal_discount";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_DISCOUNT)
  private Currency subtotalDiscount;

  public static final String SERIALIZED_NAME_SUBTOTAL_WITH_DISCOUNT = "subtotal_with_discount";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_WITH_DISCOUNT)
  private Currency subtotalWithDiscount;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Currency surcharge;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Currency tax;

  public static final String SERIALIZED_NAME_TAXABLE_SUBTOTAL = "taxable_subtotal";
  @SerializedName(SERIALIZED_NAME_TAXABLE_SUBTOTAL)
  private Currency taxableSubtotal;

  public static final String SERIALIZED_NAME_TAXABLE_SUBTOTAL_DISCOUNT = "taxable_subtotal_discount";
  @SerializedName(SERIALIZED_NAME_TAXABLE_SUBTOTAL_DISCOUNT)
  private Currency taxableSubtotalDiscount;

  public static final String SERIALIZED_NAME_TAXABLE_SUBTOTAL_WITH_DISCOUNT = "taxable_subtotal_with_discount";
  @SerializedName(SERIALIZED_NAME_TAXABLE_SUBTOTAL_WITH_DISCOUNT)
  private Currency taxableSubtotalWithDiscount;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Currency total;

  public CartSummary() { 
  }

  public CartSummary arbitraryShippingHandlingTotal(Currency arbitraryShippingHandlingTotal) {
    
    this.arbitraryShippingHandlingTotal = arbitraryShippingHandlingTotal;
    return this;
  }

   /**
   * Get arbitraryShippingHandlingTotal
   * @return arbitraryShippingHandlingTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getArbitraryShippingHandlingTotal() {
    return arbitraryShippingHandlingTotal;
  }


  public void setArbitraryShippingHandlingTotal(Currency arbitraryShippingHandlingTotal) {
    this.arbitraryShippingHandlingTotal = arbitraryShippingHandlingTotal;
  }


  public CartSummary arbitraryTax(Currency arbitraryTax) {
    
    this.arbitraryTax = arbitraryTax;
    return this;
  }

   /**
   * Get arbitraryTax
   * @return arbitraryTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getArbitraryTax() {
    return arbitraryTax;
  }


  public void setArbitraryTax(Currency arbitraryTax) {
    this.arbitraryTax = arbitraryTax;
  }


  public CartSummary arbitraryTaxRate(Currency arbitraryTaxRate) {
    
    this.arbitraryTaxRate = arbitraryTaxRate;
    return this;
  }

   /**
   * Get arbitraryTaxRate
   * @return arbitraryTaxRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getArbitraryTaxRate() {
    return arbitraryTaxRate;
  }


  public void setArbitraryTaxRate(Currency arbitraryTaxRate) {
    this.arbitraryTaxRate = arbitraryTaxRate;
  }


  public CartSummary arbitraryTaxableSubtotal(Currency arbitraryTaxableSubtotal) {
    
    this.arbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
    return this;
  }

   /**
   * Get arbitraryTaxableSubtotal
   * @return arbitraryTaxableSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getArbitraryTaxableSubtotal() {
    return arbitraryTaxableSubtotal;
  }


  public void setArbitraryTaxableSubtotal(Currency arbitraryTaxableSubtotal) {
    this.arbitraryTaxableSubtotal = arbitraryTaxableSubtotal;
  }


  public CartSummary healthBenefitCardAmount(Currency healthBenefitCardAmount) {
    
    this.healthBenefitCardAmount = healthBenefitCardAmount;
    return this;
  }

   /**
   * Get healthBenefitCardAmount
   * @return healthBenefitCardAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getHealthBenefitCardAmount() {
    return healthBenefitCardAmount;
  }


  public void setHealthBenefitCardAmount(Currency healthBenefitCardAmount) {
    this.healthBenefitCardAmount = healthBenefitCardAmount;
  }


  public CartSummary healthBenefitCardBalance(Currency healthBenefitCardBalance) {
    
    this.healthBenefitCardBalance = healthBenefitCardBalance;
    return this;
  }

   /**
   * Get healthBenefitCardBalance
   * @return healthBenefitCardBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getHealthBenefitCardBalance() {
    return healthBenefitCardBalance;
  }


  public void setHealthBenefitCardBalance(Currency healthBenefitCardBalance) {
    this.healthBenefitCardBalance = healthBenefitCardBalance;
  }


  public CartSummary healthBenefitCardRequirements(String healthBenefitCardRequirements) {
    
    this.healthBenefitCardRequirements = healthBenefitCardRequirements;
    return this;
  }

   /**
   * Health benefit card requirements
   * @return healthBenefitCardRequirements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health benefit card requirements")

  public String getHealthBenefitCardRequirements() {
    return healthBenefitCardRequirements;
  }


  public void setHealthBenefitCardRequirements(String healthBenefitCardRequirements) {
    this.healthBenefitCardRequirements = healthBenefitCardRequirements;
  }


  public CartSummary internalGiftCertificateAmount(Currency internalGiftCertificateAmount) {
    
    this.internalGiftCertificateAmount = internalGiftCertificateAmount;
    return this;
  }

   /**
   * Get internalGiftCertificateAmount
   * @return internalGiftCertificateAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getInternalGiftCertificateAmount() {
    return internalGiftCertificateAmount;
  }


  public void setInternalGiftCertificateAmount(Currency internalGiftCertificateAmount) {
    this.internalGiftCertificateAmount = internalGiftCertificateAmount;
  }


  public CartSummary shippingHandling(Currency shippingHandling) {
    
    this.shippingHandling = shippingHandling;
    return this;
  }

   /**
   * Get shippingHandling
   * @return shippingHandling
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getShippingHandling() {
    return shippingHandling;
  }


  public void setShippingHandling(Currency shippingHandling) {
    this.shippingHandling = shippingHandling;
  }


  public CartSummary shippingHandlingDiscount(Currency shippingHandlingDiscount) {
    
    this.shippingHandlingDiscount = shippingHandlingDiscount;
    return this;
  }

   /**
   * Get shippingHandlingDiscount
   * @return shippingHandlingDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getShippingHandlingDiscount() {
    return shippingHandlingDiscount;
  }


  public void setShippingHandlingDiscount(Currency shippingHandlingDiscount) {
    this.shippingHandlingDiscount = shippingHandlingDiscount;
  }


  public CartSummary shippingHandlingWithDiscount(Currency shippingHandlingWithDiscount) {
    
    this.shippingHandlingWithDiscount = shippingHandlingWithDiscount;
    return this;
  }

   /**
   * Get shippingHandlingWithDiscount
   * @return shippingHandlingWithDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getShippingHandlingWithDiscount() {
    return shippingHandlingWithDiscount;
  }


  public void setShippingHandlingWithDiscount(Currency shippingHandlingWithDiscount) {
    this.shippingHandlingWithDiscount = shippingHandlingWithDiscount;
  }


  public CartSummary subtotal(Currency subtotal) {
    
    this.subtotal = subtotal;
    return this;
  }

   /**
   * Get subtotal
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(Currency subtotal) {
    this.subtotal = subtotal;
  }


  public CartSummary subtotalDiscount(Currency subtotalDiscount) {
    
    this.subtotalDiscount = subtotalDiscount;
    return this;
  }

   /**
   * Get subtotalDiscount
   * @return subtotalDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getSubtotalDiscount() {
    return subtotalDiscount;
  }


  public void setSubtotalDiscount(Currency subtotalDiscount) {
    this.subtotalDiscount = subtotalDiscount;
  }


  public CartSummary subtotalWithDiscount(Currency subtotalWithDiscount) {
    
    this.subtotalWithDiscount = subtotalWithDiscount;
    return this;
  }

   /**
   * Get subtotalWithDiscount
   * @return subtotalWithDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getSubtotalWithDiscount() {
    return subtotalWithDiscount;
  }


  public void setSubtotalWithDiscount(Currency subtotalWithDiscount) {
    this.subtotalWithDiscount = subtotalWithDiscount;
  }


  public CartSummary surcharge(Currency surcharge) {
    
    this.surcharge = surcharge;
    return this;
  }

   /**
   * Get surcharge
   * @return surcharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getSurcharge() {
    return surcharge;
  }


  public void setSurcharge(Currency surcharge) {
    this.surcharge = surcharge;
  }


  public CartSummary tax(Currency tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTax() {
    return tax;
  }


  public void setTax(Currency tax) {
    this.tax = tax;
  }


  public CartSummary taxableSubtotal(Currency taxableSubtotal) {
    
    this.taxableSubtotal = taxableSubtotal;
    return this;
  }

   /**
   * Get taxableSubtotal
   * @return taxableSubtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTaxableSubtotal() {
    return taxableSubtotal;
  }


  public void setTaxableSubtotal(Currency taxableSubtotal) {
    this.taxableSubtotal = taxableSubtotal;
  }


  public CartSummary taxableSubtotalDiscount(Currency taxableSubtotalDiscount) {
    
    this.taxableSubtotalDiscount = taxableSubtotalDiscount;
    return this;
  }

   /**
   * Get taxableSubtotalDiscount
   * @return taxableSubtotalDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTaxableSubtotalDiscount() {
    return taxableSubtotalDiscount;
  }


  public void setTaxableSubtotalDiscount(Currency taxableSubtotalDiscount) {
    this.taxableSubtotalDiscount = taxableSubtotalDiscount;
  }


  public CartSummary taxableSubtotalWithDiscount(Currency taxableSubtotalWithDiscount) {
    
    this.taxableSubtotalWithDiscount = taxableSubtotalWithDiscount;
    return this;
  }

   /**
   * Get taxableSubtotalWithDiscount
   * @return taxableSubtotalWithDiscount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTaxableSubtotalWithDiscount() {
    return taxableSubtotalWithDiscount;
  }


  public void setTaxableSubtotalWithDiscount(Currency taxableSubtotalWithDiscount) {
    this.taxableSubtotalWithDiscount = taxableSubtotalWithDiscount;
  }


  public CartSummary total(Currency total) {
    
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Currency getTotal() {
    return total;
  }


  public void setTotal(Currency total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartSummary cartSummary = (CartSummary) o;
    return Objects.equals(this.arbitraryShippingHandlingTotal, cartSummary.arbitraryShippingHandlingTotal) &&
        Objects.equals(this.arbitraryTax, cartSummary.arbitraryTax) &&
        Objects.equals(this.arbitraryTaxRate, cartSummary.arbitraryTaxRate) &&
        Objects.equals(this.arbitraryTaxableSubtotal, cartSummary.arbitraryTaxableSubtotal) &&
        Objects.equals(this.healthBenefitCardAmount, cartSummary.healthBenefitCardAmount) &&
        Objects.equals(this.healthBenefitCardBalance, cartSummary.healthBenefitCardBalance) &&
        Objects.equals(this.healthBenefitCardRequirements, cartSummary.healthBenefitCardRequirements) &&
        Objects.equals(this.internalGiftCertificateAmount, cartSummary.internalGiftCertificateAmount) &&
        Objects.equals(this.shippingHandling, cartSummary.shippingHandling) &&
        Objects.equals(this.shippingHandlingDiscount, cartSummary.shippingHandlingDiscount) &&
        Objects.equals(this.shippingHandlingWithDiscount, cartSummary.shippingHandlingWithDiscount) &&
        Objects.equals(this.subtotal, cartSummary.subtotal) &&
        Objects.equals(this.subtotalDiscount, cartSummary.subtotalDiscount) &&
        Objects.equals(this.subtotalWithDiscount, cartSummary.subtotalWithDiscount) &&
        Objects.equals(this.surcharge, cartSummary.surcharge) &&
        Objects.equals(this.tax, cartSummary.tax) &&
        Objects.equals(this.taxableSubtotal, cartSummary.taxableSubtotal) &&
        Objects.equals(this.taxableSubtotalDiscount, cartSummary.taxableSubtotalDiscount) &&
        Objects.equals(this.taxableSubtotalWithDiscount, cartSummary.taxableSubtotalWithDiscount) &&
        Objects.equals(this.total, cartSummary.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arbitraryShippingHandlingTotal, arbitraryTax, arbitraryTaxRate, arbitraryTaxableSubtotal, healthBenefitCardAmount, healthBenefitCardBalance, healthBenefitCardRequirements, internalGiftCertificateAmount, shippingHandling, shippingHandlingDiscount, shippingHandlingWithDiscount, subtotal, subtotalDiscount, subtotalWithDiscount, surcharge, tax, taxableSubtotal, taxableSubtotalDiscount, taxableSubtotalWithDiscount, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartSummary {\n");
    sb.append("    arbitraryShippingHandlingTotal: ").append(toIndentedString(arbitraryShippingHandlingTotal)).append("\n");
    sb.append("    arbitraryTax: ").append(toIndentedString(arbitraryTax)).append("\n");
    sb.append("    arbitraryTaxRate: ").append(toIndentedString(arbitraryTaxRate)).append("\n");
    sb.append("    arbitraryTaxableSubtotal: ").append(toIndentedString(arbitraryTaxableSubtotal)).append("\n");
    sb.append("    healthBenefitCardAmount: ").append(toIndentedString(healthBenefitCardAmount)).append("\n");
    sb.append("    healthBenefitCardBalance: ").append(toIndentedString(healthBenefitCardBalance)).append("\n");
    sb.append("    healthBenefitCardRequirements: ").append(toIndentedString(healthBenefitCardRequirements)).append("\n");
    sb.append("    internalGiftCertificateAmount: ").append(toIndentedString(internalGiftCertificateAmount)).append("\n");
    sb.append("    shippingHandling: ").append(toIndentedString(shippingHandling)).append("\n");
    sb.append("    shippingHandlingDiscount: ").append(toIndentedString(shippingHandlingDiscount)).append("\n");
    sb.append("    shippingHandlingWithDiscount: ").append(toIndentedString(shippingHandlingWithDiscount)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    subtotalDiscount: ").append(toIndentedString(subtotalDiscount)).append("\n");
    sb.append("    subtotalWithDiscount: ").append(toIndentedString(subtotalWithDiscount)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxableSubtotal: ").append(toIndentedString(taxableSubtotal)).append("\n");
    sb.append("    taxableSubtotalDiscount: ").append(toIndentedString(taxableSubtotalDiscount)).append("\n");
    sb.append("    taxableSubtotalWithDiscount: ").append(toIndentedString(taxableSubtotalWithDiscount)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arbitrary_shipping_handling_total");
    openapiFields.add("arbitrary_tax");
    openapiFields.add("arbitrary_tax_rate");
    openapiFields.add("arbitrary_taxable_subtotal");
    openapiFields.add("health_benefit_card_amount");
    openapiFields.add("health_benefit_card_balance");
    openapiFields.add("health_benefit_card_requirements");
    openapiFields.add("internal_gift_certificate_amount");
    openapiFields.add("shipping_handling");
    openapiFields.add("shipping_handling_discount");
    openapiFields.add("shipping_handling_with_discount");
    openapiFields.add("subtotal");
    openapiFields.add("subtotal_discount");
    openapiFields.add("subtotal_with_discount");
    openapiFields.add("surcharge");
    openapiFields.add("tax");
    openapiFields.add("taxable_subtotal");
    openapiFields.add("taxable_subtotal_discount");
    openapiFields.add("taxable_subtotal_with_discount");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CartSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CartSummary.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartSummary is not found in the empty JSON string", CartSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CartSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartSummary` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `arbitrary_shipping_handling_total`
      if (jsonObj.getAsJsonObject("arbitrary_shipping_handling_total") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("arbitrary_shipping_handling_total"));
      }
      // validate the optional field `arbitrary_tax`
      if (jsonObj.getAsJsonObject("arbitrary_tax") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("arbitrary_tax"));
      }
      // validate the optional field `arbitrary_tax_rate`
      if (jsonObj.getAsJsonObject("arbitrary_tax_rate") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("arbitrary_tax_rate"));
      }
      // validate the optional field `arbitrary_taxable_subtotal`
      if (jsonObj.getAsJsonObject("arbitrary_taxable_subtotal") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("arbitrary_taxable_subtotal"));
      }
      // validate the optional field `health_benefit_card_amount`
      if (jsonObj.getAsJsonObject("health_benefit_card_amount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("health_benefit_card_amount"));
      }
      // validate the optional field `health_benefit_card_balance`
      if (jsonObj.getAsJsonObject("health_benefit_card_balance") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("health_benefit_card_balance"));
      }
      if (jsonObj.get("health_benefit_card_requirements") != null && !jsonObj.get("health_benefit_card_requirements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_benefit_card_requirements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_benefit_card_requirements").toString()));
      }
      // validate the optional field `internal_gift_certificate_amount`
      if (jsonObj.getAsJsonObject("internal_gift_certificate_amount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("internal_gift_certificate_amount"));
      }
      // validate the optional field `shipping_handling`
      if (jsonObj.getAsJsonObject("shipping_handling") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("shipping_handling"));
      }
      // validate the optional field `shipping_handling_discount`
      if (jsonObj.getAsJsonObject("shipping_handling_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("shipping_handling_discount"));
      }
      // validate the optional field `shipping_handling_with_discount`
      if (jsonObj.getAsJsonObject("shipping_handling_with_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("shipping_handling_with_discount"));
      }
      // validate the optional field `subtotal`
      if (jsonObj.getAsJsonObject("subtotal") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("subtotal"));
      }
      // validate the optional field `subtotal_discount`
      if (jsonObj.getAsJsonObject("subtotal_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("subtotal_discount"));
      }
      // validate the optional field `subtotal_with_discount`
      if (jsonObj.getAsJsonObject("subtotal_with_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("subtotal_with_discount"));
      }
      // validate the optional field `surcharge`
      if (jsonObj.getAsJsonObject("surcharge") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("surcharge"));
      }
      // validate the optional field `tax`
      if (jsonObj.getAsJsonObject("tax") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("tax"));
      }
      // validate the optional field `taxable_subtotal`
      if (jsonObj.getAsJsonObject("taxable_subtotal") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("taxable_subtotal"));
      }
      // validate the optional field `taxable_subtotal_discount`
      if (jsonObj.getAsJsonObject("taxable_subtotal_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("taxable_subtotal_discount"));
      }
      // validate the optional field `taxable_subtotal_with_discount`
      if (jsonObj.getAsJsonObject("taxable_subtotal_with_discount") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("taxable_subtotal_with_discount"));
      }
      // validate the optional field `total`
      if (jsonObj.getAsJsonObject("total") != null) {
        Currency.validateJsonObject(jsonObj.getAsJsonObject("total"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<CartSummary>() {
           @Override
           public void write(JsonWriter out, CartSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CartSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CartSummary
  * @throws IOException if the JSON string is invalid with respect to CartSummary
  */
  public static CartSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartSummary.class);
  }

 /**
  * Convert an instance of CartSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.WebhookEventSubscription;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WebhookEventCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:50:22.156-04:00[America/Indianapolis]")
public class WebhookEventCategory {
  public static final String SERIALIZED_NAME_ANY_SUBSCRIBED = "any_subscribed";
  @SerializedName(SERIALIZED_NAME_ANY_SUBSCRIBED)
  private Boolean anySubscribed;

  public static final String SERIALIZED_NAME_AVAILABLE_EXPANSIONS = "available_expansions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_EXPANSIONS)
  private List<String> availableExpansions = null;

  public static final String SERIALIZED_NAME_EVENT_CATEGORY = "event_category";
  @SerializedName(SERIALIZED_NAME_EVENT_CATEGORY)
  private String eventCategory;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<WebhookEventSubscription> events = null;

  public static final String SERIALIZED_NAME_SUBSCRIBED = "subscribed";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED)
  private Boolean subscribed;

  public WebhookEventCategory() { 
  }

  public WebhookEventCategory anySubscribed(Boolean anySubscribed) {
    
    this.anySubscribed = anySubscribed;
    return this;
  }

   /**
   * True if any events are subscribed to.
   * @return anySubscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if any events are subscribed to.")

  public Boolean getAnySubscribed() {
    return anySubscribed;
  }


  public void setAnySubscribed(Boolean anySubscribed) {
    this.anySubscribed = anySubscribed;
  }


  public WebhookEventCategory availableExpansions(List<String> availableExpansions) {
    
    this.availableExpansions = availableExpansions;
    return this;
  }

  public WebhookEventCategory addAvailableExpansionsItem(String availableExpansionsItem) {
    if (this.availableExpansions == null) {
      this.availableExpansions = new ArrayList<>();
    }
    this.availableExpansions.add(availableExpansionsItem);
    return this;
  }

   /**
   * Array of available expansion constants
   * @return availableExpansions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of available expansion constants")

  public List<String> getAvailableExpansions() {
    return availableExpansions;
  }


  public void setAvailableExpansions(List<String> availableExpansions) {
    this.availableExpansions = availableExpansions;
  }


  public WebhookEventCategory eventCategory(String eventCategory) {
    
    this.eventCategory = eventCategory;
    return this;
  }

   /**
   * Name of the event category
   * @return eventCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the event category")

  public String getEventCategory() {
    return eventCategory;
  }


  public void setEventCategory(String eventCategory) {
    this.eventCategory = eventCategory;
  }


  public WebhookEventCategory events(List<WebhookEventSubscription> events) {
    
    this.events = events;
    return this;
  }

  public WebhookEventCategory addEventsItem(WebhookEventSubscription eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * The events within the category.  Individual subscription flags contained within the child object.
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The events within the category.  Individual subscription flags contained within the child object.")

  public List<WebhookEventSubscription> getEvents() {
    return events;
  }


  public void setEvents(List<WebhookEventSubscription> events) {
    this.events = events;
  }


  public WebhookEventCategory subscribed(Boolean subscribed) {
    
    this.subscribed = subscribed;
    return this;
  }

   /**
   * True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier.
   * @return subscribed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if all the events within this category are subscribed.  This is a convenience flag to make user interfaces easier.")

  public Boolean getSubscribed() {
    return subscribed;
  }


  public void setSubscribed(Boolean subscribed) {
    this.subscribed = subscribed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEventCategory webhookEventCategory = (WebhookEventCategory) o;
    return Objects.equals(this.anySubscribed, webhookEventCategory.anySubscribed) &&
        Objects.equals(this.availableExpansions, webhookEventCategory.availableExpansions) &&
        Objects.equals(this.eventCategory, webhookEventCategory.eventCategory) &&
        Objects.equals(this.events, webhookEventCategory.events) &&
        Objects.equals(this.subscribed, webhookEventCategory.subscribed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anySubscribed, availableExpansions, eventCategory, events, subscribed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEventCategory {\n");
    sb.append("    anySubscribed: ").append(toIndentedString(anySubscribed)).append("\n");
    sb.append("    availableExpansions: ").append(toIndentedString(availableExpansions)).append("\n");
    sb.append("    eventCategory: ").append(toIndentedString(eventCategory)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    subscribed: ").append(toIndentedString(subscribed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("any_subscribed");
    openapiFields.add("available_expansions");
    openapiFields.add("event_category");
    openapiFields.add("events");
    openapiFields.add("subscribed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookEventCategory
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WebhookEventCategory.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEventCategory is not found in the empty JSON string", WebhookEventCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookEventCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEventCategory` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("available_expansions") != null && !jsonObj.get("available_expansions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_expansions` to be an array in the JSON string but got `%s`", jsonObj.get("available_expansions").toString()));
      }
      if (jsonObj.get("event_category") != null && !jsonObj.get("event_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_category").toString()));
      }
      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      if (jsonArrayevents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("events").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
        }

        // validate the optional field `events` (array)
        for (int i = 0; i < jsonArrayevents.size(); i++) {
          WebhookEventSubscription.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEventCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEventCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEventCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEventCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEventCategory>() {
           @Override
           public void write(JsonWriter out, WebhookEventCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEventCategory read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookEventCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookEventCategory
  * @throws IOException if the JSON string is invalid with respect to WebhookEventCategory
  */
  public static WebhookEventCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEventCategory.class);
  }

 /**
  * Convert an instance of WebhookEventCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


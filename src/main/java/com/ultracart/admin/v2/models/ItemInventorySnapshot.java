/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemInventorySnapshotDistributionCenter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemInventorySnapshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:21:52.957-04:00[America/Indianapolis]")
public class ItemInventorySnapshot {
  public static final String SERIALIZED_NAME_ALLOCATED_TO_PLACED_ORDERS = "allocated_to_placed_orders";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_TO_PLACED_ORDERS)
  private Integer allocatedToPlacedOrders;

  public static final String SERIALIZED_NAME_ALLOCATED_TO_SHOPPING_CARTS = "allocated_to_shopping_carts";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_TO_SHOPPING_CARTS)
  private Integer allocatedToShoppingCarts;

  public static final String SERIALIZED_NAME_AVAILABLE_TO_ALLOCATE = "available_to_allocate";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TO_ALLOCATE)
  private Integer availableToAllocate;

  public static final String SERIALIZED_NAME_DISTRIBUTION_CENTERS = "distribution_centers";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_CENTERS)
  private List<ItemInventorySnapshotDistributionCenter> distributionCenters = null;

  public static final String SERIALIZED_NAME_MERCHANT_ITEM_ID = "merchant_item_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ITEM_ID)
  private String merchantItemId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public ItemInventorySnapshot() { 
  }

  public ItemInventorySnapshot allocatedToPlacedOrders(Integer allocatedToPlacedOrders) {
    
    this.allocatedToPlacedOrders = allocatedToPlacedOrders;
    return this;
  }

   /**
   * Get allocatedToPlacedOrders
   * @return allocatedToPlacedOrders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAllocatedToPlacedOrders() {
    return allocatedToPlacedOrders;
  }


  public void setAllocatedToPlacedOrders(Integer allocatedToPlacedOrders) {
    this.allocatedToPlacedOrders = allocatedToPlacedOrders;
  }


  public ItemInventorySnapshot allocatedToShoppingCarts(Integer allocatedToShoppingCarts) {
    
    this.allocatedToShoppingCarts = allocatedToShoppingCarts;
    return this;
  }

   /**
   * Get allocatedToShoppingCarts
   * @return allocatedToShoppingCarts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAllocatedToShoppingCarts() {
    return allocatedToShoppingCarts;
  }


  public void setAllocatedToShoppingCarts(Integer allocatedToShoppingCarts) {
    this.allocatedToShoppingCarts = allocatedToShoppingCarts;
  }


  public ItemInventorySnapshot availableToAllocate(Integer availableToAllocate) {
    
    this.availableToAllocate = availableToAllocate;
    return this;
  }

   /**
   * Get availableToAllocate
   * @return availableToAllocate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAvailableToAllocate() {
    return availableToAllocate;
  }


  public void setAvailableToAllocate(Integer availableToAllocate) {
    this.availableToAllocate = availableToAllocate;
  }


  public ItemInventorySnapshot distributionCenters(List<ItemInventorySnapshotDistributionCenter> distributionCenters) {
    
    this.distributionCenters = distributionCenters;
    return this;
  }

  public ItemInventorySnapshot addDistributionCentersItem(ItemInventorySnapshotDistributionCenter distributionCentersItem) {
    if (this.distributionCenters == null) {
      this.distributionCenters = new ArrayList<>();
    }
    this.distributionCenters.add(distributionCentersItem);
    return this;
  }

   /**
   * Get distributionCenters
   * @return distributionCenters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ItemInventorySnapshotDistributionCenter> getDistributionCenters() {
    return distributionCenters;
  }


  public void setDistributionCenters(List<ItemInventorySnapshotDistributionCenter> distributionCenters) {
    this.distributionCenters = distributionCenters;
  }


  public ItemInventorySnapshot merchantItemId(String merchantItemId) {
    
    this.merchantItemId = merchantItemId;
    return this;
  }

   /**
   * Get merchantItemId
   * @return merchantItemId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchantItemId() {
    return merchantItemId;
  }


  public void setMerchantItemId(String merchantItemId) {
    this.merchantItemId = merchantItemId;
  }


  public ItemInventorySnapshot quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemInventorySnapshot itemInventorySnapshot = (ItemInventorySnapshot) o;
    return Objects.equals(this.allocatedToPlacedOrders, itemInventorySnapshot.allocatedToPlacedOrders) &&
        Objects.equals(this.allocatedToShoppingCarts, itemInventorySnapshot.allocatedToShoppingCarts) &&
        Objects.equals(this.availableToAllocate, itemInventorySnapshot.availableToAllocate) &&
        Objects.equals(this.distributionCenters, itemInventorySnapshot.distributionCenters) &&
        Objects.equals(this.merchantItemId, itemInventorySnapshot.merchantItemId) &&
        Objects.equals(this.quantity, itemInventorySnapshot.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedToPlacedOrders, allocatedToShoppingCarts, availableToAllocate, distributionCenters, merchantItemId, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemInventorySnapshot {\n");
    sb.append("    allocatedToPlacedOrders: ").append(toIndentedString(allocatedToPlacedOrders)).append("\n");
    sb.append("    allocatedToShoppingCarts: ").append(toIndentedString(allocatedToShoppingCarts)).append("\n");
    sb.append("    availableToAllocate: ").append(toIndentedString(availableToAllocate)).append("\n");
    sb.append("    distributionCenters: ").append(toIndentedString(distributionCenters)).append("\n");
    sb.append("    merchantItemId: ").append(toIndentedString(merchantItemId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocated_to_placed_orders");
    openapiFields.add("allocated_to_shopping_carts");
    openapiFields.add("available_to_allocate");
    openapiFields.add("distribution_centers");
    openapiFields.add("merchant_item_id");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemInventorySnapshot
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemInventorySnapshot.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemInventorySnapshot is not found in the empty JSON string", ItemInventorySnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemInventorySnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemInventorySnapshot` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraydistributionCenters = jsonObj.getAsJsonArray("distribution_centers");
      if (jsonArraydistributionCenters != null) {
        // ensure the json data is an array
        if (!jsonObj.get("distribution_centers").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `distribution_centers` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_centers").toString()));
        }

        // validate the optional field `distribution_centers` (array)
        for (int i = 0; i < jsonArraydistributionCenters.size(); i++) {
          ItemInventorySnapshotDistributionCenter.validateJsonObject(jsonArraydistributionCenters.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("merchant_item_id") != null && !jsonObj.get("merchant_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_item_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemInventorySnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemInventorySnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemInventorySnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemInventorySnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemInventorySnapshot>() {
           @Override
           public void write(JsonWriter out, ItemInventorySnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemInventorySnapshot read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemInventorySnapshot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemInventorySnapshot
  * @throws IOException if the JSON string is invalid with respect to ItemInventorySnapshot
  */
  public static ItemInventorySnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemInventorySnapshot.class);
  }

 /**
  * Convert an instance of ItemInventorySnapshot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


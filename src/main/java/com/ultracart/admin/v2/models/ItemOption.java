/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ItemOptionValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-25T14:50:22.156-04:00[America/Indianapolis]")
public class ItemOption {
  public static final String SERIALIZED_NAME_COST_IF_SPECIFIED = "cost_if_specified";
  @SerializedName(SERIALIZED_NAME_COST_IF_SPECIFIED)
  private BigDecimal costIfSpecified;

  public static final String SERIALIZED_NAME_COST_PER_LETTER = "cost_per_letter";
  @SerializedName(SERIALIZED_NAME_COST_PER_LETTER)
  private BigDecimal costPerLetter;

  public static final String SERIALIZED_NAME_COST_PER_LINE = "cost_per_line";
  @SerializedName(SERIALIZED_NAME_COST_PER_LINE)
  private BigDecimal costPerLine;

  public static final String SERIALIZED_NAME_IGNORE_IF_DEFAULT = "ignore_if_default";
  @SerializedName(SERIALIZED_NAME_IGNORE_IF_DEFAULT)
  private Boolean ignoreIfDefault;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LABEL_TRANSLATED_TEXT_INSTANCE_OID = "label_translated_text_instance_oid";
  @SerializedName(SERIALIZED_NAME_LABEL_TRANSLATED_TEXT_INSTANCE_OID)
  private Integer labelTranslatedTextInstanceOid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_TRANSLATED_TEXT_INSTANCE_OID = "name_translated_text_instance_oid";
  @SerializedName(SERIALIZED_NAME_NAME_TRANSLATED_TEXT_INSTANCE_OID)
  private Integer nameTranslatedTextInstanceOid;

  public static final String SERIALIZED_NAME_ONE_TIME_FEE = "one_time_fee";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_FEE)
  private Boolean oneTimeFee;

  public static final String SERIALIZED_NAME_OPTION_OID = "option_oid";
  @SerializedName(SERIALIZED_NAME_OPTION_OID)
  private Integer optionOid;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SYSTEM_OPTION = "system_option";
  @SerializedName(SERIALIZED_NAME_SYSTEM_OPTION)
  private Boolean systemOption;

  /**
   * Type of option
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DROPDOWN("dropdown"),
    
    FILE_ATTACHMENT("file attachment"),
    
    FIXED("fixed"),
    
    HIDDEN("hidden"),
    
    MULTILINE("multiline"),
    
    RADIO("radio"),
    
    SINGLE("single");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<ItemOptionValue> values = null;

  public ItemOption() { 
  }

  public ItemOption costIfSpecified(BigDecimal costIfSpecified) {
    
    this.costIfSpecified = costIfSpecified;
    return this;
  }

   /**
   * Cost if specified
   * @return costIfSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost if specified")

  public BigDecimal getCostIfSpecified() {
    return costIfSpecified;
  }


  public void setCostIfSpecified(BigDecimal costIfSpecified) {
    this.costIfSpecified = costIfSpecified;
  }


  public ItemOption costPerLetter(BigDecimal costPerLetter) {
    
    this.costPerLetter = costPerLetter;
    return this;
  }

   /**
   * Cost per letter
   * @return costPerLetter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost per letter")

  public BigDecimal getCostPerLetter() {
    return costPerLetter;
  }


  public void setCostPerLetter(BigDecimal costPerLetter) {
    this.costPerLetter = costPerLetter;
  }


  public ItemOption costPerLine(BigDecimal costPerLine) {
    
    this.costPerLine = costPerLine;
    return this;
  }

   /**
   * Cost per line
   * @return costPerLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cost per line")

  public BigDecimal getCostPerLine() {
    return costPerLine;
  }


  public void setCostPerLine(BigDecimal costPerLine) {
    this.costPerLine = costPerLine;
  }


  public ItemOption ignoreIfDefault(Boolean ignoreIfDefault) {
    
    this.ignoreIfDefault = ignoreIfDefault;
    return this;
  }

   /**
   * Ignore this option on the order if the default value is selected
   * @return ignoreIfDefault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ignore this option on the order if the default value is selected")

  public Boolean getIgnoreIfDefault() {
    return ignoreIfDefault;
  }


  public void setIgnoreIfDefault(Boolean ignoreIfDefault) {
    this.ignoreIfDefault = ignoreIfDefault;
  }


  public ItemOption label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public ItemOption labelTranslatedTextInstanceOid(Integer labelTranslatedTextInstanceOid) {
    
    this.labelTranslatedTextInstanceOid = labelTranslatedTextInstanceOid;
    return this;
  }

   /**
   * Label translated text instance ID
   * @return labelTranslatedTextInstanceOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label translated text instance ID")

  public Integer getLabelTranslatedTextInstanceOid() {
    return labelTranslatedTextInstanceOid;
  }


  public void setLabelTranslatedTextInstanceOid(Integer labelTranslatedTextInstanceOid) {
    this.labelTranslatedTextInstanceOid = labelTranslatedTextInstanceOid;
  }


  public ItemOption name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ItemOption nameTranslatedTextInstanceOid(Integer nameTranslatedTextInstanceOid) {
    
    this.nameTranslatedTextInstanceOid = nameTranslatedTextInstanceOid;
    return this;
  }

   /**
   * Name translated text instance ID
   * @return nameTranslatedTextInstanceOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name translated text instance ID")

  public Integer getNameTranslatedTextInstanceOid() {
    return nameTranslatedTextInstanceOid;
  }


  public void setNameTranslatedTextInstanceOid(Integer nameTranslatedTextInstanceOid) {
    this.nameTranslatedTextInstanceOid = nameTranslatedTextInstanceOid;
  }


  public ItemOption oneTimeFee(Boolean oneTimeFee) {
    
    this.oneTimeFee = oneTimeFee;
    return this;
  }

   /**
   * One time fee
   * @return oneTimeFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "One time fee")

  public Boolean getOneTimeFee() {
    return oneTimeFee;
  }


  public void setOneTimeFee(Boolean oneTimeFee) {
    this.oneTimeFee = oneTimeFee;
  }


  public ItemOption optionOid(Integer optionOid) {
    
    this.optionOid = optionOid;
    return this;
  }

   /**
   * Option object identifier
   * @return optionOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Option object identifier")

  public Integer getOptionOid() {
    return optionOid;
  }


  public void setOptionOid(Integer optionOid) {
    this.optionOid = optionOid;
  }


  public ItemOption required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * True if the customer is required to specify an answer
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the customer is required to specify an answer")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ItemOption systemOption(Boolean systemOption) {
    
    this.systemOption = systemOption;
    return this;
  }

   /**
   * True if this is a system option
   * @return systemOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if this is a system option")

  public Boolean getSystemOption() {
    return systemOption;
  }


  public void setSystemOption(Boolean systemOption) {
    this.systemOption = systemOption;
  }


  public ItemOption type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of option
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of option")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ItemOption values(List<ItemOptionValue> values) {
    
    this.values = values;
    return this;
  }

  public ItemOption addValuesItem(ItemOptionValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Values
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Values")

  public List<ItemOptionValue> getValues() {
    return values;
  }


  public void setValues(List<ItemOptionValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemOption itemOption = (ItemOption) o;
    return Objects.equals(this.costIfSpecified, itemOption.costIfSpecified) &&
        Objects.equals(this.costPerLetter, itemOption.costPerLetter) &&
        Objects.equals(this.costPerLine, itemOption.costPerLine) &&
        Objects.equals(this.ignoreIfDefault, itemOption.ignoreIfDefault) &&
        Objects.equals(this.label, itemOption.label) &&
        Objects.equals(this.labelTranslatedTextInstanceOid, itemOption.labelTranslatedTextInstanceOid) &&
        Objects.equals(this.name, itemOption.name) &&
        Objects.equals(this.nameTranslatedTextInstanceOid, itemOption.nameTranslatedTextInstanceOid) &&
        Objects.equals(this.oneTimeFee, itemOption.oneTimeFee) &&
        Objects.equals(this.optionOid, itemOption.optionOid) &&
        Objects.equals(this.required, itemOption.required) &&
        Objects.equals(this.systemOption, itemOption.systemOption) &&
        Objects.equals(this.type, itemOption.type) &&
        Objects.equals(this.values, itemOption.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costIfSpecified, costPerLetter, costPerLine, ignoreIfDefault, label, labelTranslatedTextInstanceOid, name, nameTranslatedTextInstanceOid, oneTimeFee, optionOid, required, systemOption, type, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemOption {\n");
    sb.append("    costIfSpecified: ").append(toIndentedString(costIfSpecified)).append("\n");
    sb.append("    costPerLetter: ").append(toIndentedString(costPerLetter)).append("\n");
    sb.append("    costPerLine: ").append(toIndentedString(costPerLine)).append("\n");
    sb.append("    ignoreIfDefault: ").append(toIndentedString(ignoreIfDefault)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    labelTranslatedTextInstanceOid: ").append(toIndentedString(labelTranslatedTextInstanceOid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameTranslatedTextInstanceOid: ").append(toIndentedString(nameTranslatedTextInstanceOid)).append("\n");
    sb.append("    oneTimeFee: ").append(toIndentedString(oneTimeFee)).append("\n");
    sb.append("    optionOid: ").append(toIndentedString(optionOid)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    systemOption: ").append(toIndentedString(systemOption)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost_if_specified");
    openapiFields.add("cost_per_letter");
    openapiFields.add("cost_per_line");
    openapiFields.add("ignore_if_default");
    openapiFields.add("label");
    openapiFields.add("label_translated_text_instance_oid");
    openapiFields.add("name");
    openapiFields.add("name_translated_text_instance_oid");
    openapiFields.add("one_time_fee");
    openapiFields.add("option_oid");
    openapiFields.add("required");
    openapiFields.add("system_option");
    openapiFields.add("type");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemOption.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemOption is not found in the empty JSON string", ItemOption.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemOption` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
      if (jsonArrayvalues != null) {
        // ensure the json data is an array
        if (!jsonObj.get("values").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
        }

        // validate the optional field `values` (array)
        for (int i = 0; i < jsonArrayvalues.size(); i++) {
          ItemOptionValue.validateJsonObject(jsonArrayvalues.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemOption>() {
           @Override
           public void write(JsonWriter out, ItemOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemOption
  * @throws IOException if the JSON string is invalid with respect to ItemOption
  */
  public static ItemOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemOption.class);
  }

 /**
  * Convert an instance of ItemOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


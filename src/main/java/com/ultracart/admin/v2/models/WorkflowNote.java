/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.WorkflowAttachment;
import com.ultracart.admin.v2.models.WorkflowUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * WorkflowNote
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2025-10-06T15:02:44.982-04:00")



public class WorkflowNote {
  @SerializedName("attachments")
  private List<WorkflowAttachment> attachments = null;

  @SerializedName("edit_dts")
  private String editDts = null;

  @SerializedName("note")
  private String note = null;

  @SerializedName("note_dts")
  private String noteDts = null;

  @SerializedName("original_note")
  private String originalNote = null;

  @SerializedName("user")
  private WorkflowUser user = null;

  public WorkflowNote attachments(List<WorkflowAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public WorkflowNote addAttachmentsItem(WorkflowAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<WorkflowAttachment>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Attachments to the Workflow Task
   * @return attachments
  **/
  @ApiModelProperty(value = "Attachments to the Workflow Task")
  public List<WorkflowAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<WorkflowAttachment> attachments) {
    this.attachments = attachments;
  }

  public WorkflowNote editDts(String editDts) {
    this.editDts = editDts;
    return this;
  }

   /**
   * Date/time that the note was edited
   * @return editDts
  **/
  @ApiModelProperty(value = "Date/time that the note was edited")
  public String getEditDts() {
    return editDts;
  }

  public void setEditDts(String editDts) {
    this.editDts = editDts;
  }

  public WorkflowNote note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Note
   * @return note
  **/
  @ApiModelProperty(value = "Note")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public WorkflowNote noteDts(String noteDts) {
    this.noteDts = noteDts;
    return this;
  }

   /**
   * Date/time that the note was written
   * @return noteDts
  **/
  @ApiModelProperty(value = "Date/time that the note was written")
  public String getNoteDts() {
    return noteDts;
  }

  public void setNoteDts(String noteDts) {
    this.noteDts = noteDts;
  }

  public WorkflowNote originalNote(String originalNote) {
    this.originalNote = originalNote;
    return this;
  }

   /**
   * Note originally written before any edits
   * @return originalNote
  **/
  @ApiModelProperty(value = "Note originally written before any edits")
  public String getOriginalNote() {
    return originalNote;
  }

  public void setOriginalNote(String originalNote) {
    this.originalNote = originalNote;
  }

  public WorkflowNote user(WorkflowUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @ApiModelProperty(value = "")
  public WorkflowUser getUser() {
    return user;
  }

  public void setUser(WorkflowUser user) {
    this.user = user;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowNote workflowNote = (WorkflowNote) o;
    return Objects.equals(this.attachments, workflowNote.attachments) &&
        Objects.equals(this.editDts, workflowNote.editDts) &&
        Objects.equals(this.note, workflowNote.note) &&
        Objects.equals(this.noteDts, workflowNote.noteDts) &&
        Objects.equals(this.originalNote, workflowNote.originalNote) &&
        Objects.equals(this.user, workflowNote.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, editDts, note, noteDts, originalNote, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowNote {\n");
    
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    editDts: ").append(toIndentedString(editDts)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteDts: ").append(toIndentedString(noteDts)).append("\n");
    sb.append("    originalNote: ").append(toIndentedString(originalNote)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


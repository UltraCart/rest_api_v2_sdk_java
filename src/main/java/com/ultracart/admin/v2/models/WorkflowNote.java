/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.WorkflowAttachment;
import com.ultracart.admin.v2.models.WorkflowUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * WorkflowNote
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-20T17:21:52.957-04:00[America/Indianapolis]")
public class WorkflowNote {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<WorkflowAttachment> attachments = null;

  public static final String SERIALIZED_NAME_EDIT_DTS = "edit_dts";
  @SerializedName(SERIALIZED_NAME_EDIT_DTS)
  private String editDts;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_NOTE_DTS = "note_dts";
  @SerializedName(SERIALIZED_NAME_NOTE_DTS)
  private String noteDts;

  public static final String SERIALIZED_NAME_ORIGINAL_NOTE = "original_note";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NOTE)
  private String originalNote;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private WorkflowUser user;

  public WorkflowNote() { 
  }

  public WorkflowNote attachments(List<WorkflowAttachment> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public WorkflowNote addAttachmentsItem(WorkflowAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Attachments to the Workflow Task
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Attachments to the Workflow Task")

  public List<WorkflowAttachment> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<WorkflowAttachment> attachments) {
    this.attachments = attachments;
  }


  public WorkflowNote editDts(String editDts) {
    
    this.editDts = editDts;
    return this;
  }

   /**
   * Date/time that the note was edited
   * @return editDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the note was edited")

  public String getEditDts() {
    return editDts;
  }


  public void setEditDts(String editDts) {
    this.editDts = editDts;
  }


  public WorkflowNote note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * Note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Note")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    this.note = note;
  }


  public WorkflowNote noteDts(String noteDts) {
    
    this.noteDts = noteDts;
    return this;
  }

   /**
   * Date/time that the note was written
   * @return noteDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the note was written")

  public String getNoteDts() {
    return noteDts;
  }


  public void setNoteDts(String noteDts) {
    this.noteDts = noteDts;
  }


  public WorkflowNote originalNote(String originalNote) {
    
    this.originalNote = originalNote;
    return this;
  }

   /**
   * Note originally written before any edits
   * @return originalNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Note originally written before any edits")

  public String getOriginalNote() {
    return originalNote;
  }


  public void setOriginalNote(String originalNote) {
    this.originalNote = originalNote;
  }


  public WorkflowNote user(WorkflowUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkflowUser getUser() {
    return user;
  }


  public void setUser(WorkflowUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowNote workflowNote = (WorkflowNote) o;
    return Objects.equals(this.attachments, workflowNote.attachments) &&
        Objects.equals(this.editDts, workflowNote.editDts) &&
        Objects.equals(this.note, workflowNote.note) &&
        Objects.equals(this.noteDts, workflowNote.noteDts) &&
        Objects.equals(this.originalNote, workflowNote.originalNote) &&
        Objects.equals(this.user, workflowNote.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, editDts, note, noteDts, originalNote, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowNote {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    editDts: ").append(toIndentedString(editDts)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    noteDts: ").append(toIndentedString(noteDts)).append("\n");
    sb.append("    originalNote: ").append(toIndentedString(originalNote)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("edit_dts");
    openapiFields.add("note");
    openapiFields.add("note_dts");
    openapiFields.add("original_note");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WorkflowNote
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (WorkflowNote.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowNote is not found in the empty JSON string", WorkflowNote.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WorkflowNote.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowNote` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      if (jsonArrayattachments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("attachments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
        }

        // validate the optional field `attachments` (array)
        for (int i = 0; i < jsonArrayattachments.size(); i++) {
          WorkflowAttachment.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("edit_dts") != null && !jsonObj.get("edit_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edit_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edit_dts").toString()));
      }
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("note_dts") != null && !jsonObj.get("note_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_dts").toString()));
      }
      if (jsonObj.get("original_note") != null && !jsonObj.get("original_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_note").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.getAsJsonObject("user") != null) {
        WorkflowUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowNote.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowNote' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowNote> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowNote.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowNote>() {
           @Override
           public void write(JsonWriter out, WorkflowNote value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowNote read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WorkflowNote given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WorkflowNote
  * @throws IOException if the JSON string is invalid with respect to WorkflowNote
  */
  public static WorkflowNote fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowNote.class);
  }

 /**
  * Convert an instance of WorkflowNote to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationPbxTimeBasedMapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-19T13:26:00.852-04:00[America/Indianapolis]")
public class ConversationPbxTimeBasedMapping {
  /**
   * Action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    TIME_BASED("time based"),
    
    MENU("menu"),
    
    QUEUE("queue"),
    
    VOICEMAIL("voicemail"),
    
    AGENT("agent");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_ACTION_TARGET = "action_target";
  @SerializedName(SERIALIZED_NAME_ACTION_TARGET)
  private String actionTarget;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME_RANGE_UUID = "time_range_uuid";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE_UUID)
  private String timeRangeUuid;

  public ConversationPbxTimeBasedMapping() { 
  }

  public ConversationPbxTimeBasedMapping action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Action")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ConversationPbxTimeBasedMapping actionTarget(String actionTarget) {
    
    this.actionTarget = actionTarget;
    return this;
  }

   /**
   * Action target.  This is the UUID associated with the configuration object of that particular type.
   * @return actionTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Action target.  This is the UUID associated with the configuration object of that particular type.")

  public String getActionTarget() {
    return actionTarget;
  }


  public void setActionTarget(String actionTarget) {
    this.actionTarget = actionTarget;
  }


  public ConversationPbxTimeBasedMapping name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConversationPbxTimeBasedMapping timeRangeUuid(String timeRangeUuid) {
    
    this.timeRangeUuid = timeRangeUuid;
    return this;
  }

   /**
   * Time range UUID
   * @return timeRangeUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Time range UUID")

  public String getTimeRangeUuid() {
    return timeRangeUuid;
  }


  public void setTimeRangeUuid(String timeRangeUuid) {
    this.timeRangeUuid = timeRangeUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationPbxTimeBasedMapping conversationPbxTimeBasedMapping = (ConversationPbxTimeBasedMapping) o;
    return Objects.equals(this.action, conversationPbxTimeBasedMapping.action) &&
        Objects.equals(this.actionTarget, conversationPbxTimeBasedMapping.actionTarget) &&
        Objects.equals(this.name, conversationPbxTimeBasedMapping.name) &&
        Objects.equals(this.timeRangeUuid, conversationPbxTimeBasedMapping.timeRangeUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actionTarget, name, timeRangeUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationPbxTimeBasedMapping {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actionTarget: ").append(toIndentedString(actionTarget)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeRangeUuid: ").append(toIndentedString(timeRangeUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("action_target");
    openapiFields.add("name");
    openapiFields.add("time_range_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationPbxTimeBasedMapping
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationPbxTimeBasedMapping.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationPbxTimeBasedMapping is not found in the empty JSON string", ConversationPbxTimeBasedMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationPbxTimeBasedMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationPbxTimeBasedMapping` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("action_target") != null && !jsonObj.get("action_target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_target").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("time_range_uuid") != null && !jsonObj.get("time_range_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_range_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_range_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationPbxTimeBasedMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationPbxTimeBasedMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationPbxTimeBasedMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationPbxTimeBasedMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationPbxTimeBasedMapping>() {
           @Override
           public void write(JsonWriter out, ConversationPbxTimeBasedMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationPbxTimeBasedMapping read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationPbxTimeBasedMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationPbxTimeBasedMapping
  * @throws IOException if the JSON string is invalid with respect to ConversationPbxTimeBasedMapping
  */
  public static ConversationPbxTimeBasedMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationPbxTimeBasedMapping.class);
  }

 /**
  * Convert an instance of ConversationPbxTimeBasedMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


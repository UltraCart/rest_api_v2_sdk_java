/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatusAgent;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatusQueueEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ConversationWebchatQueueStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-08-22T10:25:24.226-04:00[America/Indianapolis]")
public class ConversationWebchatQueueStatus {
  public static final String SERIALIZED_NAME_AGENT_AVAILABLE_COUNT = "agent_available_count";
  @SerializedName(SERIALIZED_NAME_AGENT_AVAILABLE_COUNT)
  private Integer agentAvailableCount;

  public static final String SERIALIZED_NAME_AGENT_BUSY_COUNT = "agent_busy_count";
  @SerializedName(SERIALIZED_NAME_AGENT_BUSY_COUNT)
  private Integer agentBusyCount;

  public static final String SERIALIZED_NAME_AGENT_COUNT = "agent_count";
  @SerializedName(SERIALIZED_NAME_AGENT_COUNT)
  private Integer agentCount;

  public static final String SERIALIZED_NAME_AGENT_UNAVAILABLE_COUNT = "agent_unavailable_count";
  @SerializedName(SERIALIZED_NAME_AGENT_UNAVAILABLE_COUNT)
  private Integer agentUnavailableCount;

  public static final String SERIALIZED_NAME_AGENTS = "agents";
  @SerializedName(SERIALIZED_NAME_AGENTS)
  private List<ConversationWebchatQueueStatusAgent> agents = null;

  public static final String SERIALIZED_NAME_CUSTOMER_ABANDON_COUNT = "customer_abandon_count";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ABANDON_COUNT)
  private Integer customerAbandonCount;

  public static final String SERIALIZED_NAME_CUSTOMER_ACTIVE_COUNT = "customer_active_count";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACTIVE_COUNT)
  private Integer customerActiveCount;

  public static final String SERIALIZED_NAME_CUSTOMER_AVERAGE_ABANDON_TIME_SECONDS = "customer_average_abandon_time_seconds";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_AVERAGE_ABANDON_TIME_SECONDS)
  private Integer customerAverageAbandonTimeSeconds;

  public static final String SERIALIZED_NAME_CUSTOMER_AVERAGE_CHAT_TIME_SECONDS = "customer_average_chat_time_seconds";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_AVERAGE_CHAT_TIME_SECONDS)
  private Integer customerAverageChatTimeSeconds;

  public static final String SERIALIZED_NAME_CUSTOMER_AVERAGE_HOLD_TIME_SECONDS = "customer_average_hold_time_seconds";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_AVERAGE_HOLD_TIME_SECONDS)
  private Integer customerAverageHoldTimeSeconds;

  public static final String SERIALIZED_NAME_CUSTOMER_CHAT_COUNT = "customer_chat_count";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CHAT_COUNT)
  private Integer customerChatCount;

  public static final String SERIALIZED_NAME_CUSTOMER_WAITING_COUNT = "customer_waiting_count";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_WAITING_COUNT)
  private Integer customerWaitingCount;

  public static final String SERIALIZED_NAME_CUSTOMER_WAITING_JOIN_DTS = "customer_waiting_join_dts";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_WAITING_JOIN_DTS)
  private String customerWaitingJoinDts;

  public static final String SERIALIZED_NAME_QUEUE_ENTRIES = "queue_entries";
  @SerializedName(SERIALIZED_NAME_QUEUE_ENTRIES)
  private List<ConversationWebchatQueueStatusQueueEntry> queueEntries = null;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "queue_name";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public ConversationWebchatQueueStatus() { 
  }

  public ConversationWebchatQueueStatus agentAvailableCount(Integer agentAvailableCount) {
    
    this.agentAvailableCount = agentAvailableCount;
    return this;
  }

   /**
   * Get agentAvailableCount
   * @return agentAvailableCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAgentAvailableCount() {
    return agentAvailableCount;
  }


  public void setAgentAvailableCount(Integer agentAvailableCount) {
    this.agentAvailableCount = agentAvailableCount;
  }


  public ConversationWebchatQueueStatus agentBusyCount(Integer agentBusyCount) {
    
    this.agentBusyCount = agentBusyCount;
    return this;
  }

   /**
   * Get agentBusyCount
   * @return agentBusyCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAgentBusyCount() {
    return agentBusyCount;
  }


  public void setAgentBusyCount(Integer agentBusyCount) {
    this.agentBusyCount = agentBusyCount;
  }


  public ConversationWebchatQueueStatus agentCount(Integer agentCount) {
    
    this.agentCount = agentCount;
    return this;
  }

   /**
   * Get agentCount
   * @return agentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAgentCount() {
    return agentCount;
  }


  public void setAgentCount(Integer agentCount) {
    this.agentCount = agentCount;
  }


  public ConversationWebchatQueueStatus agentUnavailableCount(Integer agentUnavailableCount) {
    
    this.agentUnavailableCount = agentUnavailableCount;
    return this;
  }

   /**
   * Get agentUnavailableCount
   * @return agentUnavailableCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAgentUnavailableCount() {
    return agentUnavailableCount;
  }


  public void setAgentUnavailableCount(Integer agentUnavailableCount) {
    this.agentUnavailableCount = agentUnavailableCount;
  }


  public ConversationWebchatQueueStatus agents(List<ConversationWebchatQueueStatusAgent> agents) {
    
    this.agents = agents;
    return this;
  }

  public ConversationWebchatQueueStatus addAgentsItem(ConversationWebchatQueueStatusAgent agentsItem) {
    if (this.agents == null) {
      this.agents = new ArrayList<>();
    }
    this.agents.add(agentsItem);
    return this;
  }

   /**
   * Get agents
   * @return agents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationWebchatQueueStatusAgent> getAgents() {
    return agents;
  }


  public void setAgents(List<ConversationWebchatQueueStatusAgent> agents) {
    this.agents = agents;
  }


  public ConversationWebchatQueueStatus customerAbandonCount(Integer customerAbandonCount) {
    
    this.customerAbandonCount = customerAbandonCount;
    return this;
  }

   /**
   * Get customerAbandonCount
   * @return customerAbandonCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerAbandonCount() {
    return customerAbandonCount;
  }


  public void setCustomerAbandonCount(Integer customerAbandonCount) {
    this.customerAbandonCount = customerAbandonCount;
  }


  public ConversationWebchatQueueStatus customerActiveCount(Integer customerActiveCount) {
    
    this.customerActiveCount = customerActiveCount;
    return this;
  }

   /**
   * Get customerActiveCount
   * @return customerActiveCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerActiveCount() {
    return customerActiveCount;
  }


  public void setCustomerActiveCount(Integer customerActiveCount) {
    this.customerActiveCount = customerActiveCount;
  }


  public ConversationWebchatQueueStatus customerAverageAbandonTimeSeconds(Integer customerAverageAbandonTimeSeconds) {
    
    this.customerAverageAbandonTimeSeconds = customerAverageAbandonTimeSeconds;
    return this;
  }

   /**
   * Get customerAverageAbandonTimeSeconds
   * @return customerAverageAbandonTimeSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerAverageAbandonTimeSeconds() {
    return customerAverageAbandonTimeSeconds;
  }


  public void setCustomerAverageAbandonTimeSeconds(Integer customerAverageAbandonTimeSeconds) {
    this.customerAverageAbandonTimeSeconds = customerAverageAbandonTimeSeconds;
  }


  public ConversationWebchatQueueStatus customerAverageChatTimeSeconds(Integer customerAverageChatTimeSeconds) {
    
    this.customerAverageChatTimeSeconds = customerAverageChatTimeSeconds;
    return this;
  }

   /**
   * Get customerAverageChatTimeSeconds
   * @return customerAverageChatTimeSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerAverageChatTimeSeconds() {
    return customerAverageChatTimeSeconds;
  }


  public void setCustomerAverageChatTimeSeconds(Integer customerAverageChatTimeSeconds) {
    this.customerAverageChatTimeSeconds = customerAverageChatTimeSeconds;
  }


  public ConversationWebchatQueueStatus customerAverageHoldTimeSeconds(Integer customerAverageHoldTimeSeconds) {
    
    this.customerAverageHoldTimeSeconds = customerAverageHoldTimeSeconds;
    return this;
  }

   /**
   * Get customerAverageHoldTimeSeconds
   * @return customerAverageHoldTimeSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerAverageHoldTimeSeconds() {
    return customerAverageHoldTimeSeconds;
  }


  public void setCustomerAverageHoldTimeSeconds(Integer customerAverageHoldTimeSeconds) {
    this.customerAverageHoldTimeSeconds = customerAverageHoldTimeSeconds;
  }


  public ConversationWebchatQueueStatus customerChatCount(Integer customerChatCount) {
    
    this.customerChatCount = customerChatCount;
    return this;
  }

   /**
   * Get customerChatCount
   * @return customerChatCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerChatCount() {
    return customerChatCount;
  }


  public void setCustomerChatCount(Integer customerChatCount) {
    this.customerChatCount = customerChatCount;
  }


  public ConversationWebchatQueueStatus customerWaitingCount(Integer customerWaitingCount) {
    
    this.customerWaitingCount = customerWaitingCount;
    return this;
  }

   /**
   * Get customerWaitingCount
   * @return customerWaitingCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCustomerWaitingCount() {
    return customerWaitingCount;
  }


  public void setCustomerWaitingCount(Integer customerWaitingCount) {
    this.customerWaitingCount = customerWaitingCount;
  }


  public ConversationWebchatQueueStatus customerWaitingJoinDts(String customerWaitingJoinDts) {
    
    this.customerWaitingJoinDts = customerWaitingJoinDts;
    return this;
  }

   /**
   * Date/time that the oldest person joined the queue
   * @return customerWaitingJoinDts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date/time that the oldest person joined the queue")

  public String getCustomerWaitingJoinDts() {
    return customerWaitingJoinDts;
  }


  public void setCustomerWaitingJoinDts(String customerWaitingJoinDts) {
    this.customerWaitingJoinDts = customerWaitingJoinDts;
  }


  public ConversationWebchatQueueStatus queueEntries(List<ConversationWebchatQueueStatusQueueEntry> queueEntries) {
    
    this.queueEntries = queueEntries;
    return this;
  }

  public ConversationWebchatQueueStatus addQueueEntriesItem(ConversationWebchatQueueStatusQueueEntry queueEntriesItem) {
    if (this.queueEntries == null) {
      this.queueEntries = new ArrayList<>();
    }
    this.queueEntries.add(queueEntriesItem);
    return this;
  }

   /**
   * Get queueEntries
   * @return queueEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConversationWebchatQueueStatusQueueEntry> getQueueEntries() {
    return queueEntries;
  }


  public void setQueueEntries(List<ConversationWebchatQueueStatusQueueEntry> queueEntries) {
    this.queueEntries = queueEntries;
  }


  public ConversationWebchatQueueStatus queueName(String queueName) {
    
    this.queueName = queueName;
    return this;
  }

   /**
   * Get queueName
   * @return queueName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getQueueName() {
    return queueName;
  }


  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationWebchatQueueStatus conversationWebchatQueueStatus = (ConversationWebchatQueueStatus) o;
    return Objects.equals(this.agentAvailableCount, conversationWebchatQueueStatus.agentAvailableCount) &&
        Objects.equals(this.agentBusyCount, conversationWebchatQueueStatus.agentBusyCount) &&
        Objects.equals(this.agentCount, conversationWebchatQueueStatus.agentCount) &&
        Objects.equals(this.agentUnavailableCount, conversationWebchatQueueStatus.agentUnavailableCount) &&
        Objects.equals(this.agents, conversationWebchatQueueStatus.agents) &&
        Objects.equals(this.customerAbandonCount, conversationWebchatQueueStatus.customerAbandonCount) &&
        Objects.equals(this.customerActiveCount, conversationWebchatQueueStatus.customerActiveCount) &&
        Objects.equals(this.customerAverageAbandonTimeSeconds, conversationWebchatQueueStatus.customerAverageAbandonTimeSeconds) &&
        Objects.equals(this.customerAverageChatTimeSeconds, conversationWebchatQueueStatus.customerAverageChatTimeSeconds) &&
        Objects.equals(this.customerAverageHoldTimeSeconds, conversationWebchatQueueStatus.customerAverageHoldTimeSeconds) &&
        Objects.equals(this.customerChatCount, conversationWebchatQueueStatus.customerChatCount) &&
        Objects.equals(this.customerWaitingCount, conversationWebchatQueueStatus.customerWaitingCount) &&
        Objects.equals(this.customerWaitingJoinDts, conversationWebchatQueueStatus.customerWaitingJoinDts) &&
        Objects.equals(this.queueEntries, conversationWebchatQueueStatus.queueEntries) &&
        Objects.equals(this.queueName, conversationWebchatQueueStatus.queueName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentAvailableCount, agentBusyCount, agentCount, agentUnavailableCount, agents, customerAbandonCount, customerActiveCount, customerAverageAbandonTimeSeconds, customerAverageChatTimeSeconds, customerAverageHoldTimeSeconds, customerChatCount, customerWaitingCount, customerWaitingJoinDts, queueEntries, queueName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationWebchatQueueStatus {\n");
    sb.append("    agentAvailableCount: ").append(toIndentedString(agentAvailableCount)).append("\n");
    sb.append("    agentBusyCount: ").append(toIndentedString(agentBusyCount)).append("\n");
    sb.append("    agentCount: ").append(toIndentedString(agentCount)).append("\n");
    sb.append("    agentUnavailableCount: ").append(toIndentedString(agentUnavailableCount)).append("\n");
    sb.append("    agents: ").append(toIndentedString(agents)).append("\n");
    sb.append("    customerAbandonCount: ").append(toIndentedString(customerAbandonCount)).append("\n");
    sb.append("    customerActiveCount: ").append(toIndentedString(customerActiveCount)).append("\n");
    sb.append("    customerAverageAbandonTimeSeconds: ").append(toIndentedString(customerAverageAbandonTimeSeconds)).append("\n");
    sb.append("    customerAverageChatTimeSeconds: ").append(toIndentedString(customerAverageChatTimeSeconds)).append("\n");
    sb.append("    customerAverageHoldTimeSeconds: ").append(toIndentedString(customerAverageHoldTimeSeconds)).append("\n");
    sb.append("    customerChatCount: ").append(toIndentedString(customerChatCount)).append("\n");
    sb.append("    customerWaitingCount: ").append(toIndentedString(customerWaitingCount)).append("\n");
    sb.append("    customerWaitingJoinDts: ").append(toIndentedString(customerWaitingJoinDts)).append("\n");
    sb.append("    queueEntries: ").append(toIndentedString(queueEntries)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent_available_count");
    openapiFields.add("agent_busy_count");
    openapiFields.add("agent_count");
    openapiFields.add("agent_unavailable_count");
    openapiFields.add("agents");
    openapiFields.add("customer_abandon_count");
    openapiFields.add("customer_active_count");
    openapiFields.add("customer_average_abandon_time_seconds");
    openapiFields.add("customer_average_chat_time_seconds");
    openapiFields.add("customer_average_hold_time_seconds");
    openapiFields.add("customer_chat_count");
    openapiFields.add("customer_waiting_count");
    openapiFields.add("customer_waiting_join_dts");
    openapiFields.add("queue_entries");
    openapiFields.add("queue_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationWebchatQueueStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ConversationWebchatQueueStatus.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationWebchatQueueStatus is not found in the empty JSON string", ConversationWebchatQueueStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationWebchatQueueStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationWebchatQueueStatus` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArrayagents = jsonObj.getAsJsonArray("agents");
      if (jsonArrayagents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("agents").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `agents` to be an array in the JSON string but got `%s`", jsonObj.get("agents").toString()));
        }

        // validate the optional field `agents` (array)
        for (int i = 0; i < jsonArrayagents.size(); i++) {
          ConversationWebchatQueueStatusAgent.validateJsonObject(jsonArrayagents.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("customer_waiting_join_dts") != null && !jsonObj.get("customer_waiting_join_dts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_waiting_join_dts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_waiting_join_dts").toString()));
      }
      JsonArray jsonArrayqueueEntries = jsonObj.getAsJsonArray("queue_entries");
      if (jsonArrayqueueEntries != null) {
        // ensure the json data is an array
        if (!jsonObj.get("queue_entries").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `queue_entries` to be an array in the JSON string but got `%s`", jsonObj.get("queue_entries").toString()));
        }

        // validate the optional field `queue_entries` (array)
        for (int i = 0; i < jsonArrayqueueEntries.size(); i++) {
          ConversationWebchatQueueStatusQueueEntry.validateJsonObject(jsonArrayqueueEntries.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("queue_name") != null && !jsonObj.get("queue_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationWebchatQueueStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationWebchatQueueStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationWebchatQueueStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationWebchatQueueStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationWebchatQueueStatus>() {
           @Override
           public void write(JsonWriter out, ConversationWebchatQueueStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationWebchatQueueStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationWebchatQueueStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationWebchatQueueStatus
  * @throws IOException if the JSON string is invalid with respect to ConversationWebchatQueueStatus
  */
  public static ConversationWebchatQueueStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationWebchatQueueStatus.class);
  }

 /**
  * Convert an instance of ConversationWebchatQueueStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.Error;
import com.ultracart.admin.v2.models.ResponseMetadata;
import com.ultracart.admin.v2.models.TaxProviderAvalara;
import com.ultracart.admin.v2.models.TaxProviderSelf;
import com.ultracart.admin.v2.models.TaxProviderSovos;
import com.ultracart.admin.v2.models.TaxProviderTaxJar;
import com.ultracart.admin.v2.models.TaxProviderUltraCart;
import com.ultracart.admin.v2.models.Warning;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * TaxProvidersResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-15T16:57:28.765-05:00[America/Indianapolis]")
public class TaxProvidersResponse {
  public static final String SERIALIZED_NAME_AVALARA = "avalara";
  @SerializedName(SERIALIZED_NAME_AVALARA)
  private TaxProviderAvalara avalara;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ResponseMetadata metadata;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private TaxProviderSelf self;

  public static final String SERIALIZED_NAME_SOVOS = "sovos";
  @SerializedName(SERIALIZED_NAME_SOVOS)
  private TaxProviderSovos sovos;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_TAXJAR = "taxjar";
  @SerializedName(SERIALIZED_NAME_TAXJAR)
  private TaxProviderTaxJar taxjar;

  public static final String SERIALIZED_NAME_ULTRACART = "ultracart";
  @SerializedName(SERIALIZED_NAME_ULTRACART)
  private TaxProviderUltraCart ultracart;

  public static final String SERIALIZED_NAME_WARNING = "warning";
  @SerializedName(SERIALIZED_NAME_WARNING)
  private Warning warning;

  public TaxProvidersResponse() { 
  }

  public TaxProvidersResponse avalara(TaxProviderAvalara avalara) {
    
    this.avalara = avalara;
    return this;
  }

   /**
   * Get avalara
   * @return avalara
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxProviderAvalara getAvalara() {
    return avalara;
  }


  public void setAvalara(TaxProviderAvalara avalara) {
    this.avalara = avalara;
  }


  public TaxProvidersResponse error(Error error) {
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Error getError() {
    return error;
  }


  public void setError(Error error) {
    this.error = error;
  }


  public TaxProvidersResponse metadata(ResponseMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResponseMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(ResponseMetadata metadata) {
    this.metadata = metadata;
  }


  public TaxProvidersResponse self(TaxProviderSelf self) {
    
    this.self = self;
    return this;
  }

   /**
   * Get self
   * @return self
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxProviderSelf getSelf() {
    return self;
  }


  public void setSelf(TaxProviderSelf self) {
    this.self = self;
  }


  public TaxProvidersResponse sovos(TaxProviderSovos sovos) {
    
    this.sovos = sovos;
    return this;
  }

   /**
   * Get sovos
   * @return sovos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxProviderSovos getSovos() {
    return sovos;
  }


  public void setSovos(TaxProviderSovos sovos) {
    this.sovos = sovos;
  }


  public TaxProvidersResponse success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Indicates if API call was successful
   * @return success
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if API call was successful")

  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public TaxProvidersResponse taxjar(TaxProviderTaxJar taxjar) {
    
    this.taxjar = taxjar;
    return this;
  }

   /**
   * Get taxjar
   * @return taxjar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxProviderTaxJar getTaxjar() {
    return taxjar;
  }


  public void setTaxjar(TaxProviderTaxJar taxjar) {
    this.taxjar = taxjar;
  }


  public TaxProvidersResponse ultracart(TaxProviderUltraCart ultracart) {
    
    this.ultracart = ultracart;
    return this;
  }

   /**
   * Get ultracart
   * @return ultracart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxProviderUltraCart getUltracart() {
    return ultracart;
  }


  public void setUltracart(TaxProviderUltraCart ultracart) {
    this.ultracart = ultracart;
  }


  public TaxProvidersResponse warning(Warning warning) {
    
    this.warning = warning;
    return this;
  }

   /**
   * Get warning
   * @return warning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Warning getWarning() {
    return warning;
  }


  public void setWarning(Warning warning) {
    this.warning = warning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaxProvidersResponse taxProvidersResponse = (TaxProvidersResponse) o;
    return Objects.equals(this.avalara, taxProvidersResponse.avalara) &&
        Objects.equals(this.error, taxProvidersResponse.error) &&
        Objects.equals(this.metadata, taxProvidersResponse.metadata) &&
        Objects.equals(this.self, taxProvidersResponse.self) &&
        Objects.equals(this.sovos, taxProvidersResponse.sovos) &&
        Objects.equals(this.success, taxProvidersResponse.success) &&
        Objects.equals(this.taxjar, taxProvidersResponse.taxjar) &&
        Objects.equals(this.ultracart, taxProvidersResponse.ultracart) &&
        Objects.equals(this.warning, taxProvidersResponse.warning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avalara, error, metadata, self, sovos, success, taxjar, ultracart, warning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaxProvidersResponse {\n");
    sb.append("    avalara: ").append(toIndentedString(avalara)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    sovos: ").append(toIndentedString(sovos)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    taxjar: ").append(toIndentedString(taxjar)).append("\n");
    sb.append("    ultracart: ").append(toIndentedString(ultracart)).append("\n");
    sb.append("    warning: ").append(toIndentedString(warning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avalara");
    openapiFields.add("error");
    openapiFields.add("metadata");
    openapiFields.add("self");
    openapiFields.add("sovos");
    openapiFields.add("success");
    openapiFields.add("taxjar");
    openapiFields.add("ultracart");
    openapiFields.add("warning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TaxProvidersResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TaxProvidersResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaxProvidersResponse is not found in the empty JSON string", TaxProvidersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TaxProvidersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaxProvidersResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `avalara`
      if (jsonObj.getAsJsonObject("avalara") != null) {
        TaxProviderAvalara.validateJsonObject(jsonObj.getAsJsonObject("avalara"));
      }
      // validate the optional field `error`
      if (jsonObj.getAsJsonObject("error") != null) {
        Error.validateJsonObject(jsonObj.getAsJsonObject("error"));
      }
      // validate the optional field `metadata`
      if (jsonObj.getAsJsonObject("metadata") != null) {
        ResponseMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
      // validate the optional field `self`
      if (jsonObj.getAsJsonObject("self") != null) {
        TaxProviderSelf.validateJsonObject(jsonObj.getAsJsonObject("self"));
      }
      // validate the optional field `sovos`
      if (jsonObj.getAsJsonObject("sovos") != null) {
        TaxProviderSovos.validateJsonObject(jsonObj.getAsJsonObject("sovos"));
      }
      // validate the optional field `taxjar`
      if (jsonObj.getAsJsonObject("taxjar") != null) {
        TaxProviderTaxJar.validateJsonObject(jsonObj.getAsJsonObject("taxjar"));
      }
      // validate the optional field `ultracart`
      if (jsonObj.getAsJsonObject("ultracart") != null) {
        TaxProviderUltraCart.validateJsonObject(jsonObj.getAsJsonObject("ultracart"));
      }
      // validate the optional field `warning`
      if (jsonObj.getAsJsonObject("warning") != null) {
        Warning.validateJsonObject(jsonObj.getAsJsonObject("warning"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaxProvidersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaxProvidersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaxProvidersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaxProvidersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TaxProvidersResponse>() {
           @Override
           public void write(JsonWriter out, TaxProvidersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaxProvidersResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TaxProvidersResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TaxProvidersResponse
  * @throws IOException if the JSON string is invalid with respect to TaxProvidersResponse
  */
  public static TaxProvidersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaxProvidersResponse.class);
  }

 /**
  * Convert an instance of TaxProvidersResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * ItemPaymentProcessing
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-08-31T11:18:39.810-04:00")
public class ItemPaymentProcessing   {
  @SerializedName("block_prepaid")
  private Boolean blockPrepaid = null;

  @SerializedName("credit_card_transaction_type")
  private String creditCardTransactionType = null;

  @SerializedName("no_realtime_charge")
  private Boolean noRealtimeCharge = null;

  @SerializedName("payment_method_validity")
  private String paymentMethodValidity = null;

  @SerializedName("rotating_transaction_gateway_codes")
  private String rotatingTransactionGatewayCodes = null;

  public ItemPaymentProcessing blockPrepaid(Boolean blockPrepaid) {
    this.blockPrepaid = blockPrepaid;
    return this;
  }

   /**
   * Get blockPrepaid
   * @return blockPrepaid
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getBlockPrepaid() {
    return blockPrepaid;
  }

  public void setBlockPrepaid(Boolean blockPrepaid) {
    this.blockPrepaid = blockPrepaid;
  }

  public ItemPaymentProcessing creditCardTransactionType(String creditCardTransactionType) {
    this.creditCardTransactionType = creditCardTransactionType;
    return this;
  }

   /**
   * Get creditCardTransactionType
   * @return creditCardTransactionType
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getCreditCardTransactionType() {
    return creditCardTransactionType;
  }

  public void setCreditCardTransactionType(String creditCardTransactionType) {
    this.creditCardTransactionType = creditCardTransactionType;
  }

  public ItemPaymentProcessing noRealtimeCharge(Boolean noRealtimeCharge) {
    this.noRealtimeCharge = noRealtimeCharge;
    return this;
  }

   /**
   * Get noRealtimeCharge
   * @return noRealtimeCharge
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getNoRealtimeCharge() {
    return noRealtimeCharge;
  }

  public void setNoRealtimeCharge(Boolean noRealtimeCharge) {
    this.noRealtimeCharge = noRealtimeCharge;
  }

  public ItemPaymentProcessing paymentMethodValidity(String paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
    return this;
  }

   /**
   * Get paymentMethodValidity
   * @return paymentMethodValidity
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getPaymentMethodValidity() {
    return paymentMethodValidity;
  }

  public void setPaymentMethodValidity(String paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
  }

  public ItemPaymentProcessing rotatingTransactionGatewayCodes(String rotatingTransactionGatewayCodes) {
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
    return this;
  }

   /**
   * Get rotatingTransactionGatewayCodes
   * @return rotatingTransactionGatewayCodes
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getRotatingTransactionGatewayCodes() {
    return rotatingTransactionGatewayCodes;
  }

  public void setRotatingTransactionGatewayCodes(String rotatingTransactionGatewayCodes) {
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPaymentProcessing itemPaymentProcessing = (ItemPaymentProcessing) o;
    return Objects.equals(this.blockPrepaid, itemPaymentProcessing.blockPrepaid) &&
        Objects.equals(this.creditCardTransactionType, itemPaymentProcessing.creditCardTransactionType) &&
        Objects.equals(this.noRealtimeCharge, itemPaymentProcessing.noRealtimeCharge) &&
        Objects.equals(this.paymentMethodValidity, itemPaymentProcessing.paymentMethodValidity) &&
        Objects.equals(this.rotatingTransactionGatewayCodes, itemPaymentProcessing.rotatingTransactionGatewayCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockPrepaid, creditCardTransactionType, noRealtimeCharge, paymentMethodValidity, rotatingTransactionGatewayCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPaymentProcessing {\n");
    
    sb.append("    blockPrepaid: ").append(toIndentedString(blockPrepaid)).append("\n");
    sb.append("    creditCardTransactionType: ").append(toIndentedString(creditCardTransactionType)).append("\n");
    sb.append("    noRealtimeCharge: ").append(toIndentedString(noRealtimeCharge)).append("\n");
    sb.append("    paymentMethodValidity: ").append(toIndentedString(paymentMethodValidity)).append("\n");
    sb.append("    rotatingTransactionGatewayCodes: ").append(toIndentedString(rotatingTransactionGatewayCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}


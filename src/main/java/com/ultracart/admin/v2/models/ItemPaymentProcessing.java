/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ItemPaymentProcessing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-19T10:44:41.552-05:00[America/Indianapolis]")
public class ItemPaymentProcessing {
  public static final String SERIALIZED_NAME_BLOCK_PREPAID = "block_prepaid";
  @SerializedName(SERIALIZED_NAME_BLOCK_PREPAID)
  private Boolean blockPrepaid;

  public static final String SERIALIZED_NAME_CREDIT_CARD_TRANSACTION_TYPE = "credit_card_transaction_type";
  @SerializedName(SERIALIZED_NAME_CREDIT_CARD_TRANSACTION_TYPE)
  private String creditCardTransactionType;

  public static final String SERIALIZED_NAME_NO_REALTIME_CHARGE = "no_realtime_charge";
  @SerializedName(SERIALIZED_NAME_NO_REALTIME_CHARGE)
  private Boolean noRealtimeCharge;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_VALIDITY = "payment_method_validity";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_VALIDITY)
  private List<String> paymentMethodValidity = null;

  public static final String SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODES = "rotating_transaction_gateway_codes";
  @SerializedName(SERIALIZED_NAME_ROTATING_TRANSACTION_GATEWAY_CODES)
  private List<String> rotatingTransactionGatewayCodes = null;

  public ItemPaymentProcessing() { 
  }

  public ItemPaymentProcessing blockPrepaid(Boolean blockPrepaid) {
    
    this.blockPrepaid = blockPrepaid;
    return this;
  }

   /**
   * True if prepaid cards should be blocked from buying this item
   * @return blockPrepaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if prepaid cards should be blocked from buying this item")

  public Boolean getBlockPrepaid() {
    return blockPrepaid;
  }


  public void setBlockPrepaid(Boolean blockPrepaid) {
    this.blockPrepaid = blockPrepaid;
  }


  public ItemPaymentProcessing creditCardTransactionType(String creditCardTransactionType) {
    
    this.creditCardTransactionType = creditCardTransactionType;
    return this;
  }

   /**
   * Credit card transaction type
   * @return creditCardTransactionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit card transaction type")

  public String getCreditCardTransactionType() {
    return creditCardTransactionType;
  }


  public void setCreditCardTransactionType(String creditCardTransactionType) {
    this.creditCardTransactionType = creditCardTransactionType;
  }


  public ItemPaymentProcessing noRealtimeCharge(Boolean noRealtimeCharge) {
    
    this.noRealtimeCharge = noRealtimeCharge;
    return this;
  }

   /**
   * True if no real-time charge should be performed on this item.
   * @return noRealtimeCharge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if no real-time charge should be performed on this item.")

  public Boolean getNoRealtimeCharge() {
    return noRealtimeCharge;
  }


  public void setNoRealtimeCharge(Boolean noRealtimeCharge) {
    this.noRealtimeCharge = noRealtimeCharge;
  }


  public ItemPaymentProcessing paymentMethodValidity(List<String> paymentMethodValidity) {
    
    this.paymentMethodValidity = paymentMethodValidity;
    return this;
  }

  public ItemPaymentProcessing addPaymentMethodValidityItem(String paymentMethodValidityItem) {
    if (this.paymentMethodValidity == null) {
      this.paymentMethodValidity = new ArrayList<>();
    }
    this.paymentMethodValidity.add(paymentMethodValidityItem);
    return this;
  }

   /**
   * Payment method validity
   * @return paymentMethodValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payment method validity")

  public List<String> getPaymentMethodValidity() {
    return paymentMethodValidity;
  }


  public void setPaymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
  }


  public ItemPaymentProcessing rotatingTransactionGatewayCodes(List<String> rotatingTransactionGatewayCodes) {
    
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
    return this;
  }

  public ItemPaymentProcessing addRotatingTransactionGatewayCodesItem(String rotatingTransactionGatewayCodesItem) {
    if (this.rotatingTransactionGatewayCodes == null) {
      this.rotatingTransactionGatewayCodes = new ArrayList<>();
    }
    this.rotatingTransactionGatewayCodes.add(rotatingTransactionGatewayCodesItem);
    return this;
  }

   /**
   * Rotating transaction gateway codes
   * @return rotatingTransactionGatewayCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rotating transaction gateway codes")

  public List<String> getRotatingTransactionGatewayCodes() {
    return rotatingTransactionGatewayCodes;
  }


  public void setRotatingTransactionGatewayCodes(List<String> rotatingTransactionGatewayCodes) {
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPaymentProcessing itemPaymentProcessing = (ItemPaymentProcessing) o;
    return Objects.equals(this.blockPrepaid, itemPaymentProcessing.blockPrepaid) &&
        Objects.equals(this.creditCardTransactionType, itemPaymentProcessing.creditCardTransactionType) &&
        Objects.equals(this.noRealtimeCharge, itemPaymentProcessing.noRealtimeCharge) &&
        Objects.equals(this.paymentMethodValidity, itemPaymentProcessing.paymentMethodValidity) &&
        Objects.equals(this.rotatingTransactionGatewayCodes, itemPaymentProcessing.rotatingTransactionGatewayCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockPrepaid, creditCardTransactionType, noRealtimeCharge, paymentMethodValidity, rotatingTransactionGatewayCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPaymentProcessing {\n");
    sb.append("    blockPrepaid: ").append(toIndentedString(blockPrepaid)).append("\n");
    sb.append("    creditCardTransactionType: ").append(toIndentedString(creditCardTransactionType)).append("\n");
    sb.append("    noRealtimeCharge: ").append(toIndentedString(noRealtimeCharge)).append("\n");
    sb.append("    paymentMethodValidity: ").append(toIndentedString(paymentMethodValidity)).append("\n");
    sb.append("    rotatingTransactionGatewayCodes: ").append(toIndentedString(rotatingTransactionGatewayCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_prepaid");
    openapiFields.add("credit_card_transaction_type");
    openapiFields.add("no_realtime_charge");
    openapiFields.add("payment_method_validity");
    openapiFields.add("rotating_transaction_gateway_codes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ItemPaymentProcessing
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ItemPaymentProcessing.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemPaymentProcessing is not found in the empty JSON string", ItemPaymentProcessing.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ItemPaymentProcessing.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemPaymentProcessing` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("credit_card_transaction_type") != null && !jsonObj.get("credit_card_transaction_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit_card_transaction_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credit_card_transaction_type").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("payment_method_validity") != null && !jsonObj.get("payment_method_validity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_validity` to be an array in the JSON string but got `%s`", jsonObj.get("payment_method_validity").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("rotating_transaction_gateway_codes") != null && !jsonObj.get("rotating_transaction_gateway_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotating_transaction_gateway_codes` to be an array in the JSON string but got `%s`", jsonObj.get("rotating_transaction_gateway_codes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemPaymentProcessing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemPaymentProcessing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemPaymentProcessing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemPaymentProcessing.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemPaymentProcessing>() {
           @Override
           public void write(JsonWriter out, ItemPaymentProcessing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemPaymentProcessing read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemPaymentProcessing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemPaymentProcessing
  * @throws IOException if the JSON string is invalid with respect to ItemPaymentProcessing
  */
  public static ItemPaymentProcessing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemPaymentProcessing.class);
  }

 /**
  * Convert an instance of ItemPaymentProcessing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


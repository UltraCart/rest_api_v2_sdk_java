/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ItemPaymentProcessing
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-10T22:25:27.401-04:00")



public class ItemPaymentProcessing {
  @SerializedName("block_prepaid")
  private Boolean blockPrepaid = null;

  @SerializedName("credit_card_transaction_type")
  private String creditCardTransactionType = null;

  @SerializedName("no_realtime_charge")
  private Boolean noRealtimeCharge = null;

  @SerializedName("payment_method_validity")
  private List<String> paymentMethodValidity = null;

  @SerializedName("rotating_transaction_gateway_codes")
  private List<String> rotatingTransactionGatewayCodes = null;

  public ItemPaymentProcessing blockPrepaid(Boolean blockPrepaid) {
    this.blockPrepaid = blockPrepaid;
    return this;
  }

   /**
   * True if prepaid cards should be blocked from buying this item
   * @return blockPrepaid
  **/
  @ApiModelProperty(value = "True if prepaid cards should be blocked from buying this item")
  public Boolean isBlockPrepaid() {
    return blockPrepaid;
  }

  public void setBlockPrepaid(Boolean blockPrepaid) {
    this.blockPrepaid = blockPrepaid;
  }

  public ItemPaymentProcessing creditCardTransactionType(String creditCardTransactionType) {
    this.creditCardTransactionType = creditCardTransactionType;
    return this;
  }

   /**
   * Credit card transaction type
   * @return creditCardTransactionType
  **/
  @ApiModelProperty(value = "Credit card transaction type")
  public String getCreditCardTransactionType() {
    return creditCardTransactionType;
  }

  public void setCreditCardTransactionType(String creditCardTransactionType) {
    this.creditCardTransactionType = creditCardTransactionType;
  }

  public ItemPaymentProcessing noRealtimeCharge(Boolean noRealtimeCharge) {
    this.noRealtimeCharge = noRealtimeCharge;
    return this;
  }

   /**
   * True if no real-time charge should be performed on this item.
   * @return noRealtimeCharge
  **/
  @ApiModelProperty(value = "True if no real-time charge should be performed on this item.")
  public Boolean isNoRealtimeCharge() {
    return noRealtimeCharge;
  }

  public void setNoRealtimeCharge(Boolean noRealtimeCharge) {
    this.noRealtimeCharge = noRealtimeCharge;
  }

  public ItemPaymentProcessing paymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
    return this;
  }

  public ItemPaymentProcessing addPaymentMethodValidityItem(String paymentMethodValidityItem) {
    if (this.paymentMethodValidity == null) {
      this.paymentMethodValidity = new ArrayList<String>();
    }
    this.paymentMethodValidity.add(paymentMethodValidityItem);
    return this;
  }

   /**
   * Payment method validity
   * @return paymentMethodValidity
  **/
  @ApiModelProperty(value = "Payment method validity")
  public List<String> getPaymentMethodValidity() {
    return paymentMethodValidity;
  }

  public void setPaymentMethodValidity(List<String> paymentMethodValidity) {
    this.paymentMethodValidity = paymentMethodValidity;
  }

  public ItemPaymentProcessing rotatingTransactionGatewayCodes(List<String> rotatingTransactionGatewayCodes) {
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
    return this;
  }

  public ItemPaymentProcessing addRotatingTransactionGatewayCodesItem(String rotatingTransactionGatewayCodesItem) {
    if (this.rotatingTransactionGatewayCodes == null) {
      this.rotatingTransactionGatewayCodes = new ArrayList<String>();
    }
    this.rotatingTransactionGatewayCodes.add(rotatingTransactionGatewayCodesItem);
    return this;
  }

   /**
   * Rotating transaction gateway codes
   * @return rotatingTransactionGatewayCodes
  **/
  @ApiModelProperty(value = "Rotating transaction gateway codes")
  public List<String> getRotatingTransactionGatewayCodes() {
    return rotatingTransactionGatewayCodes;
  }

  public void setRotatingTransactionGatewayCodes(List<String> rotatingTransactionGatewayCodes) {
    this.rotatingTransactionGatewayCodes = rotatingTransactionGatewayCodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemPaymentProcessing itemPaymentProcessing = (ItemPaymentProcessing) o;
    return Objects.equals(this.blockPrepaid, itemPaymentProcessing.blockPrepaid) &&
        Objects.equals(this.creditCardTransactionType, itemPaymentProcessing.creditCardTransactionType) &&
        Objects.equals(this.noRealtimeCharge, itemPaymentProcessing.noRealtimeCharge) &&
        Objects.equals(this.paymentMethodValidity, itemPaymentProcessing.paymentMethodValidity) &&
        Objects.equals(this.rotatingTransactionGatewayCodes, itemPaymentProcessing.rotatingTransactionGatewayCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockPrepaid, creditCardTransactionType, noRealtimeCharge, paymentMethodValidity, rotatingTransactionGatewayCodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemPaymentProcessing {\n");
    
    sb.append("    blockPrepaid: ").append(toIndentedString(blockPrepaid)).append("\n");
    sb.append("    creditCardTransactionType: ").append(toIndentedString(creditCardTransactionType)).append("\n");
    sb.append("    noRealtimeCharge: ").append(toIndentedString(noRealtimeCharge)).append("\n");
    sb.append("    paymentMethodValidity: ").append(toIndentedString(paymentMethodValidity)).append("\n");
    sb.append("    rotatingTransactionGatewayCodes: ").append(toIndentedString(rotatingTransactionGatewayCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


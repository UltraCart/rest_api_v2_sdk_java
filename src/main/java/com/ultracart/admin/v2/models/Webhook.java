/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ApiUserApplicationProfile;
import com.ultracart.admin.v2.models.WebhookEventCategory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * Webhook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-15T16:26:34.823-05:00[America/Indianapolis]")
public class Webhook {
  public static final String SERIALIZED_NAME_API_USER_OID = "api_user_oid";
  @SerializedName(SERIALIZED_NAME_API_USER_OID)
  private Integer apiUserOid;

  /**
   * Version of the API objects that are sent in notifications
   */
  @JsonAdapter(ApiVersionEnum.Adapter.class)
  public enum ApiVersionEnum {
    _2017_03_01("2017-03-01");

    private String value;

    ApiVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiVersionEnum fromValue(String value) {
      for (ApiVersionEnum b : ApiVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiVersionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private ApiVersionEnum apiVersion;

  public static final String SERIALIZED_NAME_APPLICATION_PROFILE = "application_profile";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PROFILE)
  private ApiUserApplicationProfile applicationProfile;

  /**
   * The type of authentication this webhook will use when communicating with your server
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    NONE("none"),
    
    BASIC("basic");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String value) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authentication_type";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationTypeEnum authenticationType;

  public static final String SERIALIZED_NAME_BASIC_PASSWORD = "basic_password";
  @SerializedName(SERIALIZED_NAME_BASIC_PASSWORD)
  private String basicPassword;

  public static final String SERIALIZED_NAME_BASIC_USERNAME = "basic_username";
  @SerializedName(SERIALIZED_NAME_BASIC_USERNAME)
  private String basicUsername;

  public static final String SERIALIZED_NAME_COMPRESS_EVENTS = "compress_events";
  @SerializedName(SERIALIZED_NAME_COMPRESS_EVENTS)
  private Boolean compressEvents;

  public static final String SERIALIZED_NAME_CONSECUTIVE_FAILURES = "consecutive_failures";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_FAILURES)
  private Integer consecutiveFailures;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EVENT_CATEGORIES = "event_categories";
  @SerializedName(SERIALIZED_NAME_EVENT_CATEGORIES)
  private List<WebhookEventCategory> eventCategories = null;

  public static final String SERIALIZED_NAME_IAM_ACCESS_KEY = "iam_access_key";
  @SerializedName(SERIALIZED_NAME_IAM_ACCESS_KEY)
  private String iamAccessKey;

  public static final String SERIALIZED_NAME_IAM_SECRET_KEY = "iam_secret_key";
  @SerializedName(SERIALIZED_NAME_IAM_SECRET_KEY)
  private String iamSecretKey;

  public static final String SERIALIZED_NAME_MAXIMUM_EVENTS = "maximum_events";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_EVENTS)
  private Integer maximumEvents;

  public static final String SERIALIZED_NAME_MAXIMUM_SIZE = "maximum_size";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_SIZE)
  private Integer maximumSize;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private String merchantId;

  public static final String SERIALIZED_NAME_NEXT_RETRY_AFTER = "next_retry_after";
  @SerializedName(SERIALIZED_NAME_NEXT_RETRY_AFTER)
  private String nextRetryAfter;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_WEBHOOK_OID = "webhook_oid";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_OID)
  private Integer webhookOid;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public Webhook() { 
  }

  public Webhook apiUserOid(Integer apiUserOid) {
    
    this.apiUserOid = apiUserOid;
    return this;
  }

   /**
   * Populated if webhook associated with an API user
   * @return apiUserOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Populated if webhook associated with an API user")

  public Integer getApiUserOid() {
    return apiUserOid;
  }


  public void setApiUserOid(Integer apiUserOid) {
    this.apiUserOid = apiUserOid;
  }


  public Webhook apiVersion(ApiVersionEnum apiVersion) {
    
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Version of the API objects that are sent in notifications
   * @return apiVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the API objects that are sent in notifications")

  public ApiVersionEnum getApiVersion() {
    return apiVersion;
  }


  public void setApiVersion(ApiVersionEnum apiVersion) {
    this.apiVersion = apiVersion;
  }


  public Webhook applicationProfile(ApiUserApplicationProfile applicationProfile) {
    
    this.applicationProfile = applicationProfile;
    return this;
  }

   /**
   * Get applicationProfile
   * @return applicationProfile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApiUserApplicationProfile getApplicationProfile() {
    return applicationProfile;
  }


  public void setApplicationProfile(ApiUserApplicationProfile applicationProfile) {
    this.applicationProfile = applicationProfile;
  }


  public Webhook authenticationType(AuthenticationTypeEnum authenticationType) {
    
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * The type of authentication this webhook will use when communicating with your server
   * @return authenticationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of authentication this webhook will use when communicating with your server")

  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }


  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }


  public Webhook basicPassword(String basicPassword) {
    
    this.basicPassword = basicPassword;
    return this;
  }

   /**
   * Basic authentication password
   * @return basicPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Basic authentication password")

  public String getBasicPassword() {
    return basicPassword;
  }


  public void setBasicPassword(String basicPassword) {
    this.basicPassword = basicPassword;
  }


  public Webhook basicUsername(String basicUsername) {
    
    this.basicUsername = basicUsername;
    return this;
  }

   /**
   * Basic authentication user name
   * @return basicUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Basic authentication user name")

  public String getBasicUsername() {
    return basicUsername;
  }


  public void setBasicUsername(String basicUsername) {
    this.basicUsername = basicUsername;
  }


  public Webhook compressEvents(Boolean compressEvents) {
    
    this.compressEvents = compressEvents;
    return this;
  }

   /**
   * Compress events with GZIP then base 64 encode them as a string
   * @return compressEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Compress events with GZIP then base 64 encode them as a string")

  public Boolean getCompressEvents() {
    return compressEvents;
  }


  public void setCompressEvents(Boolean compressEvents) {
    this.compressEvents = compressEvents;
  }


  public Webhook consecutiveFailures(Integer consecutiveFailures) {
    
    this.consecutiveFailures = consecutiveFailures;
    return this;
  }

   /**
   * The number of consecutive failures that have occurred trying to deliver notifications to the target server
   * @return consecutiveFailures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of consecutive failures that have occurred trying to deliver notifications to the target server")

  public Integer getConsecutiveFailures() {
    return consecutiveFailures;
  }


  public void setConsecutiveFailures(Integer consecutiveFailures) {
    this.consecutiveFailures = consecutiveFailures;
  }


  public Webhook disabled(Boolean disabled) {
    
    this.disabled = disabled;
    return this;
  }

   /**
   * True if the webhook has been disabled
   * @return disabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if the webhook has been disabled")

  public Boolean getDisabled() {
    return disabled;
  }


  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Webhook eventCategories(List<WebhookEventCategory> eventCategories) {
    
    this.eventCategories = eventCategories;
    return this;
  }

  public Webhook addEventCategoriesItem(WebhookEventCategory eventCategoriesItem) {
    if (this.eventCategories == null) {
      this.eventCategories = new ArrayList<>();
    }
    this.eventCategories.add(eventCategoriesItem);
    return this;
  }

   /**
   * The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.
   * @return eventCategories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.")

  public List<WebhookEventCategory> getEventCategories() {
    return eventCategories;
  }


  public void setEventCategories(List<WebhookEventCategory> eventCategories) {
    this.eventCategories = eventCategories;
  }


  public Webhook iamAccessKey(String iamAccessKey) {
    
    this.iamAccessKey = iamAccessKey;
    return this;
  }

   /**
   * IAM Access Key for AWS SQS Delivery
   * @return iamAccessKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IAM Access Key for AWS SQS Delivery")

  public String getIamAccessKey() {
    return iamAccessKey;
  }


  public void setIamAccessKey(String iamAccessKey) {
    this.iamAccessKey = iamAccessKey;
  }


  public Webhook iamSecretKey(String iamSecretKey) {
    
    this.iamSecretKey = iamSecretKey;
    return this;
  }

   /**
   * IAM Secret Key for AWS SQS Delivery
   * @return iamSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IAM Secret Key for AWS SQS Delivery")

  public String getIamSecretKey() {
    return iamSecretKey;
  }


  public void setIamSecretKey(String iamSecretKey) {
    this.iamSecretKey = iamSecretKey;
  }


  public Webhook maximumEvents(Integer maximumEvents) {
    
    this.maximumEvents = maximumEvents;
    return this;
  }

   /**
   * The maximum number of events in the payload that UltraCart will deliver
   * @return maximumEvents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of events in the payload that UltraCart will deliver")

  public Integer getMaximumEvents() {
    return maximumEvents;
  }


  public void setMaximumEvents(Integer maximumEvents) {
    this.maximumEvents = maximumEvents;
  }


  public Webhook maximumSize(Integer maximumSize) {
    
    this.maximumSize = maximumSize;
    return this;
  }

   /**
   * The maximum size of the payload that UltraCart will deliver
   * @return maximumSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum size of the payload that UltraCart will deliver")

  public Integer getMaximumSize() {
    return maximumSize;
  }


  public void setMaximumSize(Integer maximumSize) {
    this.maximumSize = maximumSize;
  }


  public Webhook merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The UltraCart merchant ID that owns this webhook
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UltraCart merchant ID that owns this webhook")

  public String getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }


  public Webhook nextRetryAfter(String nextRetryAfter) {
    
    this.nextRetryAfter = nextRetryAfter;
    return this;
  }

   /**
   * The next time UltraCart will attempt delivery if failures have been occurring
   * @return nextRetryAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The next time UltraCart will attempt delivery if failures have been occurring")

  public String getNextRetryAfter() {
    return nextRetryAfter;
  }


  public void setNextRetryAfter(String nextRetryAfter) {
    this.nextRetryAfter = nextRetryAfter;
  }


  public Webhook pending(Integer pending) {
    
    this.pending = pending;
    return this;
  }

   /**
   * The number of pending events for this webhook
   * @return pending
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of pending events for this webhook")

  public Integer getPending() {
    return pending;
  }


  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public Webhook webhookOid(Integer webhookOid) {
    
    this.webhookOid = webhookOid;
    return this;
  }

   /**
   * The object identifier for this webhook
   * @return webhookOid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The object identifier for this webhook")

  public Integer getWebhookOid() {
    return webhookOid;
  }


  public void setWebhookOid(Integer webhookOid) {
    this.webhookOid = webhookOid;
  }


  public Webhook webhookUrl(String webhookUrl) {
    
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL to deliver events to.  Must be HTTPS for customer related information.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL to deliver events to.  Must be HTTPS for customer related information.")

  public String getWebhookUrl() {
    return webhookUrl;
  }


  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.apiUserOid, webhook.apiUserOid) &&
        Objects.equals(this.apiVersion, webhook.apiVersion) &&
        Objects.equals(this.applicationProfile, webhook.applicationProfile) &&
        Objects.equals(this.authenticationType, webhook.authenticationType) &&
        Objects.equals(this.basicPassword, webhook.basicPassword) &&
        Objects.equals(this.basicUsername, webhook.basicUsername) &&
        Objects.equals(this.compressEvents, webhook.compressEvents) &&
        Objects.equals(this.consecutiveFailures, webhook.consecutiveFailures) &&
        Objects.equals(this.disabled, webhook.disabled) &&
        Objects.equals(this.eventCategories, webhook.eventCategories) &&
        Objects.equals(this.iamAccessKey, webhook.iamAccessKey) &&
        Objects.equals(this.iamSecretKey, webhook.iamSecretKey) &&
        Objects.equals(this.maximumEvents, webhook.maximumEvents) &&
        Objects.equals(this.maximumSize, webhook.maximumSize) &&
        Objects.equals(this.merchantId, webhook.merchantId) &&
        Objects.equals(this.nextRetryAfter, webhook.nextRetryAfter) &&
        Objects.equals(this.pending, webhook.pending) &&
        Objects.equals(this.webhookOid, webhook.webhookOid) &&
        Objects.equals(this.webhookUrl, webhook.webhookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiUserOid, apiVersion, applicationProfile, authenticationType, basicPassword, basicUsername, compressEvents, consecutiveFailures, disabled, eventCategories, iamAccessKey, iamSecretKey, maximumEvents, maximumSize, merchantId, nextRetryAfter, pending, webhookOid, webhookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    apiUserOid: ").append(toIndentedString(apiUserOid)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    applicationProfile: ").append(toIndentedString(applicationProfile)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    basicPassword: ").append(toIndentedString(basicPassword)).append("\n");
    sb.append("    basicUsername: ").append(toIndentedString(basicUsername)).append("\n");
    sb.append("    compressEvents: ").append(toIndentedString(compressEvents)).append("\n");
    sb.append("    consecutiveFailures: ").append(toIndentedString(consecutiveFailures)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    eventCategories: ").append(toIndentedString(eventCategories)).append("\n");
    sb.append("    iamAccessKey: ").append(toIndentedString(iamAccessKey)).append("\n");
    sb.append("    iamSecretKey: ").append(toIndentedString(iamSecretKey)).append("\n");
    sb.append("    maximumEvents: ").append(toIndentedString(maximumEvents)).append("\n");
    sb.append("    maximumSize: ").append(toIndentedString(maximumSize)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    nextRetryAfter: ").append(toIndentedString(nextRetryAfter)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    webhookOid: ").append(toIndentedString(webhookOid)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_user_oid");
    openapiFields.add("api_version");
    openapiFields.add("application_profile");
    openapiFields.add("authentication_type");
    openapiFields.add("basic_password");
    openapiFields.add("basic_username");
    openapiFields.add("compress_events");
    openapiFields.add("consecutive_failures");
    openapiFields.add("disabled");
    openapiFields.add("event_categories");
    openapiFields.add("iam_access_key");
    openapiFields.add("iam_secret_key");
    openapiFields.add("maximum_events");
    openapiFields.add("maximum_size");
    openapiFields.add("merchant_id");
    openapiFields.add("next_retry_after");
    openapiFields.add("pending");
    openapiFields.add("webhook_oid");
    openapiFields.add("webhook_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Webhook
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Webhook.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webhook is not found in the empty JSON string", Webhook.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Webhook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webhook` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("api_version") != null && !jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      // validate the optional field `application_profile`
      if (jsonObj.getAsJsonObject("application_profile") != null) {
        ApiUserApplicationProfile.validateJsonObject(jsonObj.getAsJsonObject("application_profile"));
      }
      if (jsonObj.get("authentication_type") != null && !jsonObj.get("authentication_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_type").toString()));
      }
      if (jsonObj.get("basic_password") != null && !jsonObj.get("basic_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_password").toString()));
      }
      if (jsonObj.get("basic_username") != null && !jsonObj.get("basic_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_username").toString()));
      }
      JsonArray jsonArrayeventCategories = jsonObj.getAsJsonArray("event_categories");
      if (jsonArrayeventCategories != null) {
        // ensure the json data is an array
        if (!jsonObj.get("event_categories").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `event_categories` to be an array in the JSON string but got `%s`", jsonObj.get("event_categories").toString()));
        }

        // validate the optional field `event_categories` (array)
        for (int i = 0; i < jsonArrayeventCategories.size(); i++) {
          WebhookEventCategory.validateJsonObject(jsonArrayeventCategories.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("iam_access_key") != null && !jsonObj.get("iam_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iam_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iam_access_key").toString()));
      }
      if (jsonObj.get("iam_secret_key") != null && !jsonObj.get("iam_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iam_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iam_secret_key").toString()));
      }
      if (jsonObj.get("merchant_id") != null && !jsonObj.get("merchant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_id").toString()));
      }
      if (jsonObj.get("next_retry_after") != null && !jsonObj.get("next_retry_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_retry_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_retry_after").toString()));
      }
      if (jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webhook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webhook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webhook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webhook.class));

       return (TypeAdapter<T>) new TypeAdapter<Webhook>() {
           @Override
           public void write(JsonWriter out, Webhook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webhook read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Webhook given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Webhook
  * @throws IOException if the JSON string is invalid with respect to Webhook
  */
  public static Webhook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webhook.class);
  }

 /**
  * Convert an instance of Webhook to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


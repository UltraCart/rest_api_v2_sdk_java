/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ultracart.admin.v2.models.ApiUserApplicationProfile;
import com.ultracart.admin.v2.models.WebhookEventCategory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Webhook
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-01-03T15:58:00.972-05:00")



public class Webhook {
  @SerializedName("api_user_oid")
  private Integer apiUserOid = null;

  /**
   * Version of the API objects that are sent in notifications
   */
  @JsonAdapter(ApiVersionEnum.Adapter.class)
  public enum ApiVersionEnum {
    _2017_03_01("2017-03-01");

    private String value;

    ApiVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiVersionEnum fromValue(String text) {
      for (ApiVersionEnum b : ApiVersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ApiVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ApiVersionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("api_version")
  private ApiVersionEnum apiVersion = null;

  @SerializedName("application_profile")
  private ApiUserApplicationProfile applicationProfile = null;

  /**
   * The type of authentication this webhook will use when communicating with your server
   */
  @JsonAdapter(AuthenticationTypeEnum.Adapter.class)
  public enum AuthenticationTypeEnum {
    NONE("none"),
    
    BASIC("basic");

    private String value;

    AuthenticationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationTypeEnum fromValue(String text) {
      for (AuthenticationTypeEnum b : AuthenticationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthenticationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthenticationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authentication_type")
  private AuthenticationTypeEnum authenticationType = null;

  @SerializedName("basic_password")
  private String basicPassword = null;

  @SerializedName("basic_username")
  private String basicUsername = null;

  @SerializedName("compress_events")
  private Boolean compressEvents = null;

  @SerializedName("consecutive_failures")
  private Integer consecutiveFailures = null;

  @SerializedName("disabled")
  private Boolean disabled = null;

  @SerializedName("event_categories")
  private List<WebhookEventCategory> eventCategories = null;

  @SerializedName("iam_access_key")
  private String iamAccessKey = null;

  @SerializedName("iam_secret_key")
  private String iamSecretKey = null;

  @SerializedName("maximum_events")
  private Integer maximumEvents = null;

  @SerializedName("maximum_size")
  private Integer maximumSize = null;

  @SerializedName("merchant_id")
  private String merchantId = null;

  @SerializedName("next_retry_after")
  private String nextRetryAfter = null;

  @SerializedName("pending")
  private Integer pending = null;

  @SerializedName("webhook_oid")
  private Integer webhookOid = null;

  @SerializedName("webhook_url")
  private String webhookUrl = null;

  public Webhook apiUserOid(Integer apiUserOid) {
    this.apiUserOid = apiUserOid;
    return this;
  }

   /**
   * Populated if webhook associated with an API user
   * @return apiUserOid
  **/
  @ApiModelProperty(value = "Populated if webhook associated with an API user")
  public Integer getApiUserOid() {
    return apiUserOid;
  }

  public void setApiUserOid(Integer apiUserOid) {
    this.apiUserOid = apiUserOid;
  }

  public Webhook apiVersion(ApiVersionEnum apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Version of the API objects that are sent in notifications
   * @return apiVersion
  **/
  @ApiModelProperty(value = "Version of the API objects that are sent in notifications")
  public ApiVersionEnum getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(ApiVersionEnum apiVersion) {
    this.apiVersion = apiVersion;
  }

  public Webhook applicationProfile(ApiUserApplicationProfile applicationProfile) {
    this.applicationProfile = applicationProfile;
    return this;
  }

   /**
   * Get applicationProfile
   * @return applicationProfile
  **/
  @ApiModelProperty(value = "")
  public ApiUserApplicationProfile getApplicationProfile() {
    return applicationProfile;
  }

  public void setApplicationProfile(ApiUserApplicationProfile applicationProfile) {
    this.applicationProfile = applicationProfile;
  }

  public Webhook authenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * The type of authentication this webhook will use when communicating with your server
   * @return authenticationType
  **/
  @ApiModelProperty(value = "The type of authentication this webhook will use when communicating with your server")
  public AuthenticationTypeEnum getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationTypeEnum authenticationType) {
    this.authenticationType = authenticationType;
  }

  public Webhook basicPassword(String basicPassword) {
    this.basicPassword = basicPassword;
    return this;
  }

   /**
   * Basic authentication password
   * @return basicPassword
  **/
  @ApiModelProperty(value = "Basic authentication password")
  public String getBasicPassword() {
    return basicPassword;
  }

  public void setBasicPassword(String basicPassword) {
    this.basicPassword = basicPassword;
  }

  public Webhook basicUsername(String basicUsername) {
    this.basicUsername = basicUsername;
    return this;
  }

   /**
   * Basic authentication user name
   * @return basicUsername
  **/
  @ApiModelProperty(value = "Basic authentication user name")
  public String getBasicUsername() {
    return basicUsername;
  }

  public void setBasicUsername(String basicUsername) {
    this.basicUsername = basicUsername;
  }

  public Webhook compressEvents(Boolean compressEvents) {
    this.compressEvents = compressEvents;
    return this;
  }

   /**
   * Compress events with GZIP then base 64 encode them as a string
   * @return compressEvents
  **/
  @ApiModelProperty(value = "Compress events with GZIP then base 64 encode them as a string")
  public Boolean isCompressEvents() {
    return compressEvents;
  }

  public void setCompressEvents(Boolean compressEvents) {
    this.compressEvents = compressEvents;
  }

  public Webhook consecutiveFailures(Integer consecutiveFailures) {
    this.consecutiveFailures = consecutiveFailures;
    return this;
  }

   /**
   * The number of consecutive failures that have occurred trying to deliver notifications to the target server
   * @return consecutiveFailures
  **/
  @ApiModelProperty(value = "The number of consecutive failures that have occurred trying to deliver notifications to the target server")
  public Integer getConsecutiveFailures() {
    return consecutiveFailures;
  }

  public void setConsecutiveFailures(Integer consecutiveFailures) {
    this.consecutiveFailures = consecutiveFailures;
  }

  public Webhook disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * True if the webhook has been disabled
   * @return disabled
  **/
  @ApiModelProperty(value = "True if the webhook has been disabled")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public Webhook eventCategories(List<WebhookEventCategory> eventCategories) {
    this.eventCategories = eventCategories;
    return this;
  }

  public Webhook addEventCategoriesItem(WebhookEventCategory eventCategoriesItem) {
    if (this.eventCategories == null) {
      this.eventCategories = new ArrayList<WebhookEventCategory>();
    }
    this.eventCategories.add(eventCategoriesItem);
    return this;
  }

   /**
   * The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.
   * @return eventCategories
  **/
  @ApiModelProperty(value = "The categories of events.  Individual events and subscriptions are handled in the child objects.  _placeholders parameter effects the population of this on a retrieval.")
  public List<WebhookEventCategory> getEventCategories() {
    return eventCategories;
  }

  public void setEventCategories(List<WebhookEventCategory> eventCategories) {
    this.eventCategories = eventCategories;
  }

  public Webhook iamAccessKey(String iamAccessKey) {
    this.iamAccessKey = iamAccessKey;
    return this;
  }

   /**
   * IAM Access Key for AWS SQS Delivery
   * @return iamAccessKey
  **/
  @ApiModelProperty(value = "IAM Access Key for AWS SQS Delivery")
  public String getIamAccessKey() {
    return iamAccessKey;
  }

  public void setIamAccessKey(String iamAccessKey) {
    this.iamAccessKey = iamAccessKey;
  }

  public Webhook iamSecretKey(String iamSecretKey) {
    this.iamSecretKey = iamSecretKey;
    return this;
  }

   /**
   * IAM Secret Key for AWS SQS Delivery
   * @return iamSecretKey
  **/
  @ApiModelProperty(value = "IAM Secret Key for AWS SQS Delivery")
  public String getIamSecretKey() {
    return iamSecretKey;
  }

  public void setIamSecretKey(String iamSecretKey) {
    this.iamSecretKey = iamSecretKey;
  }

  public Webhook maximumEvents(Integer maximumEvents) {
    this.maximumEvents = maximumEvents;
    return this;
  }

   /**
   * The maximum number of events in the payload that UltraCart will deliver
   * @return maximumEvents
  **/
  @ApiModelProperty(value = "The maximum number of events in the payload that UltraCart will deliver")
  public Integer getMaximumEvents() {
    return maximumEvents;
  }

  public void setMaximumEvents(Integer maximumEvents) {
    this.maximumEvents = maximumEvents;
  }

  public Webhook maximumSize(Integer maximumSize) {
    this.maximumSize = maximumSize;
    return this;
  }

   /**
   * The maximum size of the payload that UltraCart will deliver
   * @return maximumSize
  **/
  @ApiModelProperty(value = "The maximum size of the payload that UltraCart will deliver")
  public Integer getMaximumSize() {
    return maximumSize;
  }

  public void setMaximumSize(Integer maximumSize) {
    this.maximumSize = maximumSize;
  }

  public Webhook merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The UltraCart merchant ID that owns this webhook
   * @return merchantId
  **/
  @ApiModelProperty(value = "The UltraCart merchant ID that owns this webhook")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public Webhook nextRetryAfter(String nextRetryAfter) {
    this.nextRetryAfter = nextRetryAfter;
    return this;
  }

   /**
   * The next time UltraCart will attempt delivery if failures have been occurring
   * @return nextRetryAfter
  **/
  @ApiModelProperty(value = "The next time UltraCart will attempt delivery if failures have been occurring")
  public String getNextRetryAfter() {
    return nextRetryAfter;
  }

  public void setNextRetryAfter(String nextRetryAfter) {
    this.nextRetryAfter = nextRetryAfter;
  }

  public Webhook pending(Integer pending) {
    this.pending = pending;
    return this;
  }

   /**
   * The number of pending events for this webhook
   * @return pending
  **/
  @ApiModelProperty(value = "The number of pending events for this webhook")
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }

  public Webhook webhookOid(Integer webhookOid) {
    this.webhookOid = webhookOid;
    return this;
  }

   /**
   * The object identifier for this webhook
   * @return webhookOid
  **/
  @ApiModelProperty(value = "The object identifier for this webhook")
  public Integer getWebhookOid() {
    return webhookOid;
  }

  public void setWebhookOid(Integer webhookOid) {
    this.webhookOid = webhookOid;
  }

  public Webhook webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The URL to deliver events to.  Must be HTTPS for customer related information.
   * @return webhookUrl
  **/
  @ApiModelProperty(value = "The URL to deliver events to.  Must be HTTPS for customer related information.")
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.apiUserOid, webhook.apiUserOid) &&
        Objects.equals(this.apiVersion, webhook.apiVersion) &&
        Objects.equals(this.applicationProfile, webhook.applicationProfile) &&
        Objects.equals(this.authenticationType, webhook.authenticationType) &&
        Objects.equals(this.basicPassword, webhook.basicPassword) &&
        Objects.equals(this.basicUsername, webhook.basicUsername) &&
        Objects.equals(this.compressEvents, webhook.compressEvents) &&
        Objects.equals(this.consecutiveFailures, webhook.consecutiveFailures) &&
        Objects.equals(this.disabled, webhook.disabled) &&
        Objects.equals(this.eventCategories, webhook.eventCategories) &&
        Objects.equals(this.iamAccessKey, webhook.iamAccessKey) &&
        Objects.equals(this.iamSecretKey, webhook.iamSecretKey) &&
        Objects.equals(this.maximumEvents, webhook.maximumEvents) &&
        Objects.equals(this.maximumSize, webhook.maximumSize) &&
        Objects.equals(this.merchantId, webhook.merchantId) &&
        Objects.equals(this.nextRetryAfter, webhook.nextRetryAfter) &&
        Objects.equals(this.pending, webhook.pending) &&
        Objects.equals(this.webhookOid, webhook.webhookOid) &&
        Objects.equals(this.webhookUrl, webhook.webhookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiUserOid, apiVersion, applicationProfile, authenticationType, basicPassword, basicUsername, compressEvents, consecutiveFailures, disabled, eventCategories, iamAccessKey, iamSecretKey, maximumEvents, maximumSize, merchantId, nextRetryAfter, pending, webhookOid, webhookUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    
    sb.append("    apiUserOid: ").append(toIndentedString(apiUserOid)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    applicationProfile: ").append(toIndentedString(applicationProfile)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    basicPassword: ").append(toIndentedString(basicPassword)).append("\n");
    sb.append("    basicUsername: ").append(toIndentedString(basicUsername)).append("\n");
    sb.append("    compressEvents: ").append(toIndentedString(compressEvents)).append("\n");
    sb.append("    consecutiveFailures: ").append(toIndentedString(consecutiveFailures)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    eventCategories: ").append(toIndentedString(eventCategories)).append("\n");
    sb.append("    iamAccessKey: ").append(toIndentedString(iamAccessKey)).append("\n");
    sb.append("    iamSecretKey: ").append(toIndentedString(iamSecretKey)).append("\n");
    sb.append("    maximumEvents: ").append(toIndentedString(maximumEvents)).append("\n");
    sb.append("    maximumSize: ").append(toIndentedString(maximumSize)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    nextRetryAfter: ").append(toIndentedString(nextRetryAfter)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    webhookOid: ").append(toIndentedString(webhookOid)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


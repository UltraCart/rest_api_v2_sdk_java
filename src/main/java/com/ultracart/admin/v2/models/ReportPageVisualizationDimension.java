/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.ultracart.admin.v2.util.JSON;

/**
 * ReportPageVisualizationDimension
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T16:39:09.029-04:00[America/Indianapolis]")
public class ReportPageVisualizationDimension {
  public static final String SERIALIZED_NAME_AS = "as";
  @SerializedName(SERIALIZED_NAME_AS)
  private String as;

  public static final String SERIALIZED_NAME_CAST = "cast";
  @SerializedName(SERIALIZED_NAME_CAST)
  private String cast;

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private String column;

  public static final String SERIALIZED_NAME_DATETIME_TIMEZONE = "datetime_timezone";
  @SerializedName(SERIALIZED_NAME_DATETIME_TIMEZONE)
  private String datetimeTimezone;

  public static final String SERIALIZED_NAME_DATETIME_TRUNC = "datetime_trunc";
  @SerializedName(SERIALIZED_NAME_DATETIME_TRUNC)
  private String datetimeTrunc;

  public static final String SERIALIZED_NAME_EXTRACT = "extract";
  @SerializedName(SERIALIZED_NAME_EXTRACT)
  private String extract;

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private String function;

  public ReportPageVisualizationDimension() { 
  }

  public ReportPageVisualizationDimension as(String as) {
    
    this.as = as;
    return this;
  }

   /**
   * Return the column as a different name
   * @return as
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Return the column as a different name")

  public String getAs() {
    return as;
  }


  public void setAs(String as) {
    this.as = as;
  }


  public ReportPageVisualizationDimension cast(String cast) {
    
    this.cast = cast;
    return this;
  }

   /**
   * Cast the column to a different data type such as DATETIME -&gt; DATE
   * @return cast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cast the column to a different data type such as DATETIME -> DATE")

  public String getCast() {
    return cast;
  }


  public void setCast(String cast) {
    this.cast = cast;
  }


  public ReportPageVisualizationDimension column(String column) {
    
    this.column = column;
    return this;
  }

   /**
   * Get column
   * @return column
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getColumn() {
    return column;
  }


  public void setColumn(String column) {
    this.column = column;
  }


  public ReportPageVisualizationDimension datetimeTimezone(String datetimeTimezone) {
    
    this.datetimeTimezone = datetimeTimezone;
    return this;
  }

   /**
   * The timezone to shift the date to
   * @return datetimeTimezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timezone to shift the date to")

  public String getDatetimeTimezone() {
    return datetimeTimezone;
  }


  public void setDatetimeTimezone(String datetimeTimezone) {
    this.datetimeTimezone = datetimeTimezone;
  }


  public ReportPageVisualizationDimension datetimeTrunc(String datetimeTrunc) {
    
    this.datetimeTrunc = datetimeTrunc;
    return this;
  }

   /**
   * The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.
   * @return datetimeTrunc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of truncation to perform on the date, DAY, WEEK(MONDAY), etc.")

  public String getDatetimeTrunc() {
    return datetimeTrunc;
  }


  public void setDatetimeTrunc(String datetimeTrunc) {
    this.datetimeTrunc = datetimeTrunc;
  }


  public ReportPageVisualizationDimension extract(String extract) {
    
    this.extract = extract;
    return this;
  }

   /**
   * Part of a datetime to extract
   * @return extract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Part of a datetime to extract")

  public String getExtract() {
    return extract;
  }


  public void setExtract(String extract) {
    this.extract = extract;
  }


  public ReportPageVisualizationDimension function(String function) {
    
    this.function = function;
    return this;
  }

   /**
   * The function to perform around the column such as DATE_TRUNC(@column, day)
   * @return function
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The function to perform around the column such as DATE_TRUNC(@column, day)")

  public String getFunction() {
    return function;
  }


  public void setFunction(String function) {
    this.function = function;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportPageVisualizationDimension reportPageVisualizationDimension = (ReportPageVisualizationDimension) o;
    return Objects.equals(this.as, reportPageVisualizationDimension.as) &&
        Objects.equals(this.cast, reportPageVisualizationDimension.cast) &&
        Objects.equals(this.column, reportPageVisualizationDimension.column) &&
        Objects.equals(this.datetimeTimezone, reportPageVisualizationDimension.datetimeTimezone) &&
        Objects.equals(this.datetimeTrunc, reportPageVisualizationDimension.datetimeTrunc) &&
        Objects.equals(this.extract, reportPageVisualizationDimension.extract) &&
        Objects.equals(this.function, reportPageVisualizationDimension.function);
  }

  @Override
  public int hashCode() {
    return Objects.hash(as, cast, column, datetimeTimezone, datetimeTrunc, extract, function);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportPageVisualizationDimension {\n");
    sb.append("    as: ").append(toIndentedString(as)).append("\n");
    sb.append("    cast: ").append(toIndentedString(cast)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    datetimeTimezone: ").append(toIndentedString(datetimeTimezone)).append("\n");
    sb.append("    datetimeTrunc: ").append(toIndentedString(datetimeTrunc)).append("\n");
    sb.append("    extract: ").append(toIndentedString(extract)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("as");
    openapiFields.add("cast");
    openapiFields.add("column");
    openapiFields.add("datetime_timezone");
    openapiFields.add("datetime_trunc");
    openapiFields.add("extract");
    openapiFields.add("function");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportPageVisualizationDimension
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReportPageVisualizationDimension.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportPageVisualizationDimension is not found in the empty JSON string", ReportPageVisualizationDimension.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ReportPageVisualizationDimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportPageVisualizationDimension` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("as") != null && !jsonObj.get("as").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as").toString()));
      }
      if (jsonObj.get("cast") != null && !jsonObj.get("cast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cast").toString()));
      }
      if (jsonObj.get("column") != null && !jsonObj.get("column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column").toString()));
      }
      if (jsonObj.get("datetime_timezone") != null && !jsonObj.get("datetime_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime_timezone").toString()));
      }
      if (jsonObj.get("datetime_trunc") != null && !jsonObj.get("datetime_trunc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime_trunc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime_trunc").toString()));
      }
      if (jsonObj.get("extract") != null && !jsonObj.get("extract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extract").toString()));
      }
      if (jsonObj.get("function") != null && !jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportPageVisualizationDimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportPageVisualizationDimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportPageVisualizationDimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportPageVisualizationDimension.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportPageVisualizationDimension>() {
           @Override
           public void write(JsonWriter out, ReportPageVisualizationDimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportPageVisualizationDimension read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportPageVisualizationDimension given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportPageVisualizationDimension
  * @throws IOException if the JSON string is invalid with respect to ReportPageVisualizationDimension
  */
  public static ReportPageVisualizationDimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportPageVisualizationDimension.class);
  }

 /**
  * Convert an instance of ReportPageVisualizationDimension to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


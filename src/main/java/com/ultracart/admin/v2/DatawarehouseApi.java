/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.CustomDashboard;
import com.ultracart.admin.v2.models.CustomDashboardResponse;
import com.ultracart.admin.v2.models.CustomDashboardSchedule;
import com.ultracart.admin.v2.models.CustomDashboardScheduleResponse;
import com.ultracart.admin.v2.models.CustomDashboardSchedulesResponse;
import com.ultracart.admin.v2.models.CustomDashboardsResponse;
import com.ultracart.admin.v2.models.CustomReport;
import com.ultracart.admin.v2.models.CustomReportAccountConfig;
import com.ultracart.admin.v2.models.CustomReportAccountConfigResponse;
import com.ultracart.admin.v2.models.CustomReportExecutionRequest;
import com.ultracart.admin.v2.models.CustomReportExecutionResponse;
import com.ultracart.admin.v2.models.CustomReportResponse;
import com.ultracart.admin.v2.models.CustomReportsExecutionRequest;
import com.ultracart.admin.v2.models.CustomReportsExecutionResponse;
import com.ultracart.admin.v2.models.CustomReportsResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Report;
import com.ultracart.admin.v2.models.ReportAuthResponse;
import com.ultracart.admin.v2.models.ReportDataSetPageResponse;
import com.ultracart.admin.v2.models.ReportDataSetResponse;
import com.ultracart.admin.v2.models.ReportDryRunQueriesRequest;
import com.ultracart.admin.v2.models.ReportDryRunQueriesResponse;
import com.ultracart.admin.v2.models.ReportExecuteQueriesRequest;
import com.ultracart.admin.v2.models.ReportResponse;
import com.ultracart.admin.v2.models.ReportsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatawarehouseApi {
    private ApiClient apiClient;

    public DatawarehouseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatawarehouseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public DatawarehouseApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public DatawarehouseApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCustomDashboard
     * @param customDashboardOid The dashboard oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomDashboardCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}"
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomDashboardValidateBeforeCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling deleteCustomDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomDashboardCall(customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a custom dashboard
     * Delete a custom dashboard on the UltraCart account. 
     * @param customDashboardOid The dashboard oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomDashboard(Integer customDashboardOid) throws ApiException {
        deleteCustomDashboardWithHttpInfo(customDashboardOid);
    }

    /**
     * Delete a custom dashboard
     * Delete a custom dashboard on the UltraCart account. 
     * @param customDashboardOid The dashboard oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomDashboardWithHttpInfo(Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomDashboardValidateBeforeCall(customDashboardOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a custom dashboard (asynchronously)
     * Delete a custom dashboard on the UltraCart account. 
     * @param customDashboardOid The dashboard oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomDashboardAsync(Integer customDashboardOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomDashboardValidateBeforeCall(customDashboardOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomDashboardSchedule
     * @param customDashboardScheduleOid The dashboard schedule oid to delete. (required)
     * @param customDashboardOid The dashboard oid that owns the schedule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomDashboardScheduleCall(Integer customDashboardScheduleOid, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}"
            .replaceAll("\\{" + "custom_dashboard_schedule_oid" + "\\}", apiClient.escapeString(customDashboardScheduleOid.toString()))
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomDashboardScheduleValidateBeforeCall(Integer customDashboardScheduleOid, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDashboardScheduleOid' is set
        if (customDashboardScheduleOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardScheduleOid' when calling deleteCustomDashboardSchedule(Async)");
        }
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling deleteCustomDashboardSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomDashboardScheduleCall(customDashboardScheduleOid, customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a custom dashboard schedule
     * delete a custom dashboard schedule on the UltraCart account. 
     * @param customDashboardScheduleOid The dashboard schedule oid to delete. (required)
     * @param customDashboardOid The dashboard oid that owns the schedule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomDashboardSchedule(Integer customDashboardScheduleOid, Integer customDashboardOid) throws ApiException {
        deleteCustomDashboardScheduleWithHttpInfo(customDashboardScheduleOid, customDashboardOid);
    }

    /**
     * Delete a custom dashboard schedule
     * delete a custom dashboard schedule on the UltraCart account. 
     * @param customDashboardScheduleOid The dashboard schedule oid to delete. (required)
     * @param customDashboardOid The dashboard oid that owns the schedule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomDashboardScheduleWithHttpInfo(Integer customDashboardScheduleOid, Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomDashboardScheduleValidateBeforeCall(customDashboardScheduleOid, customDashboardOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a custom dashboard schedule (asynchronously)
     * delete a custom dashboard schedule on the UltraCart account. 
     * @param customDashboardScheduleOid The dashboard schedule oid to delete. (required)
     * @param customDashboardOid The dashboard oid that owns the schedule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomDashboardScheduleAsync(Integer customDashboardScheduleOid, Integer customDashboardOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomDashboardScheduleValidateBeforeCall(customDashboardScheduleOid, customDashboardOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCustomReport
     * @param customReportOid The report oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomReportCall(Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/{custom_report_oid}"
            .replaceAll("\\{" + "custom_report_oid" + "\\}", apiClient.escapeString(customReportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomReportValidateBeforeCall(Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customReportOid' is set
        if (customReportOid == null) {
            throw new ApiException("Missing the required parameter 'customReportOid' when calling deleteCustomReport(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomReportCall(customReportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a custom report
     * Delete a custom report on the UltraCart account. 
     * @param customReportOid The report oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomReport(Integer customReportOid) throws ApiException {
        deleteCustomReportWithHttpInfo(customReportOid);
    }

    /**
     * Delete a custom report
     * Delete a custom report on the UltraCart account. 
     * @param customReportOid The report oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomReportWithHttpInfo(Integer customReportOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomReportValidateBeforeCall(customReportOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a custom report (asynchronously)
     * Delete a custom report on the UltraCart account. 
     * @param customReportOid The report oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomReportAsync(Integer customReportOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomReportValidateBeforeCall(customReportOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReport
     * @param reportOid The report oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReportCall(Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/{report_oid}"
            .replaceAll("\\{" + "report_oid" + "\\}", apiClient.escapeString(reportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReportValidateBeforeCall(Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportOid' is set
        if (reportOid == null) {
            throw new ApiException("Missing the required parameter 'reportOid' when calling deleteReport(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReportCall(reportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a report
     * Delete a report on the UltraCart account. 
     * @param reportOid The report oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReport(Integer reportOid) throws ApiException {
        deleteReportWithHttpInfo(reportOid);
    }

    /**
     * Delete a report
     * Delete a report on the UltraCart account. 
     * @param reportOid The report oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReportWithHttpInfo(Integer reportOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteReportValidateBeforeCall(reportOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a report (asynchronously)
     * Delete a report on the UltraCart account. 
     * @param reportOid The report oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReportAsync(Integer reportOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReportValidateBeforeCall(reportOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for dryRunReportQueries
     * @param queryRequest Dry run request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dryRunReportQueriesCall(ReportDryRunQueriesRequest queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/dryrun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dryRunReportQueriesValidateBeforeCall(ReportDryRunQueriesRequest queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling dryRunReportQueries(Async)");
        }
        

        com.squareup.okhttp.Call call = dryRunReportQueriesCall(queryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dry run the report queries
     * Dry run the report queries 
     * @param queryRequest Dry run request (required)
     * @return ReportDryRunQueriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportDryRunQueriesResponse dryRunReportQueries(ReportDryRunQueriesRequest queryRequest) throws ApiException {
        ApiResponse<ReportDryRunQueriesResponse> resp = dryRunReportQueriesWithHttpInfo(queryRequest);
        return resp.getData();
    }

    /**
     * Dry run the report queries
     * Dry run the report queries 
     * @param queryRequest Dry run request (required)
     * @return ApiResponse&lt;ReportDryRunQueriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportDryRunQueriesResponse> dryRunReportQueriesWithHttpInfo(ReportDryRunQueriesRequest queryRequest) throws ApiException {
        com.squareup.okhttp.Call call = dryRunReportQueriesValidateBeforeCall(queryRequest, null, null);
        Type localVarReturnType = new TypeToken<ReportDryRunQueriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dry run the report queries (asynchronously)
     * Dry run the report queries 
     * @param queryRequest Dry run request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dryRunReportQueriesAsync(ReportDryRunQueriesRequest queryRequest, final ApiCallback<ReportDryRunQueriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dryRunReportQueriesValidateBeforeCall(queryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportDryRunQueriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeCustomReport
     * @param executionRequest Request to execute custom report (required)
     * @param customReportOid The report oid to execute. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeCustomReportCall(CustomReportExecutionRequest executionRequest, Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = executionRequest;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/{custom_report_oid}/execute"
            .replaceAll("\\{" + "custom_report_oid" + "\\}", apiClient.escapeString(customReportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeCustomReportValidateBeforeCall(CustomReportExecutionRequest executionRequest, Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionRequest' is set
        if (executionRequest == null) {
            throw new ApiException("Missing the required parameter 'executionRequest' when calling executeCustomReport(Async)");
        }
        
        // verify the required parameter 'customReportOid' is set
        if (customReportOid == null) {
            throw new ApiException("Missing the required parameter 'customReportOid' when calling executeCustomReport(Async)");
        }
        

        com.squareup.okhttp.Call call = executeCustomReportCall(executionRequest, customReportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute a custom report
     * Execute a custom report on the UltraCart account. 
     * @param executionRequest Request to execute custom report (required)
     * @param customReportOid The report oid to execute. (required)
     * @return CustomReportExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportExecutionResponse executeCustomReport(CustomReportExecutionRequest executionRequest, Integer customReportOid) throws ApiException {
        ApiResponse<CustomReportExecutionResponse> resp = executeCustomReportWithHttpInfo(executionRequest, customReportOid);
        return resp.getData();
    }

    /**
     * Execute a custom report
     * Execute a custom report on the UltraCart account. 
     * @param executionRequest Request to execute custom report (required)
     * @param customReportOid The report oid to execute. (required)
     * @return ApiResponse&lt;CustomReportExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportExecutionResponse> executeCustomReportWithHttpInfo(CustomReportExecutionRequest executionRequest, Integer customReportOid) throws ApiException {
        com.squareup.okhttp.Call call = executeCustomReportValidateBeforeCall(executionRequest, customReportOid, null, null);
        Type localVarReturnType = new TypeToken<CustomReportExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a custom report (asynchronously)
     * Execute a custom report on the UltraCart account. 
     * @param executionRequest Request to execute custom report (required)
     * @param customReportOid The report oid to execute. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeCustomReportAsync(CustomReportExecutionRequest executionRequest, Integer customReportOid, final ApiCallback<CustomReportExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeCustomReportValidateBeforeCall(executionRequest, customReportOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeCustomReports
     * @param executionRequest Request to execute custom reports (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeCustomReportsCall(CustomReportsExecutionRequest executionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = executionRequest;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeCustomReportsValidateBeforeCall(CustomReportsExecutionRequest executionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionRequest' is set
        if (executionRequest == null) {
            throw new ApiException("Missing the required parameter 'executionRequest' when calling executeCustomReports(Async)");
        }
        

        com.squareup.okhttp.Call call = executeCustomReportsCall(executionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute a custom reports
     * Execute a custom reports on the UltraCart account. 
     * @param executionRequest Request to execute custom reports (required)
     * @return CustomReportsExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportsExecutionResponse executeCustomReports(CustomReportsExecutionRequest executionRequest) throws ApiException {
        ApiResponse<CustomReportsExecutionResponse> resp = executeCustomReportsWithHttpInfo(executionRequest);
        return resp.getData();
    }

    /**
     * Execute a custom reports
     * Execute a custom reports on the UltraCart account. 
     * @param executionRequest Request to execute custom reports (required)
     * @return ApiResponse&lt;CustomReportsExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportsExecutionResponse> executeCustomReportsWithHttpInfo(CustomReportsExecutionRequest executionRequest) throws ApiException {
        com.squareup.okhttp.Call call = executeCustomReportsValidateBeforeCall(executionRequest, null, null);
        Type localVarReturnType = new TypeToken<CustomReportsExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Execute a custom reports (asynchronously)
     * Execute a custom reports on the UltraCart account. 
     * @param executionRequest Request to execute custom reports (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeCustomReportsAsync(CustomReportsExecutionRequest executionRequest, final ApiCallback<CustomReportsExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeCustomReportsValidateBeforeCall(executionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportsExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for executeReportQueries
     * @param queryRequest Query request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call executeReportQueriesCall(ReportExecuteQueriesRequest queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call executeReportQueriesValidateBeforeCall(ReportExecuteQueriesRequest queryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling executeReportQueries(Async)");
        }
        

        com.squareup.okhttp.Call call = executeReportQueriesCall(queryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Execute the report queries
     * Execute the report queries 
     * @param queryRequest Query request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void executeReportQueries(ReportExecuteQueriesRequest queryRequest) throws ApiException {
        executeReportQueriesWithHttpInfo(queryRequest);
    }

    /**
     * Execute the report queries
     * Execute the report queries 
     * @param queryRequest Query request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> executeReportQueriesWithHttpInfo(ReportExecuteQueriesRequest queryRequest) throws ApiException {
        com.squareup.okhttp.Call call = executeReportQueriesValidateBeforeCall(queryRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Execute the report queries (asynchronously)
     * Execute the report queries 
     * @param queryRequest Query request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call executeReportQueriesAsync(ReportExecuteQueriesRequest queryRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = executeReportQueriesValidateBeforeCall(queryRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCustomDashboard
     * @param customDashboardOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}"
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomDashboardValidateBeforeCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling getCustomDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomDashboardCall(customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a custom dashboard
     * Retrieve a custom dashboard 
     * @param customDashboardOid  (required)
     * @return CustomDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardResponse getCustomDashboard(Integer customDashboardOid) throws ApiException {
        ApiResponse<CustomDashboardResponse> resp = getCustomDashboardWithHttpInfo(customDashboardOid);
        return resp.getData();
    }

    /**
     * Get a custom dashboard
     * Retrieve a custom dashboard 
     * @param customDashboardOid  (required)
     * @return ApiResponse&lt;CustomDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardResponse> getCustomDashboardWithHttpInfo(Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = getCustomDashboardValidateBeforeCall(customDashboardOid, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a custom dashboard (asynchronously)
     * Retrieve a custom dashboard 
     * @param customDashboardOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardAsync(Integer customDashboardOid, final ApiCallback<CustomDashboardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomDashboardValidateBeforeCall(customDashboardOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomDashboardSchedules
     * @param customDashboardOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardSchedulesCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules"
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomDashboardSchedulesValidateBeforeCall(Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling getCustomDashboardSchedules(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomDashboardSchedulesCall(customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param customDashboardOid  (required)
     * @return CustomDashboardSchedulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardSchedulesResponse getCustomDashboardSchedules(Integer customDashboardOid) throws ApiException {
        ApiResponse<CustomDashboardSchedulesResponse> resp = getCustomDashboardSchedulesWithHttpInfo(customDashboardOid);
        return resp.getData();
    }

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param customDashboardOid  (required)
     * @return ApiResponse&lt;CustomDashboardSchedulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardSchedulesResponse> getCustomDashboardSchedulesWithHttpInfo(Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = getCustomDashboardSchedulesValidateBeforeCall(customDashboardOid, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardSchedulesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom dashboards (asynchronously)
     * Retrieve a custom dashboards 
     * @param customDashboardOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardSchedulesAsync(Integer customDashboardOid, final ApiCallback<CustomDashboardSchedulesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomDashboardSchedulesValidateBeforeCall(customDashboardOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardSchedulesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomDashboards
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomDashboardsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomDashboardsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @return CustomDashboardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardsResponse getCustomDashboards() throws ApiException {
        ApiResponse<CustomDashboardsResponse> resp = getCustomDashboardsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @return ApiResponse&lt;CustomDashboardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardsResponse> getCustomDashboardsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomDashboardsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom dashboards (asynchronously)
     * Retrieve a custom dashboards 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomDashboardsAsync(final ApiCallback<CustomDashboardsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomDashboardsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomReport
     * @param customReportOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomReportCall(Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/{custom_report_oid}"
            .replaceAll("\\{" + "custom_report_oid" + "\\}", apiClient.escapeString(customReportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomReportValidateBeforeCall(Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customReportOid' is set
        if (customReportOid == null) {
            throw new ApiException("Missing the required parameter 'customReportOid' when calling getCustomReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getCustomReportCall(customReportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a custom report
     * Retrieve a custom report 
     * @param customReportOid  (required)
     * @return CustomReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportResponse getCustomReport(Integer customReportOid) throws ApiException {
        ApiResponse<CustomReportResponse> resp = getCustomReportWithHttpInfo(customReportOid);
        return resp.getData();
    }

    /**
     * Get a custom report
     * Retrieve a custom report 
     * @param customReportOid  (required)
     * @return ApiResponse&lt;CustomReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportResponse> getCustomReportWithHttpInfo(Integer customReportOid) throws ApiException {
        com.squareup.okhttp.Call call = getCustomReportValidateBeforeCall(customReportOid, null, null);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a custom report (asynchronously)
     * Retrieve a custom report 
     * @param customReportOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomReportAsync(Integer customReportOid, final ApiCallback<CustomReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomReportValidateBeforeCall(customReportOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomReportAccountConfig
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomReportAccountConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/account_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomReportAccountConfigValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomReportAccountConfigCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get custom report account configuration
     * Retrieve a custom report account configuration 
     * @return CustomReportAccountConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportAccountConfigResponse getCustomReportAccountConfig() throws ApiException {
        ApiResponse<CustomReportAccountConfigResponse> resp = getCustomReportAccountConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get custom report account configuration
     * Retrieve a custom report account configuration 
     * @return ApiResponse&lt;CustomReportAccountConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportAccountConfigResponse> getCustomReportAccountConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomReportAccountConfigValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CustomReportAccountConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom report account configuration (asynchronously)
     * Retrieve a custom report account configuration 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomReportAccountConfigAsync(final ApiCallback<CustomReportAccountConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomReportAccountConfigValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportAccountConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCustomReports
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCustomReportsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCustomReportsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCustomReportsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get custom reports
     * Retrieve a custom reports 
     * @return CustomReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportsResponse getCustomReports() throws ApiException {
        ApiResponse<CustomReportsResponse> resp = getCustomReportsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get custom reports
     * Retrieve a custom reports 
     * @return ApiResponse&lt;CustomReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportsResponse> getCustomReportsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCustomReportsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CustomReportsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get custom reports (asynchronously)
     * Retrieve a custom reports 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCustomReportsAsync(final ApiCallback<CustomReportsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCustomReportsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReport
     * @param reportOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportCall(Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/{report_oid}"
            .replaceAll("\\{" + "report_oid" + "\\}", apiClient.escapeString(reportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportValidateBeforeCall(Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportOid' is set
        if (reportOid == null) {
            throw new ApiException("Missing the required parameter 'reportOid' when calling getReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportCall(reportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a report
     * Retrieve a report 
     * @param reportOid  (required)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse getReport(Integer reportOid) throws ApiException {
        ApiResponse<ReportResponse> resp = getReportWithHttpInfo(reportOid);
        return resp.getData();
    }

    /**
     * Get a report
     * Retrieve a report 
     * @param reportOid  (required)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> getReportWithHttpInfo(Integer reportOid) throws ApiException {
        com.squareup.okhttp.Call call = getReportValidateBeforeCall(reportOid, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a report (asynchronously)
     * Retrieve a report 
     * @param reportOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportAsync(Integer reportOid, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportValidateBeforeCall(reportOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportDataSet
     * @param datasetUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportDataSetCall(String datasetUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}"
            .replaceAll("\\{" + "dataset_uuid" + "\\}", apiClient.escapeString(datasetUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportDataSetValidateBeforeCall(String datasetUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datasetUuid' is set
        if (datasetUuid == null) {
            throw new ApiException("Missing the required parameter 'datasetUuid' when calling getReportDataSet(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportDataSetCall(datasetUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a report data set
     * Retrieve a report data set 
     * @param datasetUuid  (required)
     * @return ReportDataSetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportDataSetResponse getReportDataSet(String datasetUuid) throws ApiException {
        ApiResponse<ReportDataSetResponse> resp = getReportDataSetWithHttpInfo(datasetUuid);
        return resp.getData();
    }

    /**
     * Get a report data set
     * Retrieve a report data set 
     * @param datasetUuid  (required)
     * @return ApiResponse&lt;ReportDataSetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportDataSetResponse> getReportDataSetWithHttpInfo(String datasetUuid) throws ApiException {
        com.squareup.okhttp.Call call = getReportDataSetValidateBeforeCall(datasetUuid, null, null);
        Type localVarReturnType = new TypeToken<ReportDataSetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a report data set (asynchronously)
     * Retrieve a report data set 
     * @param datasetUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportDataSetAsync(String datasetUuid, final ApiCallback<ReportDataSetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportDataSetValidateBeforeCall(datasetUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportDataSetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportDataSetPage
     * @param datasetUuid  (required)
     * @param pageNumber  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportDataSetPageCall(String datasetUuid, Integer pageNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}"
            .replaceAll("\\{" + "dataset_uuid" + "\\}", apiClient.escapeString(datasetUuid.toString()))
            .replaceAll("\\{" + "page_number" + "\\}", apiClient.escapeString(pageNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportDataSetPageValidateBeforeCall(String datasetUuid, Integer pageNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datasetUuid' is set
        if (datasetUuid == null) {
            throw new ApiException("Missing the required parameter 'datasetUuid' when calling getReportDataSetPage(Async)");
        }
        
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getReportDataSetPage(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportDataSetPageCall(datasetUuid, pageNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a report data set page
     * Retrieve a report data set page 
     * @param datasetUuid  (required)
     * @param pageNumber  (required)
     * @return ReportDataSetPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportDataSetPageResponse getReportDataSetPage(String datasetUuid, Integer pageNumber) throws ApiException {
        ApiResponse<ReportDataSetPageResponse> resp = getReportDataSetPageWithHttpInfo(datasetUuid, pageNumber);
        return resp.getData();
    }

    /**
     * Get a report data set page
     * Retrieve a report data set page 
     * @param datasetUuid  (required)
     * @param pageNumber  (required)
     * @return ApiResponse&lt;ReportDataSetPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportDataSetPageResponse> getReportDataSetPageWithHttpInfo(String datasetUuid, Integer pageNumber) throws ApiException {
        com.squareup.okhttp.Call call = getReportDataSetPageValidateBeforeCall(datasetUuid, pageNumber, null, null);
        Type localVarReturnType = new TypeToken<ReportDataSetPageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a report data set page (asynchronously)
     * Retrieve a report data set page 
     * @param datasetUuid  (required)
     * @param pageNumber  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportDataSetPageAsync(String datasetUuid, Integer pageNumber, final ApiCallback<ReportDataSetPageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportDataSetPageValidateBeforeCall(datasetUuid, pageNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportDataSetPageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportWebsocketAuthorization
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportWebsocketAuthorizationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportWebsocketAuthorizationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReportWebsocketAuthorizationCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get report websocket authorization
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @return ReportAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportAuthResponse getReportWebsocketAuthorization() throws ApiException {
        ApiResponse<ReportAuthResponse> resp = getReportWebsocketAuthorizationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get report websocket authorization
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @return ApiResponse&lt;ReportAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportAuthResponse> getReportWebsocketAuthorizationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getReportWebsocketAuthorizationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ReportAuthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get report websocket authorization (asynchronously)
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportWebsocketAuthorizationAsync(final ApiCallback<ReportAuthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportWebsocketAuthorizationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportAuthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReports
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReportsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get list of reports available
     * Retrieve a list of reports available 
     * @return ReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsResponse getReports() throws ApiException {
        ApiResponse<ReportsResponse> resp = getReportsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of reports available
     * Retrieve a list of reports available 
     * @return ApiResponse&lt;ReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsResponse> getReportsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ReportsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of reports available (asynchronously)
     * Retrieve a list of reports available 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsAsync(final ApiCallback<ReportsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCustomDashboard
     * @param dashboard Dashboard to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCustomDashboardCall(CustomDashboard dashboard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dashboard;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCustomDashboardValidateBeforeCall(CustomDashboard dashboard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboard' is set
        if (dashboard == null) {
            throw new ApiException("Missing the required parameter 'dashboard' when calling insertCustomDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCustomDashboardCall(dashboard, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a custom dashboard
     * Create a new custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to create (required)
     * @return CustomDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardResponse insertCustomDashboard(CustomDashboard dashboard) throws ApiException {
        ApiResponse<CustomDashboardResponse> resp = insertCustomDashboardWithHttpInfo(dashboard);
        return resp.getData();
    }

    /**
     * Create a custom dashboard
     * Create a new custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to create (required)
     * @return ApiResponse&lt;CustomDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardResponse> insertCustomDashboardWithHttpInfo(CustomDashboard dashboard) throws ApiException {
        com.squareup.okhttp.Call call = insertCustomDashboardValidateBeforeCall(dashboard, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a custom dashboard (asynchronously)
     * Create a new custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCustomDashboardAsync(CustomDashboard dashboard, final ApiCallback<CustomDashboardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCustomDashboardValidateBeforeCall(dashboard, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCustomDashboardSchedule
     * @param customDashboardOid  (required)
     * @param dashboardSchedule Dashboard schedule to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCustomDashboardScheduleCall(Integer customDashboardOid, CustomDashboardSchedule dashboardSchedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dashboardSchedule;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules"
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCustomDashboardScheduleValidateBeforeCall(Integer customDashboardOid, CustomDashboardSchedule dashboardSchedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling insertCustomDashboardSchedule(Async)");
        }
        
        // verify the required parameter 'dashboardSchedule' is set
        if (dashboardSchedule == null) {
            throw new ApiException("Missing the required parameter 'dashboardSchedule' when calling insertCustomDashboardSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCustomDashboardScheduleCall(customDashboardOid, dashboardSchedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a custom dashboard schedule
     * Create a new custom dashboard schedule on the UltraCart account. 
     * @param customDashboardOid  (required)
     * @param dashboardSchedule Dashboard schedule to create (required)
     * @return CustomDashboardScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardScheduleResponse insertCustomDashboardSchedule(Integer customDashboardOid, CustomDashboardSchedule dashboardSchedule) throws ApiException {
        ApiResponse<CustomDashboardScheduleResponse> resp = insertCustomDashboardScheduleWithHttpInfo(customDashboardOid, dashboardSchedule);
        return resp.getData();
    }

    /**
     * Create a custom dashboard schedule
     * Create a new custom dashboard schedule on the UltraCart account. 
     * @param customDashboardOid  (required)
     * @param dashboardSchedule Dashboard schedule to create (required)
     * @return ApiResponse&lt;CustomDashboardScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardScheduleResponse> insertCustomDashboardScheduleWithHttpInfo(Integer customDashboardOid, CustomDashboardSchedule dashboardSchedule) throws ApiException {
        com.squareup.okhttp.Call call = insertCustomDashboardScheduleValidateBeforeCall(customDashboardOid, dashboardSchedule, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardScheduleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a custom dashboard schedule (asynchronously)
     * Create a new custom dashboard schedule on the UltraCart account. 
     * @param customDashboardOid  (required)
     * @param dashboardSchedule Dashboard schedule to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCustomDashboardScheduleAsync(Integer customDashboardOid, CustomDashboardSchedule dashboardSchedule, final ApiCallback<CustomDashboardScheduleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCustomDashboardScheduleValidateBeforeCall(customDashboardOid, dashboardSchedule, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardScheduleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCustomReport
     * @param report Report to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCustomReportCall(CustomReport report, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = report;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCustomReportValidateBeforeCall(CustomReport report, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'report' is set
        if (report == null) {
            throw new ApiException("Missing the required parameter 'report' when calling insertCustomReport(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCustomReportCall(report, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a custom report
     * Create a new custom report on the UltraCart account. 
     * @param report Report to create (required)
     * @return CustomReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportResponse insertCustomReport(CustomReport report) throws ApiException {
        ApiResponse<CustomReportResponse> resp = insertCustomReportWithHttpInfo(report);
        return resp.getData();
    }

    /**
     * Create a custom report
     * Create a new custom report on the UltraCart account. 
     * @param report Report to create (required)
     * @return ApiResponse&lt;CustomReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportResponse> insertCustomReportWithHttpInfo(CustomReport report) throws ApiException {
        com.squareup.okhttp.Call call = insertCustomReportValidateBeforeCall(report, null, null);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a custom report (asynchronously)
     * Create a new custom report on the UltraCart account. 
     * @param report Report to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCustomReportAsync(CustomReport report, final ApiCallback<CustomReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCustomReportValidateBeforeCall(report, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertReport
     * @param report Report to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertReportCall(Report report, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = report;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertReportValidateBeforeCall(Report report, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'report' is set
        if (report == null) {
            throw new ApiException("Missing the required parameter 'report' when calling insertReport(Async)");
        }
        

        com.squareup.okhttp.Call call = insertReportCall(report, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a report
     * Create a new report on the UltraCart account. 
     * @param report Report to create (required)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse insertReport(Report report) throws ApiException {
        ApiResponse<ReportResponse> resp = insertReportWithHttpInfo(report);
        return resp.getData();
    }

    /**
     * Create a report
     * Create a new report on the UltraCart account. 
     * @param report Report to create (required)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> insertReportWithHttpInfo(Report report) throws ApiException {
        com.squareup.okhttp.Call call = insertReportValidateBeforeCall(report, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a report (asynchronously)
     * Create a new report on the UltraCart account. 
     * @param report Report to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertReportAsync(Report report, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertReportValidateBeforeCall(report, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomDashboard
     * @param dashboard Dashboard to custom update (required)
     * @param customDashboardOid The dashboard oid to custom update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomDashboardCall(CustomDashboard dashboard, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dashboard;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}"
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomDashboardValidateBeforeCall(CustomDashboard dashboard, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboard' is set
        if (dashboard == null) {
            throw new ApiException("Missing the required parameter 'dashboard' when calling updateCustomDashboard(Async)");
        }
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling updateCustomDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomDashboardCall(dashboard, customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a custom dashboard
     * Update a custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to custom update (required)
     * @param customDashboardOid The dashboard oid to custom update. (required)
     * @return CustomDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardResponse updateCustomDashboard(CustomDashboard dashboard, Integer customDashboardOid) throws ApiException {
        ApiResponse<CustomDashboardResponse> resp = updateCustomDashboardWithHttpInfo(dashboard, customDashboardOid);
        return resp.getData();
    }

    /**
     * Update a custom dashboard
     * Update a custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to custom update (required)
     * @param customDashboardOid The dashboard oid to custom update. (required)
     * @return ApiResponse&lt;CustomDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardResponse> updateCustomDashboardWithHttpInfo(CustomDashboard dashboard, Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomDashboardValidateBeforeCall(dashboard, customDashboardOid, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a custom dashboard (asynchronously)
     * Update a custom dashboard on the UltraCart account. 
     * @param dashboard Dashboard to custom update (required)
     * @param customDashboardOid The dashboard oid to custom update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomDashboardAsync(CustomDashboard dashboard, Integer customDashboardOid, final ApiCallback<CustomDashboardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomDashboardValidateBeforeCall(dashboard, customDashboardOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomDashboardSchedule
     * @param dashboardSchedule Dashboard schedule to update (required)
     * @param customDashboardScheduleOid The dashboard schedule oid to update. (required)
     * @param customDashboardOid The dashboard oid to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomDashboardScheduleCall(CustomDashboardSchedule dashboardSchedule, Integer customDashboardScheduleOid, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dashboardSchedule;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}"
            .replaceAll("\\{" + "custom_dashboard_schedule_oid" + "\\}", apiClient.escapeString(customDashboardScheduleOid.toString()))
            .replaceAll("\\{" + "custom_dashboard_oid" + "\\}", apiClient.escapeString(customDashboardOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomDashboardScheduleValidateBeforeCall(CustomDashboardSchedule dashboardSchedule, Integer customDashboardScheduleOid, Integer customDashboardOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardSchedule' is set
        if (dashboardSchedule == null) {
            throw new ApiException("Missing the required parameter 'dashboardSchedule' when calling updateCustomDashboardSchedule(Async)");
        }
        
        // verify the required parameter 'customDashboardScheduleOid' is set
        if (customDashboardScheduleOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardScheduleOid' when calling updateCustomDashboardSchedule(Async)");
        }
        
        // verify the required parameter 'customDashboardOid' is set
        if (customDashboardOid == null) {
            throw new ApiException("Missing the required parameter 'customDashboardOid' when calling updateCustomDashboardSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomDashboardScheduleCall(dashboardSchedule, customDashboardScheduleOid, customDashboardOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a custom dashboard schedule
     * Update a custom dashboard schedule on the UltraCart account. 
     * @param dashboardSchedule Dashboard schedule to update (required)
     * @param customDashboardScheduleOid The dashboard schedule oid to update. (required)
     * @param customDashboardOid The dashboard oid to update. (required)
     * @return CustomDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomDashboardResponse updateCustomDashboardSchedule(CustomDashboardSchedule dashboardSchedule, Integer customDashboardScheduleOid, Integer customDashboardOid) throws ApiException {
        ApiResponse<CustomDashboardResponse> resp = updateCustomDashboardScheduleWithHttpInfo(dashboardSchedule, customDashboardScheduleOid, customDashboardOid);
        return resp.getData();
    }

    /**
     * Update a custom dashboard schedule
     * Update a custom dashboard schedule on the UltraCart account. 
     * @param dashboardSchedule Dashboard schedule to update (required)
     * @param customDashboardScheduleOid The dashboard schedule oid to update. (required)
     * @param customDashboardOid The dashboard oid to update. (required)
     * @return ApiResponse&lt;CustomDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomDashboardResponse> updateCustomDashboardScheduleWithHttpInfo(CustomDashboardSchedule dashboardSchedule, Integer customDashboardScheduleOid, Integer customDashboardOid) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomDashboardScheduleValidateBeforeCall(dashboardSchedule, customDashboardScheduleOid, customDashboardOid, null, null);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a custom dashboard schedule (asynchronously)
     * Update a custom dashboard schedule on the UltraCart account. 
     * @param dashboardSchedule Dashboard schedule to update (required)
     * @param customDashboardScheduleOid The dashboard schedule oid to update. (required)
     * @param customDashboardOid The dashboard oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomDashboardScheduleAsync(CustomDashboardSchedule dashboardSchedule, Integer customDashboardScheduleOid, Integer customDashboardOid, final ApiCallback<CustomDashboardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomDashboardScheduleValidateBeforeCall(dashboardSchedule, customDashboardScheduleOid, customDashboardOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomDashboardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomReport
     * @param report Report to custom update (required)
     * @param customReportOid The report oid to custom update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomReportCall(CustomReport report, Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = report;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/{custom_report_oid}"
            .replaceAll("\\{" + "custom_report_oid" + "\\}", apiClient.escapeString(customReportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomReportValidateBeforeCall(CustomReport report, Integer customReportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'report' is set
        if (report == null) {
            throw new ApiException("Missing the required parameter 'report' when calling updateCustomReport(Async)");
        }
        
        // verify the required parameter 'customReportOid' is set
        if (customReportOid == null) {
            throw new ApiException("Missing the required parameter 'customReportOid' when calling updateCustomReport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomReportCall(report, customReportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a custom report
     * Update a custom report on the UltraCart account. 
     * @param report Report to custom update (required)
     * @param customReportOid The report oid to custom update. (required)
     * @return CustomReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportResponse updateCustomReport(CustomReport report, Integer customReportOid) throws ApiException {
        ApiResponse<CustomReportResponse> resp = updateCustomReportWithHttpInfo(report, customReportOid);
        return resp.getData();
    }

    /**
     * Update a custom report
     * Update a custom report on the UltraCart account. 
     * @param report Report to custom update (required)
     * @param customReportOid The report oid to custom update. (required)
     * @return ApiResponse&lt;CustomReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportResponse> updateCustomReportWithHttpInfo(CustomReport report, Integer customReportOid) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomReportValidateBeforeCall(report, customReportOid, null, null);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a custom report (asynchronously)
     * Update a custom report on the UltraCart account. 
     * @param report Report to custom update (required)
     * @param customReportOid The report oid to custom update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomReportAsync(CustomReport report, Integer customReportOid, final ApiCallback<CustomReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomReportValidateBeforeCall(report, customReportOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomReportAccountConfig
     * @param accountConfig Account config to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomReportAccountConfigCall(CustomReportAccountConfig accountConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = accountConfig;

        // create path and map variables
        String localVarPath = "/datawarehouse/custom_reports/account_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomReportAccountConfigValidateBeforeCall(CustomReportAccountConfig accountConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountConfig' is set
        if (accountConfig == null) {
            throw new ApiException("Missing the required parameter 'accountConfig' when calling updateCustomReportAccountConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomReportAccountConfigCall(accountConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update custom report account config
     * Update custom report account config. 
     * @param accountConfig Account config to update (required)
     * @return CustomReportAccountConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomReportAccountConfigResponse updateCustomReportAccountConfig(CustomReportAccountConfig accountConfig) throws ApiException {
        ApiResponse<CustomReportAccountConfigResponse> resp = updateCustomReportAccountConfigWithHttpInfo(accountConfig);
        return resp.getData();
    }

    /**
     * Update custom report account config
     * Update custom report account config. 
     * @param accountConfig Account config to update (required)
     * @return ApiResponse&lt;CustomReportAccountConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomReportAccountConfigResponse> updateCustomReportAccountConfigWithHttpInfo(CustomReportAccountConfig accountConfig) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomReportAccountConfigValidateBeforeCall(accountConfig, null, null);
        Type localVarReturnType = new TypeToken<CustomReportAccountConfigResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update custom report account config (asynchronously)
     * Update custom report account config. 
     * @param accountConfig Account config to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomReportAccountConfigAsync(CustomReportAccountConfig accountConfig, final ApiCallback<CustomReportAccountConfigResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomReportAccountConfigValidateBeforeCall(accountConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomReportAccountConfigResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateReport
     * @param report Report to update (required)
     * @param reportOid The report oid to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReportCall(Report report, Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = report;

        // create path and map variables
        String localVarPath = "/datawarehouse/reports/{report_oid}"
            .replaceAll("\\{" + "report_oid" + "\\}", apiClient.escapeString(reportOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReportValidateBeforeCall(Report report, Integer reportOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'report' is set
        if (report == null) {
            throw new ApiException("Missing the required parameter 'report' when calling updateReport(Async)");
        }
        
        // verify the required parameter 'reportOid' is set
        if (reportOid == null) {
            throw new ApiException("Missing the required parameter 'reportOid' when calling updateReport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateReportCall(report, reportOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a report
     * Update a report on the UltraCart account. 
     * @param report Report to update (required)
     * @param reportOid The report oid to update. (required)
     * @return ReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResponse updateReport(Report report, Integer reportOid) throws ApiException {
        ApiResponse<ReportResponse> resp = updateReportWithHttpInfo(report, reportOid);
        return resp.getData();
    }

    /**
     * Update a report
     * Update a report on the UltraCart account. 
     * @param report Report to update (required)
     * @param reportOid The report oid to update. (required)
     * @return ApiResponse&lt;ReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResponse> updateReportWithHttpInfo(Report report, Integer reportOid) throws ApiException {
        com.squareup.okhttp.Call call = updateReportValidateBeforeCall(report, reportOid, null, null);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a report (asynchronously)
     * Update a report on the UltraCart account. 
     * @param report Report to update (required)
     * @param reportOid The report oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReportAsync(Report report, Integer reportOid, final ApiCallback<ReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReportValidateBeforeCall(report, reportOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

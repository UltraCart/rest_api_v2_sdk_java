/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.GiftCertificate;
import com.ultracart.admin.v2.models.GiftCertificateCreateRequest;
import com.ultracart.admin.v2.models.GiftCertificateLedgerEntry;
import com.ultracart.admin.v2.models.GiftCertificateQuery;
import com.ultracart.admin.v2.models.GiftCertificateResponse;
import com.ultracart.admin.v2.models.GiftCertificatesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GiftCertificateApi {
    private ApiClient apiClient;

    public GiftCertificateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GiftCertificateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public GiftCertificateApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public GiftCertificateApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addGiftCertificateLedgerEntry
     * @param giftCertificateOid  (required)
     * @param giftCertificateLedgerEntry Gift certificate ledger entry (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addGiftCertificateLedgerEntryCall(Integer giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = giftCertificateLedgerEntry;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}/ledger_entry"
            .replaceAll("\\{" + "gift_certificate_oid" + "\\}", apiClient.escapeString(giftCertificateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addGiftCertificateLedgerEntryValidateBeforeCall(Integer giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateOid' is set
        if (giftCertificateOid == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateOid' when calling addGiftCertificateLedgerEntry(Async)");
        }
        
        // verify the required parameter 'giftCertificateLedgerEntry' is set
        if (giftCertificateLedgerEntry == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateLedgerEntry' when calling addGiftCertificateLedgerEntry(Async)");
        }
        

        com.squareup.okhttp.Call call = addGiftCertificateLedgerEntryCall(giftCertificateOid, giftCertificateLedgerEntry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a gift certificate ledger entry
     * Adds a ledger entry for this gift certificate. 
     * @param giftCertificateOid  (required)
     * @param giftCertificateLedgerEntry Gift certificate ledger entry (required)
     * @return GiftCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificateResponse addGiftCertificateLedgerEntry(Integer giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry) throws ApiException {
        ApiResponse<GiftCertificateResponse> resp = addGiftCertificateLedgerEntryWithHttpInfo(giftCertificateOid, giftCertificateLedgerEntry);
        return resp.getData();
    }

    /**
     * Add a gift certificate ledger entry
     * Adds a ledger entry for this gift certificate. 
     * @param giftCertificateOid  (required)
     * @param giftCertificateLedgerEntry Gift certificate ledger entry (required)
     * @return ApiResponse&lt;GiftCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificateResponse> addGiftCertificateLedgerEntryWithHttpInfo(Integer giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry) throws ApiException {
        com.squareup.okhttp.Call call = addGiftCertificateLedgerEntryValidateBeforeCall(giftCertificateOid, giftCertificateLedgerEntry, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a gift certificate ledger entry (asynchronously)
     * Adds a ledger entry for this gift certificate. 
     * @param giftCertificateOid  (required)
     * @param giftCertificateLedgerEntry Gift certificate ledger entry (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addGiftCertificateLedgerEntryAsync(Integer giftCertificateOid, GiftCertificateLedgerEntry giftCertificateLedgerEntry, final ApiCallback<GiftCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addGiftCertificateLedgerEntryValidateBeforeCall(giftCertificateOid, giftCertificateLedgerEntry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createGiftCertificate
     * @param giftCertificateCreateRequest Gift certificate create request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGiftCertificateCall(GiftCertificateCreateRequest giftCertificateCreateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = giftCertificateCreateRequest;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGiftCertificateValidateBeforeCall(GiftCertificateCreateRequest giftCertificateCreateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateCreateRequest' is set
        if (giftCertificateCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateCreateRequest' when calling createGiftCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = createGiftCertificateCall(giftCertificateCreateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a gift certificate
     * Creates a gift certificate for this merchant account. 
     * @param giftCertificateCreateRequest Gift certificate create request (required)
     * @return GiftCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificateResponse createGiftCertificate(GiftCertificateCreateRequest giftCertificateCreateRequest) throws ApiException {
        ApiResponse<GiftCertificateResponse> resp = createGiftCertificateWithHttpInfo(giftCertificateCreateRequest);
        return resp.getData();
    }

    /**
     * Create a gift certificate
     * Creates a gift certificate for this merchant account. 
     * @param giftCertificateCreateRequest Gift certificate create request (required)
     * @return ApiResponse&lt;GiftCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificateResponse> createGiftCertificateWithHttpInfo(GiftCertificateCreateRequest giftCertificateCreateRequest) throws ApiException {
        com.squareup.okhttp.Call call = createGiftCertificateValidateBeforeCall(giftCertificateCreateRequest, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a gift certificate (asynchronously)
     * Creates a gift certificate for this merchant account. 
     * @param giftCertificateCreateRequest Gift certificate create request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGiftCertificateAsync(GiftCertificateCreateRequest giftCertificateCreateRequest, final ApiCallback<GiftCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGiftCertificateValidateBeforeCall(giftCertificateCreateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGiftCertificate
     * @param giftCertificateOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGiftCertificateCall(Integer giftCertificateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
            .replaceAll("\\{" + "gift_certificate_oid" + "\\}", apiClient.escapeString(giftCertificateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGiftCertificateValidateBeforeCall(Integer giftCertificateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateOid' is set
        if (giftCertificateOid == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateOid' when calling deleteGiftCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGiftCertificateCall(giftCertificateOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a gift certificate
     * Deletes a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGiftCertificate(Integer giftCertificateOid) throws ApiException {
        deleteGiftCertificateWithHttpInfo(giftCertificateOid);
    }

    /**
     * Delete a gift certificate
     * Deletes a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGiftCertificateWithHttpInfo(Integer giftCertificateOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteGiftCertificateValidateBeforeCall(giftCertificateOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a gift certificate (asynchronously)
     * Deletes a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGiftCertificateAsync(Integer giftCertificateOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGiftCertificateValidateBeforeCall(giftCertificateOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGiftCertificateByCode
     * @param code  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificateByCodeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/by_code/{code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGiftCertificateByCodeValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getGiftCertificateByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getGiftCertificateByCodeCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve gift certificate by code
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * @param code  (required)
     * @return GiftCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificateResponse getGiftCertificateByCode(String code) throws ApiException {
        ApiResponse<GiftCertificateResponse> resp = getGiftCertificateByCodeWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Retrieve gift certificate by code
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * @param code  (required)
     * @return ApiResponse&lt;GiftCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificateResponse> getGiftCertificateByCodeWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = getGiftCertificateByCodeValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve gift certificate by code (asynchronously)
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * @param code  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificateByCodeAsync(String code, final ApiCallback<GiftCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGiftCertificateByCodeValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGiftCertificateByOid
     * @param giftCertificateOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificateByOidCall(Integer giftCertificateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
            .replaceAll("\\{" + "gift_certificate_oid" + "\\}", apiClient.escapeString(giftCertificateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGiftCertificateByOidValidateBeforeCall(Integer giftCertificateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateOid' is set
        if (giftCertificateOid == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateOid' when calling getGiftCertificateByOid(Async)");
        }
        

        com.squareup.okhttp.Call call = getGiftCertificateByOidCall(giftCertificateOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve gift certificate by oid
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * @param giftCertificateOid  (required)
     * @return GiftCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificateResponse getGiftCertificateByOid(Integer giftCertificateOid) throws ApiException {
        ApiResponse<GiftCertificateResponse> resp = getGiftCertificateByOidWithHttpInfo(giftCertificateOid);
        return resp.getData();
    }

    /**
     * Retrieve gift certificate by oid
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * @param giftCertificateOid  (required)
     * @return ApiResponse&lt;GiftCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificateResponse> getGiftCertificateByOidWithHttpInfo(Integer giftCertificateOid) throws ApiException {
        com.squareup.okhttp.Call call = getGiftCertificateByOidValidateBeforeCall(giftCertificateOid, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve gift certificate by oid (asynchronously)
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * @param giftCertificateOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificateByOidAsync(Integer giftCertificateOid, final ApiCallback<GiftCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGiftCertificateByOidValidateBeforeCall(giftCertificateOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGiftCertificatesByEmail
     * @param email  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificatesByEmailCall(String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/by_email/{email}"
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGiftCertificatesByEmailValidateBeforeCall(String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getGiftCertificatesByEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = getGiftCertificatesByEmailCall(email, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve gift certificate by email
     * Retrieves all gift certificates from the account based on customer email. 
     * @param email  (required)
     * @return GiftCertificatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificatesResponse getGiftCertificatesByEmail(String email) throws ApiException {
        ApiResponse<GiftCertificatesResponse> resp = getGiftCertificatesByEmailWithHttpInfo(email);
        return resp.getData();
    }

    /**
     * Retrieve gift certificate by email
     * Retrieves all gift certificates from the account based on customer email. 
     * @param email  (required)
     * @return ApiResponse&lt;GiftCertificatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificatesResponse> getGiftCertificatesByEmailWithHttpInfo(String email) throws ApiException {
        com.squareup.okhttp.Call call = getGiftCertificatesByEmailValidateBeforeCall(email, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve gift certificate by email (asynchronously)
     * Retrieves all gift certificates from the account based on customer email. 
     * @param email  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificatesByEmailAsync(String email, final ApiCallback<GiftCertificatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGiftCertificatesByEmailValidateBeforeCall(email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGiftCertificatesByQuery
     * @param giftCertificateQuery Gift certificates query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificatesByQueryCall(GiftCertificateQuery giftCertificateQuery, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = giftCertificateQuery;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGiftCertificatesByQueryValidateBeforeCall(GiftCertificateQuery giftCertificateQuery, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateQuery' is set
        if (giftCertificateQuery == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateQuery' when calling getGiftCertificatesByQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getGiftCertificatesByQueryCall(giftCertificateQuery, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve gift certificates by query
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param giftCertificateQuery Gift certificates query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return GiftCertificatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificatesResponse getGiftCertificatesByQuery(GiftCertificateQuery giftCertificateQuery, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<GiftCertificatesResponse> resp = getGiftCertificatesByQueryWithHttpInfo(giftCertificateQuery, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve gift certificates by query
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param giftCertificateQuery Gift certificates query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;GiftCertificatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificatesResponse> getGiftCertificatesByQueryWithHttpInfo(GiftCertificateQuery giftCertificateQuery, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getGiftCertificatesByQueryValidateBeforeCall(giftCertificateQuery, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve gift certificates by query (asynchronously)
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param giftCertificateQuery Gift certificates query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch customers that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGiftCertificatesByQueryAsync(GiftCertificateQuery giftCertificateQuery, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<GiftCertificatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGiftCertificatesByQueryValidateBeforeCall(giftCertificateQuery, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGiftCertificate
     * @param giftCertificateOid  (required)
     * @param giftCertificate Gift certificate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGiftCertificateCall(Integer giftCertificateOid, GiftCertificate giftCertificate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = giftCertificate;

        // create path and map variables
        String localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
            .replaceAll("\\{" + "gift_certificate_oid" + "\\}", apiClient.escapeString(giftCertificateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGiftCertificateValidateBeforeCall(Integer giftCertificateOid, GiftCertificate giftCertificate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'giftCertificateOid' is set
        if (giftCertificateOid == null) {
            throw new ApiException("Missing the required parameter 'giftCertificateOid' when calling updateGiftCertificate(Async)");
        }
        
        // verify the required parameter 'giftCertificate' is set
        if (giftCertificate == null) {
            throw new ApiException("Missing the required parameter 'giftCertificate' when calling updateGiftCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGiftCertificateCall(giftCertificateOid, giftCertificate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a gift certificate
     * Update a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @param giftCertificate Gift certificate (required)
     * @return GiftCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GiftCertificateResponse updateGiftCertificate(Integer giftCertificateOid, GiftCertificate giftCertificate) throws ApiException {
        ApiResponse<GiftCertificateResponse> resp = updateGiftCertificateWithHttpInfo(giftCertificateOid, giftCertificate);
        return resp.getData();
    }

    /**
     * Update a gift certificate
     * Update a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @param giftCertificate Gift certificate (required)
     * @return ApiResponse&lt;GiftCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GiftCertificateResponse> updateGiftCertificateWithHttpInfo(Integer giftCertificateOid, GiftCertificate giftCertificate) throws ApiException {
        com.squareup.okhttp.Call call = updateGiftCertificateValidateBeforeCall(giftCertificateOid, giftCertificate, null, null);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a gift certificate (asynchronously)
     * Update a gift certificate for this merchant account. 
     * @param giftCertificateOid  (required)
     * @param giftCertificate Gift certificate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGiftCertificateAsync(Integer giftCertificateOid, GiftCertificate giftCertificate, final ApiCallback<GiftCertificateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGiftCertificateValidateBeforeCall(giftCertificateOid, giftCertificate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GiftCertificateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

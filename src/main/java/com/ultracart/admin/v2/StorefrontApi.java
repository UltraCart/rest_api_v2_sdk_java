/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.AddLibraryItemRequest;
import com.ultracart.admin.v2.models.ApplyLibraryItemRequest;
import com.ultracart.admin.v2.models.ApplyLibraryItemResponse;
import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.CountriesResponse;
import com.ultracart.admin.v2.models.EmailBaseTemplateListResponse;
import com.ultracart.admin.v2.models.EmailCampaign;
import com.ultracart.admin.v2.models.EmailCampaignFolder;
import com.ultracart.admin.v2.models.EmailCampaignFolderResponse;
import com.ultracart.admin.v2.models.EmailCampaignFoldersResponse;
import com.ultracart.admin.v2.models.EmailCampaignResponse;
import com.ultracart.admin.v2.models.EmailCampaignsResponse;
import com.ultracart.admin.v2.models.EmailClicksResponse;
import com.ultracart.admin.v2.models.EmailCommseq;
import com.ultracart.admin.v2.models.EmailCommseqEmail;
import com.ultracart.admin.v2.models.EmailCommseqEmailResponse;
import com.ultracart.admin.v2.models.EmailCommseqEmailSendTestRequest;
import com.ultracart.admin.v2.models.EmailCommseqEmailSendTestResponse;
import com.ultracart.admin.v2.models.EmailCommseqEmailsRequest;
import com.ultracart.admin.v2.models.EmailCommseqEmailsResponse;
import com.ultracart.admin.v2.models.EmailCommseqPostcard;
import com.ultracart.admin.v2.models.EmailCommseqPostcardResponse;
import com.ultracart.admin.v2.models.EmailCommseqPostcardSendTestRequest;
import com.ultracart.admin.v2.models.EmailCommseqPostcardSendTestResponse;
import com.ultracart.admin.v2.models.EmailCommseqPostcardsRequest;
import com.ultracart.admin.v2.models.EmailCommseqPostcardsResponse;
import com.ultracart.admin.v2.models.EmailCommseqResponse;
import com.ultracart.admin.v2.models.EmailCommseqStatResponse;
import com.ultracart.admin.v2.models.EmailCommseqsResponse;
import com.ultracart.admin.v2.models.EmailCustomer;
import com.ultracart.admin.v2.models.EmailCustomerEditorUrlResponse;
import com.ultracart.admin.v2.models.EmailCustomersResponse;
import com.ultracart.admin.v2.models.EmailDashboardActivityResponse;
import com.ultracart.admin.v2.models.EmailDashboardStatsResponse;
import com.ultracart.admin.v2.models.EmailEditorTokenResponse;
import com.ultracart.admin.v2.models.EmailFlow;
import com.ultracart.admin.v2.models.EmailFlowBackPopulateRequest;
import com.ultracart.admin.v2.models.EmailFlowBackPopulateResponse;
import com.ultracart.admin.v2.models.EmailFlowFolder;
import com.ultracart.admin.v2.models.EmailFlowFolderResponse;
import com.ultracart.admin.v2.models.EmailFlowFoldersResponse;
import com.ultracart.admin.v2.models.EmailFlowResponse;
import com.ultracart.admin.v2.models.EmailFlowsResponse;
import com.ultracart.admin.v2.models.EmailGlobalSettings;
import com.ultracart.admin.v2.models.EmailGlobalSettingsResponse;
import com.ultracart.admin.v2.models.EmailGlobalUnsubscribeRequest;
import com.ultracart.admin.v2.models.EmailGlobalUnsubscribeResponse;
import com.ultracart.admin.v2.models.EmailHistogramPropertyNamesResponse;
import com.ultracart.admin.v2.models.EmailHistogramPropertyValuesResponse;
import com.ultracart.admin.v2.models.EmailList;
import com.ultracart.admin.v2.models.EmailListArchiveResponse;
import com.ultracart.admin.v2.models.EmailListCustomersResponse;
import com.ultracart.admin.v2.models.EmailListResponse;
import com.ultracart.admin.v2.models.EmailListSubscribeResponse;
import com.ultracart.admin.v2.models.EmailListsResponse;
import com.ultracart.admin.v2.models.EmailOrdersResponse;
import com.ultracart.admin.v2.models.EmailPerformanceResponse;
import com.ultracart.admin.v2.models.EmailPlan;
import com.ultracart.admin.v2.models.EmailPlanResponse;
import com.ultracart.admin.v2.models.EmailSegment;
import com.ultracart.admin.v2.models.EmailSegmentArchiveResponse;
import com.ultracart.admin.v2.models.EmailSegmentCustomersResponse;
import com.ultracart.admin.v2.models.EmailSegmentDownloadPrepareResponse;
import com.ultracart.admin.v2.models.EmailSegmentResponse;
import com.ultracart.admin.v2.models.EmailSegmentsResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainsResponse;
import com.ultracart.admin.v2.models.EmailSettings;
import com.ultracart.admin.v2.models.EmailSettingsResponse;
import com.ultracart.admin.v2.models.EmailStatPostcardSummaryRequest;
import com.ultracart.admin.v2.models.EmailStatPostcardSummaryResponse;
import com.ultracart.admin.v2.models.EmailStatSummaryRequest;
import com.ultracart.admin.v2.models.EmailStatSummaryResponse;
import com.ultracart.admin.v2.models.EmailStepStatRequest;
import com.ultracart.admin.v2.models.EmailStepStatResponse;
import com.ultracart.admin.v2.models.EmailStepWaitingRequest;
import com.ultracart.admin.v2.models.EmailStepWaitingResponse;
import com.ultracart.admin.v2.models.EmailTemplate;
import com.ultracart.admin.v2.models.EmailTemplatesResponse;
import com.ultracart.admin.v2.models.EmailThirdPartyListImportRequest;
import com.ultracart.admin.v2.models.EmailThirdPartyProvidersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Experiment;
import com.ultracart.admin.v2.models.ExperimentResponse;
import com.ultracart.admin.v2.models.ExperimentsResponse;
import com.ultracart.admin.v2.models.GeocodeRequest;
import com.ultracart.admin.v2.models.GeocodeResponse;
import com.ultracart.admin.v2.models.LibraryFilterValuesResponse;
import com.ultracart.admin.v2.models.LibraryItem;
import com.ultracart.admin.v2.models.LibraryItemQuery;
import com.ultracart.admin.v2.models.LibraryItemResponse;
import com.ultracart.admin.v2.models.LibraryItemsResponse;
import com.ultracart.admin.v2.models.LookupRequest;
import com.ultracart.admin.v2.models.LookupResponse;
import com.ultracart.admin.v2.models.PricingTiersResponse;
import com.ultracart.admin.v2.models.PublishLibraryItemRequest;
import com.ultracart.admin.v2.models.ScreenRecordingPageViewDataResponse;
import com.ultracart.admin.v2.models.ScreenRecordingQueryRequest;
import com.ultracart.admin.v2.models.ScreenRecordingQueryResponse;
import com.ultracart.admin.v2.models.ScreenRecordingResponse;
import com.ultracart.admin.v2.models.ScreenRecordingSegment;
import com.ultracart.admin.v2.models.ScreenRecordingSegmentResponse;
import com.ultracart.admin.v2.models.ScreenRecordingSegmentsResponse;
import com.ultracart.admin.v2.models.ScreenRecordingSettings;
import com.ultracart.admin.v2.models.ScreenRecordingSettingsResponse;
import com.ultracart.admin.v2.models.ScreenRecordingTagsRequest;
import com.ultracart.admin.v2.models.ScreenRecordingTagsResponse;
import com.ultracart.admin.v2.models.ScreenshotsResponse;
import com.ultracart.admin.v2.models.ThumbnailParametersRequest;
import com.ultracart.admin.v2.models.ThumbnailParametersResponse;
import com.ultracart.admin.v2.models.TransactionEmail;
import com.ultracart.admin.v2.models.TransactionEmailListResponse;
import com.ultracart.admin.v2.models.TransactionEmailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorefrontApi {
    private ApiClient apiClient;

    public StorefrontApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorefrontApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public StorefrontApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public StorefrontApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addToLibrary
     * @param addLibraryRequest New library item request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addToLibraryCall(AddLibraryItemRequest addLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addLibraryRequest;

        // create path and map variables
        String localVarPath = "/storefront/code_library";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addToLibraryValidateBeforeCall(AddLibraryItemRequest addLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addLibraryRequest' is set
        if (addLibraryRequest == null) {
            throw new ApiException("Missing the required parameter 'addLibraryRequest' when calling addToLibrary(Async)");
        }
        

        com.squareup.okhttp.Call call = addToLibraryCall(addLibraryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add to library
     * 
     * @param addLibraryRequest New library item request (required)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse addToLibrary(AddLibraryItemRequest addLibraryRequest) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = addToLibraryWithHttpInfo(addLibraryRequest);
        return resp.getData();
    }

    /**
     * Add to library
     * 
     * @param addLibraryRequest New library item request (required)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> addToLibraryWithHttpInfo(AddLibraryItemRequest addLibraryRequest) throws ApiException {
        com.squareup.okhttp.Call call = addToLibraryValidateBeforeCall(addLibraryRequest, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add to library (asynchronously)
     * 
     * @param addLibraryRequest New library item request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addToLibraryAsync(AddLibraryItemRequest addLibraryRequest, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addToLibraryValidateBeforeCall(addLibraryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for applyToStoreFront
     * @param applyLibraryRequest New library item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyToStoreFrontCall(ApplyLibraryItemRequest applyLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = applyLibraryRequest;

        // create path and map variables
        String localVarPath = "/storefront/code_library/apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyToStoreFrontValidateBeforeCall(ApplyLibraryItemRequest applyLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'applyLibraryRequest' is set
        if (applyLibraryRequest == null) {
            throw new ApiException("Missing the required parameter 'applyLibraryRequest' when calling applyToStoreFront(Async)");
        }
        

        com.squareup.okhttp.Call call = applyToStoreFrontCall(applyLibraryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply library item to storefront.
     * 
     * @param applyLibraryRequest New library item (required)
     * @return ApplyLibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApplyLibraryItemResponse applyToStoreFront(ApplyLibraryItemRequest applyLibraryRequest) throws ApiException {
        ApiResponse<ApplyLibraryItemResponse> resp = applyToStoreFrontWithHttpInfo(applyLibraryRequest);
        return resp.getData();
    }

    /**
     * Apply library item to storefront.
     * 
     * @param applyLibraryRequest New library item (required)
     * @return ApiResponse&lt;ApplyLibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApplyLibraryItemResponse> applyToStoreFrontWithHttpInfo(ApplyLibraryItemRequest applyLibraryRequest) throws ApiException {
        com.squareup.okhttp.Call call = applyToStoreFrontValidateBeforeCall(applyLibraryRequest, null, null);
        Type localVarReturnType = new TypeToken<ApplyLibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply library item to storefront. (asynchronously)
     * 
     * @param applyLibraryRequest New library item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call applyToStoreFrontAsync(ApplyLibraryItemRequest applyLibraryRequest, final ApiCallback<ApplyLibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyToStoreFrontValidateBeforeCall(applyLibraryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApplyLibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for archiveEmailList
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveEmailListCall(Integer storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveEmailListValidateBeforeCall(Integer storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling archiveEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling archiveEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveEmailListCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @return EmailListArchiveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListArchiveResponse archiveEmailList(Integer storefrontOid, String emailListUuid) throws ApiException {
        ApiResponse<EmailListArchiveResponse> resp = archiveEmailListWithHttpInfo(storefrontOid, emailListUuid);
        return resp.getData();
    }

    /**
     * Archive email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @return ApiResponse&lt;EmailListArchiveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListArchiveResponse> archiveEmailListWithHttpInfo(Integer storefrontOid, String emailListUuid) throws ApiException {
        com.squareup.okhttp.Call call = archiveEmailListValidateBeforeCall(storefrontOid, emailListUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailListArchiveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive email list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveEmailListAsync(Integer storefrontOid, String emailListUuid, final ApiCallback<EmailListArchiveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveEmailListValidateBeforeCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListArchiveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for archiveEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveEmailSegmentCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveEmailSegmentValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling archiveEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling archiveEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveEmailSegmentCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return EmailSegmentArchiveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentArchiveResponse archiveEmailSegment(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        ApiResponse<EmailSegmentArchiveResponse> resp = archiveEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
        return resp.getData();
    }

    /**
     * Archive email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return ApiResponse&lt;EmailSegmentArchiveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentArchiveResponse> archiveEmailSegmentWithHttpInfo(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        com.squareup.okhttp.Call call = archiveEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentArchiveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveEmailSegmentAsync(Integer storefrontOid, String emailSegmentUuid, final ApiCallback<EmailSegmentArchiveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentArchiveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for backPopulateEmailFlow
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param backPopulateRequest The request to back populate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call backPopulateEmailFlowCall(Integer storefrontOid, String emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backPopulateRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call backPopulateEmailFlowValidateBeforeCall(Integer storefrontOid, String emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling backPopulateEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling backPopulateEmailFlow(Async)");
        }
        
        // verify the required parameter 'backPopulateRequest' is set
        if (backPopulateRequest == null) {
            throw new ApiException("Missing the required parameter 'backPopulateRequest' when calling backPopulateEmailFlow(Async)");
        }
        

        com.squareup.okhttp.Call call = backPopulateEmailFlowCall(storefrontOid, emailFlowUuid, backPopulateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Back populate email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param backPopulateRequest The request to back populate (required)
     * @return EmailFlowBackPopulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowBackPopulateResponse backPopulateEmailFlow(Integer storefrontOid, String emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest) throws ApiException {
        ApiResponse<EmailFlowBackPopulateResponse> resp = backPopulateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, backPopulateRequest);
        return resp.getData();
    }

    /**
     * Back populate email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param backPopulateRequest The request to back populate (required)
     * @return ApiResponse&lt;EmailFlowBackPopulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowBackPopulateResponse> backPopulateEmailFlowWithHttpInfo(Integer storefrontOid, String emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest) throws ApiException {
        com.squareup.okhttp.Call call = backPopulateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, backPopulateRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowBackPopulateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Back populate email flow (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param backPopulateRequest The request to back populate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call backPopulateEmailFlowAsync(Integer storefrontOid, String emailFlowUuid, EmailFlowBackPopulateRequest backPopulateRequest, final ApiCallback<EmailFlowBackPopulateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = backPopulateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, backPopulateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowBackPopulateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkDownloadEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegmentRebuildUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkDownloadEmailSegmentCall(Integer storefrontOid, String emailSegmentUuid, String emailSegmentRebuildUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()))
            .replaceAll("\\{" + "email_segment_rebuild_uuid" + "\\}", apiClient.escapeString(emailSegmentRebuildUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkDownloadEmailSegmentValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, String emailSegmentRebuildUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling checkDownloadEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling checkDownloadEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentRebuildUuid' is set
        if (emailSegmentRebuildUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentRebuildUuid' when calling checkDownloadEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = checkDownloadEmailSegmentCall(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check download of email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegmentRebuildUuid  (required)
     * @return EmailSegmentDownloadPrepareResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentDownloadPrepareResponse checkDownloadEmailSegment(Integer storefrontOid, String emailSegmentUuid, String emailSegmentRebuildUuid) throws ApiException {
        ApiResponse<EmailSegmentDownloadPrepareResponse> resp = checkDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid);
        return resp.getData();
    }

    /**
     * Check download of email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegmentRebuildUuid  (required)
     * @return ApiResponse&lt;EmailSegmentDownloadPrepareResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentDownloadPrepareResponse> checkDownloadEmailSegmentWithHttpInfo(Integer storefrontOid, String emailSegmentUuid, String emailSegmentRebuildUuid) throws ApiException {
        com.squareup.okhttp.Call call = checkDownloadEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentDownloadPrepareResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check download of email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegmentRebuildUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkDownloadEmailSegmentAsync(Integer storefrontOid, String emailSegmentUuid, String emailSegmentRebuildUuid, final ApiCallback<EmailSegmentDownloadPrepareResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkDownloadEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentDownloadPrepareResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloneEmailCampaign
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneEmailCampaignCall(Integer storefrontOid, String emailCampaignUuid, Integer targetStorefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetStorefrontOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_storefront_oid", targetStorefrontOid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneEmailCampaignValidateBeforeCall(Integer storefrontOid, String emailCampaignUuid, Integer targetStorefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling cloneEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling cloneEmailCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneEmailCampaignCall(storefrontOid, emailCampaignUuid, targetStorefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clone email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse cloneEmailCampaign(Integer storefrontOid, String emailCampaignUuid, Integer targetStorefrontOid) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = cloneEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, targetStorefrontOid);
        return resp.getData();
    }

    /**
     * Clone email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> cloneEmailCampaignWithHttpInfo(Integer storefrontOid, String emailCampaignUuid, Integer targetStorefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = cloneEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, targetStorefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone email campaign (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneEmailCampaignAsync(Integer storefrontOid, String emailCampaignUuid, Integer targetStorefrontOid, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, targetStorefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloneEmailFlow
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneEmailFlowCall(Integer storefrontOid, String emailFlowUuid, Integer targetStorefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (targetStorefrontOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_storefront_oid", targetStorefrontOid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneEmailFlowValidateBeforeCall(Integer storefrontOid, String emailFlowUuid, Integer targetStorefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling cloneEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling cloneEmailFlow(Async)");
        }
        

        com.squareup.okhttp.Call call = cloneEmailFlowCall(storefrontOid, emailFlowUuid, targetStorefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Clone email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse cloneEmailFlow(Integer storefrontOid, String emailFlowUuid, Integer targetStorefrontOid) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = cloneEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, targetStorefrontOid);
        return resp.getData();
    }

    /**
     * Clone email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> cloneEmailFlowWithHttpInfo(Integer storefrontOid, String emailFlowUuid, Integer targetStorefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = cloneEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, targetStorefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone email flow (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param targetStorefrontOid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneEmailFlowAsync(Integer storefrontOid, String emailFlowUuid, Integer targetStorefrontOid, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, targetStorefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEmailSendingDomain
     * @param domain  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}/create"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createEmailSendingDomain(Async)");
        }
        

        com.squareup.okhttp.Call call = createEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create email campaign
     * 
     * @param domain  (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse createEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = createEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Create email campaign
     * 
     * @param domain  (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> createEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = createEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create email campaign (asynchronously)
     * 
     * @param domain  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailSendingDomainAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailCampaignFolder
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailCampaignFolderCall(Integer storefrontOid, String emailCampaignFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_folder_uuid" + "\\}", apiClient.escapeString(emailCampaignFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailCampaignFolderValidateBeforeCall(Integer storefrontOid, String emailCampaignFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailCampaignFolder(Async)");
        }
        
        // verify the required parameter 'emailCampaignFolderUuid' is set
        if (emailCampaignFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignFolderUuid' when calling deleteEmailCampaignFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailCampaignFolderCall(storefrontOid, emailCampaignFolderUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete email campaignFolder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailCampaignFolder(Integer storefrontOid, String emailCampaignFolderUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
        return resp.getData();
    }

    /**
     * Delete email campaignFolder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailCampaignFolderWithHttpInfo(Integer storefrontOid, String emailCampaignFolderUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email campaignFolder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailCampaignFolderAsync(Integer storefrontOid, String emailCampaignFolderUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailCommseqStat
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailCommseqStatCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailCommseqStatValidateBeforeCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailCommseqStat(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling deleteEmailCommseqStat(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailCommseqStatCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete communication sequence stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEmailCommseqStat(Integer storefrontOid, String commseqUuid) throws ApiException {
        deleteEmailCommseqStatWithHttpInfo(storefrontOid, commseqUuid);
    }

    /**
     * Delete communication sequence stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEmailCommseqStatWithHttpInfo(Integer storefrontOid, String commseqUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailCommseqStatValidateBeforeCall(storefrontOid, commseqUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete communication sequence stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailCommseqStatAsync(Integer storefrontOid, String commseqUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailCommseqStatValidateBeforeCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEmailEmail
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailEmailCall(Integer storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailEmailValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling deleteEmailEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailEmailCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailEmail(Integer storefrontOid, String commseqEmailUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
        return resp.getData();
    }

    /**
     * Delete email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailEmailWithHttpInfo(Integer storefrontOid, String commseqEmailUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email email (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailEmailAsync(Integer storefrontOid, String commseqEmailUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailFlowFolder
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailFlowFolderCall(Integer storefrontOid, String emailFlowFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_folder_uuid" + "\\}", apiClient.escapeString(emailFlowFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailFlowFolderValidateBeforeCall(Integer storefrontOid, String emailFlowFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailFlowFolder(Async)");
        }
        
        // verify the required parameter 'emailFlowFolderUuid' is set
        if (emailFlowFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowFolderUuid' when calling deleteEmailFlowFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailFlowFolderCall(storefrontOid, emailFlowFolderUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete email flowFolder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailFlowFolder(Integer storefrontOid, String emailFlowFolderUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid);
        return resp.getData();
    }

    /**
     * Delete email flowFolder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailFlowFolderWithHttpInfo(Integer storefrontOid, String emailFlowFolderUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email flowFolder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailFlowFolderAsync(Integer storefrontOid, String emailFlowFolderUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailListCustomer
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailListCustomerCall(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailListCustomerValidateBeforeCall(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailListCustomer(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling deleteEmailListCustomer(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling deleteEmailListCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailListCustomerCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete email list customer
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailListCustomer(Integer storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailListCustomerWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Delete email list customer
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailListCustomerWithHttpInfo(Integer storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailListCustomerValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email list customer (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailListCustomerAsync(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailListCustomerValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailPostcard
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailPostcardCall(Integer storefrontOid, String commseqPostcardUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_postcard_uuid" + "\\}", apiClient.escapeString(commseqPostcardUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailPostcardValidateBeforeCall(Integer storefrontOid, String commseqPostcardUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailPostcard(Async)");
        }
        
        // verify the required parameter 'commseqPostcardUuid' is set
        if (commseqPostcardUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqPostcardUuid' when calling deleteEmailPostcard(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailPostcardCall(storefrontOid, commseqPostcardUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailPostcard(Integer storefrontOid, String commseqPostcardUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid);
        return resp.getData();
    }

    /**
     * Delete email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailPostcardWithHttpInfo(Integer storefrontOid, String commseqPostcardUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email postcard (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailPostcardAsync(Integer storefrontOid, String commseqPostcardUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailSendingDomain
     * @param domain  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteEmailSendingDomain(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * delete email campaign
     * 
     * @param domain  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * delete email campaign
     * 
     * @param domain  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete email campaign (asynchronously)
     * 
     * @param domain  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailSendingDomainAsync(String domain, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperiment
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(Integer storefrontOid, Integer storefrontExperimentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "storefront_experiment_oid" + "\\}", apiClient.escapeString(storefrontExperimentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(Integer storefrontOid, Integer storefrontExperimentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'storefrontExperimentOid' is set
        if (storefrontExperimentOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontExperimentOid' when calling deleteExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentCall(storefrontOid, storefrontExperimentOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete experiment
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExperiment(Integer storefrontOid, Integer storefrontExperimentOid) throws ApiException {
        deleteExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid);
    }

    /**
     * Delete experiment
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExperimentWithHttpInfo(Integer storefrontOid, Integer storefrontExperimentOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete experiment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(Integer storefrontOid, Integer storefrontExperimentOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLibraryItem
     * @param libraryItemOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLibraryItemCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLibraryItemValidateBeforeCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling deleteLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLibraryItemCall(libraryItemOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete library item
     * 
     * @param libraryItemOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLibraryItem(Integer libraryItemOid) throws ApiException {
        deleteLibraryItemWithHttpInfo(libraryItemOid);
    }

    /**
     * Delete library item
     * 
     * @param libraryItemOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLibraryItemWithHttpInfo(Integer libraryItemOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteLibraryItemValidateBeforeCall(libraryItemOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete library item (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLibraryItemAsync(Integer libraryItemOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLibraryItemValidateBeforeCall(libraryItemOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLibraryItemPublishedVersions
     * @param libraryItemOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLibraryItemPublishedVersionsCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}/published_versions"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLibraryItemPublishedVersionsValidateBeforeCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling deleteLibraryItemPublishedVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLibraryItemPublishedVersionsCall(libraryItemOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete all published versions for a library item, including anything in review.
     * 
     * @param libraryItemOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLibraryItemPublishedVersions(Integer libraryItemOid) throws ApiException {
        deleteLibraryItemPublishedVersionsWithHttpInfo(libraryItemOid);
    }

    /**
     * Delete all published versions for a library item, including anything in review.
     * 
     * @param libraryItemOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLibraryItemPublishedVersionsWithHttpInfo(Integer libraryItemOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteLibraryItemPublishedVersionsValidateBeforeCall(libraryItemOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete all published versions for a library item, including anything in review. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLibraryItemPublishedVersionsAsync(Integer libraryItemOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLibraryItemPublishedVersionsValidateBeforeCall(libraryItemOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteScreenRecordingSegment
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScreenRecordingSegmentCall(Integer storefrontOid, Integer screenRecordingSegmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_segment_oid" + "\\}", apiClient.escapeString(screenRecordingSegmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScreenRecordingSegmentValidateBeforeCall(Integer storefrontOid, Integer screenRecordingSegmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteScreenRecordingSegment(Async)");
        }
        
        // verify the required parameter 'screenRecordingSegmentOid' is set
        if (screenRecordingSegmentOid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingSegmentOid' when calling deleteScreenRecordingSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScreenRecordingSegmentCall(storefrontOid, screenRecordingSegmentOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @return ScreenRecordingSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSegmentResponse deleteScreenRecordingSegment(Integer storefrontOid, Integer screenRecordingSegmentOid) throws ApiException {
        ApiResponse<ScreenRecordingSegmentResponse> resp = deleteScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid);
        return resp.getData();
    }

    /**
     * Delete screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @return ApiResponse&lt;ScreenRecordingSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSegmentResponse> deleteScreenRecordingSegmentWithHttpInfo(Integer storefrontOid, Integer screenRecordingSegmentOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete screen recording segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScreenRecordingSegmentAsync(Integer storefrontOid, Integer screenRecordingSegmentOid, final ApiCallback<ScreenRecordingSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for duplicateLibraryItem
     * @param libraryItemOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call duplicateLibraryItemCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}/duplicate"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call duplicateLibraryItemValidateBeforeCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling duplicateLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = duplicateLibraryItemCall(libraryItemOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Duplicate library item.
     * 
     * @param libraryItemOid  (required)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse duplicateLibraryItem(Integer libraryItemOid) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = duplicateLibraryItemWithHttpInfo(libraryItemOid);
        return resp.getData();
    }

    /**
     * Duplicate library item.
     * 
     * @param libraryItemOid  (required)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> duplicateLibraryItemWithHttpInfo(Integer libraryItemOid) throws ApiException {
        com.squareup.okhttp.Call call = duplicateLibraryItemValidateBeforeCall(libraryItemOid, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Duplicate library item. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call duplicateLibraryItemAsync(Integer libraryItemOid, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = duplicateLibraryItemValidateBeforeCall(libraryItemOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for favoriteScreenRecording
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call favoriteScreenRecordingCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_uuid" + "\\}", apiClient.escapeString(screenRecordingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call favoriteScreenRecordingValidateBeforeCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling favoriteScreenRecording(Async)");
        }
        
        // verify the required parameter 'screenRecordingUuid' is set
        if (screenRecordingUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingUuid' when calling favoriteScreenRecording(Async)");
        }
        

        com.squareup.okhttp.Call call = favoriteScreenRecordingCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update favorite flag on screen recording
     * Update favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void favoriteScreenRecording(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        favoriteScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
    }

    /**
     * Update favorite flag on screen recording
     * Update favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> favoriteScreenRecordingWithHttpInfo(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        com.squareup.okhttp.Call call = favoriteScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update favorite flag on screen recording (asynchronously)
     * Update favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call favoriteScreenRecordingAsync(Integer storefrontOid, String screenRecordingUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = favoriteScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for geocodeAddress
     * @param storefrontOid  (required)
     * @param geocodeRequest geocode request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call geocodeAddressCall(Integer storefrontOid, GeocodeRequest geocodeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = geocodeRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/geocode"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call geocodeAddressValidateBeforeCall(Integer storefrontOid, GeocodeRequest geocodeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling geocodeAddress(Async)");
        }
        
        // verify the required parameter 'geocodeRequest' is set
        if (geocodeRequest == null) {
            throw new ApiException("Missing the required parameter 'geocodeRequest' when calling geocodeAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = geocodeAddressCall(storefrontOid, geocodeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Obtain lat/long for an address
     * 
     * @param storefrontOid  (required)
     * @param geocodeRequest geocode request (required)
     * @return GeocodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeocodeResponse geocodeAddress(Integer storefrontOid, GeocodeRequest geocodeRequest) throws ApiException {
        ApiResponse<GeocodeResponse> resp = geocodeAddressWithHttpInfo(storefrontOid, geocodeRequest);
        return resp.getData();
    }

    /**
     * Obtain lat/long for an address
     * 
     * @param storefrontOid  (required)
     * @param geocodeRequest geocode request (required)
     * @return ApiResponse&lt;GeocodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeocodeResponse> geocodeAddressWithHttpInfo(Integer storefrontOid, GeocodeRequest geocodeRequest) throws ApiException {
        com.squareup.okhttp.Call call = geocodeAddressValidateBeforeCall(storefrontOid, geocodeRequest, null, null);
        Type localVarReturnType = new TypeToken<GeocodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain lat/long for an address (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param geocodeRequest geocode request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call geocodeAddressAsync(Integer storefrontOid, GeocodeRequest geocodeRequest, final ApiCallback<GeocodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geocodeAddressValidateBeforeCall(storefrontOid, geocodeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeocodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCountries
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCountriesCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/countries"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCountriesValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getCountries(Async)");
        }
        

        com.squareup.okhttp.Call call = getCountriesCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param storefrontOid  (required)
     * @return CountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountriesResponse getCountries(Integer storefrontOid) throws ApiException {
        ApiResponse<CountriesResponse> resp = getCountriesWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;CountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountriesResponse> getCountriesWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getCountriesValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get countries (asynchronously)
     * Obtain a list of all the countries 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCountriesAsync(Integer storefrontOid, final ApiCallback<CountriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCountriesValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEditorToken
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEditorTokenCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/editor_token"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEditorTokenValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEditorToken(Async)");
        }
        

        com.squareup.okhttp.Call call = getEditorTokenCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets editor token
     * Fetches a temporary authentication token for the editor 
     * @param storefrontOid  (required)
     * @return EmailEditorTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailEditorTokenResponse getEditorToken(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailEditorTokenResponse> resp = getEditorTokenWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Gets editor token
     * Fetches a temporary authentication token for the editor 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailEditorTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailEditorTokenResponse> getEditorTokenWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEditorTokenValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailEditorTokenResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets editor token (asynchronously)
     * Fetches a temporary authentication token for the editor 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEditorTokenAsync(Integer storefrontOid, final ApiCallback<EmailEditorTokenResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEditorTokenValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailEditorTokenResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailBaseTemplates
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailBaseTemplatesCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/baseTemplates"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailBaseTemplatesValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailBaseTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailBaseTemplatesCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email communication base templates
     * 
     * @param storefrontOid  (required)
     * @return EmailBaseTemplateListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailBaseTemplateListResponse getEmailBaseTemplates(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailBaseTemplateListResponse> resp = getEmailBaseTemplatesWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email communication base templates
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailBaseTemplateListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailBaseTemplateListResponse> getEmailBaseTemplatesWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailBaseTemplatesValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailBaseTemplateListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication base templates (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailBaseTemplatesAsync(Integer storefrontOid, final ApiCallback<EmailBaseTemplateListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailBaseTemplatesValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailBaseTemplateListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaign
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignValidateBeforeCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling getEmailCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse getEmailCampaign(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = getEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Get email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> getEmailCampaignWithHttpInfo(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaign (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignAsync(Integer storefrontOid, String emailCampaignUuid, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaignFolder
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignFolderCall(Integer storefrontOid, String emailCampaignFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_folder_uuid" + "\\}", apiClient.escapeString(emailCampaignFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignFolderValidateBeforeCall(Integer storefrontOid, String emailCampaignFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaignFolder(Async)");
        }
        
        // verify the required parameter 'emailCampaignFolderUuid' is set
        if (emailCampaignFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignFolderUuid' when calling getEmailCampaignFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignFolderCall(storefrontOid, emailCampaignFolderUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @return EmailCampaignFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignFolderResponse getEmailCampaignFolder(Integer storefrontOid, String emailCampaignFolderUuid) throws ApiException {
        ApiResponse<EmailCampaignFolderResponse> resp = getEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid);
        return resp.getData();
    }

    /**
     * Get email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @return ApiResponse&lt;EmailCampaignFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignFolderResponse> getEmailCampaignFolderWithHttpInfo(Integer storefrontOid, String emailCampaignFolderUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaign folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignFolderAsync(Integer storefrontOid, String emailCampaignFolderUuid, final ApiCallback<EmailCampaignFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaignFolders
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignFoldersCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaign_folders"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignFoldersValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaignFolders(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignFoldersCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaign folders
     * 
     * @param storefrontOid  (required)
     * @return EmailCampaignFoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignFoldersResponse getEmailCampaignFolders(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailCampaignFoldersResponse> resp = getEmailCampaignFoldersWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email campaign folders
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailCampaignFoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignFoldersResponse> getEmailCampaignFoldersWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignFoldersValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignFoldersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaign folders (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignFoldersAsync(Integer storefrontOid, final ApiCallback<EmailCampaignFoldersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignFoldersValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignFoldersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaignScreenshots
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignScreenshotsCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignScreenshotsValidateBeforeCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaignScreenshots(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling getEmailCampaignScreenshots(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignScreenshotsCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaign screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return ScreenshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenshotsResponse getEmailCampaignScreenshots(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<ScreenshotsResponse> resp = getEmailCampaignScreenshotsWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Get email campaign screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return ApiResponse&lt;ScreenshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenshotsResponse> getEmailCampaignScreenshotsWithHttpInfo(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignScreenshotsValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaign screenshots (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignScreenshotsAsync(Integer storefrontOid, String emailCampaignUuid, final ApiCallback<ScreenshotsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignScreenshotsValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaigns
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaigns(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaigns
     * 
     * @param storefrontOid  (required)
     * @return EmailCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignsResponse getEmailCampaigns(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailCampaignsResponse> resp = getEmailCampaignsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email campaigns
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignsResponse> getEmailCampaignsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaigns (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsAsync(Integer storefrontOid, final ApiCallback<EmailCampaignsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaignsWithStats
     * @param storefrontOid  (required)
     * @param statDays  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsWithStatsCall(Integer storefrontOid, String statDays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "stat_days" + "\\}", apiClient.escapeString(statDays.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignsWithStatsValidateBeforeCall(Integer storefrontOid, String statDays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaignsWithStats(Async)");
        }
        
        // verify the required parameter 'statDays' is set
        if (statDays == null) {
            throw new ApiException("Missing the required parameter 'statDays' when calling getEmailCampaignsWithStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsCall(storefrontOid, statDays, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email campaigns with stats
     * 
     * @param storefrontOid  (required)
     * @param statDays  (required)
     * @return EmailCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignsResponse getEmailCampaignsWithStats(Integer storefrontOid, String statDays) throws ApiException {
        ApiResponse<EmailCampaignsResponse> resp = getEmailCampaignsWithStatsWithHttpInfo(storefrontOid, statDays);
        return resp.getData();
    }

    /**
     * Get email campaigns with stats
     * 
     * @param storefrontOid  (required)
     * @param statDays  (required)
     * @return ApiResponse&lt;EmailCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignsResponse> getEmailCampaignsWithStatsWithHttpInfo(Integer storefrontOid, String statDays) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsValidateBeforeCall(storefrontOid, statDays, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaigns with stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param statDays  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsWithStatsAsync(Integer storefrontOid, String statDays, final ApiCallback<EmailCampaignsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsValidateBeforeCall(storefrontOid, statDays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseq
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqValidateBeforeCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseq(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseq(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email commseq
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse getEmailCommseq(Integer storefrontOid, String commseqUuid) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = getEmailCommseqWithHttpInfo(storefrontOid, commseqUuid);
        return resp.getData();
    }

    /**
     * Get email commseq
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> getEmailCommseqWithHttpInfo(Integer storefrontOid, String commseqUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email commseq (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqAsync(Integer storefrontOid, String commseqUuid, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqEmailStats
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqEmailStatsCall(Integer storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statsRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqEmailStatsValidateBeforeCall(Integer storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqEmailStats(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqEmailStats(Async)");
        }
        
        // verify the required parameter 'statsRequest' is set
        if (statsRequest == null) {
            throw new ApiException("Missing the required parameter 'statsRequest' when calling getEmailCommseqEmailStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email communication sequence emails stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return EmailStatSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStatSummaryResponse getEmailCommseqEmailStats(Integer storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest) throws ApiException {
        ApiResponse<EmailStatSummaryResponse> resp = getEmailCommseqEmailStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence emails stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return ApiResponse&lt;EmailStatSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStatSummaryResponse> getEmailCommseqEmailStatsWithHttpInfo(Integer storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStatSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence emails stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqEmailStatsAsync(Integer storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ApiCallback<EmailStatSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStatSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqPostcardStats
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqPostcardStatsCall(Integer storefrontOid, String commseqUuid, EmailStatPostcardSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statsRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqPostcardStatsValidateBeforeCall(Integer storefrontOid, String commseqUuid, EmailStatPostcardSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqPostcardStats(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqPostcardStats(Async)");
        }
        
        // verify the required parameter 'statsRequest' is set
        if (statsRequest == null) {
            throw new ApiException("Missing the required parameter 'statsRequest' when calling getEmailCommseqPostcardStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqPostcardStatsCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email communication sequence postcard stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return EmailStatPostcardSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStatPostcardSummaryResponse getEmailCommseqPostcardStats(Integer storefrontOid, String commseqUuid, EmailStatPostcardSummaryRequest statsRequest) throws ApiException {
        ApiResponse<EmailStatPostcardSummaryResponse> resp = getEmailCommseqPostcardStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence postcard stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return ApiResponse&lt;EmailStatPostcardSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStatPostcardSummaryResponse> getEmailCommseqPostcardStatsWithHttpInfo(Integer storefrontOid, String commseqUuid, EmailStatPostcardSummaryRequest statsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqPostcardStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStatPostcardSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence postcard stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqPostcardStatsAsync(Integer storefrontOid, String commseqUuid, EmailStatPostcardSummaryRequest statsRequest, final ApiCallback<EmailStatPostcardSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqPostcardStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStatPostcardSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqStatOverall
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStatOverallCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqStatOverallValidateBeforeCall(Integer storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStatOverall(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStatOverall(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqStatOverallCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get communication sequence stats overall
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @return EmailCommseqStatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqStatResponse getEmailCommseqStatOverall(Integer storefrontOid, String commseqUuid) throws ApiException {
        ApiResponse<EmailCommseqStatResponse> resp = getEmailCommseqStatOverallWithHttpInfo(storefrontOid, commseqUuid);
        return resp.getData();
    }

    /**
     * Get communication sequence stats overall
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @return ApiResponse&lt;EmailCommseqStatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqStatResponse> getEmailCommseqStatOverallWithHttpInfo(Integer storefrontOid, String commseqUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqStatOverallValidateBeforeCall(storefrontOid, commseqUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqStatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get communication sequence stats overall (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStatOverallAsync(Integer storefrontOid, String commseqUuid, final ApiCallback<EmailCommseqStatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqStatOverallValidateBeforeCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqStatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqStepStats
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepStatsCall(Integer storefrontOid, String commseqUuid, EmailStepStatRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statsRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqStepStatsValidateBeforeCall(Integer storefrontOid, String commseqUuid, EmailStepStatRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStepStats(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStepStats(Async)");
        }
        
        // verify the required parameter 'statsRequest' is set
        if (statsRequest == null) {
            throw new ApiException("Missing the required parameter 'statsRequest' when calling getEmailCommseqStepStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqStepStatsCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email communication sequence step stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return EmailStepStatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStepStatResponse getEmailCommseqStepStats(Integer storefrontOid, String commseqUuid, EmailStepStatRequest statsRequest) throws ApiException {
        ApiResponse<EmailStepStatResponse> resp = getEmailCommseqStepStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence step stats
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @return ApiResponse&lt;EmailStepStatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStepStatResponse> getEmailCommseqStepStatsWithHttpInfo(Integer storefrontOid, String commseqUuid, EmailStepStatRequest statsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqStepStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStepStatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence step stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param statsRequest StatsRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepStatsAsync(Integer storefrontOid, String commseqUuid, EmailStepStatRequest statsRequest, final ApiCallback<EmailStepStatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqStepStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStepStatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqStepWaiting
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param waitingRequest WaitingRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepWaitingCall(Integer storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = waitingRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqStepWaitingValidateBeforeCall(Integer storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'waitingRequest' is set
        if (waitingRequest == null) {
            throw new ApiException("Missing the required parameter 'waitingRequest' when calling getEmailCommseqStepWaiting(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingCall(storefrontOid, commseqUuid, waitingRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email communication sequence customers waiting at each requested step
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param waitingRequest WaitingRequest (required)
     * @return EmailStepWaitingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStepWaitingResponse getEmailCommseqStepWaiting(Integer storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest) throws ApiException {
        ApiResponse<EmailStepWaitingResponse> resp = getEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence customers waiting at each requested step
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param waitingRequest WaitingRequest (required)
     * @return ApiResponse&lt;EmailStepWaitingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStepWaitingResponse> getEmailCommseqStepWaitingWithHttpInfo(Integer storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, waitingRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStepWaitingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence customers waiting at each requested step (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param waitingRequest WaitingRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepWaitingAsync(Integer storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ApiCallback<EmailStepWaitingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, waitingRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStepWaitingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqs
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqs(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCommseqsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email commseqs
     * 
     * @param storefrontOid  (required)
     * @return EmailCommseqsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqsResponse getEmailCommseqs(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailCommseqsResponse> resp = getEmailCommseqsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email commseqs
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailCommseqsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqsResponse> getEmailCommseqsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email commseqs (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqsAsync(Integer storefrontOid, final ApiCallback<EmailCommseqsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCustomerEditorUrl
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCustomerEditorUrlCall(Integer storefrontOid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCustomerEditorUrlValidateBeforeCall(Integer storefrontOid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling getEmailCustomerEditorUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCustomerEditorUrlCall(storefrontOid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get customers editor URL
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailCustomerEditorUrl(Integer storefrontOid, String emailCustomerUuid) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailCustomerEditorUrlWithHttpInfo(storefrontOid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Get customers editor URL
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailCustomerEditorUrlWithHttpInfo(Integer storefrontOid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCustomerEditorUrlValidateBeforeCall(storefrontOid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get customers editor URL (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCustomerEditorUrlAsync(Integer storefrontOid, String emailCustomerUuid, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCustomerEditorUrlValidateBeforeCall(storefrontOid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCustomers
     * @param storefrontOid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param searchEmailPrefix  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCustomersCall(Integer storefrontOid, Integer pageNumber, Integer pageSize, String searchEmailPrefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/customers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (searchEmailPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchEmailPrefix", searchEmailPrefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCustomersValidateBeforeCall(Integer storefrontOid, Integer pageNumber, Integer pageSize, String searchEmailPrefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailCustomersCall(storefrontOid, pageNumber, pageSize, searchEmailPrefix, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email customers
     * 
     * @param storefrontOid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param searchEmailPrefix  (optional)
     * @return EmailCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomersResponse getEmailCustomers(Integer storefrontOid, Integer pageNumber, Integer pageSize, String searchEmailPrefix) throws ApiException {
        ApiResponse<EmailCustomersResponse> resp = getEmailCustomersWithHttpInfo(storefrontOid, pageNumber, pageSize, searchEmailPrefix);
        return resp.getData();
    }

    /**
     * Get email customers
     * 
     * @param storefrontOid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param searchEmailPrefix  (optional)
     * @return ApiResponse&lt;EmailCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomersResponse> getEmailCustomersWithHttpInfo(Integer storefrontOid, Integer pageNumber, Integer pageSize, String searchEmailPrefix) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCustomersValidateBeforeCall(storefrontOid, pageNumber, pageSize, searchEmailPrefix, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email customers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param searchEmailPrefix  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCustomersAsync(Integer storefrontOid, Integer pageNumber, Integer pageSize, String searchEmailPrefix, final ApiCallback<EmailCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCustomersValidateBeforeCall(storefrontOid, pageNumber, pageSize, searchEmailPrefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDashboardActivity
     * @param storefrontOid  (required)
     * @param lastRecords  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardActivityCall(Integer storefrontOid, Integer lastRecords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastRecords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_records", lastRecords));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDashboardActivityValidateBeforeCall(Integer storefrontOid, Integer lastRecords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailDashboardActivity(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailDashboardActivityCall(storefrontOid, lastRecords, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email dashboard activity
     * 
     * @param storefrontOid  (required)
     * @param lastRecords  (optional)
     * @return EmailDashboardActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDashboardActivityResponse getEmailDashboardActivity(Integer storefrontOid, Integer lastRecords) throws ApiException {
        ApiResponse<EmailDashboardActivityResponse> resp = getEmailDashboardActivityWithHttpInfo(storefrontOid, lastRecords);
        return resp.getData();
    }

    /**
     * Get email dashboard activity
     * 
     * @param storefrontOid  (required)
     * @param lastRecords  (optional)
     * @return ApiResponse&lt;EmailDashboardActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDashboardActivityResponse> getEmailDashboardActivityWithHttpInfo(Integer storefrontOid, Integer lastRecords) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDashboardActivityValidateBeforeCall(storefrontOid, lastRecords, null, null);
        Type localVarReturnType = new TypeToken<EmailDashboardActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email dashboard activity (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param lastRecords  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardActivityAsync(Integer storefrontOid, Integer lastRecords, final ApiCallback<EmailDashboardActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDashboardActivityValidateBeforeCall(storefrontOid, lastRecords, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDashboardActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDashboardStats
     * @param storefrontOid  (required)
     * @param days  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardStatsCall(Integer storefrontOid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (days != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("days", days));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDashboardStatsValidateBeforeCall(Integer storefrontOid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailDashboardStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailDashboardStatsCall(storefrontOid, days, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get dashboard stats
     * 
     * @param storefrontOid  (required)
     * @param days  (optional)
     * @return EmailDashboardStatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDashboardStatsResponse getEmailDashboardStats(Integer storefrontOid, Integer days) throws ApiException {
        ApiResponse<EmailDashboardStatsResponse> resp = getEmailDashboardStatsWithHttpInfo(storefrontOid, days);
        return resp.getData();
    }

    /**
     * Get dashboard stats
     * 
     * @param storefrontOid  (required)
     * @param days  (optional)
     * @return ApiResponse&lt;EmailDashboardStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDashboardStatsResponse> getEmailDashboardStatsWithHttpInfo(Integer storefrontOid, Integer days) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDashboardStatsValidateBeforeCall(storefrontOid, days, null, null);
        Type localVarReturnType = new TypeToken<EmailDashboardStatsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dashboard stats (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param days  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardStatsAsync(Integer storefrontOid, Integer days, final ApiCallback<EmailDashboardStatsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDashboardStatsValidateBeforeCall(storefrontOid, days, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDashboardStatsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmail
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailCall(Integer storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse getEmailEmail(Integer storefrontOid, String commseqEmailUuid) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = getEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
        return resp.getData();
    }

    /**
     * Get email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> getEmailEmailWithHttpInfo(Integer storefrontOid, String commseqEmailUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email email (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailAsync(Integer storefrontOid, String commseqEmailUuid, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmailClicks
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailClicksCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()))
            .replaceAll("\\{" + "commseq_step_uuid" + "\\}", apiClient.escapeString(commseqStepUuid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (days != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("days", days));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailClicksValidateBeforeCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmailClicks(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailEmailClicks(Async)");
        }
        
        // verify the required parameter 'commseqStepUuid' is set
        if (commseqStepUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqStepUuid' when calling getEmailEmailClicks(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmailClicks(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailClicksCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email email clicks
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @return EmailClicksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailClicksResponse getEmailEmailClicks(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days) throws ApiException {
        ApiResponse<EmailClicksResponse> resp = getEmailEmailClicksWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
        return resp.getData();
    }

    /**
     * Get email email clicks
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @return ApiResponse&lt;EmailClicksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailClicksResponse> getEmailEmailClicksWithHttpInfo(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailClicksValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, null, null);
        Type localVarReturnType = new TypeToken<EmailClicksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email email clicks (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailClicksAsync(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ApiCallback<EmailClicksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailClicksValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailClicksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmailCustomerEditorUrl
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param orderId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailCustomerEditorUrlCall(Integer storefrontOid, String commseqEmailUuid, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailCustomerEditorUrlValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmailCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmailCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getEmailEmailCustomerEditorUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailCustomerEditorUrlCall(storefrontOid, commseqEmailUuid, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email order customer editor url
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param orderId  (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailEmailCustomerEditorUrl(Integer storefrontOid, String commseqEmailUuid, String orderId) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailEmailCustomerEditorUrlWithHttpInfo(storefrontOid, commseqEmailUuid, orderId);
        return resp.getData();
    }

    /**
     * Get email order customer editor url
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param orderId  (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailEmailCustomerEditorUrlWithHttpInfo(Integer storefrontOid, String commseqEmailUuid, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailCustomerEditorUrlValidateBeforeCall(storefrontOid, commseqEmailUuid, orderId, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email order customer editor url (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param orderId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailCustomerEditorUrlAsync(Integer storefrontOid, String commseqEmailUuid, String orderId, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailCustomerEditorUrlValidateBeforeCall(storefrontOid, commseqEmailUuid, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmailOrders
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailOrdersCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()))
            .replaceAll("\\{" + "commseq_step_uuid" + "\\}", apiClient.escapeString(commseqStepUuid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (days != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("days", days));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailOrdersValidateBeforeCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmailOrders(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailEmailOrders(Async)");
        }
        
        // verify the required parameter 'commseqStepUuid' is set
        if (commseqStepUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqStepUuid' when calling getEmailEmailOrders(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmailOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailOrdersCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email email orders
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @return EmailOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailOrdersResponse getEmailEmailOrders(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days) throws ApiException {
        ApiResponse<EmailOrdersResponse> resp = getEmailEmailOrdersWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days);
        return resp.getData();
    }

    /**
     * Get email email orders
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @return ApiResponse&lt;EmailOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailOrdersResponse> getEmailEmailOrdersWithHttpInfo(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailOrdersValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, null, null);
        Type localVarReturnType = new TypeToken<EmailOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email email orders (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param commseqEmailUuid  (required)
     * @param days  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailOrdersAsync(Integer storefrontOid, String commseqUuid, String commseqStepUuid, String commseqEmailUuid, Integer days, final ApiCallback<EmailOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailOrdersValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmails
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmails(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email emails
     * 
     * @param storefrontOid  (required)
     * @return EmailCommseqEmailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailsResponse getEmailEmails(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailCommseqEmailsResponse> resp = getEmailEmailsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email emails
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailCommseqEmailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailsResponse> getEmailEmailsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email emails (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsAsync(Integer storefrontOid, final ApiCallback<EmailCommseqEmailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmailsMultiple
     * @param storefrontOid  (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsMultipleCall(Integer storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmailsRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/multiple"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailsMultipleValidateBeforeCall(Integer storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmailsMultiple(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmailsRequest' is set
        if (emailCommseqEmailsRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmailsRequest' when calling getEmailEmailsMultiple(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailEmailsMultipleCall(storefrontOid, emailCommseqEmailsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email emails multiple
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @return EmailCommseqEmailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailsResponse getEmailEmailsMultiple(Integer storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest) throws ApiException {
        ApiResponse<EmailCommseqEmailsResponse> resp = getEmailEmailsMultipleWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
        return resp.getData();
    }

    /**
     * Get email emails multiple
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @return ApiResponse&lt;EmailCommseqEmailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailsResponse> getEmailEmailsMultipleWithHttpInfo(Integer storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailsMultipleValidateBeforeCall(storefrontOid, emailCommseqEmailsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email emails multiple (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsMultipleAsync(Integer storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ApiCallback<EmailCommseqEmailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailsMultipleValidateBeforeCall(storefrontOid, emailCommseqEmailsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlow
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowCall(Integer storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowValidateBeforeCall(Integer storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling getEmailFlow(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailFlowCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse getEmailFlow(Integer storefrontOid, String emailFlowUuid) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = getEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
        return resp.getData();
    }

    /**
     * Get email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> getEmailFlowWithHttpInfo(Integer storefrontOid, String emailFlowUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flow (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowAsync(Integer storefrontOid, String emailFlowUuid, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlowFolder
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowFolderCall(Integer storefrontOid, String emailFlowFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_folder_uuid" + "\\}", apiClient.escapeString(emailFlowFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowFolderValidateBeforeCall(Integer storefrontOid, String emailFlowFolderUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlowFolder(Async)");
        }
        
        // verify the required parameter 'emailFlowFolderUuid' is set
        if (emailFlowFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowFolderUuid' when calling getEmailFlowFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailFlowFolderCall(storefrontOid, emailFlowFolderUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @return EmailFlowFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowFolderResponse getEmailFlowFolder(Integer storefrontOid, String emailFlowFolderUuid) throws ApiException {
        ApiResponse<EmailFlowFolderResponse> resp = getEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid);
        return resp.getData();
    }

    /**
     * Get email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @return ApiResponse&lt;EmailFlowFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowFolderResponse> getEmailFlowFolderWithHttpInfo(Integer storefrontOid, String emailFlowFolderUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flow folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowFolderAsync(Integer storefrontOid, String emailFlowFolderUuid, final ApiCallback<EmailFlowFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlowFolders
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowFoldersCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flow_folders"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowFoldersValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlowFolders(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailFlowFoldersCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email flow folders
     * 
     * @param storefrontOid  (required)
     * @return EmailFlowFoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowFoldersResponse getEmailFlowFolders(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailFlowFoldersResponse> resp = getEmailFlowFoldersWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email flow folders
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailFlowFoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowFoldersResponse> getEmailFlowFoldersWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowFoldersValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowFoldersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flow folders (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowFoldersAsync(Integer storefrontOid, final ApiCallback<EmailFlowFoldersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowFoldersValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowFoldersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlowScreenshots
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowScreenshotsCall(Integer storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowScreenshotsValidateBeforeCall(Integer storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlowScreenshots(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling getEmailFlowScreenshots(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailFlowScreenshotsCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email flow screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @return ScreenshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenshotsResponse getEmailFlowScreenshots(Integer storefrontOid, String emailFlowUuid) throws ApiException {
        ApiResponse<ScreenshotsResponse> resp = getEmailFlowScreenshotsWithHttpInfo(storefrontOid, emailFlowUuid);
        return resp.getData();
    }

    /**
     * Get email flow screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @return ApiResponse&lt;ScreenshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenshotsResponse> getEmailFlowScreenshotsWithHttpInfo(Integer storefrontOid, String emailFlowUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowScreenshotsValidateBeforeCall(storefrontOid, emailFlowUuid, null, null);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flow screenshots (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowScreenshotsAsync(Integer storefrontOid, String emailFlowUuid, final ApiCallback<ScreenshotsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowScreenshotsValidateBeforeCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlows
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlows(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailFlowsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email flows
     * 
     * @param storefrontOid  (required)
     * @return EmailFlowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowsResponse getEmailFlows(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailFlowsResponse> resp = getEmailFlowsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email flows
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailFlowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowsResponse> getEmailFlowsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flows (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowsAsync(Integer storefrontOid, final ApiCallback<EmailFlowsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailGlobalSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailGlobalSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/global_settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailGlobalSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEmailGlobalSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email globalsettings
     * 
     * @return EmailGlobalSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailGlobalSettingsResponse getEmailGlobalSettings() throws ApiException {
        ApiResponse<EmailGlobalSettingsResponse> resp = getEmailGlobalSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get email globalsettings
     * 
     * @return ApiResponse&lt;EmailGlobalSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailGlobalSettingsResponse> getEmailGlobalSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEmailGlobalSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EmailGlobalSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email globalsettings (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailGlobalSettingsAsync(final ApiCallback<EmailGlobalSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailGlobalSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailGlobalSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailList
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCall(Integer storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListValidateBeforeCall(Integer storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailListCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse getEmailList(Integer storefrontOid, String emailListUuid) throws ApiException {
        ApiResponse<EmailListResponse> resp = getEmailListWithHttpInfo(storefrontOid, emailListUuid);
        return resp.getData();
    }

    /**
     * Get email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> getEmailListWithHttpInfo(Integer storefrontOid, String emailListUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListValidateBeforeCall(storefrontOid, emailListUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListAsync(Integer storefrontOid, String emailListUuid, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListValidateBeforeCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailListCustomerEditorUrl
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomerEditorUrlCall(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListCustomerEditorUrlValidateBeforeCall(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email list customer editor url
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailListCustomerEditorUrl(Integer storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailListCustomerEditorUrlWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Get email list customer editor url
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailListCustomerEditorUrlWithHttpInfo(Integer storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list customer editor url (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomerEditorUrlAsync(Integer storefrontOid, String emailListUuid, String emailCustomerUuid, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailListCustomers
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomersCall(Integer storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListCustomersValidateBeforeCall(Integer storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailListCustomers(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailListCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailListCustomersCall(storefrontOid, emailListUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @return EmailListCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListCustomersResponse getEmailListCustomers(Integer storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<EmailListCustomersResponse> resp = getEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;EmailListCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListCustomersResponse> getEmailListCustomersWithHttpInfo(Integer storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list customers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomersAsync(Integer storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ApiCallback<EmailListCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailLists
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailLists(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailListsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email lists
     * 
     * @param storefrontOid  (required)
     * @return EmailListsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListsResponse getEmailLists(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailListsResponse> resp = getEmailListsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email lists
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailListsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListsResponse> getEmailListsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email lists (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListsAsync(Integer storefrontOid, final ApiCallback<EmailListsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailPerformance
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailPerformanceCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/performance"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailPerformanceValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailPerformance(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailPerformanceCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email performance
     * 
     * @param storefrontOid  (required)
     * @return EmailPerformanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailPerformanceResponse getEmailPerformance(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailPerformanceResponse> resp = getEmailPerformanceWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email performance
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailPerformanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailPerformanceResponse> getEmailPerformanceWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailPerformanceValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailPerformanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email performance (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailPerformanceAsync(Integer storefrontOid, final ApiCallback<EmailPerformanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailPerformanceValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailPerformanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailPlan
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailPlanCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/plan"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailPlanValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailPlanCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email plan
     * 
     * @param storefrontOid  (required)
     * @return EmailPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailPlanResponse getEmailPlan(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailPlanResponse> resp = getEmailPlanWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email plan
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailPlanResponse> getEmailPlanWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailPlanValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email plan (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailPlanAsync(Integer storefrontOid, final ApiCallback<EmailPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailPlanValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailPostcard
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardCall(Integer storefrontOid, String commseqPostcardUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_postcard_uuid" + "\\}", apiClient.escapeString(commseqPostcardUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailPostcardValidateBeforeCall(Integer storefrontOid, String commseqPostcardUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailPostcard(Async)");
        }
        
        // verify the required parameter 'commseqPostcardUuid' is set
        if (commseqPostcardUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqPostcardUuid' when calling getEmailPostcard(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailPostcardCall(storefrontOid, commseqPostcardUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @return EmailCommseqPostcardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardResponse getEmailPostcard(Integer storefrontOid, String commseqPostcardUuid) throws ApiException {
        ApiResponse<EmailCommseqPostcardResponse> resp = getEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid);
        return resp.getData();
    }

    /**
     * Get email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @return ApiResponse&lt;EmailCommseqPostcardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardResponse> getEmailPostcardWithHttpInfo(Integer storefrontOid, String commseqPostcardUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email postcard (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardAsync(Integer storefrontOid, String commseqPostcardUuid, final ApiCallback<EmailCommseqPostcardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailPostcards
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailPostcardsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailPostcards(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailPostcardsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email postcards
     * 
     * @param storefrontOid  (required)
     * @return EmailCommseqPostcardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardsResponse getEmailPostcards(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailCommseqPostcardsResponse> resp = getEmailPostcardsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email postcards
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailCommseqPostcardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardsResponse> getEmailPostcardsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailPostcardsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email postcards (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardsAsync(Integer storefrontOid, final ApiCallback<EmailCommseqPostcardsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailPostcardsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailPostcardsMultiple
     * @param storefrontOid  (required)
     * @param emailCommseqPostcardsRequest Request of postcard uuids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardsMultipleCall(Integer storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqPostcardsRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards/multiple"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailPostcardsMultipleValidateBeforeCall(Integer storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailPostcardsMultiple(Async)");
        }
        
        // verify the required parameter 'emailCommseqPostcardsRequest' is set
        if (emailCommseqPostcardsRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqPostcardsRequest' when calling getEmailPostcardsMultiple(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailPostcardsMultipleCall(storefrontOid, emailCommseqPostcardsRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email postcards multiple
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcardsRequest Request of postcard uuids (required)
     * @return EmailCommseqPostcardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardsResponse getEmailPostcardsMultiple(Integer storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest) throws ApiException {
        ApiResponse<EmailCommseqPostcardsResponse> resp = getEmailPostcardsMultipleWithHttpInfo(storefrontOid, emailCommseqPostcardsRequest);
        return resp.getData();
    }

    /**
     * Get email postcards multiple
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcardsRequest Request of postcard uuids (required)
     * @return ApiResponse&lt;EmailCommseqPostcardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardsResponse> getEmailPostcardsMultipleWithHttpInfo(Integer storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailPostcardsMultipleValidateBeforeCall(storefrontOid, emailCommseqPostcardsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email postcards multiple (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcardsRequest Request of postcard uuids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailPostcardsMultipleAsync(Integer storefrontOid, EmailCommseqPostcardsRequest emailCommseqPostcardsRequest, final ApiCallback<EmailCommseqPostcardsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailPostcardsMultipleValidateBeforeCall(storefrontOid, emailCommseqPostcardsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSegmentCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse getEmailSegment(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = getEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
        return resp.getData();
    }

    /**
     * Get email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> getEmailSegmentWithHttpInfo(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentAsync(Integer storefrontOid, String emailSegmentUuid, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegmentCustomerEditorUrl
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlCall(Integer storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email segment customers editor URL
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailSegmentCustomerEditorUrl(Integer storefrontOid, String emailSegmentUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailSegmentCustomerEditorUrlWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Get email segment customers editor URL
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailCustomerUuid  (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailSegmentCustomerEditorUrlWithHttpInfo(Integer storefrontOid, String emailSegmentUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlValidateBeforeCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment customers editor URL (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailCustomerUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlAsync(Integer storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlValidateBeforeCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegmentCustomers
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomersCall(Integer storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentCustomersValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomers(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSegmentCustomersCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email segment customers
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @return EmailSegmentCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentCustomersResponse getEmailSegmentCustomers(Integer storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<EmailSegmentCustomersResponse> resp = getEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get email segment customers
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;EmailSegmentCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentCustomersResponse> getEmailSegmentCustomersWithHttpInfo(Integer storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment customers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomersAsync(Integer storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ApiCallback<EmailSegmentCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegments
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegments(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSegmentsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email segments
     * 
     * @param storefrontOid  (required)
     * @return EmailSegmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentsResponse getEmailSegments(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailSegmentsResponse> resp = getEmailSegmentsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email segments
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailSegmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentsResponse> getEmailSegmentsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segments (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentsAsync(Integer storefrontOid, final ApiCallback<EmailSegmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomain
     * @param domain  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/sending_domain/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getEmailSendingDomain(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email sending domain
     * 
     * @param domain  (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse getEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = getEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Get email sending domain
     * 
     * @param domain  (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> getEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domain (asynchronously)
     * 
     * @param domain  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomainStatus
     * @param domain  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainStatusCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}/status"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainStatusValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getEmailSendingDomainStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSendingDomainStatusCall(domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email sending domain status
     * 
     * @param domain  (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse getEmailSendingDomainStatus(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = getEmailSendingDomainStatusWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Get email sending domain status
     * 
     * @param domain  (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> getEmailSendingDomainStatusWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainStatusValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domain status (asynchronously)
     * 
     * @param domain  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainStatusAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainStatusValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomains
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEmailSendingDomainsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email sending domains
     * 
     * @return EmailSendingDomainsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainsResponse getEmailSendingDomains() throws ApiException {
        ApiResponse<EmailSendingDomainsResponse> resp = getEmailSendingDomainsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get email sending domains
     * 
     * @return ApiResponse&lt;EmailSendingDomainsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainsResponse> getEmailSendingDomainsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domains (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainsAsync(final ApiCallback<EmailSendingDomainsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSettings
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSettingsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/settings"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSettingsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailSettingsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email settings
     * 
     * @param storefrontOid  (required)
     * @return EmailSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSettingsResponse getEmailSettings(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailSettingsResponse> resp = getEmailSettingsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email settings
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSettingsResponse> getEmailSettingsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSettingsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email settings (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSettingsAsync(Integer storefrontOid, final ApiCallback<EmailSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSettingsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailTemplate
     * @param storefrontOid  (required)
     * @param emailTemplateOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplateCall(Integer storefrontOid, Integer emailTemplateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_template_oid" + "\\}", apiClient.escapeString(emailTemplateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailTemplateValidateBeforeCall(Integer storefrontOid, Integer emailTemplateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailTemplate(Async)");
        }
        
        // verify the required parameter 'emailTemplateOid' is set
        if (emailTemplateOid == null) {
            throw new ApiException("Missing the required parameter 'emailTemplateOid' when calling getEmailTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailTemplateCall(storefrontOid, emailTemplateOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email template
     * 
     * @param storefrontOid  (required)
     * @param emailTemplateOid  (required)
     * @return EmailTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailTemplate getEmailTemplate(Integer storefrontOid, Integer emailTemplateOid) throws ApiException {
        ApiResponse<EmailTemplate> resp = getEmailTemplateWithHttpInfo(storefrontOid, emailTemplateOid);
        return resp.getData();
    }

    /**
     * Get email template
     * 
     * @param storefrontOid  (required)
     * @param emailTemplateOid  (required)
     * @return ApiResponse&lt;EmailTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailTemplate> getEmailTemplateWithHttpInfo(Integer storefrontOid, Integer emailTemplateOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTemplateValidateBeforeCall(storefrontOid, emailTemplateOid, null, null);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email template (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailTemplateOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplateAsync(Integer storefrontOid, Integer emailTemplateOid, final ApiCallback<EmailTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTemplateValidateBeforeCall(storefrontOid, emailTemplateOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailTemplates
     * @param storefrontOid  (required)
     * @param triggerType  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplatesCall(Integer storefrontOid, String triggerType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/templates"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (triggerType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trigger_type", triggerType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailTemplatesValidateBeforeCall(Integer storefrontOid, String triggerType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailTemplates(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailTemplatesCall(storefrontOid, triggerType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get email templates
     * 
     * @param storefrontOid  (required)
     * @param triggerType  (optional)
     * @return EmailTemplatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailTemplatesResponse getEmailTemplates(Integer storefrontOid, String triggerType) throws ApiException {
        ApiResponse<EmailTemplatesResponse> resp = getEmailTemplatesWithHttpInfo(storefrontOid, triggerType);
        return resp.getData();
    }

    /**
     * Get email templates
     * 
     * @param storefrontOid  (required)
     * @param triggerType  (optional)
     * @return ApiResponse&lt;EmailTemplatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailTemplatesResponse> getEmailTemplatesWithHttpInfo(Integer storefrontOid, String triggerType) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTemplatesValidateBeforeCall(storefrontOid, triggerType, null, null);
        Type localVarReturnType = new TypeToken<EmailTemplatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email templates (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param triggerType  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplatesAsync(Integer storefrontOid, String triggerType, final ApiCallback<EmailTemplatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTemplatesValidateBeforeCall(storefrontOid, triggerType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailTemplatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailThirdPartyProviders
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailThirdPartyProvidersCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/third_party_providers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailThirdPartyProvidersValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailThirdPartyProviders(Async)");
        }
        

        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of third party email providers
     * 
     * @param storefrontOid  (required)
     * @return EmailThirdPartyProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailThirdPartyProvidersResponse getEmailThirdPartyProviders(Integer storefrontOid) throws ApiException {
        ApiResponse<EmailThirdPartyProvidersResponse> resp = getEmailThirdPartyProvidersWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get a list of third party email providers
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;EmailThirdPartyProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailThirdPartyProvidersResponse> getEmailThirdPartyProvidersWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailThirdPartyProvidersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of third party email providers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailThirdPartyProvidersAsync(Integer storefrontOid, final ApiCallback<EmailThirdPartyProvidersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailThirdPartyProvidersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiments
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get experiments
     * 
     * @param storefrontOid  (required)
     * @return ExperimentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentsResponse getExperiments(Integer storefrontOid) throws ApiException {
        ApiResponse<ExperimentsResponse> resp = getExperimentsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get experiments
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;ExperimentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentsResponse> getExperimentsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<ExperimentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get experiments (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsAsync(Integer storefrontOid, final ApiCallback<ExperimentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistogramPropertyNames
     * @param storefrontOid  (required)
     * @param propertyType  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyNamesCall(Integer storefrontOid, String propertyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_type", propertyType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistogramPropertyNamesValidateBeforeCall(Integer storefrontOid, String propertyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getHistogramPropertyNames(Async)");
        }
        

        com.squareup.okhttp.Call call = getHistogramPropertyNamesCall(storefrontOid, propertyType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param storefrontOid  (required)
     * @param propertyType  (optional)
     * @return EmailHistogramPropertyNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailHistogramPropertyNamesResponse getHistogramPropertyNames(Integer storefrontOid, String propertyType) throws ApiException {
        ApiResponse<EmailHistogramPropertyNamesResponse> resp = getHistogramPropertyNamesWithHttpInfo(storefrontOid, propertyType);
        return resp.getData();
    }

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param storefrontOid  (required)
     * @param propertyType  (optional)
     * @return ApiResponse&lt;EmailHistogramPropertyNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailHistogramPropertyNamesResponse> getHistogramPropertyNamesWithHttpInfo(Integer storefrontOid, String propertyType) throws ApiException {
        com.squareup.okhttp.Call call = getHistogramPropertyNamesValidateBeforeCall(storefrontOid, propertyType, null, null);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyNamesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get histogram property names (asynchronously)
     * Obtain a list of property names for a given property type 
     * @param storefrontOid  (required)
     * @param propertyType  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyNamesAsync(Integer storefrontOid, String propertyType, final ApiCallback<EmailHistogramPropertyNamesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistogramPropertyNamesValidateBeforeCall(storefrontOid, propertyType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyNamesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistogramPropertyValues
     * @param storefrontOid  (required)
     * @param propertyName  (optional)
     * @param propertyType  (optional)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyValuesCall(Integer storefrontOid, String propertyName, String propertyType, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_name", propertyName));
        if (propertyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_type", propertyType));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistogramPropertyValuesValidateBeforeCall(Integer storefrontOid, String propertyName, String propertyType, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getHistogramPropertyValues(Async)");
        }
        

        com.squareup.okhttp.Call call = getHistogramPropertyValuesCall(storefrontOid, propertyName, propertyType, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid  (required)
     * @param propertyName  (optional)
     * @param propertyType  (optional)
     * @param limit  (optional)
     * @return EmailHistogramPropertyValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailHistogramPropertyValuesResponse getHistogramPropertyValues(Integer storefrontOid, String propertyName, String propertyType, Integer limit) throws ApiException {
        ApiResponse<EmailHistogramPropertyValuesResponse> resp = getHistogramPropertyValuesWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
        return resp.getData();
    }

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid  (required)
     * @param propertyName  (optional)
     * @param propertyType  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;EmailHistogramPropertyValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailHistogramPropertyValuesResponse> getHistogramPropertyValuesWithHttpInfo(Integer storefrontOid, String propertyName, String propertyType, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getHistogramPropertyValuesValidateBeforeCall(storefrontOid, propertyName, propertyType, limit, null, null);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyValuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get histogram property values (asynchronously)
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid  (required)
     * @param propertyName  (optional)
     * @param propertyType  (optional)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyValuesAsync(Integer storefrontOid, String propertyName, String propertyType, Integer limit, final ApiCallback<EmailHistogramPropertyValuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistogramPropertyValuesValidateBeforeCall(storefrontOid, propertyName, propertyType, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyValuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLibraryFilterValues
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLibraryFilterValuesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/filter_values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLibraryFilterValuesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLibraryFilterValuesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get library values used to populate drop down boxes for filtering.
     * 
     * @return LibraryFilterValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryFilterValuesResponse getLibraryFilterValues() throws ApiException {
        ApiResponse<LibraryFilterValuesResponse> resp = getLibraryFilterValuesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get library values used to populate drop down boxes for filtering.
     * 
     * @return ApiResponse&lt;LibraryFilterValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryFilterValuesResponse> getLibraryFilterValuesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLibraryFilterValuesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LibraryFilterValuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get library values used to populate drop down boxes for filtering. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLibraryFilterValuesAsync(final ApiCallback<LibraryFilterValuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLibraryFilterValuesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryFilterValuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLibraryItem
     * @param libraryItemOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLibraryItemCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLibraryItemValidateBeforeCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling getLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = getLibraryItemCall(libraryItemOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get library item.
     * 
     * @param libraryItemOid  (required)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse getLibraryItem(Integer libraryItemOid) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = getLibraryItemWithHttpInfo(libraryItemOid);
        return resp.getData();
    }

    /**
     * Get library item.
     * 
     * @param libraryItemOid  (required)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> getLibraryItemWithHttpInfo(Integer libraryItemOid) throws ApiException {
        com.squareup.okhttp.Call call = getLibraryItemValidateBeforeCall(libraryItemOid, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get library item. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLibraryItemAsync(Integer libraryItemOid, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLibraryItemValidateBeforeCall(libraryItemOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLibraryItemPublishedVersions
     * @param libraryItemOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLibraryItemPublishedVersionsCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}/published_versions"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLibraryItemPublishedVersionsValidateBeforeCall(Integer libraryItemOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling getLibraryItemPublishedVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getLibraryItemPublishedVersionsCall(libraryItemOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all published versions for a library item.
     * 
     * @param libraryItemOid  (required)
     * @return LibraryItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemsResponse getLibraryItemPublishedVersions(Integer libraryItemOid) throws ApiException {
        ApiResponse<LibraryItemsResponse> resp = getLibraryItemPublishedVersionsWithHttpInfo(libraryItemOid);
        return resp.getData();
    }

    /**
     * Get all published versions for a library item.
     * 
     * @param libraryItemOid  (required)
     * @return ApiResponse&lt;LibraryItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemsResponse> getLibraryItemPublishedVersionsWithHttpInfo(Integer libraryItemOid) throws ApiException {
        com.squareup.okhttp.Call call = getLibraryItemPublishedVersionsValidateBeforeCall(libraryItemOid, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all published versions for a library item. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLibraryItemPublishedVersionsAsync(Integer libraryItemOid, final ApiCallback<LibraryItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLibraryItemPublishedVersionsValidateBeforeCall(libraryItemOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPricingTiers
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPricingTiersCall(String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/pricing_tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPricingTiersValidateBeforeCall(String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPricingTiersCall(expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve pricing tiers
     * Retrieves the pricing tiers 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return PricingTiersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PricingTiersResponse getPricingTiers(String expand) throws ApiException {
        ApiResponse<PricingTiersResponse> resp = getPricingTiersWithHttpInfo(expand);
        return resp.getData();
    }

    /**
     * Retrieve pricing tiers
     * Retrieves the pricing tiers 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;PricingTiersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PricingTiersResponse> getPricingTiersWithHttpInfo(String expand) throws ApiException {
        com.squareup.okhttp.Call call = getPricingTiersValidateBeforeCall(expand, null, null);
        Type localVarReturnType = new TypeToken<PricingTiersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve pricing tiers (asynchronously)
     * Retrieves the pricing tiers 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPricingTiersAsync(String expand, final ApiCallback<PricingTiersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPricingTiersValidateBeforeCall(expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PricingTiersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecording
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_uuid" + "\\}", apiClient.escapeString(screenRecordingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingValidateBeforeCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecording(Async)");
        }
        
        // verify the required parameter 'screenRecordingUuid' is set
        if (screenRecordingUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingUuid' when calling getScreenRecording(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recording
     * Get screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @return ScreenRecordingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingResponse getScreenRecording(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        ApiResponse<ScreenRecordingResponse> resp = getScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
        return resp.getData();
    }

    /**
     * Get screen recording
     * Get screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @return ApiResponse&lt;ScreenRecordingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingResponse> getScreenRecordingWithHttpInfo(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recording (asynchronously)
     * Get screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingAsync(Integer storefrontOid, String screenRecordingUuid, final ApiCallback<ScreenRecordingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingPageViewData
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param screenRecordingPageViewUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingPageViewDataCall(Integer storefrontOid, String screenRecordingUuid, String screenRecordingPageViewUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_uuid" + "\\}", apiClient.escapeString(screenRecordingUuid.toString()))
            .replaceAll("\\{" + "screen_recording_page_view_uuid" + "\\}", apiClient.escapeString(screenRecordingPageViewUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingPageViewDataValidateBeforeCall(Integer storefrontOid, String screenRecordingUuid, String screenRecordingPageViewUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingPageViewData(Async)");
        }
        
        // verify the required parameter 'screenRecordingUuid' is set
        if (screenRecordingUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingUuid' when calling getScreenRecordingPageViewData(Async)");
        }
        
        // verify the required parameter 'screenRecordingPageViewUuid' is set
        if (screenRecordingPageViewUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingPageViewUuid' when calling getScreenRecordingPageViewData(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingPageViewDataCall(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recording page view data
     * Get screen recording page view data 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param screenRecordingPageViewUuid  (required)
     * @return ScreenRecordingPageViewDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingPageViewDataResponse getScreenRecordingPageViewData(Integer storefrontOid, String screenRecordingUuid, String screenRecordingPageViewUuid) throws ApiException {
        ApiResponse<ScreenRecordingPageViewDataResponse> resp = getScreenRecordingPageViewDataWithHttpInfo(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid);
        return resp.getData();
    }

    /**
     * Get screen recording page view data
     * Get screen recording page view data 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param screenRecordingPageViewUuid  (required)
     * @return ApiResponse&lt;ScreenRecordingPageViewDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingPageViewDataResponse> getScreenRecordingPageViewDataWithHttpInfo(Integer storefrontOid, String screenRecordingUuid, String screenRecordingPageViewUuid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingPageViewDataValidateBeforeCall(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingPageViewDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recording page view data (asynchronously)
     * Get screen recording page view data 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param screenRecordingPageViewUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingPageViewDataAsync(Integer storefrontOid, String screenRecordingUuid, String screenRecordingPageViewUuid, final ApiCallback<ScreenRecordingPageViewDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingPageViewDataValidateBeforeCall(storefrontOid, screenRecordingUuid, screenRecordingPageViewUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingPageViewDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingSegment
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSegmentCall(Integer storefrontOid, Integer screenRecordingSegmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_segment_oid" + "\\}", apiClient.escapeString(screenRecordingSegmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingSegmentValidateBeforeCall(Integer storefrontOid, Integer screenRecordingSegmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingSegment(Async)");
        }
        
        // verify the required parameter 'screenRecordingSegmentOid' is set
        if (screenRecordingSegmentOid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingSegmentOid' when calling getScreenRecordingSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingSegmentCall(storefrontOid, screenRecordingSegmentOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @return ScreenRecordingSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSegmentResponse getScreenRecordingSegment(Integer storefrontOid, Integer screenRecordingSegmentOid) throws ApiException {
        ApiResponse<ScreenRecordingSegmentResponse> resp = getScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid);
        return resp.getData();
    }

    /**
     * Get screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @return ApiResponse&lt;ScreenRecordingSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSegmentResponse> getScreenRecordingSegmentWithHttpInfo(Integer storefrontOid, Integer screenRecordingSegmentOid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recording segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSegmentAsync(Integer storefrontOid, Integer screenRecordingSegmentOid, final ApiCallback<ScreenRecordingSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingSegments
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSegmentsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingSegmentsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingSegments(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingSegmentsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recording segments
     * 
     * @param storefrontOid  (required)
     * @return ScreenRecordingSegmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSegmentsResponse getScreenRecordingSegments(Integer storefrontOid) throws ApiException {
        ApiResponse<ScreenRecordingSegmentsResponse> resp = getScreenRecordingSegmentsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get screen recording segments
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;ScreenRecordingSegmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSegmentsResponse> getScreenRecordingSegmentsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingSegmentsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recording segments (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSegmentsAsync(Integer storefrontOid, final ApiCallback<ScreenRecordingSegmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingSegmentsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingSettings
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSettingsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingSettingsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingSettingsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recording settings
     * 
     * @param storefrontOid  (required)
     * @return ScreenRecordingSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSettingsResponse getScreenRecordingSettings(Integer storefrontOid) throws ApiException {
        ApiResponse<ScreenRecordingSettingsResponse> resp = getScreenRecordingSettingsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get screen recording settings
     * 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;ScreenRecordingSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSettingsResponse> getScreenRecordingSettingsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingSettingsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recording settings (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingSettingsAsync(Integer storefrontOid, final ApiCallback<ScreenRecordingSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingSettingsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingTags
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingTagsCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/tags"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingTagsValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingTags(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingTagsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get tags used by screen recording
     * Get tags used by screen recording 
     * @param storefrontOid  (required)
     * @return ScreenRecordingTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingTagsResponse getScreenRecordingTags(Integer storefrontOid) throws ApiException {
        ApiResponse<ScreenRecordingTagsResponse> resp = getScreenRecordingTagsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get tags used by screen recording
     * Get tags used by screen recording 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;ScreenRecordingTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingTagsResponse> getScreenRecordingTagsWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingTagsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingTagsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get tags used by screen recording (asynchronously)
     * Get tags used by screen recording 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingTagsAsync(Integer storefrontOid, final ApiCallback<ScreenRecordingTagsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingTagsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingTagsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingsByQuery
     * @param storefrontOid  (required)
     * @param query Query (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingsByQueryCall(Integer storefrontOid, ScreenRecordingQueryRequest query, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/query"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingsByQueryValidateBeforeCall(Integer storefrontOid, ScreenRecordingQueryRequest query, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingsByQuery(Async)");
        }
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getScreenRecordingsByQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingsByQueryCall(storefrontOid, query, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query screen recordings
     * Query screen recordings 
     * @param storefrontOid  (required)
     * @param query Query (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ScreenRecordingQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingQueryResponse getScreenRecordingsByQuery(Integer storefrontOid, ScreenRecordingQueryRequest query, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<ScreenRecordingQueryResponse> resp = getScreenRecordingsByQueryWithHttpInfo(storefrontOid, query, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Query screen recordings
     * Query screen recordings 
     * @param storefrontOid  (required)
     * @param query Query (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;ScreenRecordingQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingQueryResponse> getScreenRecordingsByQueryWithHttpInfo(Integer storefrontOid, ScreenRecordingQueryRequest query, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingsByQueryValidateBeforeCall(storefrontOid, query, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query screen recordings (asynchronously)
     * Query screen recordings 
     * @param storefrontOid  (required)
     * @param query Query (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingsByQueryAsync(Integer storefrontOid, ScreenRecordingQueryRequest query, Integer limit, Integer offset, String sort, final ApiCallback<ScreenRecordingQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingsByQueryValidateBeforeCall(storefrontOid, query, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScreenRecordingsBySegment
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingsBySegmentCall(Integer storefrontOid, Integer screenRecordingSegmentOid, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_segment_oid" + "\\}", apiClient.escapeString(screenRecordingSegmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScreenRecordingsBySegmentValidateBeforeCall(Integer storefrontOid, Integer screenRecordingSegmentOid, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getScreenRecordingsBySegment(Async)");
        }
        
        // verify the required parameter 'screenRecordingSegmentOid' is set
        if (screenRecordingSegmentOid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingSegmentOid' when calling getScreenRecordingsBySegment(Async)");
        }
        

        com.squareup.okhttp.Call call = getScreenRecordingsBySegmentCall(storefrontOid, screenRecordingSegmentOid, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get screen recordings by segment
     * Get screen recordings by segment 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ScreenRecordingQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingQueryResponse getScreenRecordingsBySegment(Integer storefrontOid, Integer screenRecordingSegmentOid, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<ScreenRecordingQueryResponse> resp = getScreenRecordingsBySegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Get screen recordings by segment
     * Get screen recordings by segment 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;ScreenRecordingQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingQueryResponse> getScreenRecordingsBySegmentWithHttpInfo(Integer storefrontOid, Integer screenRecordingSegmentOid, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getScreenRecordingsBySegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingQueryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get screen recordings by segment (asynchronously)
     * Get screen recordings by segment 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param limit The maximum number of records to return on this one API call. (Default 100, Max 500) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScreenRecordingsBySegmentAsync(Integer storefrontOid, Integer screenRecordingSegmentOid, Integer limit, Integer offset, String sort, final ApiCallback<ScreenRecordingQueryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScreenRecordingsBySegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingQueryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThumbnailParameters
     * @param thumbnailParameters Thumbnail Parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThumbnailParametersCall(ThumbnailParametersRequest thumbnailParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = thumbnailParameters;

        // create path and map variables
        String localVarPath = "/storefront/thumbnailParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThumbnailParametersValidateBeforeCall(ThumbnailParametersRequest thumbnailParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'thumbnailParameters' is set
        if (thumbnailParameters == null) {
            throw new ApiException("Missing the required parameter 'thumbnailParameters' when calling getThumbnailParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = getThumbnailParametersCall(thumbnailParameters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get thumbnail parameters
     * 
     * @param thumbnailParameters Thumbnail Parameters (required)
     * @return ThumbnailParametersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThumbnailParametersResponse getThumbnailParameters(ThumbnailParametersRequest thumbnailParameters) throws ApiException {
        ApiResponse<ThumbnailParametersResponse> resp = getThumbnailParametersWithHttpInfo(thumbnailParameters);
        return resp.getData();
    }

    /**
     * Get thumbnail parameters
     * 
     * @param thumbnailParameters Thumbnail Parameters (required)
     * @return ApiResponse&lt;ThumbnailParametersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThumbnailParametersResponse> getThumbnailParametersWithHttpInfo(ThumbnailParametersRequest thumbnailParameters) throws ApiException {
        com.squareup.okhttp.Call call = getThumbnailParametersValidateBeforeCall(thumbnailParameters, null, null);
        Type localVarReturnType = new TypeToken<ThumbnailParametersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get thumbnail parameters (asynchronously)
     * 
     * @param thumbnailParameters Thumbnail Parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThumbnailParametersAsync(ThumbnailParametersRequest thumbnailParameters, final ApiCallback<ThumbnailParametersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThumbnailParametersValidateBeforeCall(thumbnailParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThumbnailParametersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionEmail
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailCall(Integer storefrontOid, String emailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_id" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionEmailValidateBeforeCall(Integer storefrontOid, String emailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getTransactionEmail(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getTransactionEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionEmailCall(storefrontOid, emailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a transaction email object
     * Fetch a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @return TransactionEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionEmailResponse getTransactionEmail(Integer storefrontOid, String emailId) throws ApiException {
        ApiResponse<TransactionEmailResponse> resp = getTransactionEmailWithHttpInfo(storefrontOid, emailId);
        return resp.getData();
    }

    /**
     * Gets a transaction email object
     * Fetch a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @return ApiResponse&lt;TransactionEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionEmailResponse> getTransactionEmailWithHttpInfo(Integer storefrontOid, String emailId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionEmailValidateBeforeCall(storefrontOid, emailId, null, null);
        Type localVarReturnType = new TypeToken<TransactionEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a transaction email object (asynchronously)
     * Fetch a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailAsync(Integer storefrontOid, String emailId, final ApiCallback<TransactionEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionEmailValidateBeforeCall(storefrontOid, emailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionEmailList
     * @param storefrontOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailListCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/transaction_email/list"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionEmailListValidateBeforeCall(Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getTransactionEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionEmailListCall(storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of transaction email names
     * Obtain a list of all transactional emails and return back just their names 
     * @param storefrontOid  (required)
     * @return TransactionEmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionEmailListResponse getTransactionEmailList(Integer storefrontOid) throws ApiException {
        ApiResponse<TransactionEmailListResponse> resp = getTransactionEmailListWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Gets a list of transaction email names
     * Obtain a list of all transactional emails and return back just their names 
     * @param storefrontOid  (required)
     * @return ApiResponse&lt;TransactionEmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionEmailListResponse> getTransactionEmailListWithHttpInfo(Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionEmailListValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<TransactionEmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of transaction email names (asynchronously)
     * Obtain a list of all transactional emails and return back just their names 
     * @param storefrontOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailListAsync(Integer storefrontOid, final ApiCallback<TransactionEmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionEmailListValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionEmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionEmailScreenshots
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailScreenshotsCall(Integer storefrontOid, String emailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_id" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionEmailScreenshotsValidateBeforeCall(Integer storefrontOid, String emailId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getTransactionEmailScreenshots(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getTransactionEmailScreenshots(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionEmailScreenshotsCall(storefrontOid, emailId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get transactional email screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @return ScreenshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenshotsResponse getTransactionEmailScreenshots(Integer storefrontOid, String emailId) throws ApiException {
        ApiResponse<ScreenshotsResponse> resp = getTransactionEmailScreenshotsWithHttpInfo(storefrontOid, emailId);
        return resp.getData();
    }

    /**
     * Get transactional email screenshots
     * 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @return ApiResponse&lt;ScreenshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenshotsResponse> getTransactionEmailScreenshotsWithHttpInfo(Integer storefrontOid, String emailId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionEmailScreenshotsValidateBeforeCall(storefrontOid, emailId, null, null);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get transactional email screenshots (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionEmailScreenshotsAsync(Integer storefrontOid, String emailId, final ApiCallback<ScreenshotsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionEmailScreenshotsValidateBeforeCall(storefrontOid, emailId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenshotsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for globalUnsubscribe
     * @param storefrontOid  (required)
     * @param unsubscribe Unsubscribe (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call globalUnsubscribeCall(Integer storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = unsubscribe;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/globalUnsubscribe"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call globalUnsubscribeValidateBeforeCall(Integer storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling globalUnsubscribe(Async)");
        }
        
        // verify the required parameter 'unsubscribe' is set
        if (unsubscribe == null) {
            throw new ApiException("Missing the required parameter 'unsubscribe' when calling globalUnsubscribe(Async)");
        }
        

        com.squareup.okhttp.Call call = globalUnsubscribeCall(storefrontOid, unsubscribe, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Globally unsubscribe a customer
     * 
     * @param storefrontOid  (required)
     * @param unsubscribe Unsubscribe (required)
     * @return EmailGlobalUnsubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailGlobalUnsubscribeResponse globalUnsubscribe(Integer storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe) throws ApiException {
        ApiResponse<EmailGlobalUnsubscribeResponse> resp = globalUnsubscribeWithHttpInfo(storefrontOid, unsubscribe);
        return resp.getData();
    }

    /**
     * Globally unsubscribe a customer
     * 
     * @param storefrontOid  (required)
     * @param unsubscribe Unsubscribe (required)
     * @return ApiResponse&lt;EmailGlobalUnsubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailGlobalUnsubscribeResponse> globalUnsubscribeWithHttpInfo(Integer storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe) throws ApiException {
        com.squareup.okhttp.Call call = globalUnsubscribeValidateBeforeCall(storefrontOid, unsubscribe, null, null);
        Type localVarReturnType = new TypeToken<EmailGlobalUnsubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Globally unsubscribe a customer (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param unsubscribe Unsubscribe (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call globalUnsubscribeAsync(Integer storefrontOid, EmailGlobalUnsubscribeRequest unsubscribe, final ApiCallback<EmailGlobalUnsubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = globalUnsubscribeValidateBeforeCall(storefrontOid, unsubscribe, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailGlobalUnsubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importEmailThirdPartyProviderList
     * @param storefrontOid  (required)
     * @param importRequest lists to import (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importEmailThirdPartyProviderListCall(Integer storefrontOid, EmailThirdPartyListImportRequest importRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = importRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importEmailThirdPartyProviderListValidateBeforeCall(Integer storefrontOid, EmailThirdPartyListImportRequest importRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling importEmailThirdPartyProviderList(Async)");
        }
        
        // verify the required parameter 'importRequest' is set
        if (importRequest == null) {
            throw new ApiException("Missing the required parameter 'importRequest' when calling importEmailThirdPartyProviderList(Async)");
        }
        

        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListCall(storefrontOid, importRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import a third party provider list
     * 
     * @param storefrontOid  (required)
     * @param importRequest lists to import (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importEmailThirdPartyProviderList(Integer storefrontOid, EmailThirdPartyListImportRequest importRequest) throws ApiException {
        importEmailThirdPartyProviderListWithHttpInfo(storefrontOid, importRequest);
    }

    /**
     * Import a third party provider list
     * 
     * @param storefrontOid  (required)
     * @param importRequest lists to import (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importEmailThirdPartyProviderListWithHttpInfo(Integer storefrontOid, EmailThirdPartyListImportRequest importRequest) throws ApiException {
        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListValidateBeforeCall(storefrontOid, importRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Import a third party provider list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param importRequest lists to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importEmailThirdPartyProviderListAsync(Integer storefrontOid, EmailThirdPartyListImportRequest importRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListValidateBeforeCall(storefrontOid, importRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for insertEmailCampaign
     * @param storefrontOid  (required)
     * @param emailCampaign Email campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignCall(Integer storefrontOid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaign;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailCampaignValidateBeforeCall(Integer storefrontOid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaign' is set
        if (emailCampaign == null) {
            throw new ApiException("Missing the required parameter 'emailCampaign' when calling insertEmailCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailCampaignCall(storefrontOid, emailCampaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaign Email campaign (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse insertEmailCampaign(Integer storefrontOid, EmailCampaign emailCampaign) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = insertEmailCampaignWithHttpInfo(storefrontOid, emailCampaign);
        return resp.getData();
    }

    /**
     * Insert email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaign Email campaign (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> insertEmailCampaignWithHttpInfo(Integer storefrontOid, EmailCampaign emailCampaign) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailCampaignValidateBeforeCall(storefrontOid, emailCampaign, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email campaign (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaign Email campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignAsync(Integer storefrontOid, EmailCampaign emailCampaign, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailCampaignValidateBeforeCall(storefrontOid, emailCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailCampaignFolder
     * @param storefrontOid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignFolderCall(Integer storefrontOid, EmailCampaignFolder emailCampaignFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaignFolder;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaign_folders"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailCampaignFolderValidateBeforeCall(Integer storefrontOid, EmailCampaignFolder emailCampaignFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailCampaignFolder(Async)");
        }
        
        // verify the required parameter 'emailCampaignFolder' is set
        if (emailCampaignFolder == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignFolder' when calling insertEmailCampaignFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailCampaignFolderCall(storefrontOid, emailCampaignFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @return EmailCampaignFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignFolderResponse insertEmailCampaignFolder(Integer storefrontOid, EmailCampaignFolder emailCampaignFolder) throws ApiException {
        ApiResponse<EmailCampaignFolderResponse> resp = insertEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolder);
        return resp.getData();
    }

    /**
     * Insert email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @return ApiResponse&lt;EmailCampaignFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignFolderResponse> insertEmailCampaignFolderWithHttpInfo(Integer storefrontOid, EmailCampaignFolder emailCampaignFolder) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolder, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email campaign folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignFolderAsync(Integer storefrontOid, EmailCampaignFolder emailCampaignFolder, final ApiCallback<EmailCampaignFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailCommseq
     * @param storefrontOid  (required)
     * @param emailCommseq Email commseq (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailCommseqCall(Integer storefrontOid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseq;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailCommseqValidateBeforeCall(Integer storefrontOid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailCommseq(Async)");
        }
        
        // verify the required parameter 'emailCommseq' is set
        if (emailCommseq == null) {
            throw new ApiException("Missing the required parameter 'emailCommseq' when calling insertEmailCommseq(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailCommseqCall(storefrontOid, emailCommseq, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email commseq
     * 
     * @param storefrontOid  (required)
     * @param emailCommseq Email commseq (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse insertEmailCommseq(Integer storefrontOid, EmailCommseq emailCommseq) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = insertEmailCommseqWithHttpInfo(storefrontOid, emailCommseq);
        return resp.getData();
    }

    /**
     * Insert email commseq
     * 
     * @param storefrontOid  (required)
     * @param emailCommseq Email commseq (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> insertEmailCommseqWithHttpInfo(Integer storefrontOid, EmailCommseq emailCommseq) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailCommseqValidateBeforeCall(storefrontOid, emailCommseq, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email commseq (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCommseq Email commseq (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailCommseqAsync(Integer storefrontOid, EmailCommseq emailCommseq, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailCommseqValidateBeforeCall(storefrontOid, emailCommseq, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailEmail
     * @param storefrontOid  (required)
     * @param emailCommseqEmail Email email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailEmailCall(Integer storefrontOid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmail;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailEmailValidateBeforeCall(Integer storefrontOid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailEmail(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmail' is set
        if (emailCommseqEmail == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmail' when calling insertEmailEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailEmailCall(storefrontOid, emailCommseqEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email email
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmail Email email (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse insertEmailEmail(Integer storefrontOid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = insertEmailEmailWithHttpInfo(storefrontOid, emailCommseqEmail);
        return resp.getData();
    }

    /**
     * Insert email email
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmail Email email (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> insertEmailEmailWithHttpInfo(Integer storefrontOid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailEmailValidateBeforeCall(storefrontOid, emailCommseqEmail, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email email (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqEmail Email email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailEmailAsync(Integer storefrontOid, EmailCommseqEmail emailCommseqEmail, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailEmailValidateBeforeCall(storefrontOid, emailCommseqEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailFlow
     * @param storefrontOid  (required)
     * @param emailFlow Email flow (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowCall(Integer storefrontOid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlow;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailFlowValidateBeforeCall(Integer storefrontOid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlow' is set
        if (emailFlow == null) {
            throw new ApiException("Missing the required parameter 'emailFlow' when calling insertEmailFlow(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailFlowCall(storefrontOid, emailFlow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlow Email flow (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse insertEmailFlow(Integer storefrontOid, EmailFlow emailFlow) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = insertEmailFlowWithHttpInfo(storefrontOid, emailFlow);
        return resp.getData();
    }

    /**
     * Insert email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlow Email flow (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> insertEmailFlowWithHttpInfo(Integer storefrontOid, EmailFlow emailFlow) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailFlowValidateBeforeCall(storefrontOid, emailFlow, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email flow (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlow Email flow (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowAsync(Integer storefrontOid, EmailFlow emailFlow, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailFlowValidateBeforeCall(storefrontOid, emailFlow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailFlowFolder
     * @param storefrontOid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowFolderCall(Integer storefrontOid, EmailFlowFolder emailFlowFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlowFolder;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flow_folders"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailFlowFolderValidateBeforeCall(Integer storefrontOid, EmailFlowFolder emailFlowFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailFlowFolder(Async)");
        }
        
        // verify the required parameter 'emailFlowFolder' is set
        if (emailFlowFolder == null) {
            throw new ApiException("Missing the required parameter 'emailFlowFolder' when calling insertEmailFlowFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailFlowFolderCall(storefrontOid, emailFlowFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @return EmailFlowFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowFolderResponse insertEmailFlowFolder(Integer storefrontOid, EmailFlowFolder emailFlowFolder) throws ApiException {
        ApiResponse<EmailFlowFolderResponse> resp = insertEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolder);
        return resp.getData();
    }

    /**
     * Insert email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @return ApiResponse&lt;EmailFlowFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowFolderResponse> insertEmailFlowFolderWithHttpInfo(Integer storefrontOid, EmailFlowFolder emailFlowFolder) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolder, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email flow folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowFolderAsync(Integer storefrontOid, EmailFlowFolder emailFlowFolder, final ApiCallback<EmailFlowFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailList
     * @param storefrontOid  (required)
     * @param emailList Email list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailListCall(Integer storefrontOid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailList;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailListValidateBeforeCall(Integer storefrontOid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailList(Async)");
        }
        
        // verify the required parameter 'emailList' is set
        if (emailList == null) {
            throw new ApiException("Missing the required parameter 'emailList' when calling insertEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailListCall(storefrontOid, emailList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email list
     * 
     * @param storefrontOid  (required)
     * @param emailList Email list (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse insertEmailList(Integer storefrontOid, EmailList emailList) throws ApiException {
        ApiResponse<EmailListResponse> resp = insertEmailListWithHttpInfo(storefrontOid, emailList);
        return resp.getData();
    }

    /**
     * Insert email list
     * 
     * @param storefrontOid  (required)
     * @param emailList Email list (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> insertEmailListWithHttpInfo(Integer storefrontOid, EmailList emailList) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailListValidateBeforeCall(storefrontOid, emailList, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailList Email list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailListAsync(Integer storefrontOid, EmailList emailList, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailListValidateBeforeCall(storefrontOid, emailList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailPostcard
     * @param storefrontOid  (required)
     * @param emailCommseqPostcard Email postcard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailPostcardCall(Integer storefrontOid, EmailCommseqPostcard emailCommseqPostcard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqPostcard;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailPostcardValidateBeforeCall(Integer storefrontOid, EmailCommseqPostcard emailCommseqPostcard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailPostcard(Async)");
        }
        
        // verify the required parameter 'emailCommseqPostcard' is set
        if (emailCommseqPostcard == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqPostcard' when calling insertEmailPostcard(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailPostcardCall(storefrontOid, emailCommseqPostcard, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email postcard
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcard Email postcard (required)
     * @return EmailCommseqPostcardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardResponse insertEmailPostcard(Integer storefrontOid, EmailCommseqPostcard emailCommseqPostcard) throws ApiException {
        ApiResponse<EmailCommseqPostcardResponse> resp = insertEmailPostcardWithHttpInfo(storefrontOid, emailCommseqPostcard);
        return resp.getData();
    }

    /**
     * Insert email postcard
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcard Email postcard (required)
     * @return ApiResponse&lt;EmailCommseqPostcardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardResponse> insertEmailPostcardWithHttpInfo(Integer storefrontOid, EmailCommseqPostcard emailCommseqPostcard) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailPostcardValidateBeforeCall(storefrontOid, emailCommseqPostcard, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email postcard (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCommseqPostcard Email postcard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailPostcardAsync(Integer storefrontOid, EmailCommseqPostcard emailCommseqPostcard, final ApiCallback<EmailCommseqPostcardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailPostcardValidateBeforeCall(storefrontOid, emailCommseqPostcard, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegment Email segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailSegmentCall(Integer storefrontOid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailSegment;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailSegmentValidateBeforeCall(Integer storefrontOid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegment' is set
        if (emailSegment == null) {
            throw new ApiException("Missing the required parameter 'emailSegment' when calling insertEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = insertEmailSegmentCall(storefrontOid, emailSegment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegment Email segment (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse insertEmailSegment(Integer storefrontOid, EmailSegment emailSegment) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = insertEmailSegmentWithHttpInfo(storefrontOid, emailSegment);
        return resp.getData();
    }

    /**
     * Insert email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegment Email segment (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> insertEmailSegmentWithHttpInfo(Integer storefrontOid, EmailSegment emailSegment) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailSegmentValidateBeforeCall(storefrontOid, emailSegment, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegment Email segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailSegmentAsync(Integer storefrontOid, EmailSegment emailSegment, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailSegmentValidateBeforeCall(storefrontOid, emailSegment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertScreenRecordingSegment
     * @param storefrontOid  (required)
     * @param segment Segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertScreenRecordingSegmentCall(Integer storefrontOid, ScreenRecordingSegment segment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = segment;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertScreenRecordingSegmentValidateBeforeCall(Integer storefrontOid, ScreenRecordingSegment segment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertScreenRecordingSegment(Async)");
        }
        
        // verify the required parameter 'segment' is set
        if (segment == null) {
            throw new ApiException("Missing the required parameter 'segment' when calling insertScreenRecordingSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = insertScreenRecordingSegmentCall(storefrontOid, segment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param segment Segment (required)
     * @return ScreenRecordingSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSegmentResponse insertScreenRecordingSegment(Integer storefrontOid, ScreenRecordingSegment segment) throws ApiException {
        ApiResponse<ScreenRecordingSegmentResponse> resp = insertScreenRecordingSegmentWithHttpInfo(storefrontOid, segment);
        return resp.getData();
    }

    /**
     * Insert screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param segment Segment (required)
     * @return ApiResponse&lt;ScreenRecordingSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSegmentResponse> insertScreenRecordingSegmentWithHttpInfo(Integer storefrontOid, ScreenRecordingSegment segment) throws ApiException {
        com.squareup.okhttp.Call call = insertScreenRecordingSegmentValidateBeforeCall(storefrontOid, segment, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert screen recording segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param segment Segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertScreenRecordingSegmentAsync(Integer storefrontOid, ScreenRecordingSegment segment, final ApiCallback<ScreenRecordingSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertScreenRecordingSegmentValidateBeforeCall(storefrontOid, segment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for prepareDownloadEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call prepareDownloadEmailSegmentCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call prepareDownloadEmailSegmentValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling prepareDownloadEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling prepareDownloadEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = prepareDownloadEmailSegmentCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Prepare download of email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return EmailSegmentDownloadPrepareResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentDownloadPrepareResponse prepareDownloadEmailSegment(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        ApiResponse<EmailSegmentDownloadPrepareResponse> resp = prepareDownloadEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
        return resp.getData();
    }

    /**
     * Prepare download of email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @return ApiResponse&lt;EmailSegmentDownloadPrepareResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentDownloadPrepareResponse> prepareDownloadEmailSegmentWithHttpInfo(Integer storefrontOid, String emailSegmentUuid) throws ApiException {
        com.squareup.okhttp.Call call = prepareDownloadEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentDownloadPrepareResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Prepare download of email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call prepareDownloadEmailSegmentAsync(Integer storefrontOid, String emailSegmentUuid, final ApiCallback<EmailSegmentDownloadPrepareResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = prepareDownloadEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentDownloadPrepareResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishLibraryItem
     * @param libraryItemOid  (required)
     * @param publishLibraryRequest Publish library item request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishLibraryItemCall(Integer libraryItemOid, PublishLibraryItemRequest publishLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = publishLibraryRequest;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}/publish"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishLibraryItemValidateBeforeCall(Integer libraryItemOid, PublishLibraryItemRequest publishLibraryRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling publishLibraryItem(Async)");
        }
        
        // verify the required parameter 'publishLibraryRequest' is set
        if (publishLibraryRequest == null) {
            throw new ApiException("Missing the required parameter 'publishLibraryRequest' when calling publishLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = publishLibraryItemCall(libraryItemOid, publishLibraryRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Publish library item.
     * 
     * @param libraryItemOid  (required)
     * @param publishLibraryRequest Publish library item request (required)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse publishLibraryItem(Integer libraryItemOid, PublishLibraryItemRequest publishLibraryRequest) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = publishLibraryItemWithHttpInfo(libraryItemOid, publishLibraryRequest);
        return resp.getData();
    }

    /**
     * Publish library item.
     * 
     * @param libraryItemOid  (required)
     * @param publishLibraryRequest Publish library item request (required)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> publishLibraryItemWithHttpInfo(Integer libraryItemOid, PublishLibraryItemRequest publishLibraryRequest) throws ApiException {
        com.squareup.okhttp.Call call = publishLibraryItemValidateBeforeCall(libraryItemOid, publishLibraryRequest, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish library item. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param publishLibraryRequest Publish library item request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishLibraryItemAsync(Integer libraryItemOid, PublishLibraryItemRequest publishLibraryRequest, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishLibraryItemValidateBeforeCall(libraryItemOid, publishLibraryRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseLibraryItem
     * @param libraryItemOid  (required)
     * @param storefrontOid  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purchaseLibraryItemCall(Integer libraryItemOid, Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}/purchase"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (storefrontOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storefront_oid", storefrontOid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseLibraryItemValidateBeforeCall(Integer libraryItemOid, Integer storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling purchaseLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseLibraryItemCall(libraryItemOid, storefrontOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     * 
     * @param libraryItemOid  (required)
     * @param storefrontOid  (optional)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse purchaseLibraryItem(Integer libraryItemOid, Integer storefrontOid) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = purchaseLibraryItemWithHttpInfo(libraryItemOid, storefrontOid);
        return resp.getData();
    }

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     * 
     * @param libraryItemOid  (required)
     * @param storefrontOid  (optional)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> purchaseLibraryItemWithHttpInfo(Integer libraryItemOid, Integer storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = purchaseLibraryItemValidateBeforeCall(libraryItemOid, storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param storefrontOid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purchaseLibraryItemAsync(Integer libraryItemOid, Integer storefrontOid, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseLibraryItemValidateBeforeCall(libraryItemOid, storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for releaseEmailCommseqStepWaiting
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call releaseEmailCommseqStepWaitingCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()))
            .replaceAll("\\{" + "commseq_step_uuid" + "\\}", apiClient.escapeString(commseqStepUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call releaseEmailCommseqStepWaitingValidateBeforeCall(Integer storefrontOid, String commseqUuid, String commseqStepUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling releaseEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling releaseEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'commseqStepUuid' is set
        if (commseqStepUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqStepUuid' when calling releaseEmailCommseqStepWaiting(Async)");
        }
        

        com.squareup.okhttp.Call call = releaseEmailCommseqStepWaitingCall(storefrontOid, commseqUuid, commseqStepUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Release email communication sequence customers waiting at the specified step
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void releaseEmailCommseqStepWaiting(Integer storefrontOid, String commseqUuid, String commseqStepUuid) throws ApiException {
        releaseEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, commseqStepUuid);
    }

    /**
     * Release email communication sequence customers waiting at the specified step
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> releaseEmailCommseqStepWaitingWithHttpInfo(Integer storefrontOid, String commseqUuid, String commseqStepUuid) throws ApiException {
        com.squareup.okhttp.Call call = releaseEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Release email communication sequence customers waiting at the specified step (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param commseqStepUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call releaseEmailCommseqStepWaitingAsync(Integer storefrontOid, String commseqUuid, String commseqStepUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = releaseEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, commseqStepUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for review
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailReviewRequest Email commseq email review request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reviewCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmailReviewRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reviewValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling review(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling review(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmailReviewRequest' is set
        if (emailCommseqEmailReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmailReviewRequest' when calling review(Async)");
        }
        

        com.squareup.okhttp.Call call = reviewCall(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request a review of an email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailReviewRequest Email commseq email review request (required)
     * @return EmailCommseqEmailSendTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailSendTestResponse review(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest) throws ApiException {
        ApiResponse<EmailCommseqEmailSendTestResponse> resp = reviewWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest);
        return resp.getData();
    }

    /**
     * Request a review of an email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailReviewRequest Email commseq email review request (required)
     * @return ApiResponse&lt;EmailCommseqEmailSendTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailSendTestResponse> reviewWithHttpInfo(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest) throws ApiException {
        com.squareup.okhttp.Call call = reviewValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailSendTestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request a review of an email (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailReviewRequest Email commseq email review request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reviewAsync(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailReviewRequest, final ApiCallback<EmailCommseqEmailSendTestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reviewValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailSendTestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search
     * @param category  (optional)
     * @param matches  (optional)
     * @param storefrontOid  (optional)
     * @param maxHits  (optional)
     * @param subcategory  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(String category, String matches, String storefrontOid, Integer maxHits, String subcategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (matches != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("matches", matches));
        if (storefrontOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("storefront_oid", storefrontOid));
        if (maxHits != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_hits", maxHits));
        if (subcategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subcategory", subcategory));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String category, String matches, String storefrontOid, Integer maxHits, String subcategory, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchCall(category, matches, storefrontOid, maxHits, subcategory, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for all matching values
     * 
     * @param category  (optional)
     * @param matches  (optional)
     * @param storefrontOid  (optional)
     * @param maxHits  (optional)
     * @param subcategory  (optional)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookupResponse search(String category, String matches, String storefrontOid, Integer maxHits, String subcategory) throws ApiException {
        ApiResponse<LookupResponse> resp = searchWithHttpInfo(category, matches, storefrontOid, maxHits, subcategory);
        return resp.getData();
    }

    /**
     * Searches for all matching values
     * 
     * @param category  (optional)
     * @param matches  (optional)
     * @param storefrontOid  (optional)
     * @param maxHits  (optional)
     * @param subcategory  (optional)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookupResponse> searchWithHttpInfo(String category, String matches, String storefrontOid, Integer maxHits, String subcategory) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(category, matches, storefrontOid, maxHits, subcategory, null, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for all matching values (asynchronously)
     * 
     * @param category  (optional)
     * @param matches  (optional)
     * @param storefrontOid  (optional)
     * @param maxHits  (optional)
     * @param subcategory  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String category, String matches, String storefrontOid, Integer maxHits, String subcategory, final ApiCallback<LookupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(category, matches, storefrontOid, maxHits, subcategory, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search2
     * @param lookupRequest LookupRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call search2Call(LookupRequest lookupRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lookupRequest;

        // create path and map variables
        String localVarPath = "/storefront/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call search2ValidateBeforeCall(LookupRequest lookupRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookupRequest' is set
        if (lookupRequest == null) {
            throw new ApiException("Missing the required parameter 'lookupRequest' when calling search2(Async)");
        }
        

        com.squareup.okhttp.Call call = search2Call(lookupRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for all matching values (using POST)
     * 
     * @param lookupRequest LookupRequest (required)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookupResponse search2(LookupRequest lookupRequest) throws ApiException {
        ApiResponse<LookupResponse> resp = search2WithHttpInfo(lookupRequest);
        return resp.getData();
    }

    /**
     * Searches for all matching values (using POST)
     * 
     * @param lookupRequest LookupRequest (required)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookupResponse> search2WithHttpInfo(LookupRequest lookupRequest) throws ApiException {
        com.squareup.okhttp.Call call = search2ValidateBeforeCall(lookupRequest, null, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for all matching values (using POST) (asynchronously)
     * 
     * @param lookupRequest LookupRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call search2Async(LookupRequest lookupRequest, final ApiCallback<LookupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = search2ValidateBeforeCall(lookupRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchEmailListCustomers
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param startsWith  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchEmailListCustomersCall(Integer storefrontOid, String emailListUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startsWith", startsWith));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchEmailListCustomersValidateBeforeCall(Integer storefrontOid, String emailListUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling searchEmailListCustomers(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling searchEmailListCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = searchEmailListCustomersCall(storefrontOid, emailListUuid, startsWith, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search email list customers
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param startsWith  (optional)
     * @return EmailListCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListCustomersResponse searchEmailListCustomers(Integer storefrontOid, String emailListUuid, String startsWith) throws ApiException {
        ApiResponse<EmailListCustomersResponse> resp = searchEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, startsWith);
        return resp.getData();
    }

    /**
     * Search email list customers
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param startsWith  (optional)
     * @return ApiResponse&lt;EmailListCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListCustomersResponse> searchEmailListCustomersWithHttpInfo(Integer storefrontOid, String emailListUuid, String startsWith) throws ApiException {
        com.squareup.okhttp.Call call = searchEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, startsWith, null, null);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search email list customers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param startsWith  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchEmailListCustomersAsync(Integer storefrontOid, String emailListUuid, String startsWith, final ApiCallback<EmailListCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, startsWith, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchEmailSegmentCustomers
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param startsWith  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchEmailSegmentCustomersCall(Integer storefrontOid, String emailSegmentUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startsWith", startsWith));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchEmailSegmentCustomersValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling searchEmailSegmentCustomers(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling searchEmailSegmentCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = searchEmailSegmentCustomersCall(storefrontOid, emailSegmentUuid, startsWith, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search email segment customers
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param startsWith  (optional)
     * @return EmailSegmentCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentCustomersResponse searchEmailSegmentCustomers(Integer storefrontOid, String emailSegmentUuid, String startsWith) throws ApiException {
        ApiResponse<EmailSegmentCustomersResponse> resp = searchEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
        return resp.getData();
    }

    /**
     * Search email segment customers
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param startsWith  (optional)
     * @return ApiResponse&lt;EmailSegmentCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentCustomersResponse> searchEmailSegmentCustomersWithHttpInfo(Integer storefrontOid, String emailSegmentUuid, String startsWith) throws ApiException {
        com.squareup.okhttp.Call call = searchEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, startsWith, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search email segment customers (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param startsWith  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchEmailSegmentCustomersAsync(Integer storefrontOid, String emailSegmentUuid, String startsWith, final ApiCallback<EmailSegmentCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, startsWith, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchLibraryItems
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchLibraryItemsCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemQuery;

        // create path and map variables
        String localVarPath = "/storefront/code_library/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchLibraryItemsValidateBeforeCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemQuery' is set
        if (itemQuery == null) {
            throw new ApiException("Missing the required parameter 'itemQuery' when calling searchLibraryItems(Async)");
        }
        

        com.squareup.okhttp.Call call = searchLibraryItemsCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return LibraryItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemsResponse searchLibraryItems(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<LibraryItemsResponse> resp = searchLibraryItemsWithHttpInfo(itemQuery, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;LibraryItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemsResponse> searchLibraryItemsWithHttpInfo(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = searchLibraryItemsValidateBeforeCall(itemQuery, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve library items (asynchronously)
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchLibraryItemsAsync(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ApiCallback<LibraryItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchLibraryItemsValidateBeforeCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPublishedItems
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchPublishedItemsCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemQuery;

        // create path and map variables
        String localVarPath = "/storefront/code_library/search_published";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchPublishedItemsValidateBeforeCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemQuery' is set
        if (itemQuery == null) {
            throw new ApiException("Missing the required parameter 'itemQuery' when calling searchPublishedItems(Async)");
        }
        

        com.squareup.okhttp.Call call = searchPublishedItemsCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return LibraryItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemsResponse searchPublishedItems(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<LibraryItemsResponse> resp = searchPublishedItemsWithHttpInfo(itemQuery, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;LibraryItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemsResponse> searchPublishedItemsWithHttpInfo(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = searchPublishedItemsValidateBeforeCall(itemQuery, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve library items (asynchronously)
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchPublishedItemsAsync(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ApiCallback<LibraryItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchPublishedItemsValidateBeforeCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchReviewItems
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchReviewItemsCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemQuery;

        // create path and map variables
        String localVarPath = "/storefront/code_library/search_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchReviewItemsValidateBeforeCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemQuery' is set
        if (itemQuery == null) {
            throw new ApiException("Missing the required parameter 'itemQuery' when calling searchReviewItems(Async)");
        }
        

        com.squareup.okhttp.Call call = searchReviewItemsCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve library items needing review or rejected
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return LibraryItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemsResponse searchReviewItems(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<LibraryItemsResponse> resp = searchReviewItemsWithHttpInfo(itemQuery, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Retrieve library items needing review or rejected
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;LibraryItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemsResponse> searchReviewItemsWithHttpInfo(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = searchReviewItemsValidateBeforeCall(itemQuery, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve library items needing review or rejected (asynchronously)
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchReviewItemsAsync(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ApiCallback<LibraryItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchReviewItemsValidateBeforeCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchSharedItems
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchSharedItemsCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = itemQuery;

        // create path and map variables
        String localVarPath = "/storefront/code_library/search_shared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchSharedItemsValidateBeforeCall(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemQuery' is set
        if (itemQuery == null) {
            throw new ApiException("Missing the required parameter 'itemQuery' when calling searchSharedItems(Async)");
        }
        

        com.squareup.okhttp.Call call = searchSharedItemsCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return LibraryItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemsResponse searchSharedItems(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<LibraryItemsResponse> resp = searchSharedItemsWithHttpInfo(itemQuery, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @return ApiResponse&lt;LibraryItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemsResponse> searchSharedItemsWithHttpInfo(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = searchSharedItemsValidateBeforeCall(itemQuery, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve library items (asynchronously)
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param itemQuery Item query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchSharedItemsAsync(LibraryItemQuery itemQuery, Integer limit, Integer offset, String sort, final ApiCallback<LibraryItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchSharedItemsValidateBeforeCall(itemQuery, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendEmailTest
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailTestRequest Email commseq email test request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendEmailTestCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmailTestRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendEmailTestValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling sendEmailTest(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling sendEmailTest(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmailTestRequest' is set
        if (emailCommseqEmailTestRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmailTestRequest' when calling sendEmailTest(Async)");
        }
        

        com.squareup.okhttp.Call call = sendEmailTestCall(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send email test
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailTestRequest Email commseq email test request (required)
     * @return EmailCommseqEmailSendTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailSendTestResponse sendEmailTest(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest) throws ApiException {
        ApiResponse<EmailCommseqEmailSendTestResponse> resp = sendEmailTestWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest);
        return resp.getData();
    }

    /**
     * Send email test
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailTestRequest Email commseq email test request (required)
     * @return ApiResponse&lt;EmailCommseqEmailSendTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailSendTestResponse> sendEmailTestWithHttpInfo(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest) throws ApiException {
        com.squareup.okhttp.Call call = sendEmailTestValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailSendTestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send email test (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmailTestRequest Email commseq email test request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendEmailTestAsync(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmailSendTestRequest emailCommseqEmailTestRequest, final ApiCallback<EmailCommseqEmailSendTestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendEmailTestValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailSendTestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendPostcardTest
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcardTestRequest Email commseq email test request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendPostcardTestCall(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqPostcardTestRequest;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_postcard_uuid" + "\\}", apiClient.escapeString(commseqPostcardUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendPostcardTestValidateBeforeCall(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling sendPostcardTest(Async)");
        }
        
        // verify the required parameter 'commseqPostcardUuid' is set
        if (commseqPostcardUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqPostcardUuid' when calling sendPostcardTest(Async)");
        }
        
        // verify the required parameter 'emailCommseqPostcardTestRequest' is set
        if (emailCommseqPostcardTestRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqPostcardTestRequest' when calling sendPostcardTest(Async)");
        }
        

        com.squareup.okhttp.Call call = sendPostcardTestCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send postcard test
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcardTestRequest Email commseq email test request (required)
     * @return EmailCommseqPostcardSendTestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardSendTestResponse sendPostcardTest(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest) throws ApiException {
        ApiResponse<EmailCommseqPostcardSendTestResponse> resp = sendPostcardTestWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest);
        return resp.getData();
    }

    /**
     * Send postcard test
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcardTestRequest Email commseq email test request (required)
     * @return ApiResponse&lt;EmailCommseqPostcardSendTestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardSendTestResponse> sendPostcardTestWithHttpInfo(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest) throws ApiException {
        com.squareup.okhttp.Call call = sendPostcardTestValidateBeforeCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardSendTestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send postcard test (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcardTestRequest Email commseq email test request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendPostcardTestAsync(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcardSendTestRequest emailCommseqPostcardTestRequest, final ApiCallback<EmailCommseqPostcardSendTestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendPostcardTestValidateBeforeCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardSendTestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEmailCampaign
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEmailCampaignCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEmailCampaignValidateBeforeCall(Integer storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling startEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling startEmailCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = startEmailCampaignCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse startEmailCampaign(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = startEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Start email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> startEmailCampaignWithHttpInfo(Integer storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = startEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start email campaign (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEmailCampaignAsync(Integer storefrontOid, String emailCampaignUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeToEmailList
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param customers Customers (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscribeToEmailListCall(Integer storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customers;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeToEmailListValidateBeforeCall(Integer storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling subscribeToEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling subscribeToEmailList(Async)");
        }
        
        // verify the required parameter 'customers' is set
        if (customers == null) {
            throw new ApiException("Missing the required parameter 'customers' when calling subscribeToEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = subscribeToEmailListCall(storefrontOid, emailListUuid, customers, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribe customers to email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param customers Customers (required)
     * @return EmailListSubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListSubscribeResponse subscribeToEmailList(Integer storefrontOid, String emailListUuid, List<EmailCustomer> customers) throws ApiException {
        ApiResponse<EmailListSubscribeResponse> resp = subscribeToEmailListWithHttpInfo(storefrontOid, emailListUuid, customers);
        return resp.getData();
    }

    /**
     * Subscribe customers to email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param customers Customers (required)
     * @return ApiResponse&lt;EmailListSubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListSubscribeResponse> subscribeToEmailListWithHttpInfo(Integer storefrontOid, String emailListUuid, List<EmailCustomer> customers) throws ApiException {
        com.squareup.okhttp.Call call = subscribeToEmailListValidateBeforeCall(storefrontOid, emailListUuid, customers, null, null);
        Type localVarReturnType = new TypeToken<EmailListSubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe customers to email list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param customers Customers (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeToEmailListAsync(Integer storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ApiCallback<EmailListSubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeToEmailListValidateBeforeCall(storefrontOid, emailListUuid, customers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListSubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unfavoriteScreenRecording
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unfavoriteScreenRecordingCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_uuid" + "\\}", apiClient.escapeString(screenRecordingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unfavoriteScreenRecordingValidateBeforeCall(Integer storefrontOid, String screenRecordingUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling unfavoriteScreenRecording(Async)");
        }
        
        // verify the required parameter 'screenRecordingUuid' is set
        if (screenRecordingUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingUuid' when calling unfavoriteScreenRecording(Async)");
        }
        

        com.squareup.okhttp.Call call = unfavoriteScreenRecordingCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove favorite flag on screen recording
     * Remove favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void unfavoriteScreenRecording(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        unfavoriteScreenRecordingWithHttpInfo(storefrontOid, screenRecordingUuid);
    }

    /**
     * Remove favorite flag on screen recording
     * Remove favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> unfavoriteScreenRecordingWithHttpInfo(Integer storefrontOid, String screenRecordingUuid) throws ApiException {
        com.squareup.okhttp.Call call = unfavoriteScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove favorite flag on screen recording (asynchronously)
     * Remove favorite flag on screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfavoriteScreenRecordingAsync(Integer storefrontOid, String screenRecordingUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfavoriteScreenRecordingValidateBeforeCall(storefrontOid, screenRecordingUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEmailCampaign
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param emailCampaign Email campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignCall(Integer storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaign;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCampaignValidateBeforeCall(Integer storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling updateEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaign' is set
        if (emailCampaign == null) {
            throw new ApiException("Missing the required parameter 'emailCampaign' when calling updateEmailCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailCampaignCall(storefrontOid, emailCampaignUuid, emailCampaign, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param emailCampaign Email campaign (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse updateEmailCampaign(Integer storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = updateEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
        return resp.getData();
    }

    /**
     * Update email campaign
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param emailCampaign Email campaign (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> updateEmailCampaignWithHttpInfo(Integer storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, emailCampaign, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email campaign (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignUuid  (required)
     * @param emailCampaign Email campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignAsync(Integer storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, emailCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailCampaignFolder
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignFolderCall(Integer storefrontOid, String emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaignFolder;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_folder_uuid" + "\\}", apiClient.escapeString(emailCampaignFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCampaignFolderValidateBeforeCall(Integer storefrontOid, String emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCampaignFolder(Async)");
        }
        
        // verify the required parameter 'emailCampaignFolderUuid' is set
        if (emailCampaignFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignFolderUuid' when calling updateEmailCampaignFolder(Async)");
        }
        
        // verify the required parameter 'emailCampaignFolder' is set
        if (emailCampaignFolder == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignFolder' when calling updateEmailCampaignFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailCampaignFolderCall(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @return EmailCampaignFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignFolderResponse updateEmailCampaignFolder(Integer storefrontOid, String emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder) throws ApiException {
        ApiResponse<EmailCampaignFolderResponse> resp = updateEmailCampaignFolderWithHttpInfo(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder);
        return resp.getData();
    }

    /**
     * Update email campaign folder
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @return ApiResponse&lt;EmailCampaignFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignFolderResponse> updateEmailCampaignFolderWithHttpInfo(Integer storefrontOid, String emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email campaign folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCampaignFolderUuid  (required)
     * @param emailCampaignFolder Email campaign folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignFolderAsync(Integer storefrontOid, String emailCampaignFolderUuid, EmailCampaignFolder emailCampaignFolder, final ApiCallback<EmailCampaignFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCampaignFolderValidateBeforeCall(storefrontOid, emailCampaignFolderUuid, emailCampaignFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailCommseq
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param emailCommseq Email commseq (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCommseqCall(Integer storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseq;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCommseqValidateBeforeCall(Integer storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCommseq(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling updateEmailCommseq(Async)");
        }
        
        // verify the required parameter 'emailCommseq' is set
        if (emailCommseq == null) {
            throw new ApiException("Missing the required parameter 'emailCommseq' when calling updateEmailCommseq(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailCommseqCall(storefrontOid, commseqUuid, emailCommseq, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email commseq
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param emailCommseq Email commseq (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse updateEmailCommseq(Integer storefrontOid, String commseqUuid, EmailCommseq emailCommseq) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = updateEmailCommseqWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
        return resp.getData();
    }

    /**
     * Update email commseq
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param emailCommseq Email commseq (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> updateEmailCommseqWithHttpInfo(Integer storefrontOid, String commseqUuid, EmailCommseq emailCommseq) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, emailCommseq, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email commseq (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqUuid  (required)
     * @param emailCommseq Email commseq (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCommseqAsync(Integer storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, emailCommseq, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailCustomer
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param emailCustomer Email customer (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCustomerCall(Integer storefrontOid, String emailCustomerUuid, EmailCustomer emailCustomer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCustomer;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCustomerValidateBeforeCall(Integer storefrontOid, String emailCustomerUuid, EmailCustomer emailCustomer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCustomer(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling updateEmailCustomer(Async)");
        }
        
        // verify the required parameter 'emailCustomer' is set
        if (emailCustomer == null) {
            throw new ApiException("Missing the required parameter 'emailCustomer' when calling updateEmailCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailCustomerCall(storefrontOid, emailCustomerUuid, emailCustomer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email customer
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param emailCustomer Email customer (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEmailCustomer(Integer storefrontOid, String emailCustomerUuid, EmailCustomer emailCustomer) throws ApiException {
        updateEmailCustomerWithHttpInfo(storefrontOid, emailCustomerUuid, emailCustomer);
    }

    /**
     * Update email customer
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param emailCustomer Email customer (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEmailCustomerWithHttpInfo(Integer storefrontOid, String emailCustomerUuid, EmailCustomer emailCustomer) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCustomerValidateBeforeCall(storefrontOid, emailCustomerUuid, emailCustomer, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update email customer (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailCustomerUuid  (required)
     * @param emailCustomer Email customer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCustomerAsync(Integer storefrontOid, String emailCustomerUuid, EmailCustomer emailCustomer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCustomerValidateBeforeCall(storefrontOid, emailCustomerUuid, emailCustomer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEmailEmail
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailEmailCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmail;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailEmailValidateBeforeCall(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling updateEmailEmail(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmail' is set
        if (emailCommseqEmail == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmail' when calling updateEmailEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailEmailCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse updateEmailEmail(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = updateEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
        return resp.getData();
    }

    /**
     * Update email email
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> updateEmailEmailWithHttpInfo(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email email (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqEmailUuid  (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailEmailAsync(Integer storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailFlow
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param emailFlow Email flow (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowCall(Integer storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlow;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailFlowValidateBeforeCall(Integer storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling updateEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlow' is set
        if (emailFlow == null) {
            throw new ApiException("Missing the required parameter 'emailFlow' when calling updateEmailFlow(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailFlowCall(storefrontOid, emailFlowUuid, emailFlow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param emailFlow Email flow (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse updateEmailFlow(Integer storefrontOid, String emailFlowUuid, EmailFlow emailFlow) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = updateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
        return resp.getData();
    }

    /**
     * Update email flow
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param emailFlow Email flow (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> updateEmailFlowWithHttpInfo(Integer storefrontOid, String emailFlowUuid, EmailFlow emailFlow) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, emailFlow, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email flow (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowUuid  (required)
     * @param emailFlow Email flow (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowAsync(Integer storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, emailFlow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailFlowFolder
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowFolderCall(Integer storefrontOid, String emailFlowFolderUuid, EmailFlowFolder emailFlowFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlowFolder;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_folder_uuid" + "\\}", apiClient.escapeString(emailFlowFolderUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailFlowFolderValidateBeforeCall(Integer storefrontOid, String emailFlowFolderUuid, EmailFlowFolder emailFlowFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailFlowFolder(Async)");
        }
        
        // verify the required parameter 'emailFlowFolderUuid' is set
        if (emailFlowFolderUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowFolderUuid' when calling updateEmailFlowFolder(Async)");
        }
        
        // verify the required parameter 'emailFlowFolder' is set
        if (emailFlowFolder == null) {
            throw new ApiException("Missing the required parameter 'emailFlowFolder' when calling updateEmailFlowFolder(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailFlowFolderCall(storefrontOid, emailFlowFolderUuid, emailFlowFolder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @return EmailFlowFolderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowFolderResponse updateEmailFlowFolder(Integer storefrontOid, String emailFlowFolderUuid, EmailFlowFolder emailFlowFolder) throws ApiException {
        ApiResponse<EmailFlowFolderResponse> resp = updateEmailFlowFolderWithHttpInfo(storefrontOid, emailFlowFolderUuid, emailFlowFolder);
        return resp.getData();
    }

    /**
     * Update email flow folder
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @return ApiResponse&lt;EmailFlowFolderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowFolderResponse> updateEmailFlowFolderWithHttpInfo(Integer storefrontOid, String emailFlowFolderUuid, EmailFlowFolder emailFlowFolder) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, emailFlowFolder, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email flow folder (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailFlowFolderUuid  (required)
     * @param emailFlowFolder Email flow folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowFolderAsync(Integer storefrontOid, String emailFlowFolderUuid, EmailFlowFolder emailFlowFolder, final ApiCallback<EmailFlowFolderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailFlowFolderValidateBeforeCall(storefrontOid, emailFlowFolderUuid, emailFlowFolder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowFolderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailGlobalSettings
     * @param globalSettings global settings request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailGlobalSettingsCall(EmailGlobalSettings globalSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = globalSettings;

        // create path and map variables
        String localVarPath = "/storefront/email/global_settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailGlobalSettingsValidateBeforeCall(EmailGlobalSettings globalSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'globalSettings' is set
        if (globalSettings == null) {
            throw new ApiException("Missing the required parameter 'globalSettings' when calling updateEmailGlobalSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailGlobalSettingsCall(globalSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email global settings
     * 
     * @param globalSettings global settings request (required)
     * @return EmailGlobalSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailGlobalSettingsResponse updateEmailGlobalSettings(EmailGlobalSettings globalSettings) throws ApiException {
        ApiResponse<EmailGlobalSettingsResponse> resp = updateEmailGlobalSettingsWithHttpInfo(globalSettings);
        return resp.getData();
    }

    /**
     * Update email global settings
     * 
     * @param globalSettings global settings request (required)
     * @return ApiResponse&lt;EmailGlobalSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailGlobalSettingsResponse> updateEmailGlobalSettingsWithHttpInfo(EmailGlobalSettings globalSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailGlobalSettingsValidateBeforeCall(globalSettings, null, null);
        Type localVarReturnType = new TypeToken<EmailGlobalSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email global settings (asynchronously)
     * 
     * @param globalSettings global settings request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailGlobalSettingsAsync(EmailGlobalSettings globalSettings, final ApiCallback<EmailGlobalSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailGlobalSettingsValidateBeforeCall(globalSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailGlobalSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailList
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailList Email list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailListCall(Integer storefrontOid, String emailListUuid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailList;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailListValidateBeforeCall(Integer storefrontOid, String emailListUuid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling updateEmailList(Async)");
        }
        
        // verify the required parameter 'emailList' is set
        if (emailList == null) {
            throw new ApiException("Missing the required parameter 'emailList' when calling updateEmailList(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailListCall(storefrontOid, emailListUuid, emailList, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailList Email list (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse updateEmailList(Integer storefrontOid, String emailListUuid, EmailList emailList) throws ApiException {
        ApiResponse<EmailListResponse> resp = updateEmailListWithHttpInfo(storefrontOid, emailListUuid, emailList);
        return resp.getData();
    }

    /**
     * Update email list
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailList Email list (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> updateEmailListWithHttpInfo(Integer storefrontOid, String emailListUuid, EmailList emailList) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailListValidateBeforeCall(storefrontOid, emailListUuid, emailList, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email list (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailListUuid  (required)
     * @param emailList Email list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailListAsync(Integer storefrontOid, String emailListUuid, EmailList emailList, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailListValidateBeforeCall(storefrontOid, emailListUuid, emailList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailPlan
     * @param storefrontOid  (required)
     * @param settings plan request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailPlanCall(Integer storefrontOid, EmailPlan settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/plan"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailPlanValidateBeforeCall(Integer storefrontOid, EmailPlan settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailPlan(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling updateEmailPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailPlanCall(storefrontOid, settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email plan
     * 
     * @param storefrontOid  (required)
     * @param settings plan request (required)
     * @return EmailPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailPlanResponse updateEmailPlan(Integer storefrontOid, EmailPlan settings) throws ApiException {
        ApiResponse<EmailPlanResponse> resp = updateEmailPlanWithHttpInfo(storefrontOid, settings);
        return resp.getData();
    }

    /**
     * Update email plan
     * 
     * @param storefrontOid  (required)
     * @param settings plan request (required)
     * @return ApiResponse&lt;EmailPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailPlanResponse> updateEmailPlanWithHttpInfo(Integer storefrontOid, EmailPlan settings) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailPlanValidateBeforeCall(storefrontOid, settings, null, null);
        Type localVarReturnType = new TypeToken<EmailPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email plan (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param settings plan request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailPlanAsync(Integer storefrontOid, EmailPlan settings, final ApiCallback<EmailPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailPlanValidateBeforeCall(storefrontOid, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailPostcard
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcard Email commseq postcard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailPostcardCall(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqPostcard;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_postcard_uuid" + "\\}", apiClient.escapeString(commseqPostcardUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailPostcardValidateBeforeCall(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailPostcard(Async)");
        }
        
        // verify the required parameter 'commseqPostcardUuid' is set
        if (commseqPostcardUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqPostcardUuid' when calling updateEmailPostcard(Async)");
        }
        
        // verify the required parameter 'emailCommseqPostcard' is set
        if (emailCommseqPostcard == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqPostcard' when calling updateEmailPostcard(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailPostcardCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcard Email commseq postcard (required)
     * @return EmailCommseqPostcardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqPostcardResponse updateEmailPostcard(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard) throws ApiException {
        ApiResponse<EmailCommseqPostcardResponse> resp = updateEmailPostcardWithHttpInfo(storefrontOid, commseqPostcardUuid, emailCommseqPostcard);
        return resp.getData();
    }

    /**
     * Update email postcard
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcard Email commseq postcard (required)
     * @return ApiResponse&lt;EmailCommseqPostcardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqPostcardResponse> updateEmailPostcardWithHttpInfo(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email postcard (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param commseqPostcardUuid  (required)
     * @param emailCommseqPostcard Email commseq postcard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailPostcardAsync(Integer storefrontOid, String commseqPostcardUuid, EmailCommseqPostcard emailCommseqPostcard, final ApiCallback<EmailCommseqPostcardResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailPostcardValidateBeforeCall(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqPostcardResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailSegment
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegment Email segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailSegmentCall(Integer storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailSegment;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailSegmentValidateBeforeCall(Integer storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling updateEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegment' is set
        if (emailSegment == null) {
            throw new ApiException("Missing the required parameter 'emailSegment' when calling updateEmailSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailSegmentCall(storefrontOid, emailSegmentUuid, emailSegment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegment Email segment (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse updateEmailSegment(Integer storefrontOid, String emailSegmentUuid, EmailSegment emailSegment) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = updateEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
        return resp.getData();
    }

    /**
     * Update email segment
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegment Email segment (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> updateEmailSegmentWithHttpInfo(Integer storefrontOid, String emailSegmentUuid, EmailSegment emailSegment) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegment, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param emailSegmentUuid  (required)
     * @param emailSegment Email segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailSegmentAsync(Integer storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailSettings
     * @param storefrontOid  (required)
     * @param settings settings request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailSettingsCall(Integer storefrontOid, EmailSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/settings"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailSettingsValidateBeforeCall(Integer storefrontOid, EmailSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailSettings(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling updateEmailSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEmailSettingsCall(storefrontOid, settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update email settings
     * 
     * @param storefrontOid  (required)
     * @param settings settings request (required)
     * @return EmailSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSettingsResponse updateEmailSettings(Integer storefrontOid, EmailSettings settings) throws ApiException {
        ApiResponse<EmailSettingsResponse> resp = updateEmailSettingsWithHttpInfo(storefrontOid, settings);
        return resp.getData();
    }

    /**
     * Update email settings
     * 
     * @param storefrontOid  (required)
     * @param settings settings request (required)
     * @return ApiResponse&lt;EmailSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSettingsResponse> updateEmailSettingsWithHttpInfo(Integer storefrontOid, EmailSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailSettingsValidateBeforeCall(storefrontOid, settings, null, null);
        Type localVarReturnType = new TypeToken<EmailSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email settings (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param settings settings request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailSettingsAsync(Integer storefrontOid, EmailSettings settings, final ApiCallback<EmailSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailSettingsValidateBeforeCall(storefrontOid, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExperiment
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param experiment Experiment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentCall(Integer storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experiment;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "storefront_experiment_oid" + "\\}", apiClient.escapeString(storefrontExperimentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentValidateBeforeCall(Integer storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'storefrontExperimentOid' is set
        if (storefrontExperimentOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontExperimentOid' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experiment' is set
        if (experiment == null) {
            throw new ApiException("Missing the required parameter 'experiment' when calling updateExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperimentCall(storefrontOid, storefrontExperimentOid, experiment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update experiment
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param experiment Experiment (required)
     * @return ExperimentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentResponse updateExperiment(Integer storefrontOid, Integer storefrontExperimentOid, Experiment experiment) throws ApiException {
        ApiResponse<ExperimentResponse> resp = updateExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
        return resp.getData();
    }

    /**
     * Update experiment
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param experiment Experiment (required)
     * @return ApiResponse&lt;ExperimentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentResponse> updateExperimentWithHttpInfo(Integer storefrontOid, Integer storefrontExperimentOid, Experiment experiment) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, experiment, null, null);
        Type localVarReturnType = new TypeToken<ExperimentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update experiment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param storefrontExperimentOid  (required)
     * @param experiment Experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentAsync(Integer storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ApiCallback<ExperimentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, experiment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLibraryItem
     * @param libraryItemOid  (required)
     * @param libraryItem Library item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLibraryItemCall(Integer libraryItemOid, LibraryItem libraryItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = libraryItem;

        // create path and map variables
        String localVarPath = "/storefront/code_library/{library_item_oid}"
            .replaceAll("\\{" + "library_item_oid" + "\\}", apiClient.escapeString(libraryItemOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLibraryItemValidateBeforeCall(Integer libraryItemOid, LibraryItem libraryItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'libraryItemOid' is set
        if (libraryItemOid == null) {
            throw new ApiException("Missing the required parameter 'libraryItemOid' when calling updateLibraryItem(Async)");
        }
        
        // verify the required parameter 'libraryItem' is set
        if (libraryItem == null) {
            throw new ApiException("Missing the required parameter 'libraryItem' when calling updateLibraryItem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLibraryItemCall(libraryItemOid, libraryItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     * 
     * @param libraryItemOid  (required)
     * @param libraryItem Library item (required)
     * @return LibraryItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LibraryItemResponse updateLibraryItem(Integer libraryItemOid, LibraryItem libraryItem) throws ApiException {
        ApiResponse<LibraryItemResponse> resp = updateLibraryItemWithHttpInfo(libraryItemOid, libraryItem);
        return resp.getData();
    }

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     * 
     * @param libraryItemOid  (required)
     * @param libraryItem Library item (required)
     * @return ApiResponse&lt;LibraryItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LibraryItemResponse> updateLibraryItemWithHttpInfo(Integer libraryItemOid, LibraryItem libraryItem) throws ApiException {
        com.squareup.okhttp.Call call = updateLibraryItemValidateBeforeCall(libraryItemOid, libraryItem, null, null);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update library item. Note that only certain fields may be updated via this method. (asynchronously)
     * 
     * @param libraryItemOid  (required)
     * @param libraryItem Library item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLibraryItemAsync(Integer libraryItemOid, LibraryItem libraryItem, final ApiCallback<LibraryItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLibraryItemValidateBeforeCall(libraryItemOid, libraryItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LibraryItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateScreenRecordingSegment
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param segment Segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingSegmentCall(Integer storefrontOid, Integer screenRecordingSegmentOid, ScreenRecordingSegment segment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = segment;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_segment_oid" + "\\}", apiClient.escapeString(screenRecordingSegmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateScreenRecordingSegmentValidateBeforeCall(Integer storefrontOid, Integer screenRecordingSegmentOid, ScreenRecordingSegment segment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateScreenRecordingSegment(Async)");
        }
        
        // verify the required parameter 'screenRecordingSegmentOid' is set
        if (screenRecordingSegmentOid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingSegmentOid' when calling updateScreenRecordingSegment(Async)");
        }
        
        // verify the required parameter 'segment' is set
        if (segment == null) {
            throw new ApiException("Missing the required parameter 'segment' when calling updateScreenRecordingSegment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateScreenRecordingSegmentCall(storefrontOid, screenRecordingSegmentOid, segment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param segment Segment (required)
     * @return ScreenRecordingSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSegmentResponse updateScreenRecordingSegment(Integer storefrontOid, Integer screenRecordingSegmentOid, ScreenRecordingSegment segment) throws ApiException {
        ApiResponse<ScreenRecordingSegmentResponse> resp = updateScreenRecordingSegmentWithHttpInfo(storefrontOid, screenRecordingSegmentOid, segment);
        return resp.getData();
    }

    /**
     * Update screen recording segment
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param segment Segment (required)
     * @return ApiResponse&lt;ScreenRecordingSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSegmentResponse> updateScreenRecordingSegmentWithHttpInfo(Integer storefrontOid, Integer screenRecordingSegmentOid, ScreenRecordingSegment segment) throws ApiException {
        com.squareup.okhttp.Call call = updateScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, segment, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update screen recording segment (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param screenRecordingSegmentOid  (required)
     * @param segment Segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingSegmentAsync(Integer storefrontOid, Integer screenRecordingSegmentOid, ScreenRecordingSegment segment, final ApiCallback<ScreenRecordingSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateScreenRecordingSegmentValidateBeforeCall(storefrontOid, screenRecordingSegmentOid, segment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateScreenRecordingSettings
     * @param storefrontOid  (required)
     * @param settings Settings (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingSettingsCall(Integer storefrontOid, ScreenRecordingSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settings;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateScreenRecordingSettingsValidateBeforeCall(Integer storefrontOid, ScreenRecordingSettings settings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateScreenRecordingSettings(Async)");
        }
        
        // verify the required parameter 'settings' is set
        if (settings == null) {
            throw new ApiException("Missing the required parameter 'settings' when calling updateScreenRecordingSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateScreenRecordingSettingsCall(storefrontOid, settings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update screen recording settings
     * 
     * @param storefrontOid  (required)
     * @param settings Settings (required)
     * @return ScreenRecordingSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScreenRecordingSettingsResponse updateScreenRecordingSettings(Integer storefrontOid, ScreenRecordingSettings settings) throws ApiException {
        ApiResponse<ScreenRecordingSettingsResponse> resp = updateScreenRecordingSettingsWithHttpInfo(storefrontOid, settings);
        return resp.getData();
    }

    /**
     * Update screen recording settings
     * 
     * @param storefrontOid  (required)
     * @param settings Settings (required)
     * @return ApiResponse&lt;ScreenRecordingSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScreenRecordingSettingsResponse> updateScreenRecordingSettingsWithHttpInfo(Integer storefrontOid, ScreenRecordingSettings settings) throws ApiException {
        com.squareup.okhttp.Call call = updateScreenRecordingSettingsValidateBeforeCall(storefrontOid, settings, null, null);
        Type localVarReturnType = new TypeToken<ScreenRecordingSettingsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update screen recording settings (asynchronously)
     * 
     * @param storefrontOid  (required)
     * @param settings Settings (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingSettingsAsync(Integer storefrontOid, ScreenRecordingSettings settings, final ApiCallback<ScreenRecordingSettingsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateScreenRecordingSettingsValidateBeforeCall(storefrontOid, settings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScreenRecordingSettingsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateScreenRecordingTags
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param tags Tags (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingTagsCall(Integer storefrontOid, String screenRecordingUuid, ScreenRecordingTagsRequest tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tags;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "screen_recording_uuid" + "\\}", apiClient.escapeString(screenRecordingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateScreenRecordingTagsValidateBeforeCall(Integer storefrontOid, String screenRecordingUuid, ScreenRecordingTagsRequest tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateScreenRecordingTags(Async)");
        }
        
        // verify the required parameter 'screenRecordingUuid' is set
        if (screenRecordingUuid == null) {
            throw new ApiException("Missing the required parameter 'screenRecordingUuid' when calling updateScreenRecordingTags(Async)");
        }
        
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling updateScreenRecordingTags(Async)");
        }
        

        com.squareup.okhttp.Call call = updateScreenRecordingTagsCall(storefrontOid, screenRecordingUuid, tags, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update tags on a screen recording
     * Update tags on a screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param tags Tags (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateScreenRecordingTags(Integer storefrontOid, String screenRecordingUuid, ScreenRecordingTagsRequest tags) throws ApiException {
        updateScreenRecordingTagsWithHttpInfo(storefrontOid, screenRecordingUuid, tags);
    }

    /**
     * Update tags on a screen recording
     * Update tags on a screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param tags Tags (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateScreenRecordingTagsWithHttpInfo(Integer storefrontOid, String screenRecordingUuid, ScreenRecordingTagsRequest tags) throws ApiException {
        com.squareup.okhttp.Call call = updateScreenRecordingTagsValidateBeforeCall(storefrontOid, screenRecordingUuid, tags, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update tags on a screen recording (asynchronously)
     * Update tags on a screen recording 
     * @param storefrontOid  (required)
     * @param screenRecordingUuid  (required)
     * @param tags Tags (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateScreenRecordingTagsAsync(Integer storefrontOid, String screenRecordingUuid, ScreenRecordingTagsRequest tags, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateScreenRecordingTagsValidateBeforeCall(storefrontOid, screenRecordingUuid, tags, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateTransactionEmail
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param transactionEmail TransactionEmail (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTransactionEmailCall(Integer storefrontOid, String emailId, TransactionEmail transactionEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transactionEmail;

        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_id" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTransactionEmailValidateBeforeCall(Integer storefrontOid, String emailId, TransactionEmail transactionEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateTransactionEmail(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling updateTransactionEmail(Async)");
        }
        
        // verify the required parameter 'transactionEmail' is set
        if (transactionEmail == null) {
            throw new ApiException("Missing the required parameter 'transactionEmail' when calling updateTransactionEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTransactionEmailCall(storefrontOid, emailId, transactionEmail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a transaction email object
     * Updates a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param transactionEmail TransactionEmail (required)
     * @return TransactionEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionEmailResponse updateTransactionEmail(Integer storefrontOid, String emailId, TransactionEmail transactionEmail) throws ApiException {
        ApiResponse<TransactionEmailResponse> resp = updateTransactionEmailWithHttpInfo(storefrontOid, emailId, transactionEmail);
        return resp.getData();
    }

    /**
     * Updates a transaction email object
     * Updates a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param transactionEmail TransactionEmail (required)
     * @return ApiResponse&lt;TransactionEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionEmailResponse> updateTransactionEmailWithHttpInfo(Integer storefrontOid, String emailId, TransactionEmail transactionEmail) throws ApiException {
        com.squareup.okhttp.Call call = updateTransactionEmailValidateBeforeCall(storefrontOid, emailId, transactionEmail, null, null);
        Type localVarReturnType = new TypeToken<TransactionEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a transaction email object (asynchronously)
     * Updates a transactional email 
     * @param storefrontOid  (required)
     * @param emailId  (required)
     * @param transactionEmail TransactionEmail (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTransactionEmailAsync(Integer storefrontOid, String emailId, TransactionEmail transactionEmail, final ApiCallback<TransactionEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTransactionEmailValidateBeforeCall(storefrontOid, emailId, transactionEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

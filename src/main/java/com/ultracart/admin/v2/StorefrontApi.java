/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.CountriesResponse;
import com.ultracart.admin.v2.models.EmailBaseTemplateListResponse;
import com.ultracart.admin.v2.models.EmailCampaign;
import com.ultracart.admin.v2.models.EmailCampaignResponse;
import com.ultracart.admin.v2.models.EmailCampaignsResponse;
import com.ultracart.admin.v2.models.EmailCommseq;
import com.ultracart.admin.v2.models.EmailCommseqEmail;
import com.ultracart.admin.v2.models.EmailCommseqEmailResponse;
import com.ultracart.admin.v2.models.EmailCommseqEmailsRequest;
import com.ultracart.admin.v2.models.EmailCommseqEmailsResponse;
import com.ultracart.admin.v2.models.EmailCommseqResponse;
import com.ultracart.admin.v2.models.EmailCommseqStatResponse;
import com.ultracart.admin.v2.models.EmailCommseqsResponse;
import com.ultracart.admin.v2.models.EmailCustomer;
import com.ultracart.admin.v2.models.EmailCustomerEditorUrlResponse;
import com.ultracart.admin.v2.models.EmailDashboardActivityResponse;
import com.ultracart.admin.v2.models.EmailDashboardStatsResponse;
import com.ultracart.admin.v2.models.EmailFlow;
import com.ultracart.admin.v2.models.EmailFlowResponse;
import com.ultracart.admin.v2.models.EmailFlowsResponse;
import com.ultracart.admin.v2.models.EmailHistogramPropertyNamesResponse;
import com.ultracart.admin.v2.models.EmailHistogramPropertyValuesResponse;
import com.ultracart.admin.v2.models.EmailList;
import com.ultracart.admin.v2.models.EmailListArchiveResponse;
import com.ultracart.admin.v2.models.EmailListCustomersResponse;
import com.ultracart.admin.v2.models.EmailListResponse;
import com.ultracart.admin.v2.models.EmailListSubscribeResponse;
import com.ultracart.admin.v2.models.EmailListsResponse;
import com.ultracart.admin.v2.models.EmailSegment;
import com.ultracart.admin.v2.models.EmailSegmentArchiveResponse;
import com.ultracart.admin.v2.models.EmailSegmentCustomersResponse;
import com.ultracart.admin.v2.models.EmailSegmentResponse;
import com.ultracart.admin.v2.models.EmailSegmentsResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainResponse;
import com.ultracart.admin.v2.models.EmailSendingDomainsResponse;
import com.ultracart.admin.v2.models.EmailStatSummaryRequest;
import com.ultracart.admin.v2.models.EmailStatSummaryResponse;
import com.ultracart.admin.v2.models.EmailStepWaitingRequest;
import com.ultracart.admin.v2.models.EmailStepWaitingResponse;
import com.ultracart.admin.v2.models.EmailTemplate;
import com.ultracart.admin.v2.models.EmailTemplatesResponse;
import com.ultracart.admin.v2.models.EmailThirdPartyListImportRequest;
import com.ultracart.admin.v2.models.EmailThirdPartyProvidersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Experiment;
import com.ultracart.admin.v2.models.ExperimentResponse;
import com.ultracart.admin.v2.models.ExperimentsResponse;
import com.ultracart.admin.v2.models.GeocodeRequest;
import com.ultracart.admin.v2.models.GeocodeResponse;
import com.ultracart.admin.v2.models.LookupResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorefrontApi {
    private ApiClient apiClient;

    public StorefrontApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorefrontApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveEmailList
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveEmailListCall(String storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveEmailListValidateBeforeCall(String storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling archiveEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling archiveEmailList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = archiveEmailListCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Archive email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @return EmailListArchiveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListArchiveResponse archiveEmailList(String storefrontOid, String emailListUuid) throws ApiException {
        ApiResponse<EmailListArchiveResponse> resp = archiveEmailListWithHttpInfo(storefrontOid, emailListUuid);
        return resp.getData();
    }

    /**
     * Archive email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @return ApiResponse&lt;EmailListArchiveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListArchiveResponse> archiveEmailListWithHttpInfo(String storefrontOid, String emailListUuid) throws ApiException {
        com.squareup.okhttp.Call call = archiveEmailListValidateBeforeCall(storefrontOid, emailListUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailListArchiveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive email list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveEmailListAsync(String storefrontOid, String emailListUuid, final ApiCallback<EmailListArchiveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveEmailListValidateBeforeCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListArchiveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for archiveEmailSegment
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveEmailSegmentCall(String storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveEmailSegmentValidateBeforeCall(String storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling archiveEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling archiveEmailSegment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = archiveEmailSegmentCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Archive email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @return EmailSegmentArchiveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentArchiveResponse archiveEmailSegment(String storefrontOid, String emailSegmentUuid) throws ApiException {
        ApiResponse<EmailSegmentArchiveResponse> resp = archiveEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
        return resp.getData();
    }

    /**
     * Archive email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @return ApiResponse&lt;EmailSegmentArchiveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentArchiveResponse> archiveEmailSegmentWithHttpInfo(String storefrontOid, String emailSegmentUuid) throws ApiException {
        com.squareup.okhttp.Call call = archiveEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentArchiveResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive email segment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveEmailSegmentAsync(String storefrontOid, String emailSegmentUuid, final ApiCallback<EmailSegmentArchiveResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentArchiveResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloneEmailCampaign
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneEmailCampaignCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneEmailCampaignValidateBeforeCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling cloneEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling cloneEmailCampaign(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cloneEmailCampaignCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clone email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse cloneEmailCampaign(String storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = cloneEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Clone email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> cloneEmailCampaignWithHttpInfo(String storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = cloneEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone email campaign (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneEmailCampaignAsync(String storefrontOid, String emailCampaignUuid, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cloneEmailFlow
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cloneEmailFlowCall(String storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cloneEmailFlowValidateBeforeCall(String storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling cloneEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling cloneEmailFlow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cloneEmailFlowCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Clone email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse cloneEmailFlow(String storefrontOid, String emailFlowUuid) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = cloneEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
        return resp.getData();
    }

    /**
     * Clone email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> cloneEmailFlowWithHttpInfo(String storefrontOid, String emailFlowUuid) throws ApiException {
        com.squareup.okhttp.Call call = cloneEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Clone email flow (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cloneEmailFlowAsync(String storefrontOid, String emailFlowUuid, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cloneEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEmailSendingDomain
     * @param domain null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}/create"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createEmailSendingDomain(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create email campaign
     * 
     * @param domain null (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse createEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = createEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Create email campaign
     * 
     * @param domain null (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> createEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = createEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create email campaign (asynchronously)
     * 
     * @param domain null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmailSendingDomainAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailEmail
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailEmailCall(String storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailEmailValidateBeforeCall(String storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling deleteEmailEmail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEmailEmailCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailEmail(String storefrontOid, String commseqEmailUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
        return resp.getData();
    }

    /**
     * Delete email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailEmailWithHttpInfo(String storefrontOid, String commseqEmailUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email email (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailEmailAsync(String storefrontOid, String commseqEmailUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailListCustomer
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailListCustomerCall(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailListCustomerValidateBeforeCall(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteEmailListCustomer(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling deleteEmailListCustomer(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling deleteEmailListCustomer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEmailListCustomerCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete email list customer
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailListCustomer(String storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailListCustomerWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Delete email list customer
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailListCustomerWithHttpInfo(String storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailListCustomerValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete email list customer (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailListCustomerAsync(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailListCustomerValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmailSendingDomain
     * @param domain null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteEmailSendingDomain(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete email campaign
     * 
     * @param domain null (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * delete email campaign
     * 
     * @param domain null (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * delete email campaign (asynchronously)
     * 
     * @param domain null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmailSendingDomainAsync(String domain, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperiment
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(String storefrontOid, Integer storefrontExperimentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "storefront_experiment_oid" + "\\}", apiClient.escapeString(storefrontExperimentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(String storefrontOid, Integer storefrontExperimentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'storefrontExperimentOid' is set
        if (storefrontExperimentOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontExperimentOid' when calling deleteExperiment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteExperimentCall(storefrontOid, storefrontExperimentOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete experiment
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteExperiment(String storefrontOid, Integer storefrontExperimentOid) throws ApiException {
        deleteExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid);
    }

    /**
     * Delete experiment
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteExperimentWithHttpInfo(String storefrontOid, Integer storefrontExperimentOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete experiment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(String storefrontOid, Integer storefrontExperimentOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for geocodeAddress
     * @param storefrontOid null (required)
     * @param geocodeRequest geocode request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call geocodeAddressCall(String storefrontOid, GeocodeRequest geocodeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = geocodeRequest;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/geocode"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call geocodeAddressValidateBeforeCall(String storefrontOid, GeocodeRequest geocodeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling geocodeAddress(Async)");
        }
        
        // verify the required parameter 'geocodeRequest' is set
        if (geocodeRequest == null) {
            throw new ApiException("Missing the required parameter 'geocodeRequest' when calling geocodeAddress(Async)");
        }
        
        
        com.squareup.okhttp.Call call = geocodeAddressCall(storefrontOid, geocodeRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Obtain lat/long for an address
     * 
     * @param storefrontOid null (required)
     * @param geocodeRequest geocode request (required)
     * @return GeocodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeocodeResponse geocodeAddress(String storefrontOid, GeocodeRequest geocodeRequest) throws ApiException {
        ApiResponse<GeocodeResponse> resp = geocodeAddressWithHttpInfo(storefrontOid, geocodeRequest);
        return resp.getData();
    }

    /**
     * Obtain lat/long for an address
     * 
     * @param storefrontOid null (required)
     * @param geocodeRequest geocode request (required)
     * @return ApiResponse&lt;GeocodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeocodeResponse> geocodeAddressWithHttpInfo(String storefrontOid, GeocodeRequest geocodeRequest) throws ApiException {
        com.squareup.okhttp.Call call = geocodeAddressValidateBeforeCall(storefrontOid, geocodeRequest, null, null);
        Type localVarReturnType = new TypeToken<GeocodeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Obtain lat/long for an address (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param geocodeRequest geocode request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call geocodeAddressAsync(String storefrontOid, GeocodeRequest geocodeRequest, final ApiCallback<GeocodeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geocodeAddressValidateBeforeCall(storefrontOid, geocodeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeocodeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCountries
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCountriesCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/countries"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCountriesValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getCountries(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCountriesCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param storefrontOid null (required)
     * @return CountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountriesResponse getCountries(String storefrontOid) throws ApiException {
        ApiResponse<CountriesResponse> resp = getCountriesWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;CountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountriesResponse> getCountriesWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getCountriesValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get countries (asynchronously)
     * Obtain a list of all the countries 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCountriesAsync(String storefrontOid, final ApiCallback<CountriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCountriesValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailBaseTemplates
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailBaseTemplatesCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/baseTemplates"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailBaseTemplatesValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailBaseTemplates(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailBaseTemplatesCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email communication base templates
     * 
     * @param storefrontOid null (required)
     * @return EmailBaseTemplateListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailBaseTemplateListResponse getEmailBaseTemplates(String storefrontOid) throws ApiException {
        ApiResponse<EmailBaseTemplateListResponse> resp = getEmailBaseTemplatesWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email communication base templates
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailBaseTemplateListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailBaseTemplateListResponse> getEmailBaseTemplatesWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailBaseTemplatesValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailBaseTemplateListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication base templates (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailBaseTemplatesAsync(String storefrontOid, final ApiCallback<EmailBaseTemplateListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailBaseTemplatesValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailBaseTemplateListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaign
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignValidateBeforeCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling getEmailCampaign(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCampaignCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse getEmailCampaign(String storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = getEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Get email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> getEmailCampaignWithHttpInfo(String storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaign (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignAsync(String storefrontOid, String emailCampaignUuid, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaigns
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaigns(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCampaignsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email campaigns
     * 
     * @param storefrontOid null (required)
     * @return EmailCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignsResponse getEmailCampaigns(String storefrontOid) throws ApiException {
        ApiResponse<EmailCampaignsResponse> resp = getEmailCampaignsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email campaigns
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignsResponse> getEmailCampaignsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaigns (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsAsync(String storefrontOid, final ApiCallback<EmailCampaignsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCampaignsWithStats
     * @param storefrontOid null (required)
     * @param statDays null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsWithStatsCall(String storefrontOid, String statDays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "stat_days" + "\\}", apiClient.escapeString(statDays.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCampaignsWithStatsValidateBeforeCall(String storefrontOid, String statDays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCampaignsWithStats(Async)");
        }
        
        // verify the required parameter 'statDays' is set
        if (statDays == null) {
            throw new ApiException("Missing the required parameter 'statDays' when calling getEmailCampaignsWithStats(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsCall(storefrontOid, statDays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email campaigns with stats
     * 
     * @param storefrontOid null (required)
     * @param statDays null (required)
     * @return EmailCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignsResponse getEmailCampaignsWithStats(String storefrontOid, String statDays) throws ApiException {
        ApiResponse<EmailCampaignsResponse> resp = getEmailCampaignsWithStatsWithHttpInfo(storefrontOid, statDays);
        return resp.getData();
    }

    /**
     * Get email campaigns with stats
     * 
     * @param storefrontOid null (required)
     * @param statDays null (required)
     * @return ApiResponse&lt;EmailCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignsResponse> getEmailCampaignsWithStatsWithHttpInfo(String storefrontOid, String statDays) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsValidateBeforeCall(storefrontOid, statDays, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email campaigns with stats (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param statDays null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCampaignsWithStatsAsync(String storefrontOid, String statDays, final ApiCallback<EmailCampaignsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCampaignsWithStatsValidateBeforeCall(storefrontOid, statDays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseq
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqCall(String storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqValidateBeforeCall(String storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseq(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseq(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCommseqCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email commseq
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse getEmailCommseq(String storefrontOid, String commseqUuid) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = getEmailCommseqWithHttpInfo(storefrontOid, commseqUuid);
        return resp.getData();
    }

    /**
     * Get email commseq
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> getEmailCommseqWithHttpInfo(String storefrontOid, String commseqUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email commseq (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqAsync(String storefrontOid, String commseqUuid, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqEmailStats
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param statsRequest StatsRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqEmailStatsCall(String storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statsRequest;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqEmailStatsValidateBeforeCall(String storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqEmailStats(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqEmailStats(Async)");
        }
        
        // verify the required parameter 'statsRequest' is set
        if (statsRequest == null) {
            throw new ApiException("Missing the required parameter 'statsRequest' when calling getEmailCommseqEmailStats(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email communication sequence emails stats
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param statsRequest StatsRequest (required)
     * @return EmailStatSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStatSummaryResponse getEmailCommseqEmailStats(String storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest) throws ApiException {
        ApiResponse<EmailStatSummaryResponse> resp = getEmailCommseqEmailStatsWithHttpInfo(storefrontOid, commseqUuid, statsRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence emails stats
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param statsRequest StatsRequest (required)
     * @return ApiResponse&lt;EmailStatSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStatSummaryResponse> getEmailCommseqEmailStatsWithHttpInfo(String storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStatSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence emails stats (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param statsRequest StatsRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqEmailStatsAsync(String storefrontOid, String commseqUuid, EmailStatSummaryRequest statsRequest, final ApiCallback<EmailStatSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqEmailStatsValidateBeforeCall(storefrontOid, commseqUuid, statsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStatSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqStatOverall
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStatOverallCall(String storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqStatOverallValidateBeforeCall(String storefrontOid, String commseqUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStatOverall(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStatOverall(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCommseqStatOverallCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get communication sequence stats overall
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @return EmailCommseqStatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqStatResponse getEmailCommseqStatOverall(String storefrontOid, String commseqUuid) throws ApiException {
        ApiResponse<EmailCommseqStatResponse> resp = getEmailCommseqStatOverallWithHttpInfo(storefrontOid, commseqUuid);
        return resp.getData();
    }

    /**
     * Get communication sequence stats overall
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @return ApiResponse&lt;EmailCommseqStatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqStatResponse> getEmailCommseqStatOverallWithHttpInfo(String storefrontOid, String commseqUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqStatOverallValidateBeforeCall(storefrontOid, commseqUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqStatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get communication sequence stats overall (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStatOverallAsync(String storefrontOid, String commseqUuid, final ApiCallback<EmailCommseqStatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqStatOverallValidateBeforeCall(storefrontOid, commseqUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqStatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqStepWaiting
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param waitingRequest WaitingRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepWaitingCall(String storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = waitingRequest;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqStepWaitingValidateBeforeCall(String storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStepWaiting(Async)");
        }
        
        // verify the required parameter 'waitingRequest' is set
        if (waitingRequest == null) {
            throw new ApiException("Missing the required parameter 'waitingRequest' when calling getEmailCommseqStepWaiting(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingCall(storefrontOid, commseqUuid, waitingRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email communication sequence customers waiting at each requested step
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param waitingRequest WaitingRequest (required)
     * @return EmailStepWaitingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailStepWaitingResponse getEmailCommseqStepWaiting(String storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest) throws ApiException {
        ApiResponse<EmailStepWaitingResponse> resp = getEmailCommseqStepWaitingWithHttpInfo(storefrontOid, commseqUuid, waitingRequest);
        return resp.getData();
    }

    /**
     * Get email communication sequence customers waiting at each requested step
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param waitingRequest WaitingRequest (required)
     * @return ApiResponse&lt;EmailStepWaitingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailStepWaitingResponse> getEmailCommseqStepWaitingWithHttpInfo(String storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, waitingRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailStepWaitingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email communication sequence customers waiting at each requested step (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param waitingRequest WaitingRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqStepWaitingAsync(String storefrontOid, String commseqUuid, EmailStepWaitingRequest waitingRequest, final ApiCallback<EmailStepWaitingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqStepWaitingValidateBeforeCall(storefrontOid, commseqUuid, waitingRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailStepWaitingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailCommseqs
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailCommseqsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailCommseqs(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailCommseqsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email commseqs
     * 
     * @param storefrontOid null (required)
     * @return EmailCommseqsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqsResponse getEmailCommseqs(String storefrontOid) throws ApiException {
        ApiResponse<EmailCommseqsResponse> resp = getEmailCommseqsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email commseqs
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailCommseqsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqsResponse> getEmailCommseqsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailCommseqsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email commseqs (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailCommseqsAsync(String storefrontOid, final ApiCallback<EmailCommseqsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailCommseqsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDashboardActivity
     * @param storefrontOid null (required)
     * @param lastRecords null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardActivityCall(String storefrontOid, Integer lastRecords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastRecords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_records", lastRecords));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDashboardActivityValidateBeforeCall(String storefrontOid, Integer lastRecords, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailDashboardActivity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailDashboardActivityCall(storefrontOid, lastRecords, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email dashboard activity
     * 
     * @param storefrontOid null (required)
     * @param lastRecords null (optional)
     * @return EmailDashboardActivityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDashboardActivityResponse getEmailDashboardActivity(String storefrontOid, Integer lastRecords) throws ApiException {
        ApiResponse<EmailDashboardActivityResponse> resp = getEmailDashboardActivityWithHttpInfo(storefrontOid, lastRecords);
        return resp.getData();
    }

    /**
     * Get email dashboard activity
     * 
     * @param storefrontOid null (required)
     * @param lastRecords null (optional)
     * @return ApiResponse&lt;EmailDashboardActivityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDashboardActivityResponse> getEmailDashboardActivityWithHttpInfo(String storefrontOid, Integer lastRecords) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDashboardActivityValidateBeforeCall(storefrontOid, lastRecords, null, null);
        Type localVarReturnType = new TypeToken<EmailDashboardActivityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email dashboard activity (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param lastRecords null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardActivityAsync(String storefrontOid, Integer lastRecords, final ApiCallback<EmailDashboardActivityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDashboardActivityValidateBeforeCall(storefrontOid, lastRecords, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDashboardActivityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailDashboardStats
     * @param storefrontOid null (required)
     * @param days null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardStatsCall(String storefrontOid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (days != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("days", days));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailDashboardStatsValidateBeforeCall(String storefrontOid, Integer days, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailDashboardStats(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailDashboardStatsCall(storefrontOid, days, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get dashboard stats
     * 
     * @param storefrontOid null (required)
     * @param days null (optional)
     * @return EmailDashboardStatsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailDashboardStatsResponse getEmailDashboardStats(String storefrontOid, Integer days) throws ApiException {
        ApiResponse<EmailDashboardStatsResponse> resp = getEmailDashboardStatsWithHttpInfo(storefrontOid, days);
        return resp.getData();
    }

    /**
     * Get dashboard stats
     * 
     * @param storefrontOid null (required)
     * @param days null (optional)
     * @return ApiResponse&lt;EmailDashboardStatsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailDashboardStatsResponse> getEmailDashboardStatsWithHttpInfo(String storefrontOid, Integer days) throws ApiException {
        com.squareup.okhttp.Call call = getEmailDashboardStatsValidateBeforeCall(storefrontOid, days, null, null);
        Type localVarReturnType = new TypeToken<EmailDashboardStatsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dashboard stats (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param days null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailDashboardStatsAsync(String storefrontOid, Integer days, final ApiCallback<EmailDashboardStatsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailDashboardStatsValidateBeforeCall(storefrontOid, days, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailDashboardStatsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmail
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailCall(String storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailValidateBeforeCall(String storefrontOid, String commseqEmailUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailEmailCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse getEmailEmail(String storefrontOid, String commseqEmailUuid) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = getEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid);
        return resp.getData();
    }

    /**
     * Get email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> getEmailEmailWithHttpInfo(String storefrontOid, String commseqEmailUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email email (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailAsync(String storefrontOid, String commseqEmailUuid, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmails
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmails(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailEmailsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email emails
     * 
     * @param storefrontOid null (required)
     * @return EmailCommseqEmailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailsResponse getEmailEmails(String storefrontOid) throws ApiException {
        ApiResponse<EmailCommseqEmailsResponse> resp = getEmailEmailsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email emails
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailCommseqEmailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailsResponse> getEmailEmailsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email emails (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsAsync(String storefrontOid, final ApiCallback<EmailCommseqEmailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailEmailsMultiple
     * @param storefrontOid null (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsMultipleCall(String storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmailsRequest;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/multiple"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailEmailsMultipleValidateBeforeCall(String storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailEmailsMultiple(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmailsRequest' is set
        if (emailCommseqEmailsRequest == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmailsRequest' when calling getEmailEmailsMultiple(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailEmailsMultipleCall(storefrontOid, emailCommseqEmailsRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email emails multiple
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @return EmailCommseqEmailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailsResponse getEmailEmailsMultiple(String storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest) throws ApiException {
        ApiResponse<EmailCommseqEmailsResponse> resp = getEmailEmailsMultipleWithHttpInfo(storefrontOid, emailCommseqEmailsRequest);
        return resp.getData();
    }

    /**
     * Get email emails multiple
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @return ApiResponse&lt;EmailCommseqEmailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailsResponse> getEmailEmailsMultipleWithHttpInfo(String storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest) throws ApiException {
        com.squareup.okhttp.Call call = getEmailEmailsMultipleValidateBeforeCall(storefrontOid, emailCommseqEmailsRequest, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email emails multiple (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmailsRequest Request of email uuids (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailEmailsMultipleAsync(String storefrontOid, EmailCommseqEmailsRequest emailCommseqEmailsRequest, final ApiCallback<EmailCommseqEmailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailEmailsMultipleValidateBeforeCall(storefrontOid, emailCommseqEmailsRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlow
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowCall(String storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowValidateBeforeCall(String storefrontOid, String emailFlowUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling getEmailFlow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailFlowCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse getEmailFlow(String storefrontOid, String emailFlowUuid) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = getEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid);
        return resp.getData();
    }

    /**
     * Get email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> getEmailFlowWithHttpInfo(String storefrontOid, String emailFlowUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flow (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowAsync(String storefrontOid, String emailFlowUuid, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailFlows
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailFlowsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailFlows(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailFlowsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email flows
     * 
     * @param storefrontOid null (required)
     * @return EmailFlowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowsResponse getEmailFlows(String storefrontOid) throws ApiException {
        ApiResponse<EmailFlowsResponse> resp = getEmailFlowsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email flows
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailFlowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowsResponse> getEmailFlowsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailFlowsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email flows (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailFlowsAsync(String storefrontOid, final ApiCallback<EmailFlowsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailFlowsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailList
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCall(String storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListValidateBeforeCall(String storefrontOid, String emailListUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailListCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse getEmailList(String storefrontOid, String emailListUuid) throws ApiException {
        ApiResponse<EmailListResponse> resp = getEmailListWithHttpInfo(storefrontOid, emailListUuid);
        return resp.getData();
    }

    /**
     * Get email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> getEmailListWithHttpInfo(String storefrontOid, String emailListUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListValidateBeforeCall(storefrontOid, emailListUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListAsync(String storefrontOid, String emailListUuid, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListValidateBeforeCall(storefrontOid, emailListUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailListCustomerEditorUrl
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomerEditorUrlCall(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListCustomerEditorUrlValidateBeforeCall(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling getEmailListCustomerEditorUrl(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailListCustomerEditorUrl(String storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailListCustomerEditorUrlWithHttpInfo(storefrontOid, emailListUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailListCustomerEditorUrlWithHttpInfo(String storefrontOid, String emailListUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list customers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomerEditorUrlAsync(String storefrontOid, String emailListUuid, String emailCustomerUuid, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListCustomerEditorUrlValidateBeforeCall(storefrontOid, emailListUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailListCustomers
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomersCall(String storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListCustomersValidateBeforeCall(String storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailListCustomers(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling getEmailListCustomers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailListCustomersCall(storefrontOid, emailListUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @return EmailListCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListCustomersResponse getEmailListCustomers(String storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<EmailListCustomersResponse> resp = getEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @return ApiResponse&lt;EmailListCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListCustomersResponse> getEmailListCustomersWithHttpInfo(String storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email list customers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListCustomersAsync(String storefrontOid, String emailListUuid, Integer pageNumber, Integer pageSize, final ApiCallback<EmailListCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailLists
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailListsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailListsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailLists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailListsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email lists
     * 
     * @param storefrontOid null (required)
     * @return EmailListsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListsResponse getEmailLists(String storefrontOid) throws ApiException {
        ApiResponse<EmailListsResponse> resp = getEmailListsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email lists
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailListsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListsResponse> getEmailListsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailListsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email lists (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailListsAsync(String storefrontOid, final ApiCallback<EmailListsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailListsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegment
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCall(String storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentValidateBeforeCall(String storefrontOid, String emailSegmentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSegmentCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse getEmailSegment(String storefrontOid, String emailSegmentUuid) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = getEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid);
        return resp.getData();
    }

    /**
     * Get email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> getEmailSegmentWithHttpInfo(String storefrontOid, String emailSegmentUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentAsync(String storefrontOid, String emailSegmentUuid, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegmentCustomerEditorUrl
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlCall(String storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()))
            .replaceAll("\\{" + "email_customer_uuid" + "\\}", apiClient.escapeString(emailCustomerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlValidateBeforeCall(String storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        
        // verify the required parameter 'emailCustomerUuid' is set
        if (emailCustomerUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCustomerUuid' when calling getEmailSegmentCustomerEditorUrl(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email segment customers editor URL
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return EmailCustomerEditorUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCustomerEditorUrlResponse getEmailSegmentCustomerEditorUrl(String storefrontOid, String emailSegmentUuid, String emailCustomerUuid) throws ApiException {
        ApiResponse<EmailCustomerEditorUrlResponse> resp = getEmailSegmentCustomerEditorUrlWithHttpInfo(storefrontOid, emailSegmentUuid, emailCustomerUuid);
        return resp.getData();
    }

    /**
     * Get email segment customers editor URL
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailCustomerUuid null (required)
     * @return ApiResponse&lt;EmailCustomerEditorUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCustomerEditorUrlResponse> getEmailSegmentCustomerEditorUrlWithHttpInfo(String storefrontOid, String emailSegmentUuid, String emailCustomerUuid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlValidateBeforeCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, null, null);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment customers editor URL (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailCustomerUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomerEditorUrlAsync(String storefrontOid, String emailSegmentUuid, String emailCustomerUuid, final ApiCallback<EmailCustomerEditorUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentCustomerEditorUrlValidateBeforeCall(storefrontOid, emailSegmentUuid, emailCustomerUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCustomerEditorUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegmentCustomers
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomersCall(String storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentCustomersValidateBeforeCall(String storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomers(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSegmentCustomersCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email segment customers
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @return EmailSegmentCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentCustomersResponse getEmailSegmentCustomers(String storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<EmailSegmentCustomersResponse> resp = getEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Get email segment customers
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @return ApiResponse&lt;EmailSegmentCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentCustomersResponse> getEmailSegmentCustomersWithHttpInfo(String storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segment customers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param pageNumber null (optional)
     * @param pageSize null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentCustomersAsync(String storefrontOid, String emailSegmentUuid, Integer pageNumber, Integer pageSize, final ApiCallback<EmailSegmentCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSegments
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSegmentsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailSegments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSegmentsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email segments
     * 
     * @param storefrontOid null (required)
     * @return EmailSegmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentsResponse getEmailSegments(String storefrontOid) throws ApiException {
        ApiResponse<EmailSegmentsResponse> resp = getEmailSegmentsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get email segments
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailSegmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentsResponse> getEmailSegmentsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSegmentsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email segments (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSegmentsAsync(String storefrontOid, final ApiCallback<EmailSegmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSegmentsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomain
     * @param domain null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/email/sending_domain/{domain}"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getEmailSendingDomain(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSendingDomainCall(domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email sending domain
     * 
     * @param domain null (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse getEmailSendingDomain(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = getEmailSendingDomainWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Get email sending domain
     * 
     * @param domain null (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> getEmailSendingDomainWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domain (asynchronously)
     * 
     * @param domain null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomainStatus
     * @param domain null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainStatusCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains/{domain}/status"
            .replaceAll("\\{" + "domain" + "\\}", apiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainStatusValidateBeforeCall(String domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getEmailSendingDomainStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailSendingDomainStatusCall(domain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email sending domain status
     * 
     * @param domain null (required)
     * @return EmailSendingDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainResponse getEmailSendingDomainStatus(String domain) throws ApiException {
        ApiResponse<EmailSendingDomainResponse> resp = getEmailSendingDomainStatusWithHttpInfo(domain);
        return resp.getData();
    }

    /**
     * Get email sending domain status
     * 
     * @param domain null (required)
     * @return ApiResponse&lt;EmailSendingDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainResponse> getEmailSendingDomainStatusWithHttpInfo(String domain) throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainStatusValidateBeforeCall(domain, null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domain status (asynchronously)
     * 
     * @param domain null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainStatusAsync(String domain, final ApiCallback<EmailSendingDomainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainStatusValidateBeforeCall(domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailSendingDomains
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/email/sending_domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailSendingDomainsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEmailSendingDomainsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email sending domains
     * 
     * @return EmailSendingDomainsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSendingDomainsResponse getEmailSendingDomains() throws ApiException {
        ApiResponse<EmailSendingDomainsResponse> resp = getEmailSendingDomainsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get email sending domains
     * 
     * @return ApiResponse&lt;EmailSendingDomainsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSendingDomainsResponse> getEmailSendingDomainsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEmailSendingDomainsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EmailSendingDomainsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email sending domains (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailSendingDomainsAsync(final ApiCallback<EmailSendingDomainsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailSendingDomainsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSendingDomainsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailTemplate
     * @param storefrontOid null (required)
     * @param emailTemplateOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplateCall(String storefrontOid, Integer emailTemplateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_template_oid" + "\\}", apiClient.escapeString(emailTemplateOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailTemplateValidateBeforeCall(String storefrontOid, Integer emailTemplateOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailTemplate(Async)");
        }
        
        // verify the required parameter 'emailTemplateOid' is set
        if (emailTemplateOid == null) {
            throw new ApiException("Missing the required parameter 'emailTemplateOid' when calling getEmailTemplate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailTemplateCall(storefrontOid, emailTemplateOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email template
     * 
     * @param storefrontOid null (required)
     * @param emailTemplateOid null (required)
     * @return EmailTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailTemplate getEmailTemplate(String storefrontOid, Integer emailTemplateOid) throws ApiException {
        ApiResponse<EmailTemplate> resp = getEmailTemplateWithHttpInfo(storefrontOid, emailTemplateOid);
        return resp.getData();
    }

    /**
     * Get email template
     * 
     * @param storefrontOid null (required)
     * @param emailTemplateOid null (required)
     * @return ApiResponse&lt;EmailTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailTemplate> getEmailTemplateWithHttpInfo(String storefrontOid, Integer emailTemplateOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTemplateValidateBeforeCall(storefrontOid, emailTemplateOid, null, null);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email template (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailTemplateOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplateAsync(String storefrontOid, Integer emailTemplateOid, final ApiCallback<EmailTemplate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTemplateValidateBeforeCall(storefrontOid, emailTemplateOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailTemplate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailTemplates
     * @param storefrontOid null (required)
     * @param triggerType null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplatesCall(String storefrontOid, String triggerType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/templates"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (triggerType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("trigger_type", triggerType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailTemplatesValidateBeforeCall(String storefrontOid, String triggerType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailTemplates(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailTemplatesCall(storefrontOid, triggerType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get email templates
     * 
     * @param storefrontOid null (required)
     * @param triggerType null (optional)
     * @return EmailTemplatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailTemplatesResponse getEmailTemplates(String storefrontOid, String triggerType) throws ApiException {
        ApiResponse<EmailTemplatesResponse> resp = getEmailTemplatesWithHttpInfo(storefrontOid, triggerType);
        return resp.getData();
    }

    /**
     * Get email templates
     * 
     * @param storefrontOid null (required)
     * @param triggerType null (optional)
     * @return ApiResponse&lt;EmailTemplatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailTemplatesResponse> getEmailTemplatesWithHttpInfo(String storefrontOid, String triggerType) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTemplatesValidateBeforeCall(storefrontOid, triggerType, null, null);
        Type localVarReturnType = new TypeToken<EmailTemplatesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get email templates (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param triggerType null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTemplatesAsync(String storefrontOid, String triggerType, final ApiCallback<EmailTemplatesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTemplatesValidateBeforeCall(storefrontOid, triggerType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailTemplatesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEmailThirdPartyProviders
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEmailThirdPartyProvidersCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/third_party_providers"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEmailThirdPartyProvidersValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getEmailThirdPartyProviders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of third party email providers
     * 
     * @param storefrontOid null (required)
     * @return EmailThirdPartyProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailThirdPartyProvidersResponse getEmailThirdPartyProviders(String storefrontOid) throws ApiException {
        ApiResponse<EmailThirdPartyProvidersResponse> resp = getEmailThirdPartyProvidersWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get a list of third party email providers
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;EmailThirdPartyProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailThirdPartyProvidersResponse> getEmailThirdPartyProvidersWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<EmailThirdPartyProvidersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of third party email providers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailThirdPartyProvidersAsync(String storefrontOid, final ApiCallback<EmailThirdPartyProvidersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailThirdPartyProvidersValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailThirdPartyProvidersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiments
     * @param storefrontOid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentsCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentsValidateBeforeCall(String storefrontOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getExperiments(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getExperimentsCall(storefrontOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get experiments
     * 
     * @param storefrontOid null (required)
     * @return ExperimentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentsResponse getExperiments(String storefrontOid) throws ApiException {
        ApiResponse<ExperimentsResponse> resp = getExperimentsWithHttpInfo(storefrontOid);
        return resp.getData();
    }

    /**
     * Get experiments
     * 
     * @param storefrontOid null (required)
     * @return ApiResponse&lt;ExperimentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentsResponse> getExperimentsWithHttpInfo(String storefrontOid) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(storefrontOid, null, null);
        Type localVarReturnType = new TypeToken<ExperimentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get experiments (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentsAsync(String storefrontOid, final ApiCallback<ExperimentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentsValidateBeforeCall(storefrontOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistogramPropertyNames
     * @param storefrontOid null (required)
     * @param propertyType null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyNamesCall(String storefrontOid, String propertyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_type", propertyType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistogramPropertyNamesValidateBeforeCall(String storefrontOid, String propertyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getHistogramPropertyNames(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHistogramPropertyNamesCall(storefrontOid, propertyType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param storefrontOid null (required)
     * @param propertyType null (optional)
     * @return EmailHistogramPropertyNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailHistogramPropertyNamesResponse getHistogramPropertyNames(String storefrontOid, String propertyType) throws ApiException {
        ApiResponse<EmailHistogramPropertyNamesResponse> resp = getHistogramPropertyNamesWithHttpInfo(storefrontOid, propertyType);
        return resp.getData();
    }

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param storefrontOid null (required)
     * @param propertyType null (optional)
     * @return ApiResponse&lt;EmailHistogramPropertyNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailHistogramPropertyNamesResponse> getHistogramPropertyNamesWithHttpInfo(String storefrontOid, String propertyType) throws ApiException {
        com.squareup.okhttp.Call call = getHistogramPropertyNamesValidateBeforeCall(storefrontOid, propertyType, null, null);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyNamesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get histogram property names (asynchronously)
     * Obtain a list of property names for a given property type 
     * @param storefrontOid null (required)
     * @param propertyType null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyNamesAsync(String storefrontOid, String propertyType, final ApiCallback<EmailHistogramPropertyNamesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistogramPropertyNamesValidateBeforeCall(storefrontOid, propertyType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyNamesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistogramPropertyValues
     * @param storefrontOid null (required)
     * @param propertyName null (optional)
     * @param propertyType null (optional)
     * @param limit null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyValuesCall(String storefrontOid, String propertyName, String propertyType, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (propertyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_name", propertyName));
        if (propertyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("property_type", propertyType));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistogramPropertyValuesValidateBeforeCall(String storefrontOid, String propertyName, String propertyType, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling getHistogramPropertyValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getHistogramPropertyValuesCall(storefrontOid, propertyName, propertyType, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid null (required)
     * @param propertyName null (optional)
     * @param propertyType null (optional)
     * @param limit null (optional)
     * @return EmailHistogramPropertyValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailHistogramPropertyValuesResponse getHistogramPropertyValues(String storefrontOid, String propertyName, String propertyType, Integer limit) throws ApiException {
        ApiResponse<EmailHistogramPropertyValuesResponse> resp = getHistogramPropertyValuesWithHttpInfo(storefrontOid, propertyName, propertyType, limit);
        return resp.getData();
    }

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid null (required)
     * @param propertyName null (optional)
     * @param propertyType null (optional)
     * @param limit null (optional)
     * @return ApiResponse&lt;EmailHistogramPropertyValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailHistogramPropertyValuesResponse> getHistogramPropertyValuesWithHttpInfo(String storefrontOid, String propertyName, String propertyType, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getHistogramPropertyValuesValidateBeforeCall(storefrontOid, propertyName, propertyType, limit, null, null);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyValuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get histogram property values (asynchronously)
     * Obtain a list of property values for a given property name and type 
     * @param storefrontOid null (required)
     * @param propertyName null (optional)
     * @param propertyType null (optional)
     * @param limit null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistogramPropertyValuesAsync(String storefrontOid, String propertyName, String propertyType, Integer limit, final ApiCallback<EmailHistogramPropertyValuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistogramPropertyValuesValidateBeforeCall(storefrontOid, propertyName, propertyType, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailHistogramPropertyValuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importEmailThirdPartyProviderList
     * @param storefrontOid null (required)
     * @param importRequest lists to import (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importEmailThirdPartyProviderListCall(String storefrontOid, EmailThirdPartyListImportRequest importRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = importRequest;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importEmailThirdPartyProviderListValidateBeforeCall(String storefrontOid, EmailThirdPartyListImportRequest importRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling importEmailThirdPartyProviderList(Async)");
        }
        
        // verify the required parameter 'importRequest' is set
        if (importRequest == null) {
            throw new ApiException("Missing the required parameter 'importRequest' when calling importEmailThirdPartyProviderList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListCall(storefrontOid, importRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Import a third party provider list
     * 
     * @param storefrontOid null (required)
     * @param importRequest lists to import (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void importEmailThirdPartyProviderList(String storefrontOid, EmailThirdPartyListImportRequest importRequest) throws ApiException {
        importEmailThirdPartyProviderListWithHttpInfo(storefrontOid, importRequest);
    }

    /**
     * Import a third party provider list
     * 
     * @param storefrontOid null (required)
     * @param importRequest lists to import (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> importEmailThirdPartyProviderListWithHttpInfo(String storefrontOid, EmailThirdPartyListImportRequest importRequest) throws ApiException {
        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListValidateBeforeCall(storefrontOid, importRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Import a third party provider list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param importRequest lists to import (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importEmailThirdPartyProviderListAsync(String storefrontOid, EmailThirdPartyListImportRequest importRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importEmailThirdPartyProviderListValidateBeforeCall(storefrontOid, importRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for insertEmailCampaign
     * @param storefrontOid null (required)
     * @param emailCampaign Email campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignCall(String storefrontOid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaign;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailCampaignValidateBeforeCall(String storefrontOid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaign' is set
        if (emailCampaign == null) {
            throw new ApiException("Missing the required parameter 'emailCampaign' when calling insertEmailCampaign(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailCampaignCall(storefrontOid, emailCampaign, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaign Email campaign (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse insertEmailCampaign(String storefrontOid, EmailCampaign emailCampaign) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = insertEmailCampaignWithHttpInfo(storefrontOid, emailCampaign);
        return resp.getData();
    }

    /**
     * Insert email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaign Email campaign (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> insertEmailCampaignWithHttpInfo(String storefrontOid, EmailCampaign emailCampaign) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailCampaignValidateBeforeCall(storefrontOid, emailCampaign, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email campaign (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCampaign Email campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailCampaignAsync(String storefrontOid, EmailCampaign emailCampaign, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailCampaignValidateBeforeCall(storefrontOid, emailCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailCommseq
     * @param storefrontOid null (required)
     * @param emailCommseq Email commseq (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailCommseqCall(String storefrontOid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseq;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailCommseqValidateBeforeCall(String storefrontOid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailCommseq(Async)");
        }
        
        // verify the required parameter 'emailCommseq' is set
        if (emailCommseq == null) {
            throw new ApiException("Missing the required parameter 'emailCommseq' when calling insertEmailCommseq(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailCommseqCall(storefrontOid, emailCommseq, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email commseq
     * 
     * @param storefrontOid null (required)
     * @param emailCommseq Email commseq (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse insertEmailCommseq(String storefrontOid, EmailCommseq emailCommseq) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = insertEmailCommseqWithHttpInfo(storefrontOid, emailCommseq);
        return resp.getData();
    }

    /**
     * Insert email commseq
     * 
     * @param storefrontOid null (required)
     * @param emailCommseq Email commseq (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> insertEmailCommseqWithHttpInfo(String storefrontOid, EmailCommseq emailCommseq) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailCommseqValidateBeforeCall(storefrontOid, emailCommseq, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email commseq (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCommseq Email commseq (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailCommseqAsync(String storefrontOid, EmailCommseq emailCommseq, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailCommseqValidateBeforeCall(storefrontOid, emailCommseq, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailEmail
     * @param storefrontOid null (required)
     * @param emailCommseqEmail Email email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailEmailCall(String storefrontOid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmail;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailEmailValidateBeforeCall(String storefrontOid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailEmail(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmail' is set
        if (emailCommseqEmail == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmail' when calling insertEmailEmail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailEmailCall(storefrontOid, emailCommseqEmail, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email email
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmail Email email (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse insertEmailEmail(String storefrontOid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = insertEmailEmailWithHttpInfo(storefrontOid, emailCommseqEmail);
        return resp.getData();
    }

    /**
     * Insert email email
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmail Email email (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> insertEmailEmailWithHttpInfo(String storefrontOid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailEmailValidateBeforeCall(storefrontOid, emailCommseqEmail, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email email (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCommseqEmail Email email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailEmailAsync(String storefrontOid, EmailCommseqEmail emailCommseqEmail, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailEmailValidateBeforeCall(storefrontOid, emailCommseqEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailFlow
     * @param storefrontOid null (required)
     * @param emailFlow Email flow (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowCall(String storefrontOid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlow;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailFlowValidateBeforeCall(String storefrontOid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlow' is set
        if (emailFlow == null) {
            throw new ApiException("Missing the required parameter 'emailFlow' when calling insertEmailFlow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailFlowCall(storefrontOid, emailFlow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlow Email flow (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse insertEmailFlow(String storefrontOid, EmailFlow emailFlow) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = insertEmailFlowWithHttpInfo(storefrontOid, emailFlow);
        return resp.getData();
    }

    /**
     * Insert email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlow Email flow (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> insertEmailFlowWithHttpInfo(String storefrontOid, EmailFlow emailFlow) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailFlowValidateBeforeCall(storefrontOid, emailFlow, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email flow (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailFlow Email flow (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailFlowAsync(String storefrontOid, EmailFlow emailFlow, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailFlowValidateBeforeCall(storefrontOid, emailFlow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailList
     * @param storefrontOid null (required)
     * @param emailList Email list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailListCall(String storefrontOid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailList;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailListValidateBeforeCall(String storefrontOid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailList(Async)");
        }
        
        // verify the required parameter 'emailList' is set
        if (emailList == null) {
            throw new ApiException("Missing the required parameter 'emailList' when calling insertEmailList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailListCall(storefrontOid, emailList, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email list
     * 
     * @param storefrontOid null (required)
     * @param emailList Email list (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse insertEmailList(String storefrontOid, EmailList emailList) throws ApiException {
        ApiResponse<EmailListResponse> resp = insertEmailListWithHttpInfo(storefrontOid, emailList);
        return resp.getData();
    }

    /**
     * Insert email list
     * 
     * @param storefrontOid null (required)
     * @param emailList Email list (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> insertEmailListWithHttpInfo(String storefrontOid, EmailList emailList) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailListValidateBeforeCall(storefrontOid, emailList, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailList Email list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailListAsync(String storefrontOid, EmailList emailList, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailListValidateBeforeCall(storefrontOid, emailList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertEmailSegment
     * @param storefrontOid null (required)
     * @param emailSegment Email segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertEmailSegmentCall(String storefrontOid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailSegment;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertEmailSegmentValidateBeforeCall(String storefrontOid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling insertEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegment' is set
        if (emailSegment == null) {
            throw new ApiException("Missing the required parameter 'emailSegment' when calling insertEmailSegment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertEmailSegmentCall(storefrontOid, emailSegment, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegment Email segment (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse insertEmailSegment(String storefrontOid, EmailSegment emailSegment) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = insertEmailSegmentWithHttpInfo(storefrontOid, emailSegment);
        return resp.getData();
    }

    /**
     * Insert email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegment Email segment (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> insertEmailSegmentWithHttpInfo(String storefrontOid, EmailSegment emailSegment) throws ApiException {
        com.squareup.okhttp.Call call = insertEmailSegmentValidateBeforeCall(storefrontOid, emailSegment, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert email segment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegment Email segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertEmailSegmentAsync(String storefrontOid, EmailSegment emailSegment, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertEmailSegmentValidateBeforeCall(storefrontOid, emailSegment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search
     * @param category null (optional)
     * @param matches null (optional)
     * @param maxHits null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(String category, String matches, Integer maxHits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (matches != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("matches", matches));
        if (maxHits != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max_hits", maxHits));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String category, String matches, Integer maxHits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = searchCall(category, matches, maxHits, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Searches for all matching values
     * 
     * @param category null (optional)
     * @param matches null (optional)
     * @param maxHits null (optional)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookupResponse search(String category, String matches, Integer maxHits) throws ApiException {
        ApiResponse<LookupResponse> resp = searchWithHttpInfo(category, matches, maxHits);
        return resp.getData();
    }

    /**
     * Searches for all matching values
     * 
     * @param category null (optional)
     * @param matches null (optional)
     * @param maxHits null (optional)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookupResponse> searchWithHttpInfo(String category, String matches, Integer maxHits) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(category, matches, maxHits, null, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for all matching values (asynchronously)
     * 
     * @param category null (optional)
     * @param matches null (optional)
     * @param maxHits null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String category, String matches, Integer maxHits, final ApiCallback<LookupResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(category, matches, maxHits, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchEmailListCustomers
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param startsWith null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchEmailListCustomersCall(String storefrontOid, String emailListUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startsWith", startsWith));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchEmailListCustomersValidateBeforeCall(String storefrontOid, String emailListUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling searchEmailListCustomers(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling searchEmailListCustomers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchEmailListCustomersCall(storefrontOid, emailListUuid, startsWith, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param startsWith null (optional)
     * @return EmailListCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListCustomersResponse searchEmailListCustomers(String storefrontOid, String emailListUuid, String startsWith) throws ApiException {
        ApiResponse<EmailListCustomersResponse> resp = searchEmailListCustomersWithHttpInfo(storefrontOid, emailListUuid, startsWith);
        return resp.getData();
    }

    /**
     * Search email list customers
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param startsWith null (optional)
     * @return ApiResponse&lt;EmailListCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListCustomersResponse> searchEmailListCustomersWithHttpInfo(String storefrontOid, String emailListUuid, String startsWith) throws ApiException {
        com.squareup.okhttp.Call call = searchEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, startsWith, null, null);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search email list customers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param startsWith null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchEmailListCustomersAsync(String storefrontOid, String emailListUuid, String startsWith, final ApiCallback<EmailListCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchEmailListCustomersValidateBeforeCall(storefrontOid, emailListUuid, startsWith, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchEmailSegmentCustomers
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param startsWith null (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchEmailSegmentCustomersCall(String storefrontOid, String emailSegmentUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startsWith != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startsWith", startsWith));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchEmailSegmentCustomersValidateBeforeCall(String storefrontOid, String emailSegmentUuid, String startsWith, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling searchEmailSegmentCustomers(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling searchEmailSegmentCustomers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchEmailSegmentCustomersCall(storefrontOid, emailSegmentUuid, startsWith, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search email segment customers
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param startsWith null (optional)
     * @return EmailSegmentCustomersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentCustomersResponse searchEmailSegmentCustomers(String storefrontOid, String emailSegmentUuid, String startsWith) throws ApiException {
        ApiResponse<EmailSegmentCustomersResponse> resp = searchEmailSegmentCustomersWithHttpInfo(storefrontOid, emailSegmentUuid, startsWith);
        return resp.getData();
    }

    /**
     * Search email segment customers
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param startsWith null (optional)
     * @return ApiResponse&lt;EmailSegmentCustomersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentCustomersResponse> searchEmailSegmentCustomersWithHttpInfo(String storefrontOid, String emailSegmentUuid, String startsWith) throws ApiException {
        com.squareup.okhttp.Call call = searchEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, startsWith, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search email segment customers (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param startsWith null (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchEmailSegmentCustomersAsync(String storefrontOid, String emailSegmentUuid, String startsWith, final ApiCallback<EmailSegmentCustomersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchEmailSegmentCustomersValidateBeforeCall(storefrontOid, emailSegmentUuid, startsWith, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentCustomersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startEmailCampaign
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startEmailCampaignCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startEmailCampaignValidateBeforeCall(String storefrontOid, String emailCampaignUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling startEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling startEmailCampaign(Async)");
        }
        
        
        com.squareup.okhttp.Call call = startEmailCampaignCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse startEmailCampaign(String storefrontOid, String emailCampaignUuid) throws ApiException {
        ApiResponse<BaseResponse> resp = startEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid);
        return resp.getData();
    }

    /**
     * Start email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> startEmailCampaignWithHttpInfo(String storefrontOid, String emailCampaignUuid) throws ApiException {
        com.squareup.okhttp.Call call = startEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start email campaign (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startEmailCampaignAsync(String storefrontOid, String emailCampaignUuid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for subscribeToEmailList
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param customers Customers (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subscribeToEmailListCall(String storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customers;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subscribeToEmailListValidateBeforeCall(String storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling subscribeToEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling subscribeToEmailList(Async)");
        }
        
        // verify the required parameter 'customers' is set
        if (customers == null) {
            throw new ApiException("Missing the required parameter 'customers' when calling subscribeToEmailList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = subscribeToEmailListCall(storefrontOid, emailListUuid, customers, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Subscribe customers to email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param customers Customers (required)
     * @return EmailListSubscribeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListSubscribeResponse subscribeToEmailList(String storefrontOid, String emailListUuid, List<EmailCustomer> customers) throws ApiException {
        ApiResponse<EmailListSubscribeResponse> resp = subscribeToEmailListWithHttpInfo(storefrontOid, emailListUuid, customers);
        return resp.getData();
    }

    /**
     * Subscribe customers to email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param customers Customers (required)
     * @return ApiResponse&lt;EmailListSubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListSubscribeResponse> subscribeToEmailListWithHttpInfo(String storefrontOid, String emailListUuid, List<EmailCustomer> customers) throws ApiException {
        com.squareup.okhttp.Call call = subscribeToEmailListValidateBeforeCall(storefrontOid, emailListUuid, customers, null, null);
        Type localVarReturnType = new TypeToken<EmailListSubscribeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Subscribe customers to email list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param customers Customers (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subscribeToEmailListAsync(String storefrontOid, String emailListUuid, List<EmailCustomer> customers, final ApiCallback<EmailListSubscribeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subscribeToEmailListValidateBeforeCall(storefrontOid, emailListUuid, customers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListSubscribeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailCampaign
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param emailCampaign Email campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignCall(String storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCampaign;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_campaign_uuid" + "\\}", apiClient.escapeString(emailCampaignUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCampaignValidateBeforeCall(String storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaignUuid' is set
        if (emailCampaignUuid == null) {
            throw new ApiException("Missing the required parameter 'emailCampaignUuid' when calling updateEmailCampaign(Async)");
        }
        
        // verify the required parameter 'emailCampaign' is set
        if (emailCampaign == null) {
            throw new ApiException("Missing the required parameter 'emailCampaign' when calling updateEmailCampaign(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailCampaignCall(storefrontOid, emailCampaignUuid, emailCampaign, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param emailCampaign Email campaign (required)
     * @return EmailCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCampaignResponse updateEmailCampaign(String storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign) throws ApiException {
        ApiResponse<EmailCampaignResponse> resp = updateEmailCampaignWithHttpInfo(storefrontOid, emailCampaignUuid, emailCampaign);
        return resp.getData();
    }

    /**
     * Update email campaign
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param emailCampaign Email campaign (required)
     * @return ApiResponse&lt;EmailCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCampaignResponse> updateEmailCampaignWithHttpInfo(String storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, emailCampaign, null, null);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email campaign (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailCampaignUuid null (required)
     * @param emailCampaign Email campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCampaignAsync(String storefrontOid, String emailCampaignUuid, EmailCampaign emailCampaign, final ApiCallback<EmailCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCampaignValidateBeforeCall(storefrontOid, emailCampaignUuid, emailCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailCommseq
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param emailCommseq Email commseq (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailCommseqCall(String storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseq;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_uuid" + "\\}", apiClient.escapeString(commseqUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailCommseqValidateBeforeCall(String storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailCommseq(Async)");
        }
        
        // verify the required parameter 'commseqUuid' is set
        if (commseqUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqUuid' when calling updateEmailCommseq(Async)");
        }
        
        // verify the required parameter 'emailCommseq' is set
        if (emailCommseq == null) {
            throw new ApiException("Missing the required parameter 'emailCommseq' when calling updateEmailCommseq(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailCommseqCall(storefrontOid, commseqUuid, emailCommseq, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email commseq
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param emailCommseq Email commseq (required)
     * @return EmailCommseqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqResponse updateEmailCommseq(String storefrontOid, String commseqUuid, EmailCommseq emailCommseq) throws ApiException {
        ApiResponse<EmailCommseqResponse> resp = updateEmailCommseqWithHttpInfo(storefrontOid, commseqUuid, emailCommseq);
        return resp.getData();
    }

    /**
     * Update email commseq
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param emailCommseq Email commseq (required)
     * @return ApiResponse&lt;EmailCommseqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqResponse> updateEmailCommseqWithHttpInfo(String storefrontOid, String commseqUuid, EmailCommseq emailCommseq) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, emailCommseq, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email commseq (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqUuid null (required)
     * @param emailCommseq Email commseq (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailCommseqAsync(String storefrontOid, String commseqUuid, EmailCommseq emailCommseq, final ApiCallback<EmailCommseqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailCommseqValidateBeforeCall(storefrontOid, commseqUuid, emailCommseq, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailEmail
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailEmailCall(String storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailCommseqEmail;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "commseq_email_uuid" + "\\}", apiClient.escapeString(commseqEmailUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailEmailValidateBeforeCall(String storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailEmail(Async)");
        }
        
        // verify the required parameter 'commseqEmailUuid' is set
        if (commseqEmailUuid == null) {
            throw new ApiException("Missing the required parameter 'commseqEmailUuid' when calling updateEmailEmail(Async)");
        }
        
        // verify the required parameter 'emailCommseqEmail' is set
        if (emailCommseqEmail == null) {
            throw new ApiException("Missing the required parameter 'emailCommseqEmail' when calling updateEmailEmail(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailEmailCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @return EmailCommseqEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailCommseqEmailResponse updateEmailEmail(String storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        ApiResponse<EmailCommseqEmailResponse> resp = updateEmailEmailWithHttpInfo(storefrontOid, commseqEmailUuid, emailCommseqEmail);
        return resp.getData();
    }

    /**
     * Update email email
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @return ApiResponse&lt;EmailCommseqEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailCommseqEmailResponse> updateEmailEmailWithHttpInfo(String storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, null, null);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email email (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param commseqEmailUuid null (required)
     * @param emailCommseqEmail Email commseq email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailEmailAsync(String storefrontOid, String commseqEmailUuid, EmailCommseqEmail emailCommseqEmail, final ApiCallback<EmailCommseqEmailResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailEmailValidateBeforeCall(storefrontOid, commseqEmailUuid, emailCommseqEmail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailCommseqEmailResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailFlow
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param emailFlow Email flow (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowCall(String storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailFlow;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_flow_uuid" + "\\}", apiClient.escapeString(emailFlowUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailFlowValidateBeforeCall(String storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlowUuid' is set
        if (emailFlowUuid == null) {
            throw new ApiException("Missing the required parameter 'emailFlowUuid' when calling updateEmailFlow(Async)");
        }
        
        // verify the required parameter 'emailFlow' is set
        if (emailFlow == null) {
            throw new ApiException("Missing the required parameter 'emailFlow' when calling updateEmailFlow(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailFlowCall(storefrontOid, emailFlowUuid, emailFlow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param emailFlow Email flow (required)
     * @return EmailFlowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailFlowResponse updateEmailFlow(String storefrontOid, String emailFlowUuid, EmailFlow emailFlow) throws ApiException {
        ApiResponse<EmailFlowResponse> resp = updateEmailFlowWithHttpInfo(storefrontOid, emailFlowUuid, emailFlow);
        return resp.getData();
    }

    /**
     * Update email flow
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param emailFlow Email flow (required)
     * @return ApiResponse&lt;EmailFlowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailFlowResponse> updateEmailFlowWithHttpInfo(String storefrontOid, String emailFlowUuid, EmailFlow emailFlow) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, emailFlow, null, null);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email flow (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailFlowUuid null (required)
     * @param emailFlow Email flow (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailFlowAsync(String storefrontOid, String emailFlowUuid, EmailFlow emailFlow, final ApiCallback<EmailFlowResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailFlowValidateBeforeCall(storefrontOid, emailFlowUuid, emailFlow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailFlowResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailList
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailList Email list (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailListCall(String storefrontOid, String emailListUuid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailList;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_list_uuid" + "\\}", apiClient.escapeString(emailListUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailListValidateBeforeCall(String storefrontOid, String emailListUuid, EmailList emailList, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailList(Async)");
        }
        
        // verify the required parameter 'emailListUuid' is set
        if (emailListUuid == null) {
            throw new ApiException("Missing the required parameter 'emailListUuid' when calling updateEmailList(Async)");
        }
        
        // verify the required parameter 'emailList' is set
        if (emailList == null) {
            throw new ApiException("Missing the required parameter 'emailList' when calling updateEmailList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailListCall(storefrontOid, emailListUuid, emailList, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailList Email list (required)
     * @return EmailListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailListResponse updateEmailList(String storefrontOid, String emailListUuid, EmailList emailList) throws ApiException {
        ApiResponse<EmailListResponse> resp = updateEmailListWithHttpInfo(storefrontOid, emailListUuid, emailList);
        return resp.getData();
    }

    /**
     * Update email list
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailList Email list (required)
     * @return ApiResponse&lt;EmailListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailListResponse> updateEmailListWithHttpInfo(String storefrontOid, String emailListUuid, EmailList emailList) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailListValidateBeforeCall(storefrontOid, emailListUuid, emailList, null, null);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email list (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailListUuid null (required)
     * @param emailList Email list (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailListAsync(String storefrontOid, String emailListUuid, EmailList emailList, final ApiCallback<EmailListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailListValidateBeforeCall(storefrontOid, emailListUuid, emailList, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEmailSegment
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailSegment Email segment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEmailSegmentCall(String storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emailSegment;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "email_segment_uuid" + "\\}", apiClient.escapeString(emailSegmentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEmailSegmentValidateBeforeCall(String storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegmentUuid' is set
        if (emailSegmentUuid == null) {
            throw new ApiException("Missing the required parameter 'emailSegmentUuid' when calling updateEmailSegment(Async)");
        }
        
        // verify the required parameter 'emailSegment' is set
        if (emailSegment == null) {
            throw new ApiException("Missing the required parameter 'emailSegment' when calling updateEmailSegment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateEmailSegmentCall(storefrontOid, emailSegmentUuid, emailSegment, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailSegment Email segment (required)
     * @return EmailSegmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EmailSegmentResponse updateEmailSegment(String storefrontOid, String emailSegmentUuid, EmailSegment emailSegment) throws ApiException {
        ApiResponse<EmailSegmentResponse> resp = updateEmailSegmentWithHttpInfo(storefrontOid, emailSegmentUuid, emailSegment);
        return resp.getData();
    }

    /**
     * Update email segment
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailSegment Email segment (required)
     * @return ApiResponse&lt;EmailSegmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EmailSegmentResponse> updateEmailSegmentWithHttpInfo(String storefrontOid, String emailSegmentUuid, EmailSegment emailSegment) throws ApiException {
        com.squareup.okhttp.Call call = updateEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegment, null, null);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update email segment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param emailSegmentUuid null (required)
     * @param emailSegment Email segment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEmailSegmentAsync(String storefrontOid, String emailSegmentUuid, EmailSegment emailSegment, final ApiCallback<EmailSegmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEmailSegmentValidateBeforeCall(storefrontOid, emailSegmentUuid, emailSegment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmailSegmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExperiment
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param experiment Experiment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperimentCall(String storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = experiment;
        
        // create path and map variables
        String localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
            .replaceAll("\\{" + "storefront_oid" + "\\}", apiClient.escapeString(storefrontOid.toString()))
            .replaceAll("\\{" + "storefront_experiment_oid" + "\\}", apiClient.escapeString(storefrontExperimentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperimentValidateBeforeCall(String storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storefrontOid' is set
        if (storefrontOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontOid' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'storefrontExperimentOid' is set
        if (storefrontExperimentOid == null) {
            throw new ApiException("Missing the required parameter 'storefrontExperimentOid' when calling updateExperiment(Async)");
        }
        
        // verify the required parameter 'experiment' is set
        if (experiment == null) {
            throw new ApiException("Missing the required parameter 'experiment' when calling updateExperiment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateExperimentCall(storefrontOid, storefrontExperimentOid, experiment, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update experiment
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param experiment Experiment (required)
     * @return ExperimentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExperimentResponse updateExperiment(String storefrontOid, Integer storefrontExperimentOid, Experiment experiment) throws ApiException {
        ApiResponse<ExperimentResponse> resp = updateExperimentWithHttpInfo(storefrontOid, storefrontExperimentOid, experiment);
        return resp.getData();
    }

    /**
     * Update experiment
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param experiment Experiment (required)
     * @return ApiResponse&lt;ExperimentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExperimentResponse> updateExperimentWithHttpInfo(String storefrontOid, Integer storefrontExperimentOid, Experiment experiment) throws ApiException {
        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, experiment, null, null);
        Type localVarReturnType = new TypeToken<ExperimentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update experiment (asynchronously)
     * 
     * @param storefrontOid null (required)
     * @param storefrontExperimentOid null (required)
     * @param experiment Experiment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperimentAsync(String storefrontOid, Integer storefrontExperimentOid, Experiment experiment, final ApiCallback<ExperimentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperimentValidateBeforeCall(storefrontOid, storefrontExperimentOid, experiment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExperimentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.FulfillmentInventory;
import com.ultracart.admin.v2.models.OrdersResponse;
import com.ultracart.admin.v2.models.FulfillmentShipment;
import com.ultracart.admin.v2.models.DistributionCentersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FulfillmentApi {
    private ApiClient apiClient;

    public FulfillmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FulfillmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut */
    private com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutCall(String distributionCenterCode, List<String> orderIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = orderIds;
        
        // verify the required parameter 'distributionCenterCode' is set
        if (distributionCenterCode == null) {
            throw new ApiException("Missing the required parameter 'distributionCenterCode' when calling fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut(Async)");
        }
        
        // verify the required parameter 'orderIds' is set
        if (orderIds == null) {
            throw new ApiException("Missing the required parameter 'orderIds' when calling fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "distribution_center_code" + "\\}", apiClient.escapeString(distributionCenterCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Acknowledge receipt of orders.
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * @param distributionCenterCode Distribution center code (required)
     * @param orderIds Orders to acknowledge receipt of (limit 100) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPut(String distributionCenterCode, List<String> orderIds) throws ApiException {
        fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutWithHttpInfo(distributionCenterCode, orderIds);
    }

    /**
     * Acknowledge receipt of orders.
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * @param distributionCenterCode Distribution center code (required)
     * @param orderIds Orders to acknowledge receipt of (limit 100) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutWithHttpInfo(String distributionCenterCode, List<String> orderIds) throws ApiException {
        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutCall(distributionCenterCode, orderIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * Acknowledge receipt of orders. (asynchronously)
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * @param distributionCenterCode Distribution center code (required)
     * @param orderIds Orders to acknowledge receipt of (limit 100) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutAsync(String distributionCenterCode, List<String> orderIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeAcknowledgementsPutCall(distributionCenterCode, orderIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for fulfillmentDistributionCentersDistributionCenterCodeInventoryPost */
    private com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeInventoryPostCall(String distributionCenterCode, List<FulfillmentInventory> inventories, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inventories;
        
        // verify the required parameter 'distributionCenterCode' is set
        if (distributionCenterCode == null) {
            throw new ApiException("Missing the required parameter 'distributionCenterCode' when calling fulfillmentDistributionCentersDistributionCenterCodeInventoryPost(Async)");
        }
        
        // verify the required parameter 'inventories' is set
        if (inventories == null) {
            throw new ApiException("Missing the required parameter 'inventories' when calling fulfillmentDistributionCentersDistributionCenterCodeInventoryPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/inventory".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "distribution_center_code" + "\\}", apiClient.escapeString(distributionCenterCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update inventory
     * Update the inventory for items associated with this distribution center 
     * @param distributionCenterCode Distribution center code (required)
     * @param inventories Inventory updates (limit 500) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void fulfillmentDistributionCentersDistributionCenterCodeInventoryPost(String distributionCenterCode, List<FulfillmentInventory> inventories) throws ApiException {
        fulfillmentDistributionCentersDistributionCenterCodeInventoryPostWithHttpInfo(distributionCenterCode, inventories);
    }

    /**
     * Update inventory
     * Update the inventory for items associated with this distribution center 
     * @param distributionCenterCode Distribution center code (required)
     * @param inventories Inventory updates (limit 500) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> fulfillmentDistributionCentersDistributionCenterCodeInventoryPostWithHttpInfo(String distributionCenterCode, List<FulfillmentInventory> inventories) throws ApiException {
        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeInventoryPostCall(distributionCenterCode, inventories, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update inventory (asynchronously)
     * Update the inventory for items associated with this distribution center 
     * @param distributionCenterCode Distribution center code (required)
     * @param inventories Inventory updates (limit 500) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeInventoryPostAsync(String distributionCenterCode, List<FulfillmentInventory> inventories, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeInventoryPostCall(distributionCenterCode, inventories, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for fulfillmentDistributionCentersDistributionCenterCodeOrdersGet */
    private com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeOrdersGetCall(String distributionCenterCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'distributionCenterCode' is set
        if (distributionCenterCode == null) {
            throw new ApiException("Missing the required parameter 'distributionCenterCode' when calling fulfillmentDistributionCentersDistributionCenterCodeOrdersGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "distribution_center_code" + "\\}", apiClient.escapeString(distributionCenterCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve orders queued up for this distribution center.
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * @param distributionCenterCode Distribution center code (required)
     * @return OrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrdersResponse fulfillmentDistributionCentersDistributionCenterCodeOrdersGet(String distributionCenterCode) throws ApiException {
        ApiResponse<OrdersResponse> resp = fulfillmentDistributionCentersDistributionCenterCodeOrdersGetWithHttpInfo(distributionCenterCode);
        return resp.getData();
    }

    /**
     * Retrieve orders queued up for this distribution center.
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * @param distributionCenterCode Distribution center code (required)
     * @return ApiResponse&lt;OrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrdersResponse> fulfillmentDistributionCentersDistributionCenterCodeOrdersGetWithHttpInfo(String distributionCenterCode) throws ApiException {
        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeOrdersGetCall(distributionCenterCode, null, null);
        Type localVarReturnType = new TypeToken<OrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve orders queued up for this distribution center. (asynchronously)
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  The orders that are returned contain only items for this distribution center and are expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * @param distributionCenterCode Distribution center code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeOrdersGetAsync(String distributionCenterCode, final ApiCallback<OrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeOrdersGetCall(distributionCenterCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fulfillmentDistributionCentersDistributionCenterCodeShipmentsPost */
    private com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostCall(String distributionCenterCode, List<FulfillmentShipment> shipments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = shipments;
        
        // verify the required parameter 'distributionCenterCode' is set
        if (distributionCenterCode == null) {
            throw new ApiException("Missing the required parameter 'distributionCenterCode' when calling fulfillmentDistributionCentersDistributionCenterCodeShipmentsPost(Async)");
        }
        
        // verify the required parameter 'shipments' is set
        if (shipments == null) {
            throw new ApiException("Missing the required parameter 'shipments' when calling fulfillmentDistributionCentersDistributionCenterCodeShipmentsPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/shipments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "distribution_center_code" + "\\}", apiClient.escapeString(distributionCenterCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Mark orders as shipped
     * Store the tracking information and mark the order shipped for this distribution center. 
     * @param distributionCenterCode Distribution center code (required)
     * @param shipments Orders to mark shipped (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void fulfillmentDistributionCentersDistributionCenterCodeShipmentsPost(String distributionCenterCode, List<FulfillmentShipment> shipments) throws ApiException {
        fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostWithHttpInfo(distributionCenterCode, shipments);
    }

    /**
     * Mark orders as shipped
     * Store the tracking information and mark the order shipped for this distribution center. 
     * @param distributionCenterCode Distribution center code (required)
     * @param shipments Orders to mark shipped (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostWithHttpInfo(String distributionCenterCode, List<FulfillmentShipment> shipments) throws ApiException {
        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostCall(distributionCenterCode, shipments, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark orders as shipped (asynchronously)
     * Store the tracking information and mark the order shipped for this distribution center. 
     * @param distributionCenterCode Distribution center code (required)
     * @param shipments Orders to mark shipped (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostAsync(String distributionCenterCode, List<FulfillmentShipment> shipments, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fulfillmentDistributionCentersDistributionCenterCodeShipmentsPostCall(distributionCenterCode, shipments, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for fulfillmentDistributionCentersGet */
    private com.squareup.okhttp.Call fulfillmentDistributionCentersGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/fulfillment/distribution_centers".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve distribution centers
     * Retrieves the distribution centers that this user has access to. 
     * @return DistributionCentersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DistributionCentersResponse fulfillmentDistributionCentersGet() throws ApiException {
        ApiResponse<DistributionCentersResponse> resp = fulfillmentDistributionCentersGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve distribution centers
     * Retrieves the distribution centers that this user has access to. 
     * @return ApiResponse&lt;DistributionCentersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DistributionCentersResponse> fulfillmentDistributionCentersGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = fulfillmentDistributionCentersGetCall(null, null);
        Type localVarReturnType = new TypeToken<DistributionCentersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve distribution centers (asynchronously)
     * Retrieves the distribution centers that this user has access to. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fulfillmentDistributionCentersGetAsync(final ApiCallback<DistributionCentersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fulfillmentDistributionCentersGetCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DistributionCentersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

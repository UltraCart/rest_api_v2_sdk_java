/*
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.AffiliateClickQuery;
import com.ultracart.admin.v2.models.AffiliateClicksResponse;
import com.ultracart.admin.v2.models.AffiliateLedgerQuery;
import com.ultracart.admin.v2.models.AffiliateLedgersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AffiliateApi {
    private ApiClient apiClient;

    public AffiliateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AffiliateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getClicksByQuery
     * @param clickQuery Click query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClicksByQueryCall(AffiliateClickQuery clickQuery, Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clickQuery;
        
        // create path and map variables
        String localVarPath = "/affiliate/clicks/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClicksByQueryValidateBeforeCall(AffiliateClickQuery clickQuery, Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clickQuery' is set
        if (clickQuery == null) {
            throw new ApiException("Missing the required parameter 'clickQuery' when calling getClicksByQuery(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getClicksByQueryCall(clickQuery, limit, offset, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve clicks
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param clickQuery Click query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @return AffiliateClicksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AffiliateClicksResponse getClicksByQuery(AffiliateClickQuery clickQuery, Integer limit, Integer offset, String expand) throws ApiException {
        ApiResponse<AffiliateClicksResponse> resp = getClicksByQueryWithHttpInfo(clickQuery, limit, offset, expand);
        return resp.getData();
    }

    /**
     * Retrieve clicks
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param clickQuery Click query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @return ApiResponse&lt;AffiliateClicksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AffiliateClicksResponse> getClicksByQueryWithHttpInfo(AffiliateClickQuery clickQuery, Integer limit, Integer offset, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getClicksByQueryValidateBeforeCall(clickQuery, limit, offset, expand, null, null);
        Type localVarReturnType = new TypeToken<AffiliateClicksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve clicks (asynchronously)
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param clickQuery Click query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 10000) (optional, default to 10000)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClicksByQueryAsync(AffiliateClickQuery clickQuery, Integer limit, Integer offset, String expand, final ApiCallback<AffiliateClicksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClicksByQueryValidateBeforeCall(clickQuery, limit, offset, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AffiliateClicksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLedgersByQuery
     * @param ledgerQuery Ledger query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLedgersByQueryCall(AffiliateLedgerQuery ledgerQuery, Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ledgerQuery;
        
        // create path and map variables
        String localVarPath = "/affiliate/ledgers/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLedgersByQueryValidateBeforeCall(AffiliateLedgerQuery ledgerQuery, Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ledgerQuery' is set
        if (ledgerQuery == null) {
            throw new ApiException("Missing the required parameter 'ledgerQuery' when calling getLedgersByQuery(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLedgersByQueryCall(ledgerQuery, limit, offset, expand, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve ledger entries
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param ledgerQuery Ledger query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @return AffiliateLedgersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AffiliateLedgersResponse getLedgersByQuery(AffiliateLedgerQuery ledgerQuery, Integer limit, Integer offset, String expand) throws ApiException {
        ApiResponse<AffiliateLedgersResponse> resp = getLedgersByQueryWithHttpInfo(ledgerQuery, limit, offset, expand);
        return resp.getData();
    }

    /**
     * Retrieve ledger entries
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param ledgerQuery Ledger query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @return ApiResponse&lt;AffiliateLedgersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AffiliateLedgersResponse> getLedgersByQueryWithHttpInfo(AffiliateLedgerQuery ledgerQuery, Integer limit, Integer offset, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getLedgersByQueryValidateBeforeCall(ledgerQuery, limit, offset, expand, null, null);
        Type localVarReturnType = new TypeToken<AffiliateLedgersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve ledger entries (asynchronously)
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param ledgerQuery Ledger query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  Only option is link. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLedgersByQueryAsync(AffiliateLedgerQuery ledgerQuery, Integer limit, Integer offset, String expand, final ApiCallback<AffiliateLedgersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLedgersByQueryValidateBeforeCall(ledgerQuery, limit, offset, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AffiliateLedgersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.CityStateZip;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Cart;
import com.ultracart.admin.v2.models.CartFinalizeOrderRequest;
import com.ultracart.admin.v2.models.CartFinalizeOrderResponse;
import com.ultracart.admin.v2.models.CartResponse;
import com.ultracart.admin.v2.models.CheckoutHandoffRequest;
import com.ultracart.admin.v2.models.CheckoutHandoffResponse;
import com.ultracart.admin.v2.models.CartProfileLoginResponse;
import com.ultracart.admin.v2.models.CartProfileLoginRequest;
import com.ultracart.admin.v2.models.CartProfileRegisterResponse;
import com.ultracart.admin.v2.models.CartProfileRegisterRequest;
import com.ultracart.admin.v2.models.ItemsResponse;
import com.ultracart.admin.v2.models.CheckoutSetupBrowserKeyResponse;
import com.ultracart.admin.v2.models.CheckoutSetupBrowserKeyRequest;
import com.ultracart.admin.v2.models.CartValidationRequest;
import com.ultracart.admin.v2.models.CartValidationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckoutApi {
    private ApiClient apiClient;

    public CheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckoutApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for cityState */
    private com.squareup.okhttp.Call cityStateCall(Cart cart, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cart;
        
        // verify the required parameter 'cart' is set
        if (cart == null) {
            throw new ApiException("Missing the required parameter 'cart' when calling cityState(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/city_state".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * City/State for Zip
     * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
     * @param cart Cart (required)
     * @return CityStateZip
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CityStateZip cityState(Cart cart) throws ApiException {
        ApiResponse<CityStateZip> resp = cityStateWithHttpInfo(cart);
        return resp.getData();
    }

    /**
     * City/State for Zip
     * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
     * @param cart Cart (required)
     * @return ApiResponse&lt;CityStateZip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CityStateZip> cityStateWithHttpInfo(Cart cart) throws ApiException {
        com.squareup.okhttp.Call call = cityStateCall(cart, null, null);
        Type localVarReturnType = new TypeToken<CityStateZip>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * City/State for Zip (asynchronously)
     * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address 
     * @param cart Cart (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cityStateAsync(Cart cart, final ApiCallback<CityStateZip> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cityStateCall(cart, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CityStateZip>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for finalizeOrder */
    private com.squareup.okhttp.Call finalizeOrderCall(CartFinalizeOrderRequest finalizeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = finalizeRequest;
        
        // verify the required parameter 'finalizeRequest' is set
        if (finalizeRequest == null) {
            throw new ApiException("Missing the required parameter 'finalizeRequest' when calling finalizeOrder(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/finalizeOrder".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Finalize Order
     * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
     * @param finalizeRequest Finalize request (required)
     * @return CartFinalizeOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartFinalizeOrderResponse finalizeOrder(CartFinalizeOrderRequest finalizeRequest) throws ApiException {
        ApiResponse<CartFinalizeOrderResponse> resp = finalizeOrderWithHttpInfo(finalizeRequest);
        return resp.getData();
    }

    /**
     * Finalize Order
     * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
     * @param finalizeRequest Finalize request (required)
     * @return ApiResponse&lt;CartFinalizeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartFinalizeOrderResponse> finalizeOrderWithHttpInfo(CartFinalizeOrderRequest finalizeRequest) throws ApiException {
        com.squareup.okhttp.Call call = finalizeOrderCall(finalizeRequest, null, null);
        Type localVarReturnType = new TypeToken<CartFinalizeOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finalize Order (asynchronously)
     * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call. 
     * @param finalizeRequest Finalize request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call finalizeOrderAsync(CartFinalizeOrderRequest finalizeRequest, final ApiCallback<CartFinalizeOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = finalizeOrderCall(finalizeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartFinalizeOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCart */
    private com.squareup.okhttp.Call getCartCall(String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/checkout/cart".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get cart
     * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartResponse getCart(String expand) throws ApiException {
        ApiResponse<CartResponse> resp = getCartWithHttpInfo(expand);
        return resp.getData();
    }

    /**
     * Get cart
     * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartResponse> getCartWithHttpInfo(String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCartCall(expand, null, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cart (asynchronously)
     * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart. 
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartAsync(String expand, final ApiCallback<CartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartCall(expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCartByCartId */
    private com.squareup.okhttp.Call getCartByCartIdCall(String cartId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling getCartByCartId(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/{cart_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "cart_id" + "\\}", apiClient.escapeString(cartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get cart (by cart id)
     * Get a cart specified by the cart_id parameter. 
     * @param cartId Cart ID to retrieve (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartResponse getCartByCartId(String cartId, String expand) throws ApiException {
        ApiResponse<CartResponse> resp = getCartByCartIdWithHttpInfo(cartId, expand);
        return resp.getData();
    }

    /**
     * Get cart (by cart id)
     * Get a cart specified by the cart_id parameter. 
     * @param cartId Cart ID to retrieve (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartResponse> getCartByCartIdWithHttpInfo(String cartId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCartByCartIdCall(cartId, expand, null, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cart (by cart id) (asynchronously)
     * Get a cart specified by the cart_id parameter. 
     * @param cartId Cart ID to retrieve (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartByCartIdAsync(String cartId, String expand, final ApiCallback<CartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartByCartIdCall(cartId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getCartByReturnCode */
    private com.squareup.okhttp.Call getCartByReturnCodeCall(String returnCode, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'returnCode' is set
        if (returnCode == null) {
            throw new ApiException("Missing the required parameter 'returnCode' when calling getCartByReturnCode(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/return/{return_code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "return_code" + "\\}", apiClient.escapeString(returnCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get cart (by return code)
     * Get a cart specified by the return code parameter. 
     * @param returnCode Return code to lookup cart ID by (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartResponse getCartByReturnCode(String returnCode, String expand) throws ApiException {
        ApiResponse<CartResponse> resp = getCartByReturnCodeWithHttpInfo(returnCode, expand);
        return resp.getData();
    }

    /**
     * Get cart (by return code)
     * Get a cart specified by the return code parameter. 
     * @param returnCode Return code to lookup cart ID by (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartResponse> getCartByReturnCodeWithHttpInfo(String returnCode, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCartByReturnCodeCall(returnCode, expand, null, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get cart (by return code) (asynchronously)
     * Get a cart specified by the return code parameter. 
     * @param returnCode Return code to lookup cart ID by (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCartByReturnCodeAsync(String returnCode, String expand, final ApiCallback<CartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCartByReturnCodeCall(returnCode, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for handoffCart */
    private com.squareup.okhttp.Call handoffCartCall(CheckoutHandoffRequest handoffRequest, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = handoffRequest;
        
        // verify the required parameter 'handoffRequest' is set
        if (handoffRequest == null) {
            throw new ApiException("Missing the required parameter 'handoffRequest' when calling handoffCart(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/handoff".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Handoff cart
     * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
     * @param handoffRequest Handoff request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CheckoutHandoffResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckoutHandoffResponse handoffCart(CheckoutHandoffRequest handoffRequest, String expand) throws ApiException {
        ApiResponse<CheckoutHandoffResponse> resp = handoffCartWithHttpInfo(handoffRequest, expand);
        return resp.getData();
    }

    /**
     * Handoff cart
     * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
     * @param handoffRequest Handoff request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CheckoutHandoffResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckoutHandoffResponse> handoffCartWithHttpInfo(CheckoutHandoffRequest handoffRequest, String expand) throws ApiException {
        com.squareup.okhttp.Call call = handoffCartCall(handoffRequest, expand, null, null);
        Type localVarReturnType = new TypeToken<CheckoutHandoffResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Handoff cart (asynchronously)
     * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal or finalization of the order (including upsell processing). 
     * @param handoffRequest Handoff request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call handoffCartAsync(CheckoutHandoffRequest handoffRequest, String expand, final ApiCallback<CheckoutHandoffResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = handoffCartCall(handoffRequest, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckoutHandoffResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for login */
    private com.squareup.okhttp.Call loginCall(CartProfileLoginRequest loginRequest, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loginRequest;
        
        // verify the required parameter 'loginRequest' is set
        if (loginRequest == null) {
            throw new ApiException("Missing the required parameter 'loginRequest' when calling login(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/profile/login".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Profile login
     * Login in to the customer profile specified by cart.billing.email and password 
     * @param loginRequest Login request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartProfileLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartProfileLoginResponse login(CartProfileLoginRequest loginRequest, String expand) throws ApiException {
        ApiResponse<CartProfileLoginResponse> resp = loginWithHttpInfo(loginRequest, expand);
        return resp.getData();
    }

    /**
     * Profile login
     * Login in to the customer profile specified by cart.billing.email and password 
     * @param loginRequest Login request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartProfileLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartProfileLoginResponse> loginWithHttpInfo(CartProfileLoginRequest loginRequest, String expand) throws ApiException {
        com.squareup.okhttp.Call call = loginCall(loginRequest, expand, null, null);
        Type localVarReturnType = new TypeToken<CartProfileLoginResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Profile login (asynchronously)
     * Login in to the customer profile specified by cart.billing.email and password 
     * @param loginRequest Login request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginAsync(CartProfileLoginRequest loginRequest, String expand, final ApiCallback<CartProfileLoginResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loginCall(loginRequest, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartProfileLoginResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for logout */
    private com.squareup.okhttp.Call logoutCall(Cart cart, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cart;
        
        // verify the required parameter 'cart' is set
        if (cart == null) {
            throw new ApiException("Missing the required parameter 'cart' when calling logout(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/profile/logout".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Profile logout
     * Log the cart out of the current profile.  No error will occur if they are not logged in. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartResponse logout(Cart cart, String expand) throws ApiException {
        ApiResponse<CartResponse> resp = logoutWithHttpInfo(cart, expand);
        return resp.getData();
    }

    /**
     * Profile logout
     * Log the cart out of the current profile.  No error will occur if they are not logged in. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartResponse> logoutWithHttpInfo(Cart cart, String expand) throws ApiException {
        com.squareup.okhttp.Call call = logoutCall(cart, expand, null, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Profile logout (asynchronously)
     * Log the cart out of the current profile.  No error will occur if they are not logged in. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutAsync(Cart cart, String expand, final ApiCallback<CartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = logoutCall(cart, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for register */
    private com.squareup.okhttp.Call registerCall(CartProfileRegisterRequest registerRequest, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = registerRequest;
        
        // verify the required parameter 'registerRequest' is set
        if (registerRequest == null) {
            throw new ApiException("Missing the required parameter 'registerRequest' when calling register(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/profile/register".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Profile registration
     * Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
     * @param registerRequest Register request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartProfileRegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartProfileRegisterResponse register(CartProfileRegisterRequest registerRequest, String expand) throws ApiException {
        ApiResponse<CartProfileRegisterResponse> resp = registerWithHttpInfo(registerRequest, expand);
        return resp.getData();
    }

    /**
     * Profile registration
     * Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
     * @param registerRequest Register request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartProfileRegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartProfileRegisterResponse> registerWithHttpInfo(CartProfileRegisterRequest registerRequest, String expand) throws ApiException {
        com.squareup.okhttp.Call call = registerCall(registerRequest, expand, null, null);
        Type localVarReturnType = new TypeToken<CartProfileRegisterResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Profile registration (asynchronously)
     * Register a new customer profile.  Requires the cart.billing object to be populated along with the password. 
     * @param registerRequest Register request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerAsync(CartProfileRegisterRequest registerRequest, String expand, final ApiCallback<CartProfileRegisterResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerCall(registerRequest, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartProfileRegisterResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for relatedItemsForCart */
    private com.squareup.okhttp.Call relatedItemsForCartCall(Cart cart, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cart;
        
        // verify the required parameter 'cart' is set
        if (cart == null) {
            throw new ApiException("Missing the required parameter 'cart' when calling relatedItemsForCart(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/related_items".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Related items
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @return ItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsResponse relatedItemsForCart(Cart cart, String expand) throws ApiException {
        ApiResponse<ItemsResponse> resp = relatedItemsForCartWithHttpInfo(cart, expand);
        return resp.getData();
    }

    /**
     * Related items
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @return ApiResponse&lt;ItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsResponse> relatedItemsForCartWithHttpInfo(Cart cart, String expand) throws ApiException {
        com.squareup.okhttp.Call call = relatedItemsForCartCall(cart, expand, null, null);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Related items (asynchronously)
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relatedItemsForCartAsync(Cart cart, String expand, final ApiCallback<ItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relatedItemsForCartCall(cart, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for relatedItemsForItem */
    private com.squareup.okhttp.Call relatedItemsForItemCall(String itemId, Cart cart, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cart;
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling relatedItemsForItem(Async)");
        }
        
        // verify the required parameter 'cart' is set
        if (cart == null) {
            throw new ApiException("Missing the required parameter 'cart' when calling relatedItemsForItem(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/relatedItems/{item_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "item_id" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Related items (specific item)
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param itemId Item ID to retrieve related items for (required)
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @return ItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsResponse relatedItemsForItem(String itemId, Cart cart, String expand) throws ApiException {
        ApiResponse<ItemsResponse> resp = relatedItemsForItemWithHttpInfo(itemId, cart, expand);
        return resp.getData();
    }

    /**
     * Related items (specific item)
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param itemId Item ID to retrieve related items for (required)
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @return ApiResponse&lt;ItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsResponse> relatedItemsForItemWithHttpInfo(String itemId, Cart cart, String expand) throws ApiException {
        com.squareup.okhttp.Call call = relatedItemsForItemCall(itemId, cart, expand, null, null);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Related items (specific item) (asynchronously)
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers. 
     * @param itemId Item ID to retrieve related items for (required)
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See item resource documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relatedItemsForItemAsync(String itemId, Cart cart, String expand, final ApiCallback<ItemsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relatedItemsForItemCall(itemId, cart, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setupBrowserKey */
    private com.squareup.okhttp.Call setupBrowserKeyCall(CheckoutSetupBrowserKeyRequest browserKeyRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = browserKeyRequest;
        
        // verify the required parameter 'browserKeyRequest' is set
        if (browserKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'browserKeyRequest' when calling setupBrowserKey(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/browser_key".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Setup Browser Application
     * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
     * @param browserKeyRequest Setup browser key request (required)
     * @return CheckoutSetupBrowserKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckoutSetupBrowserKeyResponse setupBrowserKey(CheckoutSetupBrowserKeyRequest browserKeyRequest) throws ApiException {
        ApiResponse<CheckoutSetupBrowserKeyResponse> resp = setupBrowserKeyWithHttpInfo(browserKeyRequest);
        return resp.getData();
    }

    /**
     * Setup Browser Application
     * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
     * @param browserKeyRequest Setup browser key request (required)
     * @return ApiResponse&lt;CheckoutSetupBrowserKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckoutSetupBrowserKeyResponse> setupBrowserKeyWithHttpInfo(CheckoutSetupBrowserKeyRequest browserKeyRequest) throws ApiException {
        com.squareup.okhttp.Call call = setupBrowserKeyCall(browserKeyRequest, null, null);
        Type localVarReturnType = new TypeToken<CheckoutSetupBrowserKeyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Setup Browser Application (asynchronously)
     * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use. 
     * @param browserKeyRequest Setup browser key request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setupBrowserKeyAsync(CheckoutSetupBrowserKeyRequest browserKeyRequest, final ApiCallback<CheckoutSetupBrowserKeyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setupBrowserKeyCall(browserKeyRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckoutSetupBrowserKeyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCart */
    private com.squareup.okhttp.Call updateCartCall(Cart cart, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cart;
        
        // verify the required parameter 'cart' is set
        if (cart == null) {
            throw new ApiException("Missing the required parameter 'cart' when calling updateCart(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update cart
     * Update the cart. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartResponse updateCart(Cart cart, String expand) throws ApiException {
        ApiResponse<CartResponse> resp = updateCartWithHttpInfo(cart, expand);
        return resp.getData();
    }

    /**
     * Update cart
     * Update the cart. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartResponse> updateCartWithHttpInfo(Cart cart, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateCartCall(cart, expand, null, null);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update cart (asynchronously)
     * Update the cart. 
     * @param cart Cart (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCartAsync(Cart cart, String expand, final ApiCallback<CartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCartCall(cart, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for validateCart */
    private com.squareup.okhttp.Call validateCartCall(CartValidationRequest validationRequest, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = validationRequest;
        
        // verify the required parameter 'validationRequest' is set
        if (validationRequest == null) {
            throw new ApiException("Missing the required parameter 'validationRequest' when calling validateCart(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/checkout/cart/validate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartBrowserApiKey", "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Validate
     * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
     * @param validationRequest Validation request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CartValidationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CartValidationResponse validateCart(CartValidationRequest validationRequest, String expand) throws ApiException {
        ApiResponse<CartValidationResponse> resp = validateCartWithHttpInfo(validationRequest, expand);
        return resp.getData();
    }

    /**
     * Validate
     * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
     * @param validationRequest Validation request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CartValidationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CartValidationResponse> validateCartWithHttpInfo(CartValidationRequest validationRequest, String expand) throws ApiException {
        com.squareup.okhttp.Call call = validateCartCall(validationRequest, expand, null, null);
        Type localVarReturnType = new TypeToken<CartValidationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate (asynchronously)
     * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow. 
     * @param validationRequest Validation request (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateCartAsync(CartValidationRequest validationRequest, String expand, final ApiCallback<CartValidationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateCartCall(validationRequest, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CartValidationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

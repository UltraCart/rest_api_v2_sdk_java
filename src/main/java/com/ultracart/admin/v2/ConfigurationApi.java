/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.DelayAutoOrdersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.PaymentsConfiguration;
import com.ultracart.admin.v2.models.PaymentsConfigurationResponse;
import com.ultracart.admin.v2.models.PaymentsWepayEnroll;
import com.ultracart.admin.v2.models.RotatingTransactionGateway;
import com.ultracart.admin.v2.models.StripeConnectResponse;
import com.ultracart.admin.v2.models.TransactionGatewaysRequest;
import com.ultracart.admin.v2.models.TransactionGatewaysResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationApi {
    private ApiClient apiClient;

    public ConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public ConfigurationApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public ConfigurationApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for delayAutoOrders
     * @param rtgOid The rtg_oid to delay. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call delayAutoOrdersCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/delayAutoOrders"
            .replaceAll("\\{" + "rtg_oid" + "\\}", apiClient.escapeString(rtgOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call delayAutoOrdersValidateBeforeCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rtgOid' is set
        if (rtgOid == null) {
            throw new ApiException("Missing the required parameter 'rtgOid' when calling delayAutoOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = delayAutoOrdersCall(rtgOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delay auto order processing for a day for this rotating transaction gateway
     * Delay auto order processing for a day for this rotating transaction gateway 
     * @param rtgOid The rtg_oid to delay. (required)
     * @return DelayAutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DelayAutoOrdersResponse delayAutoOrders(Integer rtgOid) throws ApiException {
        ApiResponse<DelayAutoOrdersResponse> resp = delayAutoOrdersWithHttpInfo(rtgOid);
        return resp.getData();
    }

    /**
     * Delay auto order processing for a day for this rotating transaction gateway
     * Delay auto order processing for a day for this rotating transaction gateway 
     * @param rtgOid The rtg_oid to delay. (required)
     * @return ApiResponse&lt;DelayAutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DelayAutoOrdersResponse> delayAutoOrdersWithHttpInfo(Integer rtgOid) throws ApiException {
        com.squareup.okhttp.Call call = delayAutoOrdersValidateBeforeCall(rtgOid, null, null);
        Type localVarReturnType = new TypeToken<DelayAutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delay auto order processing for a day for this rotating transaction gateway (asynchronously)
     * Delay auto order processing for a day for this rotating transaction gateway 
     * @param rtgOid The rtg_oid to delay. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call delayAutoOrdersAsync(Integer rtgOid, final ApiCallback<DelayAutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = delayAutoOrdersValidateBeforeCall(rtgOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DelayAutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRotatingTransactionGateway
     * @param rtgOid The rtg_oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRotatingTransactionGatewayCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}"
            .replaceAll("\\{" + "rtg_oid" + "\\}", apiClient.escapeString(rtgOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRotatingTransactionGatewayValidateBeforeCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rtgOid' is set
        if (rtgOid == null) {
            throw new ApiException("Missing the required parameter 'rtgOid' when calling deleteRotatingTransactionGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRotatingTransactionGatewayCall(rtgOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a rotating transaction gateway
     * Delete a rotating transaction gateway 
     * @param rtgOid The rtg_oid to delete. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse deleteRotatingTransactionGateway(Integer rtgOid) throws ApiException {
        ApiResponse<BaseResponse> resp = deleteRotatingTransactionGatewayWithHttpInfo(rtgOid);
        return resp.getData();
    }

    /**
     * Delete a rotating transaction gateway
     * Delete a rotating transaction gateway 
     * @param rtgOid The rtg_oid to delete. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> deleteRotatingTransactionGatewayWithHttpInfo(Integer rtgOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteRotatingTransactionGatewayValidateBeforeCall(rtgOid, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a rotating transaction gateway (asynchronously)
     * Delete a rotating transaction gateway 
     * @param rtgOid The rtg_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRotatingTransactionGatewayAsync(Integer rtgOid, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRotatingTransactionGatewayValidateBeforeCall(rtgOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsConfiguration
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsConfigurationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsConfigurationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPaymentsConfigurationCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve payments configuration
     * Retrieves payments configuration for this account. 
     * @return PaymentsConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentsConfiguration getPaymentsConfiguration() throws ApiException {
        ApiResponse<PaymentsConfiguration> resp = getPaymentsConfigurationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve payments configuration
     * Retrieves payments configuration for this account. 
     * @return ApiResponse&lt;PaymentsConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentsConfiguration> getPaymentsConfigurationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsConfigurationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PaymentsConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve payments configuration (asynchronously)
     * Retrieves payments configuration for this account. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsConfigurationAsync(final ApiCallback<PaymentsConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsConfigurationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentsConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsRotatingGateway
     * @param rtgOid The rtg_oid for the desired record. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingGatewayCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}"
            .replaceAll("\\{" + "rtg_oid" + "\\}", apiClient.escapeString(rtgOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsRotatingGatewayValidateBeforeCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rtgOid' is set
        if (rtgOid == null) {
            throw new ApiException("Missing the required parameter 'rtgOid' when calling getPaymentsRotatingGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayCall(rtgOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a rotating transaction gateway
     * Retrieve a rotating transaction gateway 
     * @param rtgOid The rtg_oid for the desired record. (required)
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway getPaymentsRotatingGateway(Integer rtgOid) throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = getPaymentsRotatingGatewayWithHttpInfo(rtgOid);
        return resp.getData();
    }

    /**
     * Retrieve a rotating transaction gateway
     * Retrieve a rotating transaction gateway 
     * @param rtgOid The rtg_oid for the desired record. (required)
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> getPaymentsRotatingGatewayWithHttpInfo(Integer rtgOid) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayValidateBeforeCall(rtgOid, null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a rotating transaction gateway (asynchronously)
     * Retrieve a rotating transaction gateway 
     * @param rtgOid The rtg_oid for the desired record. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingGatewayAsync(Integer rtgOid, final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayValidateBeforeCall(rtgOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsRotatingGatewayByCode
     * @param code The code for the desired rotating transaction gateway. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingGatewayByCodeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/byCode/{code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsRotatingGatewayByCodeValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPaymentsRotatingGatewayByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayByCodeCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a rotating transaction gateway by code
     * Retrieve a rotating transaction gateway by code 
     * @param code The code for the desired rotating transaction gateway. (required)
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway getPaymentsRotatingGatewayByCode(String code) throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = getPaymentsRotatingGatewayByCodeWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Retrieve a rotating transaction gateway by code
     * Retrieve a rotating transaction gateway by code 
     * @param code The code for the desired rotating transaction gateway. (required)
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> getPaymentsRotatingGatewayByCodeWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayByCodeValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a rotating transaction gateway by code (asynchronously)
     * Retrieve a rotating transaction gateway by code 
     * @param code The code for the desired rotating transaction gateway. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingGatewayByCodeAsync(String code, final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsRotatingGatewayByCodeValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsRotatingTransactionGateways
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingTransactionGatewaysCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsRotatingTransactionGatewaysValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPaymentsRotatingTransactionGatewaysCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of rotating transaction gateways
     * Retrieve a list of rotating transaction gateways 
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway getPaymentsRotatingTransactionGateways() throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = getPaymentsRotatingTransactionGatewaysWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of rotating transaction gateways
     * Retrieve a list of rotating transaction gateways 
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> getPaymentsRotatingTransactionGatewaysWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsRotatingTransactionGatewaysValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of rotating transaction gateways (asynchronously)
     * Retrieve a list of rotating transaction gateways 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRotatingTransactionGatewaysAsync(final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsRotatingTransactionGatewaysValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsRtgSummaries
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRtgSummariesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsRtgSummariesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPaymentsRtgSummariesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a summary of rotating transaction gateways
     * Retrieve a summary of rotating transaction gateways 
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway getPaymentsRtgSummaries() throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = getPaymentsRtgSummariesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a summary of rotating transaction gateways
     * Retrieve a summary of rotating transaction gateways 
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> getPaymentsRtgSummariesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsRtgSummariesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a summary of rotating transaction gateways (asynchronously)
     * Retrieve a summary of rotating transaction gateways 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsRtgSummariesAsync(final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsRtgSummariesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentsTransactionGateways
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentsTransactionGatewaysCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/tg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentsTransactionGatewaysValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPaymentsTransactionGatewaysCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of transaction gateways
     * Retrieve a list of transaction gateways 
     * @return TransactionGatewaysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionGatewaysResponse getPaymentsTransactionGateways() throws ApiException {
        ApiResponse<TransactionGatewaysResponse> resp = getPaymentsTransactionGatewaysWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of transaction gateways
     * Retrieve a list of transaction gateways 
     * @return ApiResponse&lt;TransactionGatewaysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionGatewaysResponse> getPaymentsTransactionGatewaysWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPaymentsTransactionGatewaysValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TransactionGatewaysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of transaction gateways (asynchronously)
     * Retrieve a list of transaction gateways 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentsTransactionGatewaysAsync(final ApiCallback<TransactionGatewaysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentsTransactionGatewaysValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionGatewaysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertRotatingTransactionGateway
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertRotatingTransactionGatewayCall(RotatingTransactionGateway rotatingTransactionGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rotatingTransactionGateway;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertRotatingTransactionGatewayValidateBeforeCall(RotatingTransactionGateway rotatingTransactionGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rotatingTransactionGateway' is set
        if (rotatingTransactionGateway == null) {
            throw new ApiException("Missing the required parameter 'rotatingTransactionGateway' when calling insertRotatingTransactionGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = insertRotatingTransactionGatewayCall(rotatingTransactionGateway, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a rotating transaction gateway
     * Insert a rotating transaction gateway 
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway insertRotatingTransactionGateway(RotatingTransactionGateway rotatingTransactionGateway) throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = insertRotatingTransactionGatewayWithHttpInfo(rotatingTransactionGateway);
        return resp.getData();
    }

    /**
     * Insert a rotating transaction gateway
     * Insert a rotating transaction gateway 
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> insertRotatingTransactionGatewayWithHttpInfo(RotatingTransactionGateway rotatingTransactionGateway) throws ApiException {
        com.squareup.okhttp.Call call = insertRotatingTransactionGatewayValidateBeforeCall(rotatingTransactionGateway, null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a rotating transaction gateway (asynchronously)
     * Insert a rotating transaction gateway 
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertRotatingTransactionGatewayAsync(RotatingTransactionGateway rotatingTransactionGateway, final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertRotatingTransactionGatewayValidateBeforeCall(rotatingTransactionGateway, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for migrateToRotatingTransactionGateway
     * @param code The short code for the new rotating transaction gateway (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call migrateToRotatingTransactionGatewayCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/tg/migrateToRtgWithCodeOf/{code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call migrateToRotatingTransactionGatewayValidateBeforeCall(String code, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling migrateToRotatingTransactionGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = migrateToRotatingTransactionGatewayCall(code, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Migrate a normal transaction gateway to a rotating transaction gateway
     * Migrate a normal transaction gateway to a rotating transaction gateway 
     * @param code The short code for the new rotating transaction gateway (required)
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway migrateToRotatingTransactionGateway(String code) throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = migrateToRotatingTransactionGatewayWithHttpInfo(code);
        return resp.getData();
    }

    /**
     * Migrate a normal transaction gateway to a rotating transaction gateway
     * Migrate a normal transaction gateway to a rotating transaction gateway 
     * @param code The short code for the new rotating transaction gateway (required)
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> migrateToRotatingTransactionGatewayWithHttpInfo(String code) throws ApiException {
        com.squareup.okhttp.Call call = migrateToRotatingTransactionGatewayValidateBeforeCall(code, null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Migrate a normal transaction gateway to a rotating transaction gateway (asynchronously)
     * Migrate a normal transaction gateway to a rotating transaction gateway 
     * @param code The short code for the new rotating transaction gateway (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call migrateToRotatingTransactionGatewayAsync(String code, final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = migrateToRotatingTransactionGatewayValidateBeforeCall(code, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stripeConnect
     * @param rtgOid The rtg_oid to be connected to stripe. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stripeConnectCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}/stripeConnect"
            .replaceAll("\\{" + "rtg_oid" + "\\}", apiClient.escapeString(rtgOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stripeConnectValidateBeforeCall(Integer rtgOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rtgOid' is set
        if (rtgOid == null) {
            throw new ApiException("Missing the required parameter 'rtgOid' when calling stripeConnect(Async)");
        }
        

        com.squareup.okhttp.Call call = stripeConnectCall(rtgOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Begin the processing of connecting with Stripe
     * Begin the processing of connecting with Stripe. 
     * @param rtgOid The rtg_oid to be connected to stripe. (required)
     * @return StripeConnectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StripeConnectResponse stripeConnect(Integer rtgOid) throws ApiException {
        ApiResponse<StripeConnectResponse> resp = stripeConnectWithHttpInfo(rtgOid);
        return resp.getData();
    }

    /**
     * Begin the processing of connecting with Stripe
     * Begin the processing of connecting with Stripe. 
     * @param rtgOid The rtg_oid to be connected to stripe. (required)
     * @return ApiResponse&lt;StripeConnectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StripeConnectResponse> stripeConnectWithHttpInfo(Integer rtgOid) throws ApiException {
        com.squareup.okhttp.Call call = stripeConnectValidateBeforeCall(rtgOid, null, null);
        Type localVarReturnType = new TypeToken<StripeConnectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Begin the processing of connecting with Stripe (asynchronously)
     * Begin the processing of connecting with Stripe. 
     * @param rtgOid The rtg_oid to be connected to stripe. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stripeConnectAsync(Integer rtgOid, final ApiCallback<StripeConnectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stripeConnectValidateBeforeCall(rtgOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StripeConnectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePaymentsConfiguration
     * @param paymentsConfiguration Payments configuration (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePaymentsConfigurationCall(PaymentsConfiguration paymentsConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paymentsConfiguration;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePaymentsConfigurationValidateBeforeCall(PaymentsConfiguration paymentsConfiguration, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'paymentsConfiguration' is set
        if (paymentsConfiguration == null) {
            throw new ApiException("Missing the required parameter 'paymentsConfiguration' when calling updatePaymentsConfiguration(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePaymentsConfigurationCall(paymentsConfiguration, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates payments configuration
     * Updates payments configuration on the UltraCart account. 
     * @param paymentsConfiguration Payments configuration (required)
     * @return PaymentsConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentsConfigurationResponse updatePaymentsConfiguration(PaymentsConfiguration paymentsConfiguration) throws ApiException {
        ApiResponse<PaymentsConfigurationResponse> resp = updatePaymentsConfigurationWithHttpInfo(paymentsConfiguration);
        return resp.getData();
    }

    /**
     * Updates payments configuration
     * Updates payments configuration on the UltraCart account. 
     * @param paymentsConfiguration Payments configuration (required)
     * @return ApiResponse&lt;PaymentsConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentsConfigurationResponse> updatePaymentsConfigurationWithHttpInfo(PaymentsConfiguration paymentsConfiguration) throws ApiException {
        com.squareup.okhttp.Call call = updatePaymentsConfigurationValidateBeforeCall(paymentsConfiguration, null, null);
        Type localVarReturnType = new TypeToken<PaymentsConfigurationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates payments configuration (asynchronously)
     * Updates payments configuration on the UltraCart account. 
     * @param paymentsConfiguration Payments configuration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePaymentsConfigurationAsync(PaymentsConfiguration paymentsConfiguration, final ApiCallback<PaymentsConfigurationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePaymentsConfigurationValidateBeforeCall(paymentsConfiguration, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentsConfigurationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePaymentsTransactionGateway
     * @param updateGatewayRequest Transaction gateways (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePaymentsTransactionGatewayCall(TransactionGatewaysRequest updateGatewayRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateGatewayRequest;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/tg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePaymentsTransactionGatewayValidateBeforeCall(TransactionGatewaysRequest updateGatewayRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'updateGatewayRequest' is set
        if (updateGatewayRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGatewayRequest' when calling updatePaymentsTransactionGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePaymentsTransactionGatewayCall(updateGatewayRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates payments transaction gateway
     * Updates payments transaction gateway on the UltraCart account. 
     * @param updateGatewayRequest Transaction gateways (required)
     * @return TransactionGatewaysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TransactionGatewaysResponse updatePaymentsTransactionGateway(TransactionGatewaysRequest updateGatewayRequest) throws ApiException {
        ApiResponse<TransactionGatewaysResponse> resp = updatePaymentsTransactionGatewayWithHttpInfo(updateGatewayRequest);
        return resp.getData();
    }

    /**
     * Updates payments transaction gateway
     * Updates payments transaction gateway on the UltraCart account. 
     * @param updateGatewayRequest Transaction gateways (required)
     * @return ApiResponse&lt;TransactionGatewaysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TransactionGatewaysResponse> updatePaymentsTransactionGatewayWithHttpInfo(TransactionGatewaysRequest updateGatewayRequest) throws ApiException {
        com.squareup.okhttp.Call call = updatePaymentsTransactionGatewayValidateBeforeCall(updateGatewayRequest, null, null);
        Type localVarReturnType = new TypeToken<TransactionGatewaysResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates payments transaction gateway (asynchronously)
     * Updates payments transaction gateway on the UltraCart account. 
     * @param updateGatewayRequest Transaction gateways (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePaymentsTransactionGatewayAsync(TransactionGatewaysRequest updateGatewayRequest, final ApiCallback<TransactionGatewaysResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePaymentsTransactionGatewayValidateBeforeCall(updateGatewayRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TransactionGatewaysResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRotatingTransactionGateway
     * @param rtgOid The rtg_oid to update. (required)
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRotatingTransactionGatewayCall(Integer rtgOid, RotatingTransactionGateway rotatingTransactionGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = rotatingTransactionGateway;

        // create path and map variables
        String localVarPath = "/configuration/checkout/payments/rtg/{rtg_oid}"
            .replaceAll("\\{" + "rtg_oid" + "\\}", apiClient.escapeString(rtgOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRotatingTransactionGatewayValidateBeforeCall(Integer rtgOid, RotatingTransactionGateway rotatingTransactionGateway, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rtgOid' is set
        if (rtgOid == null) {
            throw new ApiException("Missing the required parameter 'rtgOid' when calling updateRotatingTransactionGateway(Async)");
        }
        
        // verify the required parameter 'rotatingTransactionGateway' is set
        if (rotatingTransactionGateway == null) {
            throw new ApiException("Missing the required parameter 'rotatingTransactionGateway' when calling updateRotatingTransactionGateway(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRotatingTransactionGatewayCall(rtgOid, rotatingTransactionGateway, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a rotating transaction gateway
     * Update a rotating transaction gateway 
     * @param rtgOid The rtg_oid to update. (required)
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @return RotatingTransactionGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RotatingTransactionGateway updateRotatingTransactionGateway(Integer rtgOid, RotatingTransactionGateway rotatingTransactionGateway) throws ApiException {
        ApiResponse<RotatingTransactionGateway> resp = updateRotatingTransactionGatewayWithHttpInfo(rtgOid, rotatingTransactionGateway);
        return resp.getData();
    }

    /**
     * Update a rotating transaction gateway
     * Update a rotating transaction gateway 
     * @param rtgOid The rtg_oid to update. (required)
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @return ApiResponse&lt;RotatingTransactionGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RotatingTransactionGateway> updateRotatingTransactionGatewayWithHttpInfo(Integer rtgOid, RotatingTransactionGateway rotatingTransactionGateway) throws ApiException {
        com.squareup.okhttp.Call call = updateRotatingTransactionGatewayValidateBeforeCall(rtgOid, rotatingTransactionGateway, null, null);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a rotating transaction gateway (asynchronously)
     * Update a rotating transaction gateway 
     * @param rtgOid The rtg_oid to update. (required)
     * @param rotatingTransactionGateway Rotating transaction gateway (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRotatingTransactionGatewayAsync(Integer rtgOid, RotatingTransactionGateway rotatingTransactionGateway, final ApiCallback<RotatingTransactionGateway> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRotatingTransactionGatewayValidateBeforeCall(rtgOid, rotatingTransactionGateway, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RotatingTransactionGateway>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wepayEnroll
     * @param wepayEnroll Wepay enrollment information (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wepayEnrollCall(PaymentsWepayEnroll wepayEnroll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = wepayEnroll;

        // create path and map variables
        String localVarPath = "/configuration/checkout/wepayEnroll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wepayEnrollValidateBeforeCall(PaymentsWepayEnroll wepayEnroll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'wepayEnroll' is set
        if (wepayEnroll == null) {
            throw new ApiException("Missing the required parameter 'wepayEnroll' when calling wepayEnroll(Async)");
        }
        

        com.squareup.okhttp.Call call = wepayEnrollCall(wepayEnroll, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enroll with WePay
     * Enroll with WePay on the UltraCart account. 
     * @param wepayEnroll Wepay enrollment information (required)
     * @return PaymentsConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentsConfigurationResponse wepayEnroll(PaymentsWepayEnroll wepayEnroll) throws ApiException {
        ApiResponse<PaymentsConfigurationResponse> resp = wepayEnrollWithHttpInfo(wepayEnroll);
        return resp.getData();
    }

    /**
     * Enroll with WePay
     * Enroll with WePay on the UltraCart account. 
     * @param wepayEnroll Wepay enrollment information (required)
     * @return ApiResponse&lt;PaymentsConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentsConfigurationResponse> wepayEnrollWithHttpInfo(PaymentsWepayEnroll wepayEnroll) throws ApiException {
        com.squareup.okhttp.Call call = wepayEnrollValidateBeforeCall(wepayEnroll, null, null);
        Type localVarReturnType = new TypeToken<PaymentsConfigurationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enroll with WePay (asynchronously)
     * Enroll with WePay on the UltraCart account. 
     * @param wepayEnroll Wepay enrollment information (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wepayEnrollAsync(PaymentsWepayEnroll wepayEnroll, final ApiCallback<PaymentsConfigurationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wepayEnrollValidateBeforeCall(wepayEnroll, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentsConfigurationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

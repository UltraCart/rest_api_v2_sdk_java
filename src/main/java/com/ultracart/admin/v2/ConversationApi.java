/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ConversationAgentAuthResponse;
import com.ultracart.admin.v2.models.ConversationAgentProfile;
import com.ultracart.admin.v2.models.ConversationAgentProfileResponse;
import com.ultracart.admin.v2.models.ConversationAgentProfilesResponse;
import com.ultracart.admin.v2.models.ConversationAutocompleteRequest;
import com.ultracart.admin.v2.models.ConversationAutocompleteResponse;
import com.ultracart.admin.v2.models.ConversationCannedMessage;
import com.ultracart.admin.v2.models.ConversationCannedMessageResponse;
import com.ultracart.admin.v2.models.ConversationCannedMessagesResponse;
import com.ultracart.admin.v2.models.ConversationCannedMessagesSearch;
import com.ultracart.admin.v2.models.ConversationDeleteKnowledgeBaseDocumentResponse;
import com.ultracart.admin.v2.models.ConversationDepartment;
import com.ultracart.admin.v2.models.ConversationDepartmentMembersResponse;
import com.ultracart.admin.v2.models.ConversationDepartmentResponse;
import com.ultracart.admin.v2.models.ConversationDepartmentsResponse;
import com.ultracart.admin.v2.models.ConversationEngagement;
import com.ultracart.admin.v2.models.ConversationEngagementResponse;
import com.ultracart.admin.v2.models.ConversationEngagementsResponse;
import com.ultracart.admin.v2.models.ConversationInsertKnowledgeBaseDocumentRequest;
import com.ultracart.admin.v2.models.ConversationInsertKnowledgeBaseDocumentResponse;
import com.ultracart.admin.v2.models.ConversationJoinRequest;
import com.ultracart.admin.v2.models.ConversationKnowledgeBaseDocumentUploadUrlResponse;
import com.ultracart.admin.v2.models.ConversationKnowledgeBaseDocumentsResponse;
import com.ultracart.admin.v2.models.ConversationLocationsResponse;
import com.ultracart.admin.v2.models.ConversationMessagesResponse;
import com.ultracart.admin.v2.models.ConversationMultimediaUploadUrlResponse;
import com.ultracart.admin.v2.models.ConversationPbxAgent;
import com.ultracart.admin.v2.models.ConversationPbxAgentResponse;
import com.ultracart.admin.v2.models.ConversationPbxAgentsResponse;
import com.ultracart.admin.v2.models.ConversationPbxAudio;
import com.ultracart.admin.v2.models.ConversationPbxAudioResponse;
import com.ultracart.admin.v2.models.ConversationPbxAudioUploadUrlResponse;
import com.ultracart.admin.v2.models.ConversationPbxAudioUsageResponse;
import com.ultracart.admin.v2.models.ConversationPbxAudiosResponse;
import com.ultracart.admin.v2.models.ConversationPbxCustomerSnapshotRequest;
import com.ultracart.admin.v2.models.ConversationPbxCustomerSnapshotResponse;
import com.ultracart.admin.v2.models.ConversationPbxMenu;
import com.ultracart.admin.v2.models.ConversationPbxMenuResponse;
import com.ultracart.admin.v2.models.ConversationPbxMenusResponse;
import com.ultracart.admin.v2.models.ConversationPbxPhoneNumber;
import com.ultracart.admin.v2.models.ConversationPbxPhoneNumberResponse;
import com.ultracart.admin.v2.models.ConversationPbxPhoneNumbersResponse;
import com.ultracart.admin.v2.models.ConversationPbxQueue;
import com.ultracart.admin.v2.models.ConversationPbxQueueResponse;
import com.ultracart.admin.v2.models.ConversationPbxQueuesResponse;
import com.ultracart.admin.v2.models.ConversationPbxTimeBased;
import com.ultracart.admin.v2.models.ConversationPbxTimeBasedResponse;
import com.ultracart.admin.v2.models.ConversationPbxTimeBasedsResponse;
import com.ultracart.admin.v2.models.ConversationPbxTimeRange;
import com.ultracart.admin.v2.models.ConversationPbxTimeRangeResponse;
import com.ultracart.admin.v2.models.ConversationPbxTimeRangesResponse;
import com.ultracart.admin.v2.models.ConversationPbxVoicemailMailbox;
import com.ultracart.admin.v2.models.ConversationPbxVoicemailMailboxResponse;
import com.ultracart.admin.v2.models.ConversationPbxVoicemailMailboxesResponse;
import com.ultracart.admin.v2.models.ConversationPbxVoicemailMessageResponse;
import com.ultracart.admin.v2.models.ConversationPbxVoicemailMessageSummariesResponse;
import com.ultracart.admin.v2.models.ConversationPermissionsResponse;
import com.ultracart.admin.v2.models.ConversationResponse;
import com.ultracart.admin.v2.models.ConversationSearchRequest;
import com.ultracart.admin.v2.models.ConversationSearchResponse;
import com.ultracart.admin.v2.models.ConversationStartRequest;
import com.ultracart.admin.v2.models.ConversationStartResponse;
import com.ultracart.admin.v2.models.ConversationVirtualAgentBudget;
import com.ultracart.admin.v2.models.ConversationVirtualAgentBudgetResponse;
import com.ultracart.admin.v2.models.ConversationVirtualAgentCapabilities;
import com.ultracart.admin.v2.models.ConversationVirtualAgentCapabilitiesResponse;
import com.ultracart.admin.v2.models.ConversationWebchatContext;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatusUpdateRequest;
import com.ultracart.admin.v2.models.ConversationWebchatQueueStatusesResponse;
import com.ultracart.admin.v2.models.ConversationsResponse;
import com.ultracart.admin.v2.models.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationApi {
    private ApiClient apiClient;

    public ConversationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public ConversationApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public ConversationApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAgentProfileKnowledgeBaseDocument
     * @param userId  (required)
     * @param documentUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAgentProfileKnowledgeBaseDocumentCall(Integer userId, String documentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/profiles/{user_id}/knowledge_base/{document_uuid}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "document_uuid" + "\\}", apiClient.escapeString(documentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAgentProfileKnowledgeBaseDocumentValidateBeforeCall(Integer userId, String documentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteAgentProfileKnowledgeBaseDocument(Async)");
        }
        
        // verify the required parameter 'documentUuid' is set
        if (documentUuid == null) {
            throw new ApiException("Missing the required parameter 'documentUuid' when calling deleteAgentProfileKnowledgeBaseDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAgentProfileKnowledgeBaseDocumentCall(userId, documentUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a knowledge base document
     * Delete a knowledge base document 
     * @param userId  (required)
     * @param documentUuid  (required)
     * @return ConversationDeleteKnowledgeBaseDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationDeleteKnowledgeBaseDocumentResponse deleteAgentProfileKnowledgeBaseDocument(Integer userId, String documentUuid) throws ApiException {
        ApiResponse<ConversationDeleteKnowledgeBaseDocumentResponse> resp = deleteAgentProfileKnowledgeBaseDocumentWithHttpInfo(userId, documentUuid);
        return resp.getData();
    }

    /**
     * Delete a knowledge base document
     * Delete a knowledge base document 
     * @param userId  (required)
     * @param documentUuid  (required)
     * @return ApiResponse&lt;ConversationDeleteKnowledgeBaseDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationDeleteKnowledgeBaseDocumentResponse> deleteAgentProfileKnowledgeBaseDocumentWithHttpInfo(Integer userId, String documentUuid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAgentProfileKnowledgeBaseDocumentValidateBeforeCall(userId, documentUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationDeleteKnowledgeBaseDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a knowledge base document (asynchronously)
     * Delete a knowledge base document 
     * @param userId  (required)
     * @param documentUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAgentProfileKnowledgeBaseDocumentAsync(Integer userId, String documentUuid, final ApiCallback<ConversationDeleteKnowledgeBaseDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAgentProfileKnowledgeBaseDocumentValidateBeforeCall(userId, documentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationDeleteKnowledgeBaseDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteConversationCannedMessage
     * @param conversationCannedMessageOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConversationCannedMessageCall(Integer conversationCannedMessageOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/canned_messages/{conversation_canned_message_oid}"
            .replaceAll("\\{" + "conversation_canned_message_oid" + "\\}", apiClient.escapeString(conversationCannedMessageOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConversationCannedMessageValidateBeforeCall(Integer conversationCannedMessageOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationCannedMessageOid' is set
        if (conversationCannedMessageOid == null) {
            throw new ApiException("Missing the required parameter 'conversationCannedMessageOid' when calling deleteConversationCannedMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteConversationCannedMessageCall(conversationCannedMessageOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a conversation canned message
     * Delete a conversation canned message 
     * @param conversationCannedMessageOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteConversationCannedMessage(Integer conversationCannedMessageOid) throws ApiException {
        deleteConversationCannedMessageWithHttpInfo(conversationCannedMessageOid);
    }

    /**
     * Delete a conversation canned message
     * Delete a conversation canned message 
     * @param conversationCannedMessageOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteConversationCannedMessageWithHttpInfo(Integer conversationCannedMessageOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteConversationCannedMessageValidateBeforeCall(conversationCannedMessageOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a conversation canned message (asynchronously)
     * Delete a conversation canned message 
     * @param conversationCannedMessageOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConversationCannedMessageAsync(Integer conversationCannedMessageOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConversationCannedMessageValidateBeforeCall(conversationCannedMessageOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDepartment
     * @param conversationDepartmentOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDepartmentCall(Integer conversationDepartmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/departments/{conversation_department_oid}"
            .replaceAll("\\{" + "conversation_department_oid" + "\\}", apiClient.escapeString(conversationDepartmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDepartmentValidateBeforeCall(Integer conversationDepartmentOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationDepartmentOid' is set
        if (conversationDepartmentOid == null) {
            throw new ApiException("Missing the required parameter 'conversationDepartmentOid' when calling deleteDepartment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDepartmentCall(conversationDepartmentOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a conversation department
     * Delete a conversation department 
     * @param conversationDepartmentOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDepartment(Integer conversationDepartmentOid) throws ApiException {
        deleteDepartmentWithHttpInfo(conversationDepartmentOid);
    }

    /**
     * Delete a conversation department
     * Delete a conversation department 
     * @param conversationDepartmentOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDepartmentWithHttpInfo(Integer conversationDepartmentOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteDepartmentValidateBeforeCall(conversationDepartmentOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a conversation department (asynchronously)
     * Delete a conversation department 
     * @param conversationDepartmentOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDepartmentAsync(Integer conversationDepartmentOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDepartmentValidateBeforeCall(conversationDepartmentOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEngagement
     * @param conversationEngagementOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEngagementCall(Integer conversationEngagementOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
            .replaceAll("\\{" + "conversation_engagement_oid" + "\\}", apiClient.escapeString(conversationEngagementOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEngagementValidateBeforeCall(Integer conversationEngagementOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationEngagementOid' is set
        if (conversationEngagementOid == null) {
            throw new ApiException("Missing the required parameter 'conversationEngagementOid' when calling deleteEngagement(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEngagementCall(conversationEngagementOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a conversation engagement
     * Delete a conversation engagement 
     * @param conversationEngagementOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEngagement(Integer conversationEngagementOid) throws ApiException {
        deleteEngagementWithHttpInfo(conversationEngagementOid);
    }

    /**
     * Delete a conversation engagement
     * Delete a conversation engagement 
     * @param conversationEngagementOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEngagementWithHttpInfo(Integer conversationEngagementOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteEngagementValidateBeforeCall(conversationEngagementOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a conversation engagement (asynchronously)
     * Delete a conversation engagement 
     * @param conversationEngagementOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEngagementAsync(Integer conversationEngagementOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEngagementValidateBeforeCall(conversationEngagementOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePbxAgentVoicemail
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxAgentVoicemailCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}"
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxAgentVoicemailValidateBeforeCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling deletePbxAgentVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxAgentVoicemailCall(recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Agent Voicemail
     * Delete pbx agent Voicemail 
     * @param recordingSid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePbxAgentVoicemail(String recordingSid) throws ApiException {
        deletePbxAgentVoicemailWithHttpInfo(recordingSid);
    }

    /**
     * Delete Agent Voicemail
     * Delete pbx agent Voicemail 
     * @param recordingSid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePbxAgentVoicemailWithHttpInfo(String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxAgentVoicemailValidateBeforeCall(recordingSid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Agent Voicemail (asynchronously)
     * Delete pbx agent Voicemail 
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxAgentVoicemailAsync(String recordingSid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxAgentVoicemailValidateBeforeCall(recordingSid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePbxAudio
     * @param conversationPbxAudioUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxAudioCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
            .replaceAll("\\{" + "conversationPbxAudioUuid" + "\\}", apiClient.escapeString(conversationPbxAudioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxAudioValidateBeforeCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAudioUuid' is set
        if (conversationPbxAudioUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAudioUuid' when calling deletePbxAudio(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxAudioCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx audio
     * Delete a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @return ConversationPbxAudioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioResponse deletePbxAudio(String conversationPbxAudioUuid) throws ApiException {
        ApiResponse<ConversationPbxAudioResponse> resp = deletePbxAudioWithHttpInfo(conversationPbxAudioUuid);
        return resp.getData();
    }

    /**
     * Delete pbx audio
     * Delete a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @return ApiResponse&lt;ConversationPbxAudioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioResponse> deletePbxAudioWithHttpInfo(String conversationPbxAudioUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxAudioValidateBeforeCall(conversationPbxAudioUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx audio (asynchronously)
     * Delete a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxAudioAsync(String conversationPbxAudioUuid, final ApiCallback<ConversationPbxAudioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxAudioValidateBeforeCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePbxMenu
     * @param conversationPbxMenuUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxMenuCall(String conversationPbxMenuUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
            .replaceAll("\\{" + "conversationPbxMenuUuid" + "\\}", apiClient.escapeString(conversationPbxMenuUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxMenuValidateBeforeCall(String conversationPbxMenuUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxMenuUuid' is set
        if (conversationPbxMenuUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxMenuUuid' when calling deletePbxMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxMenuCall(conversationPbxMenuUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx menu
     * Delete a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @return ConversationPbxMenuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxMenuResponse deletePbxMenu(String conversationPbxMenuUuid) throws ApiException {
        ApiResponse<ConversationPbxMenuResponse> resp = deletePbxMenuWithHttpInfo(conversationPbxMenuUuid);
        return resp.getData();
    }

    /**
     * Delete pbx menu
     * Delete a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @return ApiResponse&lt;ConversationPbxMenuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxMenuResponse> deletePbxMenuWithHttpInfo(String conversationPbxMenuUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxMenuValidateBeforeCall(conversationPbxMenuUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx menu (asynchronously)
     * Delete a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxMenuAsync(String conversationPbxMenuUuid, final ApiCallback<ConversationPbxMenuResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxMenuValidateBeforeCall(conversationPbxMenuUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePbxQueue
     * @param conversationPbxQueueUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxQueueCall(String conversationPbxQueueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
            .replaceAll("\\{" + "conversationPbxQueueUuid" + "\\}", apiClient.escapeString(conversationPbxQueueUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxQueueValidateBeforeCall(String conversationPbxQueueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxQueueUuid' is set
        if (conversationPbxQueueUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxQueueUuid' when calling deletePbxQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxQueueCall(conversationPbxQueueUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx queue
     * Delete a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @return ConversationPbxQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxQueueResponse deletePbxQueue(String conversationPbxQueueUuid) throws ApiException {
        ApiResponse<ConversationPbxQueueResponse> resp = deletePbxQueueWithHttpInfo(conversationPbxQueueUuid);
        return resp.getData();
    }

    /**
     * Delete pbx queue
     * Delete a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @return ApiResponse&lt;ConversationPbxQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxQueueResponse> deletePbxQueueWithHttpInfo(String conversationPbxQueueUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxQueueValidateBeforeCall(conversationPbxQueueUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx queue (asynchronously)
     * Delete a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxQueueAsync(String conversationPbxQueueUuid, final ApiCallback<ConversationPbxQueueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxQueueValidateBeforeCall(conversationPbxQueueUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePbxQueueVoicemail
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxQueueVoicemailCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}"
            .replaceAll("\\{" + "queue_uuid" + "\\}", apiClient.escapeString(queueUuid.toString()))
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxQueueVoicemailValidateBeforeCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueUuid' is set
        if (queueUuid == null) {
            throw new ApiException("Missing the required parameter 'queueUuid' when calling deletePbxQueueVoicemail(Async)");
        }
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling deletePbxQueueVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxQueueVoicemailCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Queue Voicemail
     * Delete pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePbxQueueVoicemail(String queueUuid, String recordingSid) throws ApiException {
        deletePbxQueueVoicemailWithHttpInfo(queueUuid, recordingSid);
    }

    /**
     * Delete Queue Voicemail
     * Delete pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePbxQueueVoicemailWithHttpInfo(String queueUuid, String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Queue Voicemail (asynchronously)
     * Delete pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxQueueVoicemailAsync(String queueUuid, String recordingSid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePbxTimeBased
     * @param conversationPbxTimeBasedUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxTimeBasedCall(String conversationPbxTimeBasedUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
            .replaceAll("\\{" + "conversationPbxTimeBasedUuid" + "\\}", apiClient.escapeString(conversationPbxTimeBasedUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxTimeBasedValidateBeforeCall(String conversationPbxTimeBasedUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeBasedUuid' is set
        if (conversationPbxTimeBasedUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling deletePbxTimeBased(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxTimeBasedCall(conversationPbxTimeBasedUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx timeBased
     * Delete a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @return ConversationPbxTimeBasedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeBasedResponse deletePbxTimeBased(String conversationPbxTimeBasedUuid) throws ApiException {
        ApiResponse<ConversationPbxTimeBasedResponse> resp = deletePbxTimeBasedWithHttpInfo(conversationPbxTimeBasedUuid);
        return resp.getData();
    }

    /**
     * Delete pbx timeBased
     * Delete a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @return ApiResponse&lt;ConversationPbxTimeBasedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeBasedResponse> deletePbxTimeBasedWithHttpInfo(String conversationPbxTimeBasedUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx timeBased (asynchronously)
     * Delete a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxTimeBasedAsync(String conversationPbxTimeBasedUuid, final ApiCallback<ConversationPbxTimeBasedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePbxTimeRange
     * @param conversationPbxTimeRangeUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxTimeRangeCall(String conversationPbxTimeRangeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
            .replaceAll("\\{" + "conversationPbxTimeRangeUuid" + "\\}", apiClient.escapeString(conversationPbxTimeRangeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxTimeRangeValidateBeforeCall(String conversationPbxTimeRangeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeRangeUuid' is set
        if (conversationPbxTimeRangeUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling deletePbxTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxTimeRangeCall(conversationPbxTimeRangeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx timeRange
     * Delete a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @return ConversationPbxTimeRangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeRangeResponse deletePbxTimeRange(String conversationPbxTimeRangeUuid) throws ApiException {
        ApiResponse<ConversationPbxTimeRangeResponse> resp = deletePbxTimeRangeWithHttpInfo(conversationPbxTimeRangeUuid);
        return resp.getData();
    }

    /**
     * Delete pbx timeRange
     * Delete a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @return ApiResponse&lt;ConversationPbxTimeRangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeRangeResponse> deletePbxTimeRangeWithHttpInfo(String conversationPbxTimeRangeUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx timeRange (asynchronously)
     * Delete a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxTimeRangeAsync(String conversationPbxTimeRangeUuid, final ApiCallback<ConversationPbxTimeRangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePbxVoicemailMailbox
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePbxVoicemailMailboxCall(String conversationPbxVoicemailMailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
            .replaceAll("\\{" + "conversationPbxVoicemailMailboxUuid" + "\\}", apiClient.escapeString(conversationPbxVoicemailMailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePbxVoicemailMailboxValidateBeforeCall(String conversationPbxVoicemailMailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
        if (conversationPbxVoicemailMailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling deletePbxVoicemailMailbox(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePbxVoicemailMailboxCall(conversationPbxVoicemailMailboxUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete pbx voicemailMailbox
     * Delete a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @return ConversationPbxVoicemailMailboxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMailboxResponse deletePbxVoicemailMailbox(String conversationPbxVoicemailMailboxUuid) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMailboxResponse> resp = deletePbxVoicemailMailboxWithHttpInfo(conversationPbxVoicemailMailboxUuid);
        return resp.getData();
    }

    /**
     * Delete pbx voicemailMailbox
     * Delete a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMailboxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMailboxResponse> deletePbxVoicemailMailboxWithHttpInfo(String conversationPbxVoicemailMailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = deletePbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete pbx voicemailMailbox (asynchronously)
     * Delete a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePbxVoicemailMailboxAsync(String conversationPbxVoicemailMailboxUuid, final ApiCallback<ConversationPbxVoicemailMailboxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAgentKeepAlive
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentKeepAliveCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/keepalive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentKeepAliveValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAgentKeepAliveCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Agent keep alive
     * Called periodically by the conversation API to keep the session alive. 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAgentKeepAlive() throws ApiException {
        getAgentKeepAliveWithHttpInfo();
    }

    /**
     * Agent keep alive
     * Called periodically by the conversation API to keep the session alive. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAgentKeepAliveWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAgentKeepAliveValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Agent keep alive (asynchronously)
     * Called periodically by the conversation API to keep the session alive. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentKeepAliveAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentKeepAliveValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAgentProfile
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentProfileCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentProfileValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAgentProfileCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get agent profile
     * Retrieve the agents profile 
     * @return ConversationAgentProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationAgentProfileResponse getAgentProfile() throws ApiException {
        ApiResponse<ConversationAgentProfileResponse> resp = getAgentProfileWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get agent profile
     * Retrieve the agents profile 
     * @return ApiResponse&lt;ConversationAgentProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationAgentProfileResponse> getAgentProfileWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAgentProfileValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationAgentProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get agent profile (asynchronously)
     * Retrieve the agents profile 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentProfileAsync(final ApiCallback<ConversationAgentProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentProfileValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationAgentProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAgentProfileKnowledgeBase
     * @param userId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentProfileKnowledgeBaseCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/profiles/{user_id}/knowledge_base"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentProfileKnowledgeBaseValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAgentProfileKnowledgeBase(Async)");
        }
        

        com.squareup.okhttp.Call call = getAgentProfileKnowledgeBaseCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the list of knowledge base documents associated with this agent profile
     * Retrieve knowledge base documents 
     * @param userId  (required)
     * @return ConversationKnowledgeBaseDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationKnowledgeBaseDocumentsResponse getAgentProfileKnowledgeBase(Integer userId) throws ApiException {
        ApiResponse<ConversationKnowledgeBaseDocumentsResponse> resp = getAgentProfileKnowledgeBaseWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get the list of knowledge base documents associated with this agent profile
     * Retrieve knowledge base documents 
     * @param userId  (required)
     * @return ApiResponse&lt;ConversationKnowledgeBaseDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationKnowledgeBaseDocumentsResponse> getAgentProfileKnowledgeBaseWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = getAgentProfileKnowledgeBaseValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<ConversationKnowledgeBaseDocumentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of knowledge base documents associated with this agent profile (asynchronously)
     * Retrieve knowledge base documents 
     * @param userId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentProfileKnowledgeBaseAsync(Integer userId, final ApiCallback<ConversationKnowledgeBaseDocumentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentProfileKnowledgeBaseValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationKnowledgeBaseDocumentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAgentProfiles
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentProfilesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentProfilesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAgentProfilesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get agent profiles
     * Retrieve the agents profile 
     * @return ConversationAgentProfilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationAgentProfilesResponse getAgentProfiles() throws ApiException {
        ApiResponse<ConversationAgentProfilesResponse> resp = getAgentProfilesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get agent profiles
     * Retrieve the agents profile 
     * @return ApiResponse&lt;ConversationAgentProfilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationAgentProfilesResponse> getAgentProfilesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAgentProfilesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationAgentProfilesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get agent profiles (asynchronously)
     * Retrieve the agents profile 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentProfilesAsync(final ApiCallback<ConversationAgentProfilesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentProfilesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationAgentProfilesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAgentWebsocketAuthorization
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAgentWebsocketAuthorizationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAgentWebsocketAuthorizationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAgentWebsocketAuthorizationCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get agent websocket authorization
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @return ConversationAgentAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationAgentAuthResponse getAgentWebsocketAuthorization() throws ApiException {
        ApiResponse<ConversationAgentAuthResponse> resp = getAgentWebsocketAuthorizationWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get agent websocket authorization
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @return ApiResponse&lt;ConversationAgentAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationAgentAuthResponse> getAgentWebsocketAuthorizationWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAgentWebsocketAuthorizationValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationAgentAuthResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get agent websocket authorization (asynchronously)
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAgentWebsocketAuthorizationAsync(final ApiCallback<ConversationAgentAuthResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAgentWebsocketAuthorizationValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationAgentAuthResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversation
     * @param conversationUuid  (required)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationCall(String conversationUuid, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationValidateBeforeCall(String conversationUuid, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling getConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationCall(conversationUuid, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a conversation
     * Retrieve a conversation including the participants and messages 
     * @param conversationUuid  (required)
     * @param limit  (optional)
     * @return ConversationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationResponse getConversation(String conversationUuid, Integer limit) throws ApiException {
        ApiResponse<ConversationResponse> resp = getConversationWithHttpInfo(conversationUuid, limit);
        return resp.getData();
    }

    /**
     * Retrieve a conversation
     * Retrieve a conversation including the participants and messages 
     * @param conversationUuid  (required)
     * @param limit  (optional)
     * @return ApiResponse&lt;ConversationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationResponse> getConversationWithHttpInfo(String conversationUuid, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getConversationValidateBeforeCall(conversationUuid, limit, null, null);
        Type localVarReturnType = new TypeToken<ConversationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a conversation (asynchronously)
     * Retrieve a conversation including the participants and messages 
     * @param conversationUuid  (required)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationAsync(String conversationUuid, Integer limit, final ApiCallback<ConversationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationValidateBeforeCall(conversationUuid, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationCannedMessages
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationCannedMessagesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/canned_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationCannedMessagesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationCannedMessagesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of canned messages ordered by short_code
     * Retrieve a list of canned messages ordered by short_code 
     * @return ConversationCannedMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationCannedMessagesResponse getConversationCannedMessages() throws ApiException {
        ApiResponse<ConversationCannedMessagesResponse> resp = getConversationCannedMessagesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of canned messages ordered by short_code
     * Retrieve a list of canned messages ordered by short_code 
     * @return ApiResponse&lt;ConversationCannedMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationCannedMessagesResponse> getConversationCannedMessagesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationCannedMessagesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationCannedMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of canned messages ordered by short_code (asynchronously)
     * Retrieve a list of canned messages ordered by short_code 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationCannedMessagesAsync(final ApiCallback<ConversationCannedMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationCannedMessagesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationCannedMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationContext
     * @param conversationUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationContextCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/context"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationContextValidateBeforeCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling getConversationContext(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationContextCall(conversationUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a webchat conversation context
     * Get a webchat conversation context 
     * @param conversationUuid  (required)
     * @return ConversationWebchatContext
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationWebchatContext getConversationContext(String conversationUuid) throws ApiException {
        ApiResponse<ConversationWebchatContext> resp = getConversationContextWithHttpInfo(conversationUuid);
        return resp.getData();
    }

    /**
     * Get a webchat conversation context
     * Get a webchat conversation context 
     * @param conversationUuid  (required)
     * @return ApiResponse&lt;ConversationWebchatContext&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationWebchatContext> getConversationContextWithHttpInfo(String conversationUuid) throws ApiException {
        com.squareup.okhttp.Call call = getConversationContextValidateBeforeCall(conversationUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationWebchatContext>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a webchat conversation context (asynchronously)
     * Get a webchat conversation context 
     * @param conversationUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationContextAsync(String conversationUuid, final ApiCallback<ConversationWebchatContext> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationContextValidateBeforeCall(conversationUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationWebchatContext>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationDepartmentMemberList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationDepartmentMemberListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/department_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationDepartmentMemberListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationDepartmentMemberListCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of possible department members
     * Retrieve a list of possible department members 
     * @return ConversationDepartmentMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationDepartmentMembersResponse getConversationDepartmentMemberList() throws ApiException {
        ApiResponse<ConversationDepartmentMembersResponse> resp = getConversationDepartmentMemberListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of possible department members
     * Retrieve a list of possible department members 
     * @return ApiResponse&lt;ConversationDepartmentMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationDepartmentMembersResponse> getConversationDepartmentMemberListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationDepartmentMemberListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationDepartmentMembersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of possible department members (asynchronously)
     * Retrieve a list of possible department members 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationDepartmentMemberListAsync(final ApiCallback<ConversationDepartmentMembersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationDepartmentMemberListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationDepartmentMembersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationDepartments
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationDepartmentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationDepartmentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationDepartmentsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of departments ordered by name
     * Retrieve a list of departments ordered by name 
     * @return ConversationDepartmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationDepartmentsResponse getConversationDepartments() throws ApiException {
        ApiResponse<ConversationDepartmentsResponse> resp = getConversationDepartmentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of departments ordered by name
     * Retrieve a list of departments ordered by name 
     * @return ApiResponse&lt;ConversationDepartmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationDepartmentsResponse> getConversationDepartmentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationDepartmentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationDepartmentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of departments ordered by name (asynchronously)
     * Retrieve a list of departments ordered by name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationDepartmentsAsync(final ApiCallback<ConversationDepartmentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationDepartmentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationDepartmentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationEngagement
     * @param conversationEngagementOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationEngagementCall(Integer conversationEngagementOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
            .replaceAll("\\{" + "conversation_engagement_oid" + "\\}", apiClient.escapeString(conversationEngagementOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationEngagementValidateBeforeCall(Integer conversationEngagementOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationEngagementOid' is set
        if (conversationEngagementOid == null) {
            throw new ApiException("Missing the required parameter 'conversationEngagementOid' when calling getConversationEngagement(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationEngagementCall(conversationEngagementOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an engagement
     * Retrieve an engagement 
     * @param conversationEngagementOid  (required)
     * @return ConversationEngagementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationEngagementResponse getConversationEngagement(Integer conversationEngagementOid) throws ApiException {
        ApiResponse<ConversationEngagementResponse> resp = getConversationEngagementWithHttpInfo(conversationEngagementOid);
        return resp.getData();
    }

    /**
     * Retrieve an engagement
     * Retrieve an engagement 
     * @param conversationEngagementOid  (required)
     * @return ApiResponse&lt;ConversationEngagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationEngagementResponse> getConversationEngagementWithHttpInfo(Integer conversationEngagementOid) throws ApiException {
        com.squareup.okhttp.Call call = getConversationEngagementValidateBeforeCall(conversationEngagementOid, null, null);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an engagement (asynchronously)
     * Retrieve an engagement 
     * @param conversationEngagementOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationEngagementAsync(Integer conversationEngagementOid, final ApiCallback<ConversationEngagementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationEngagementValidateBeforeCall(conversationEngagementOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationEngagements
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationEngagementsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/engagements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationEngagementsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationEngagementsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of engagements ordered by name
     * Retrieve a list of engagements ordered by name 
     * @return ConversationEngagementsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationEngagementsResponse getConversationEngagements() throws ApiException {
        ApiResponse<ConversationEngagementsResponse> resp = getConversationEngagementsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a list of engagements ordered by name
     * Retrieve a list of engagements ordered by name 
     * @return ApiResponse&lt;ConversationEngagementsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationEngagementsResponse> getConversationEngagementsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationEngagementsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationEngagementsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of engagements ordered by name (asynchronously)
     * Retrieve a list of engagements ordered by name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationEngagementsAsync(final ApiCallback<ConversationEngagementsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationEngagementsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationEngagementsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationKnowledgeBaseDocumentUploadUrl
     * @param userId  (required)
     * @param extension  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationKnowledgeBaseDocumentUploadUrlCall(Integer userId, String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/agent/profiles/{user_id}/knowledge_base/upload_url/{extension}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "extension" + "\\}", apiClient.escapeString(extension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationKnowledgeBaseDocumentUploadUrlValidateBeforeCall(Integer userId, String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getConversationKnowledgeBaseDocumentUploadUrl(Async)");
        }
        
        // verify the required parameter 'extension' is set
        if (extension == null) {
            throw new ApiException("Missing the required parameter 'extension' when calling getConversationKnowledgeBaseDocumentUploadUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationKnowledgeBaseDocumentUploadUrlCall(userId, extension, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a pre-signed conversation knowledge base document upload URL
     * Get a pre-signed conversation knowledge base document upload URL 
     * @param userId  (required)
     * @param extension  (required)
     * @return ConversationKnowledgeBaseDocumentUploadUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationKnowledgeBaseDocumentUploadUrlResponse getConversationKnowledgeBaseDocumentUploadUrl(Integer userId, String extension) throws ApiException {
        ApiResponse<ConversationKnowledgeBaseDocumentUploadUrlResponse> resp = getConversationKnowledgeBaseDocumentUploadUrlWithHttpInfo(userId, extension);
        return resp.getData();
    }

    /**
     * Get a pre-signed conversation knowledge base document upload URL
     * Get a pre-signed conversation knowledge base document upload URL 
     * @param userId  (required)
     * @param extension  (required)
     * @return ApiResponse&lt;ConversationKnowledgeBaseDocumentUploadUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationKnowledgeBaseDocumentUploadUrlResponse> getConversationKnowledgeBaseDocumentUploadUrlWithHttpInfo(Integer userId, String extension) throws ApiException {
        com.squareup.okhttp.Call call = getConversationKnowledgeBaseDocumentUploadUrlValidateBeforeCall(userId, extension, null, null);
        Type localVarReturnType = new TypeToken<ConversationKnowledgeBaseDocumentUploadUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a pre-signed conversation knowledge base document upload URL (asynchronously)
     * Get a pre-signed conversation knowledge base document upload URL 
     * @param userId  (required)
     * @param extension  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationKnowledgeBaseDocumentUploadUrlAsync(Integer userId, String extension, final ApiCallback<ConversationKnowledgeBaseDocumentUploadUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationKnowledgeBaseDocumentUploadUrlValidateBeforeCall(userId, extension, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationKnowledgeBaseDocumentUploadUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationMessages
     * @param conversationUuid  (required)
     * @param since  (required)
     * @param limit  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationMessagesCall(String conversationUuid, Long since, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/messages/{since}"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()))
            .replaceAll("\\{" + "since" + "\\}", apiClient.escapeString(since.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationMessagesValidateBeforeCall(String conversationUuid, Long since, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling getConversationMessages(Async)");
        }
        
        // verify the required parameter 'since' is set
        if (since == null) {
            throw new ApiException("Missing the required parameter 'since' when calling getConversationMessages(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationMessagesCall(conversationUuid, since, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve conversation messages
     * Retrieve conversation messages since a particular time 
     * @param conversationUuid  (required)
     * @param since  (required)
     * @param limit  (optional)
     * @return ConversationMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationMessagesResponse getConversationMessages(String conversationUuid, Long since, Integer limit) throws ApiException {
        ApiResponse<ConversationMessagesResponse> resp = getConversationMessagesWithHttpInfo(conversationUuid, since, limit);
        return resp.getData();
    }

    /**
     * Retrieve conversation messages
     * Retrieve conversation messages since a particular time 
     * @param conversationUuid  (required)
     * @param since  (required)
     * @param limit  (optional)
     * @return ApiResponse&lt;ConversationMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationMessagesResponse> getConversationMessagesWithHttpInfo(String conversationUuid, Long since, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getConversationMessagesValidateBeforeCall(conversationUuid, since, limit, null, null);
        Type localVarReturnType = new TypeToken<ConversationMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve conversation messages (asynchronously)
     * Retrieve conversation messages since a particular time 
     * @param conversationUuid  (required)
     * @param since  (required)
     * @param limit  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationMessagesAsync(String conversationUuid, Long since, Integer limit, final ApiCallback<ConversationMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationMessagesValidateBeforeCall(conversationUuid, since, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationMultimediaUploadUrl
     * @param extension  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationMultimediaUploadUrlCall(String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/upload_url/{extension}"
            .replaceAll("\\{" + "extension" + "\\}", apiClient.escapeString(extension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationMultimediaUploadUrlValidateBeforeCall(String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'extension' is set
        if (extension == null) {
            throw new ApiException("Missing the required parameter 'extension' when calling getConversationMultimediaUploadUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationMultimediaUploadUrlCall(extension, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a presigned conversation multimedia upload URL
     * Get a presigned conversation multimedia upload URL 
     * @param extension  (required)
     * @return ConversationMultimediaUploadUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationMultimediaUploadUrlResponse getConversationMultimediaUploadUrl(String extension) throws ApiException {
        ApiResponse<ConversationMultimediaUploadUrlResponse> resp = getConversationMultimediaUploadUrlWithHttpInfo(extension);
        return resp.getData();
    }

    /**
     * Get a presigned conversation multimedia upload URL
     * Get a presigned conversation multimedia upload URL 
     * @param extension  (required)
     * @return ApiResponse&lt;ConversationMultimediaUploadUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationMultimediaUploadUrlResponse> getConversationMultimediaUploadUrlWithHttpInfo(String extension) throws ApiException {
        com.squareup.okhttp.Call call = getConversationMultimediaUploadUrlValidateBeforeCall(extension, null, null);
        Type localVarReturnType = new TypeToken<ConversationMultimediaUploadUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a presigned conversation multimedia upload URL (asynchronously)
     * Get a presigned conversation multimedia upload URL 
     * @param extension  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationMultimediaUploadUrlAsync(String extension, final ApiCallback<ConversationMultimediaUploadUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationMultimediaUploadUrlValidateBeforeCall(extension, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationMultimediaUploadUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationPbxAudioUploadUrl
     * @param extension  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationPbxAudioUploadUrlCall(String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio/upload_url/{extension}"
            .replaceAll("\\{" + "extension" + "\\}", apiClient.escapeString(extension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationPbxAudioUploadUrlValidateBeforeCall(String extension, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'extension' is set
        if (extension == null) {
            throw new ApiException("Missing the required parameter 'extension' when calling getConversationPbxAudioUploadUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationPbxAudioUploadUrlCall(extension, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a pre-signed conversation multimedia upload URL
     * Get a pre-signed conversation multimedia upload URL 
     * @param extension  (required)
     * @return ConversationPbxAudioUploadUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioUploadUrlResponse getConversationPbxAudioUploadUrl(String extension) throws ApiException {
        ApiResponse<ConversationPbxAudioUploadUrlResponse> resp = getConversationPbxAudioUploadUrlWithHttpInfo(extension);
        return resp.getData();
    }

    /**
     * Get a pre-signed conversation multimedia upload URL
     * Get a pre-signed conversation multimedia upload URL 
     * @param extension  (required)
     * @return ApiResponse&lt;ConversationPbxAudioUploadUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioUploadUrlResponse> getConversationPbxAudioUploadUrlWithHttpInfo(String extension) throws ApiException {
        com.squareup.okhttp.Call call = getConversationPbxAudioUploadUrlValidateBeforeCall(extension, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioUploadUrlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a pre-signed conversation multimedia upload URL (asynchronously)
     * Get a pre-signed conversation multimedia upload URL 
     * @param extension  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationPbxAudioUploadUrlAsync(String extension, final ApiCallback<ConversationPbxAudioUploadUrlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationPbxAudioUploadUrlValidateBeforeCall(extension, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioUploadUrlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationPbxCustomerSnapshot
     * @param pbxCustomerSnapshotRequest Conversation pbx customer snapshot request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationPbxCustomerSnapshotCall(ConversationPbxCustomerSnapshotRequest pbxCustomerSnapshotRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxCustomerSnapshotRequest;

        // create path and map variables
        String localVarPath = "/conversation/pbx/customer_snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationPbxCustomerSnapshotValidateBeforeCall(ConversationPbxCustomerSnapshotRequest pbxCustomerSnapshotRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxCustomerSnapshotRequest' is set
        if (pbxCustomerSnapshotRequest == null) {
            throw new ApiException("Missing the required parameter 'pbxCustomerSnapshotRequest' when calling getConversationPbxCustomerSnapshot(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationPbxCustomerSnapshotCall(pbxCustomerSnapshotRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get orders and customer information for a phone number
     * Retrieves all the orders, auto orders, and customer profile for a given phone number 
     * @param pbxCustomerSnapshotRequest Conversation pbx customer snapshot request (required)
     * @return ConversationPbxCustomerSnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxCustomerSnapshotResponse getConversationPbxCustomerSnapshot(ConversationPbxCustomerSnapshotRequest pbxCustomerSnapshotRequest) throws ApiException {
        ApiResponse<ConversationPbxCustomerSnapshotResponse> resp = getConversationPbxCustomerSnapshotWithHttpInfo(pbxCustomerSnapshotRequest);
        return resp.getData();
    }

    /**
     * Get orders and customer information for a phone number
     * Retrieves all the orders, auto orders, and customer profile for a given phone number 
     * @param pbxCustomerSnapshotRequest Conversation pbx customer snapshot request (required)
     * @return ApiResponse&lt;ConversationPbxCustomerSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxCustomerSnapshotResponse> getConversationPbxCustomerSnapshotWithHttpInfo(ConversationPbxCustomerSnapshotRequest pbxCustomerSnapshotRequest) throws ApiException {
        com.squareup.okhttp.Call call = getConversationPbxCustomerSnapshotValidateBeforeCall(pbxCustomerSnapshotRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxCustomerSnapshotResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get orders and customer information for a phone number (asynchronously)
     * Retrieves all the orders, auto orders, and customer profile for a given phone number 
     * @param pbxCustomerSnapshotRequest Conversation pbx customer snapshot request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationPbxCustomerSnapshotAsync(ConversationPbxCustomerSnapshotRequest pbxCustomerSnapshotRequest, final ApiCallback<ConversationPbxCustomerSnapshotResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationPbxCustomerSnapshotValidateBeforeCall(pbxCustomerSnapshotRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxCustomerSnapshotResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationPermissions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationPermissionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationPermissionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationPermissionsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve conversation permissions
     * Retrieve conversation permissions 
     * @return ConversationPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPermissionsResponse getConversationPermissions() throws ApiException {
        ApiResponse<ConversationPermissionsResponse> resp = getConversationPermissionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve conversation permissions
     * Retrieve conversation permissions 
     * @return ApiResponse&lt;ConversationPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPermissionsResponse> getConversationPermissionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationPermissionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPermissionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve conversation permissions (asynchronously)
     * Retrieve conversation permissions 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationPermissionsAsync(final ApiCallback<ConversationPermissionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationPermissionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPermissionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationWebchatQueueStatuses
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationWebchatQueueStatusesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/queues/statuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationWebchatQueueStatusesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationWebchatQueueStatusesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a conversation webchat queue statuses
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @return ConversationWebchatQueueStatusesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationWebchatQueueStatusesResponse getConversationWebchatQueueStatuses() throws ApiException {
        ApiResponse<ConversationWebchatQueueStatusesResponse> resp = getConversationWebchatQueueStatusesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve a conversation webchat queue statuses
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @return ApiResponse&lt;ConversationWebchatQueueStatusesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationWebchatQueueStatusesResponse> getConversationWebchatQueueStatusesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getConversationWebchatQueueStatusesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationWebchatQueueStatusesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a conversation webchat queue statuses (asynchronously)
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationWebchatQueueStatusesAsync(final ApiCallback<ConversationWebchatQueueStatusesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationWebchatQueueStatusesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationWebchatQueueStatusesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversations
     * @param medium  (optional)
     * @param before  (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationsCall(String medium, String before, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (medium != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("medium", medium));
        if (before != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationsValidateBeforeCall(String medium, String before, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConversationsCall(medium, before, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of conversation summaries newest to oldest
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @param medium  (optional)
     * @param before  (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @return ConversationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationsResponse getConversations(String medium, String before, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ConversationsResponse> resp = getConversationsWithHttpInfo(medium, before, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve a list of conversation summaries newest to oldest
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @param medium  (optional)
     * @param before  (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @return ApiResponse&lt;ConversationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationsResponse> getConversationsWithHttpInfo(String medium, String before, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getConversationsValidateBeforeCall(medium, before, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<ConversationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of conversation summaries newest to oldest (asynchronously)
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @param medium  (optional)
     * @param before  (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationsAsync(String medium, String before, Integer limit, Integer offset, final ApiCallback<ConversationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationsValidateBeforeCall(medium, before, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationsAutocomplete
     * @param autocompleteRequest Autocomplete Request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationsAutocompleteCall(ConversationAutocompleteRequest autocompleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autocompleteRequest;

        // create path and map variables
        String localVarPath = "/conversation/conversations/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationsAutocompleteValidateBeforeCall(ConversationAutocompleteRequest autocompleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autocompleteRequest' is set
        if (autocompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'autocompleteRequest' when calling getConversationsAutocomplete(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationsAutocompleteCall(autocompleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a list of matching terms for a search field
     * Retrieve a list of matching terms for a search field 
     * @param autocompleteRequest Autocomplete Request (required)
     * @return ConversationAutocompleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationAutocompleteResponse getConversationsAutocomplete(ConversationAutocompleteRequest autocompleteRequest) throws ApiException {
        ApiResponse<ConversationAutocompleteResponse> resp = getConversationsAutocompleteWithHttpInfo(autocompleteRequest);
        return resp.getData();
    }

    /**
     * Retrieve a list of matching terms for a search field
     * Retrieve a list of matching terms for a search field 
     * @param autocompleteRequest Autocomplete Request (required)
     * @return ApiResponse&lt;ConversationAutocompleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationAutocompleteResponse> getConversationsAutocompleteWithHttpInfo(ConversationAutocompleteRequest autocompleteRequest) throws ApiException {
        com.squareup.okhttp.Call call = getConversationsAutocompleteValidateBeforeCall(autocompleteRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationAutocompleteResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of matching terms for a search field (asynchronously)
     * Retrieve a list of matching terms for a search field 
     * @param autocompleteRequest Autocomplete Request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationsAutocompleteAsync(ConversationAutocompleteRequest autocompleteRequest, final ApiCallback<ConversationAutocompleteResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationsAutocompleteValidateBeforeCall(autocompleteRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationAutocompleteResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConversationsSearch
     * @param searchRequest Search Request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConversationsSearchCall(ConversationSearchRequest searchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/conversation/conversations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConversationsSearchValidateBeforeCall(ConversationSearchRequest searchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling getConversationsSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = getConversationsSearchCall(searchRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search conversations
     * Search conversations 
     * @param searchRequest Search Request (required)
     * @return ConversationSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationSearchResponse getConversationsSearch(ConversationSearchRequest searchRequest) throws ApiException {
        ApiResponse<ConversationSearchResponse> resp = getConversationsSearchWithHttpInfo(searchRequest);
        return resp.getData();
    }

    /**
     * Search conversations
     * Search conversations 
     * @param searchRequest Search Request (required)
     * @return ApiResponse&lt;ConversationSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationSearchResponse> getConversationsSearchWithHttpInfo(ConversationSearchRequest searchRequest) throws ApiException {
        com.squareup.okhttp.Call call = getConversationsSearchValidateBeforeCall(searchRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search conversations (asynchronously)
     * Search conversations 
     * @param searchRequest Search Request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConversationsSearchAsync(ConversationSearchRequest searchRequest, final ApiCallback<ConversationSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConversationsSearchValidateBeforeCall(searchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocationsForEngagement
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationsForEngagementCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationsForEngagementValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLocationsForEngagementCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get location data for engagement configuration
     * Get location data for engagement configuration 
     * @return ConversationLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationLocationsResponse getLocationsForEngagement() throws ApiException {
        ApiResponse<ConversationLocationsResponse> resp = getLocationsForEngagementWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get location data for engagement configuration
     * Get location data for engagement configuration 
     * @return ApiResponse&lt;ConversationLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationLocationsResponse> getLocationsForEngagementWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getLocationsForEngagementValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationLocationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get location data for engagement configuration (asynchronously)
     * Get location data for engagement configuration 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationsForEngagementAsync(final ApiCallback<ConversationLocationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLocationsForEngagementValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationLocationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAgent
     * @param conversationPbxAgentUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentCall(String conversationPbxAgentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/{conversationPbxAgentUuid}"
            .replaceAll("\\{" + "conversationPbxAgentUuid" + "\\}", apiClient.escapeString(conversationPbxAgentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAgentValidateBeforeCall(String conversationPbxAgentUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAgentUuid' is set
        if (conversationPbxAgentUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAgentUuid' when calling getPbxAgent(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxAgentCall(conversationPbxAgentUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx agent
     * Retrieve a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @return ConversationPbxAgentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAgentResponse getPbxAgent(String conversationPbxAgentUuid) throws ApiException {
        ApiResponse<ConversationPbxAgentResponse> resp = getPbxAgentWithHttpInfo(conversationPbxAgentUuid);
        return resp.getData();
    }

    /**
     * Get pbx agent
     * Retrieve a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @return ApiResponse&lt;ConversationPbxAgentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAgentResponse> getPbxAgentWithHttpInfo(String conversationPbxAgentUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxAgentValidateBeforeCall(conversationPbxAgentUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx agent (asynchronously)
     * Retrieve a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentAsync(String conversationPbxAgentUuid, final ApiCallback<ConversationPbxAgentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAgentValidateBeforeCall(conversationPbxAgentUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAgentVoicemail
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentVoicemailCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}"
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAgentVoicemailValidateBeforeCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling getPbxAgentVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxAgentVoicemailCall(recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Agent Voicemail
     * Retrieve pbx agent Voicemail 
     * @param recordingSid  (required)
     * @return ConversationPbxVoicemailMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMessageResponse getPbxAgentVoicemail(String recordingSid) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMessageResponse> resp = getPbxAgentVoicemailWithHttpInfo(recordingSid);
        return resp.getData();
    }

    /**
     * Get Agent Voicemail
     * Retrieve pbx agent Voicemail 
     * @param recordingSid  (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMessageResponse> getPbxAgentVoicemailWithHttpInfo(String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxAgentVoicemailValidateBeforeCall(recordingSid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Agent Voicemail (asynchronously)
     * Retrieve pbx agent Voicemail 
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentVoicemailAsync(String recordingSid, final ApiCallback<ConversationPbxVoicemailMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAgentVoicemailValidateBeforeCall(recordingSid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAgentVoicemails
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentVoicemailsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/voicemails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAgentVoicemailsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxAgentVoicemailsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Agent Voicemails
     * Retrieve pbx agent Voicemails 
     * @return ConversationPbxVoicemailMessageSummariesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMessageSummariesResponse getPbxAgentVoicemails() throws ApiException {
        ApiResponse<ConversationPbxVoicemailMessageSummariesResponse> resp = getPbxAgentVoicemailsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Agent Voicemails
     * Retrieve pbx agent Voicemails 
     * @return ApiResponse&lt;ConversationPbxVoicemailMessageSummariesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMessageSummariesResponse> getPbxAgentVoicemailsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxAgentVoicemailsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageSummariesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Agent Voicemails (asynchronously)
     * Retrieve pbx agent Voicemails 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentVoicemailsAsync(final ApiCallback<ConversationPbxVoicemailMessageSummariesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAgentVoicemailsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageSummariesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAgents
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAgentsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxAgentsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx agents
     * Retrieve pbx agents 
     * @return ConversationPbxAgentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAgentsResponse getPbxAgents() throws ApiException {
        ApiResponse<ConversationPbxAgentsResponse> resp = getPbxAgentsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx agents
     * Retrieve pbx agents 
     * @return ApiResponse&lt;ConversationPbxAgentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAgentsResponse> getPbxAgentsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxAgentsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx agents (asynchronously)
     * Retrieve pbx agents 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAgentsAsync(final ApiCallback<ConversationPbxAgentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAgentsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAudio
     * @param conversationPbxAudioUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAudioCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
            .replaceAll("\\{" + "conversationPbxAudioUuid" + "\\}", apiClient.escapeString(conversationPbxAudioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAudioValidateBeforeCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAudioUuid' is set
        if (conversationPbxAudioUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAudioUuid' when calling getPbxAudio(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxAudioCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx audio
     * Retrieve a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @return ConversationPbxAudioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioResponse getPbxAudio(String conversationPbxAudioUuid) throws ApiException {
        ApiResponse<ConversationPbxAudioResponse> resp = getPbxAudioWithHttpInfo(conversationPbxAudioUuid);
        return resp.getData();
    }

    /**
     * Get pbx audio
     * Retrieve a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @return ApiResponse&lt;ConversationPbxAudioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioResponse> getPbxAudioWithHttpInfo(String conversationPbxAudioUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxAudioValidateBeforeCall(conversationPbxAudioUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx audio (asynchronously)
     * Retrieve a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAudioAsync(String conversationPbxAudioUuid, final ApiCallback<ConversationPbxAudioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAudioValidateBeforeCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAudioUsage
     * @param conversationPbxAudioUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAudioUsageCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}/usage"
            .replaceAll("\\{" + "conversationPbxAudioUuid" + "\\}", apiClient.escapeString(conversationPbxAudioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAudioUsageValidateBeforeCall(String conversationPbxAudioUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAudioUuid' is set
        if (conversationPbxAudioUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAudioUuid' when calling getPbxAudioUsage(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxAudioUsageCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx audio usage
     * Retrieve a pbx audio usage 
     * @param conversationPbxAudioUuid  (required)
     * @return ConversationPbxAudioUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioUsageResponse getPbxAudioUsage(String conversationPbxAudioUuid) throws ApiException {
        ApiResponse<ConversationPbxAudioUsageResponse> resp = getPbxAudioUsageWithHttpInfo(conversationPbxAudioUuid);
        return resp.getData();
    }

    /**
     * Get pbx audio usage
     * Retrieve a pbx audio usage 
     * @param conversationPbxAudioUuid  (required)
     * @return ApiResponse&lt;ConversationPbxAudioUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioUsageResponse> getPbxAudioUsageWithHttpInfo(String conversationPbxAudioUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxAudioUsageValidateBeforeCall(conversationPbxAudioUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioUsageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx audio usage (asynchronously)
     * Retrieve a pbx audio usage 
     * @param conversationPbxAudioUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAudioUsageAsync(String conversationPbxAudioUuid, final ApiCallback<ConversationPbxAudioUsageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAudioUsageValidateBeforeCall(conversationPbxAudioUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioUsageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxAudios
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxAudiosCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxAudiosValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxAudiosCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx audios
     * Retrieve pbx audios 
     * @return ConversationPbxAudiosResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudiosResponse getPbxAudios() throws ApiException {
        ApiResponse<ConversationPbxAudiosResponse> resp = getPbxAudiosWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx audios
     * Retrieve pbx audios 
     * @return ApiResponse&lt;ConversationPbxAudiosResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudiosResponse> getPbxAudiosWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxAudiosValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudiosResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx audios (asynchronously)
     * Retrieve pbx audios 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxAudiosAsync(final ApiCallback<ConversationPbxAudiosResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxAudiosValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudiosResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxMenu
     * @param conversationPbxMenuUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxMenuCall(String conversationPbxMenuUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
            .replaceAll("\\{" + "conversationPbxMenuUuid" + "\\}", apiClient.escapeString(conversationPbxMenuUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxMenuValidateBeforeCall(String conversationPbxMenuUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxMenuUuid' is set
        if (conversationPbxMenuUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxMenuUuid' when calling getPbxMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxMenuCall(conversationPbxMenuUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx menu
     * Retrieve a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @return ConversationPbxMenuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxMenuResponse getPbxMenu(String conversationPbxMenuUuid) throws ApiException {
        ApiResponse<ConversationPbxMenuResponse> resp = getPbxMenuWithHttpInfo(conversationPbxMenuUuid);
        return resp.getData();
    }

    /**
     * Get pbx menu
     * Retrieve a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @return ApiResponse&lt;ConversationPbxMenuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxMenuResponse> getPbxMenuWithHttpInfo(String conversationPbxMenuUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxMenuValidateBeforeCall(conversationPbxMenuUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx menu (asynchronously)
     * Retrieve a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxMenuAsync(String conversationPbxMenuUuid, final ApiCallback<ConversationPbxMenuResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxMenuValidateBeforeCall(conversationPbxMenuUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxMenus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxMenusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/menu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxMenusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxMenusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx menus
     * Retrieve pbx menus 
     * @return ConversationPbxMenusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxMenusResponse getPbxMenus() throws ApiException {
        ApiResponse<ConversationPbxMenusResponse> resp = getPbxMenusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx menus
     * Retrieve pbx menus 
     * @return ApiResponse&lt;ConversationPbxMenusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxMenusResponse> getPbxMenusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxMenusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxMenusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx menus (asynchronously)
     * Retrieve pbx menus 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxMenusAsync(final ApiCallback<ConversationPbxMenusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxMenusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxMenusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxPhoneNumber
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxPhoneNumberCall(String conversationPbxPhoneNumberUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}"
            .replaceAll("\\{" + "conversationPbxPhoneNumberUuid" + "\\}", apiClient.escapeString(conversationPbxPhoneNumberUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxPhoneNumberValidateBeforeCall(String conversationPbxPhoneNumberUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
        if (conversationPbxPhoneNumberUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling getPbxPhoneNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxPhoneNumberCall(conversationPbxPhoneNumberUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx phoneNumber
     * Retrieve a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @return ConversationPbxPhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxPhoneNumberResponse getPbxPhoneNumber(String conversationPbxPhoneNumberUuid) throws ApiException {
        ApiResponse<ConversationPbxPhoneNumberResponse> resp = getPbxPhoneNumberWithHttpInfo(conversationPbxPhoneNumberUuid);
        return resp.getData();
    }

    /**
     * Get pbx phoneNumber
     * Retrieve a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @return ApiResponse&lt;ConversationPbxPhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxPhoneNumberResponse> getPbxPhoneNumberWithHttpInfo(String conversationPbxPhoneNumberUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxPhoneNumberValidateBeforeCall(conversationPbxPhoneNumberUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumberResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx phoneNumber (asynchronously)
     * Retrieve a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxPhoneNumberAsync(String conversationPbxPhoneNumberUuid, final ApiCallback<ConversationPbxPhoneNumberResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxPhoneNumberValidateBeforeCall(conversationPbxPhoneNumberUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumberResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxPhoneNumbers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxPhoneNumbersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/phone_number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxPhoneNumbersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxPhoneNumbersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx phoneNumbers
     * Retrieve pbx phoneNumbers 
     * @return ConversationPbxPhoneNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxPhoneNumbersResponse getPbxPhoneNumbers() throws ApiException {
        ApiResponse<ConversationPbxPhoneNumbersResponse> resp = getPbxPhoneNumbersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx phoneNumbers
     * Retrieve pbx phoneNumbers 
     * @return ApiResponse&lt;ConversationPbxPhoneNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxPhoneNumbersResponse> getPbxPhoneNumbersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxPhoneNumbersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumbersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx phoneNumbers (asynchronously)
     * Retrieve pbx phoneNumbers 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxPhoneNumbersAsync(final ApiCallback<ConversationPbxPhoneNumbersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxPhoneNumbersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumbersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxQueue
     * @param conversationPbxQueueUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueCall(String conversationPbxQueueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
            .replaceAll("\\{" + "conversationPbxQueueUuid" + "\\}", apiClient.escapeString(conversationPbxQueueUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxQueueValidateBeforeCall(String conversationPbxQueueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxQueueUuid' is set
        if (conversationPbxQueueUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxQueueUuid' when calling getPbxQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxQueueCall(conversationPbxQueueUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx queue
     * Retrieve a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @return ConversationPbxQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxQueueResponse getPbxQueue(String conversationPbxQueueUuid) throws ApiException {
        ApiResponse<ConversationPbxQueueResponse> resp = getPbxQueueWithHttpInfo(conversationPbxQueueUuid);
        return resp.getData();
    }

    /**
     * Get pbx queue
     * Retrieve a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @return ApiResponse&lt;ConversationPbxQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxQueueResponse> getPbxQueueWithHttpInfo(String conversationPbxQueueUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxQueueValidateBeforeCall(conversationPbxQueueUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx queue (asynchronously)
     * Retrieve a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueAsync(String conversationPbxQueueUuid, final ApiCallback<ConversationPbxQueueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxQueueValidateBeforeCall(conversationPbxQueueUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxQueueVoicemail
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueVoicemailCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}"
            .replaceAll("\\{" + "queue_uuid" + "\\}", apiClient.escapeString(queueUuid.toString()))
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxQueueVoicemailValidateBeforeCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueUuid' is set
        if (queueUuid == null) {
            throw new ApiException("Missing the required parameter 'queueUuid' when calling getPbxQueueVoicemail(Async)");
        }
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling getPbxQueueVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxQueueVoicemailCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Queue Voicemail
     * Retrieve pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @return ConversationPbxVoicemailMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMessageResponse getPbxQueueVoicemail(String queueUuid, String recordingSid) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMessageResponse> resp = getPbxQueueVoicemailWithHttpInfo(queueUuid, recordingSid);
        return resp.getData();
    }

    /**
     * Get Queue Voicemail
     * Retrieve pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMessageResponse> getPbxQueueVoicemailWithHttpInfo(String queueUuid, String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Queue Voicemail (asynchronously)
     * Retrieve pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueVoicemailAsync(String queueUuid, String recordingSid, final ApiCallback<ConversationPbxVoicemailMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxQueueVoicemails
     * @param queueUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueVoicemailsCall(String queueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails"
            .replaceAll("\\{" + "queue_uuid" + "\\}", apiClient.escapeString(queueUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxQueueVoicemailsValidateBeforeCall(String queueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueUuid' is set
        if (queueUuid == null) {
            throw new ApiException("Missing the required parameter 'queueUuid' when calling getPbxQueueVoicemails(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxQueueVoicemailsCall(queueUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Queue Voicemails
     * Retrieve pbx queue voicemails 
     * @param queueUuid  (required)
     * @return ConversationPbxVoicemailMessageSummariesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMessageSummariesResponse getPbxQueueVoicemails(String queueUuid) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMessageSummariesResponse> resp = getPbxQueueVoicemailsWithHttpInfo(queueUuid);
        return resp.getData();
    }

    /**
     * Get Queue Voicemails
     * Retrieve pbx queue voicemails 
     * @param queueUuid  (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMessageSummariesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMessageSummariesResponse> getPbxQueueVoicemailsWithHttpInfo(String queueUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxQueueVoicemailsValidateBeforeCall(queueUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageSummariesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Queue Voicemails (asynchronously)
     * Retrieve pbx queue voicemails 
     * @param queueUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxQueueVoicemailsAsync(String queueUuid, final ApiCallback<ConversationPbxVoicemailMessageSummariesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxQueueVoicemailsValidateBeforeCall(queueUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMessageSummariesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxQueues
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxQueuesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxQueuesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxQueuesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx queues
     * Retrieve pbx queues 
     * @return ConversationPbxQueuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxQueuesResponse getPbxQueues() throws ApiException {
        ApiResponse<ConversationPbxQueuesResponse> resp = getPbxQueuesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx queues
     * Retrieve pbx queues 
     * @return ApiResponse&lt;ConversationPbxQueuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxQueuesResponse> getPbxQueuesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxQueuesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxQueuesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx queues (asynchronously)
     * Retrieve pbx queues 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxQueuesAsync(final ApiCallback<ConversationPbxQueuesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxQueuesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxQueuesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxTimeBased
     * @param conversationPbxTimeBasedUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeBasedCall(String conversationPbxTimeBasedUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
            .replaceAll("\\{" + "conversationPbxTimeBasedUuid" + "\\}", apiClient.escapeString(conversationPbxTimeBasedUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxTimeBasedValidateBeforeCall(String conversationPbxTimeBasedUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeBasedUuid' is set
        if (conversationPbxTimeBasedUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling getPbxTimeBased(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxTimeBasedCall(conversationPbxTimeBasedUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx timeBased
     * Retrieve a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @return ConversationPbxTimeBasedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeBasedResponse getPbxTimeBased(String conversationPbxTimeBasedUuid) throws ApiException {
        ApiResponse<ConversationPbxTimeBasedResponse> resp = getPbxTimeBasedWithHttpInfo(conversationPbxTimeBasedUuid);
        return resp.getData();
    }

    /**
     * Get pbx timeBased
     * Retrieve a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @return ApiResponse&lt;ConversationPbxTimeBasedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeBasedResponse> getPbxTimeBasedWithHttpInfo(String conversationPbxTimeBasedUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx timeBased (asynchronously)
     * Retrieve a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeBasedAsync(String conversationPbxTimeBasedUuid, final ApiCallback<ConversationPbxTimeBasedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxTimeBaseds
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeBasedsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxTimeBasedsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxTimeBasedsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx timeBaseds
     * Retrieve pbx timeBaseds 
     * @return ConversationPbxTimeBasedsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeBasedsResponse getPbxTimeBaseds() throws ApiException {
        ApiResponse<ConversationPbxTimeBasedsResponse> resp = getPbxTimeBasedsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx timeBaseds
     * Retrieve pbx timeBaseds 
     * @return ApiResponse&lt;ConversationPbxTimeBasedsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeBasedsResponse> getPbxTimeBasedsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxTimeBasedsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx timeBaseds (asynchronously)
     * Retrieve pbx timeBaseds 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeBasedsAsync(final ApiCallback<ConversationPbxTimeBasedsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxTimeBasedsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxTimeRange
     * @param conversationPbxTimeRangeUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeRangeCall(String conversationPbxTimeRangeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
            .replaceAll("\\{" + "conversationPbxTimeRangeUuid" + "\\}", apiClient.escapeString(conversationPbxTimeRangeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxTimeRangeValidateBeforeCall(String conversationPbxTimeRangeUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeRangeUuid' is set
        if (conversationPbxTimeRangeUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling getPbxTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxTimeRangeCall(conversationPbxTimeRangeUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx timeRange
     * Retrieve a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @return ConversationPbxTimeRangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeRangeResponse getPbxTimeRange(String conversationPbxTimeRangeUuid) throws ApiException {
        ApiResponse<ConversationPbxTimeRangeResponse> resp = getPbxTimeRangeWithHttpInfo(conversationPbxTimeRangeUuid);
        return resp.getData();
    }

    /**
     * Get pbx timeRange
     * Retrieve a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @return ApiResponse&lt;ConversationPbxTimeRangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeRangeResponse> getPbxTimeRangeWithHttpInfo(String conversationPbxTimeRangeUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx timeRange (asynchronously)
     * Retrieve a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeRangeAsync(String conversationPbxTimeRangeUuid, final ApiCallback<ConversationPbxTimeRangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxTimeRanges
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeRangesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_range";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxTimeRangesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxTimeRangesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx timeRanges
     * Retrieve pbx timeRanges 
     * @return ConversationPbxTimeRangesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeRangesResponse getPbxTimeRanges() throws ApiException {
        ApiResponse<ConversationPbxTimeRangesResponse> resp = getPbxTimeRangesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx timeRanges
     * Retrieve pbx timeRanges 
     * @return ApiResponse&lt;ConversationPbxTimeRangesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeRangesResponse> getPbxTimeRangesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxTimeRangesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx timeRanges (asynchronously)
     * Retrieve pbx timeRanges 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxTimeRangesAsync(final ApiCallback<ConversationPbxTimeRangesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxTimeRangesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxVoicemailMailbox
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxVoicemailMailboxCall(String conversationPbxVoicemailMailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
            .replaceAll("\\{" + "conversationPbxVoicemailMailboxUuid" + "\\}", apiClient.escapeString(conversationPbxVoicemailMailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxVoicemailMailboxValidateBeforeCall(String conversationPbxVoicemailMailboxUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
        if (conversationPbxVoicemailMailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling getPbxVoicemailMailbox(Async)");
        }
        

        com.squareup.okhttp.Call call = getPbxVoicemailMailboxCall(conversationPbxVoicemailMailboxUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx voicemailMailbox
     * Retrieve a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @return ConversationPbxVoicemailMailboxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMailboxResponse getPbxVoicemailMailbox(String conversationPbxVoicemailMailboxUuid) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMailboxResponse> resp = getPbxVoicemailMailboxWithHttpInfo(conversationPbxVoicemailMailboxUuid);
        return resp.getData();
    }

    /**
     * Get pbx voicemailMailbox
     * Retrieve a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMailboxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMailboxResponse> getPbxVoicemailMailboxWithHttpInfo(String conversationPbxVoicemailMailboxUuid) throws ApiException {
        com.squareup.okhttp.Call call = getPbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx voicemailMailbox (asynchronously)
     * Retrieve a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxVoicemailMailboxAsync(String conversationPbxVoicemailMailboxUuid, final ApiCallback<ConversationPbxVoicemailMailboxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPbxVoicemailMailboxes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPbxVoicemailMailboxesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/voicemail_mailbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPbxVoicemailMailboxesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPbxVoicemailMailboxesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get pbx voicemailMailboxes
     * Retrieve pbx voicemailMailboxes 
     * @return ConversationPbxVoicemailMailboxesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMailboxesResponse getPbxVoicemailMailboxes() throws ApiException {
        ApiResponse<ConversationPbxVoicemailMailboxesResponse> resp = getPbxVoicemailMailboxesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get pbx voicemailMailboxes
     * Retrieve pbx voicemailMailboxes 
     * @return ApiResponse&lt;ConversationPbxVoicemailMailboxesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMailboxesResponse> getPbxVoicemailMailboxesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPbxVoicemailMailboxesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get pbx voicemailMailboxes (asynchronously)
     * Retrieve pbx voicemailMailboxes 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPbxVoicemailMailboxesAsync(final ApiCallback<ConversationPbxVoicemailMailboxesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPbxVoicemailMailboxesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVirtualAgentBudget
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVirtualAgentBudgetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/virtualagent/budget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVirtualAgentBudgetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVirtualAgentBudgetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get virtual agent budget
     * Retrieve virtual agent budget 
     * @return ConversationVirtualAgentBudgetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationVirtualAgentBudgetResponse getVirtualAgentBudget() throws ApiException {
        ApiResponse<ConversationVirtualAgentBudgetResponse> resp = getVirtualAgentBudgetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get virtual agent budget
     * Retrieve virtual agent budget 
     * @return ApiResponse&lt;ConversationVirtualAgentBudgetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationVirtualAgentBudgetResponse> getVirtualAgentBudgetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVirtualAgentBudgetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentBudgetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get virtual agent budget (asynchronously)
     * Retrieve virtual agent budget 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVirtualAgentBudgetAsync(final ApiCallback<ConversationVirtualAgentBudgetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVirtualAgentBudgetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentBudgetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVirtualAgentCapabilities
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVirtualAgentCapabilitiesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/virtualagent/capabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVirtualAgentCapabilitiesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVirtualAgentCapabilitiesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get virtual agent capabilities
     * Retrieve virtual agent capabilities 
     * @return ConversationVirtualAgentCapabilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationVirtualAgentCapabilitiesResponse getVirtualAgentCapabilities() throws ApiException {
        ApiResponse<ConversationVirtualAgentCapabilitiesResponse> resp = getVirtualAgentCapabilitiesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get virtual agent capabilities
     * Retrieve virtual agent capabilities 
     * @return ApiResponse&lt;ConversationVirtualAgentCapabilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationVirtualAgentCapabilitiesResponse> getVirtualAgentCapabilitiesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVirtualAgentCapabilitiesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentCapabilitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get virtual agent capabilities (asynchronously)
     * Retrieve virtual agent capabilities 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVirtualAgentCapabilitiesAsync(final ApiCallback<ConversationVirtualAgentCapabilitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVirtualAgentCapabilitiesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentCapabilitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertAgentProfileKnowledgeBaseDocument
     * @param userId  (required)
     * @param knowledgeBaseDocumentRequest Insert request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertAgentProfileKnowledgeBaseDocumentCall(Integer userId, ConversationInsertKnowledgeBaseDocumentRequest knowledgeBaseDocumentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = knowledgeBaseDocumentRequest;

        // create path and map variables
        String localVarPath = "/conversation/agent/profiles/{user_id}/knowledge_base"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertAgentProfileKnowledgeBaseDocumentValidateBeforeCall(Integer userId, ConversationInsertKnowledgeBaseDocumentRequest knowledgeBaseDocumentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling insertAgentProfileKnowledgeBaseDocument(Async)");
        }
        
        // verify the required parameter 'knowledgeBaseDocumentRequest' is set
        if (knowledgeBaseDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseDocumentRequest' when calling insertAgentProfileKnowledgeBaseDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = insertAgentProfileKnowledgeBaseDocumentCall(userId, knowledgeBaseDocumentRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a knowledge base document
     * Insert a knowledge base document 
     * @param userId  (required)
     * @param knowledgeBaseDocumentRequest Insert request (required)
     * @return ConversationInsertKnowledgeBaseDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationInsertKnowledgeBaseDocumentResponse insertAgentProfileKnowledgeBaseDocument(Integer userId, ConversationInsertKnowledgeBaseDocumentRequest knowledgeBaseDocumentRequest) throws ApiException {
        ApiResponse<ConversationInsertKnowledgeBaseDocumentResponse> resp = insertAgentProfileKnowledgeBaseDocumentWithHttpInfo(userId, knowledgeBaseDocumentRequest);
        return resp.getData();
    }

    /**
     * Insert a knowledge base document
     * Insert a knowledge base document 
     * @param userId  (required)
     * @param knowledgeBaseDocumentRequest Insert request (required)
     * @return ApiResponse&lt;ConversationInsertKnowledgeBaseDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationInsertKnowledgeBaseDocumentResponse> insertAgentProfileKnowledgeBaseDocumentWithHttpInfo(Integer userId, ConversationInsertKnowledgeBaseDocumentRequest knowledgeBaseDocumentRequest) throws ApiException {
        com.squareup.okhttp.Call call = insertAgentProfileKnowledgeBaseDocumentValidateBeforeCall(userId, knowledgeBaseDocumentRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationInsertKnowledgeBaseDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a knowledge base document (asynchronously)
     * Insert a knowledge base document 
     * @param userId  (required)
     * @param knowledgeBaseDocumentRequest Insert request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertAgentProfileKnowledgeBaseDocumentAsync(Integer userId, ConversationInsertKnowledgeBaseDocumentRequest knowledgeBaseDocumentRequest, final ApiCallback<ConversationInsertKnowledgeBaseDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertAgentProfileKnowledgeBaseDocumentValidateBeforeCall(userId, knowledgeBaseDocumentRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationInsertKnowledgeBaseDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertConversationCannedMessage
     * @param cannedMessage Canned message (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertConversationCannedMessageCall(ConversationCannedMessage cannedMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cannedMessage;

        // create path and map variables
        String localVarPath = "/conversation/canned_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertConversationCannedMessageValidateBeforeCall(ConversationCannedMessage cannedMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cannedMessage' is set
        if (cannedMessage == null) {
            throw new ApiException("Missing the required parameter 'cannedMessage' when calling insertConversationCannedMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = insertConversationCannedMessageCall(cannedMessage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a canned message
     * Insert a canned message 
     * @param cannedMessage Canned message (required)
     * @return ConversationCannedMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationCannedMessageResponse insertConversationCannedMessage(ConversationCannedMessage cannedMessage) throws ApiException {
        ApiResponse<ConversationCannedMessageResponse> resp = insertConversationCannedMessageWithHttpInfo(cannedMessage);
        return resp.getData();
    }

    /**
     * Insert a canned message
     * Insert a canned message 
     * @param cannedMessage Canned message (required)
     * @return ApiResponse&lt;ConversationCannedMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationCannedMessageResponse> insertConversationCannedMessageWithHttpInfo(ConversationCannedMessage cannedMessage) throws ApiException {
        com.squareup.okhttp.Call call = insertConversationCannedMessageValidateBeforeCall(cannedMessage, null, null);
        Type localVarReturnType = new TypeToken<ConversationCannedMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a canned message (asynchronously)
     * Insert a canned message 
     * @param cannedMessage Canned message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertConversationCannedMessageAsync(ConversationCannedMessage cannedMessage, final ApiCallback<ConversationCannedMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertConversationCannedMessageValidateBeforeCall(cannedMessage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationCannedMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertConversationDepartment
     * @param department Department (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertConversationDepartmentCall(ConversationDepartment department, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = department;

        // create path and map variables
        String localVarPath = "/conversation/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertConversationDepartmentValidateBeforeCall(ConversationDepartment department, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'department' is set
        if (department == null) {
            throw new ApiException("Missing the required parameter 'department' when calling insertConversationDepartment(Async)");
        }
        

        com.squareup.okhttp.Call call = insertConversationDepartmentCall(department, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a department
     * Insert a department 
     * @param department Department (required)
     * @return ConversationDepartmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationDepartmentResponse insertConversationDepartment(ConversationDepartment department) throws ApiException {
        ApiResponse<ConversationDepartmentResponse> resp = insertConversationDepartmentWithHttpInfo(department);
        return resp.getData();
    }

    /**
     * Insert a department
     * Insert a department 
     * @param department Department (required)
     * @return ApiResponse&lt;ConversationDepartmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationDepartmentResponse> insertConversationDepartmentWithHttpInfo(ConversationDepartment department) throws ApiException {
        com.squareup.okhttp.Call call = insertConversationDepartmentValidateBeforeCall(department, null, null);
        Type localVarReturnType = new TypeToken<ConversationDepartmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a department (asynchronously)
     * Insert a department 
     * @param department Department (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertConversationDepartmentAsync(ConversationDepartment department, final ApiCallback<ConversationDepartmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertConversationDepartmentValidateBeforeCall(department, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationDepartmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertConversationEngagement
     * @param engagement Engagement (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertConversationEngagementCall(ConversationEngagement engagement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = engagement;

        // create path and map variables
        String localVarPath = "/conversation/engagements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertConversationEngagementValidateBeforeCall(ConversationEngagement engagement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'engagement' is set
        if (engagement == null) {
            throw new ApiException("Missing the required parameter 'engagement' when calling insertConversationEngagement(Async)");
        }
        

        com.squareup.okhttp.Call call = insertConversationEngagementCall(engagement, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a engagement
     * Insert a engagement 
     * @param engagement Engagement (required)
     * @return ConversationEngagementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationEngagementResponse insertConversationEngagement(ConversationEngagement engagement) throws ApiException {
        ApiResponse<ConversationEngagementResponse> resp = insertConversationEngagementWithHttpInfo(engagement);
        return resp.getData();
    }

    /**
     * Insert a engagement
     * Insert a engagement 
     * @param engagement Engagement (required)
     * @return ApiResponse&lt;ConversationEngagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationEngagementResponse> insertConversationEngagementWithHttpInfo(ConversationEngagement engagement) throws ApiException {
        com.squareup.okhttp.Call call = insertConversationEngagementValidateBeforeCall(engagement, null, null);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a engagement (asynchronously)
     * Insert a engagement 
     * @param engagement Engagement (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertConversationEngagementAsync(ConversationEngagement engagement, final ApiCallback<ConversationEngagementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertConversationEngagementValidateBeforeCall(engagement, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxAudio
     * @param pbxAudio Pbx Audio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxAudioCall(ConversationPbxAudio pbxAudio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxAudio;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxAudioValidateBeforeCall(ConversationPbxAudio pbxAudio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxAudio' is set
        if (pbxAudio == null) {
            throw new ApiException("Missing the required parameter 'pbxAudio' when calling insertPbxAudio(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxAudioCall(pbxAudio, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx audio
     * Insert a pbx audio 
     * @param pbxAudio Pbx Audio (required)
     * @return ConversationPbxAudioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioResponse insertPbxAudio(ConversationPbxAudio pbxAudio) throws ApiException {
        ApiResponse<ConversationPbxAudioResponse> resp = insertPbxAudioWithHttpInfo(pbxAudio);
        return resp.getData();
    }

    /**
     * Insert pbx audio
     * Insert a pbx audio 
     * @param pbxAudio Pbx Audio (required)
     * @return ApiResponse&lt;ConversationPbxAudioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioResponse> insertPbxAudioWithHttpInfo(ConversationPbxAudio pbxAudio) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxAudioValidateBeforeCall(pbxAudio, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx audio (asynchronously)
     * Insert a pbx audio 
     * @param pbxAudio Pbx Audio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxAudioAsync(ConversationPbxAudio pbxAudio, final ApiCallback<ConversationPbxAudioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxAudioValidateBeforeCall(pbxAudio, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxMenu
     * @param pbxMenu Pbx Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxMenuCall(ConversationPbxMenu pbxMenu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxMenu;

        // create path and map variables
        String localVarPath = "/conversation/pbx/menu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxMenuValidateBeforeCall(ConversationPbxMenu pbxMenu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxMenu' is set
        if (pbxMenu == null) {
            throw new ApiException("Missing the required parameter 'pbxMenu' when calling insertPbxMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxMenuCall(pbxMenu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx menu
     * Insert a pbx menu 
     * @param pbxMenu Pbx Menu (required)
     * @return ConversationPbxMenuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxMenuResponse insertPbxMenu(ConversationPbxMenu pbxMenu) throws ApiException {
        ApiResponse<ConversationPbxMenuResponse> resp = insertPbxMenuWithHttpInfo(pbxMenu);
        return resp.getData();
    }

    /**
     * Insert pbx menu
     * Insert a pbx menu 
     * @param pbxMenu Pbx Menu (required)
     * @return ApiResponse&lt;ConversationPbxMenuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxMenuResponse> insertPbxMenuWithHttpInfo(ConversationPbxMenu pbxMenu) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxMenuValidateBeforeCall(pbxMenu, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx menu (asynchronously)
     * Insert a pbx menu 
     * @param pbxMenu Pbx Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxMenuAsync(ConversationPbxMenu pbxMenu, final ApiCallback<ConversationPbxMenuResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxMenuValidateBeforeCall(pbxMenu, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxQueue
     * @param pbxQueue Pbx Queue (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxQueueCall(ConversationPbxQueue pbxQueue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxQueue;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxQueueValidateBeforeCall(ConversationPbxQueue pbxQueue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxQueue' is set
        if (pbxQueue == null) {
            throw new ApiException("Missing the required parameter 'pbxQueue' when calling insertPbxQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxQueueCall(pbxQueue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx queue
     * Insert a pbx queue 
     * @param pbxQueue Pbx Queue (required)
     * @return ConversationPbxQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxQueueResponse insertPbxQueue(ConversationPbxQueue pbxQueue) throws ApiException {
        ApiResponse<ConversationPbxQueueResponse> resp = insertPbxQueueWithHttpInfo(pbxQueue);
        return resp.getData();
    }

    /**
     * Insert pbx queue
     * Insert a pbx queue 
     * @param pbxQueue Pbx Queue (required)
     * @return ApiResponse&lt;ConversationPbxQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxQueueResponse> insertPbxQueueWithHttpInfo(ConversationPbxQueue pbxQueue) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxQueueValidateBeforeCall(pbxQueue, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx queue (asynchronously)
     * Insert a pbx queue 
     * @param pbxQueue Pbx Queue (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxQueueAsync(ConversationPbxQueue pbxQueue, final ApiCallback<ConversationPbxQueueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxQueueValidateBeforeCall(pbxQueue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxTimeBased
     * @param pbxTimeBased Pbx TimeBased (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxTimeBasedCall(ConversationPbxTimeBased pbxTimeBased, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxTimeBased;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_based";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxTimeBasedValidateBeforeCall(ConversationPbxTimeBased pbxTimeBased, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxTimeBased' is set
        if (pbxTimeBased == null) {
            throw new ApiException("Missing the required parameter 'pbxTimeBased' when calling insertPbxTimeBased(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxTimeBasedCall(pbxTimeBased, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx timeBased
     * Insert a pbx timeBased 
     * @param pbxTimeBased Pbx TimeBased (required)
     * @return ConversationPbxTimeBasedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeBasedResponse insertPbxTimeBased(ConversationPbxTimeBased pbxTimeBased) throws ApiException {
        ApiResponse<ConversationPbxTimeBasedResponse> resp = insertPbxTimeBasedWithHttpInfo(pbxTimeBased);
        return resp.getData();
    }

    /**
     * Insert pbx timeBased
     * Insert a pbx timeBased 
     * @param pbxTimeBased Pbx TimeBased (required)
     * @return ApiResponse&lt;ConversationPbxTimeBasedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeBasedResponse> insertPbxTimeBasedWithHttpInfo(ConversationPbxTimeBased pbxTimeBased) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxTimeBasedValidateBeforeCall(pbxTimeBased, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx timeBased (asynchronously)
     * Insert a pbx timeBased 
     * @param pbxTimeBased Pbx TimeBased (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxTimeBasedAsync(ConversationPbxTimeBased pbxTimeBased, final ApiCallback<ConversationPbxTimeBasedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxTimeBasedValidateBeforeCall(pbxTimeBased, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxTimeRange
     * @param pbxTimeRange Pbx TimeRange (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxTimeRangeCall(ConversationPbxTimeRange pbxTimeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxTimeRange;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_range";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxTimeRangeValidateBeforeCall(ConversationPbxTimeRange pbxTimeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxTimeRange' is set
        if (pbxTimeRange == null) {
            throw new ApiException("Missing the required parameter 'pbxTimeRange' when calling insertPbxTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxTimeRangeCall(pbxTimeRange, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx timeRange
     * Insert a pbx timeRange 
     * @param pbxTimeRange Pbx TimeRange (required)
     * @return ConversationPbxTimeRangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeRangeResponse insertPbxTimeRange(ConversationPbxTimeRange pbxTimeRange) throws ApiException {
        ApiResponse<ConversationPbxTimeRangeResponse> resp = insertPbxTimeRangeWithHttpInfo(pbxTimeRange);
        return resp.getData();
    }

    /**
     * Insert pbx timeRange
     * Insert a pbx timeRange 
     * @param pbxTimeRange Pbx TimeRange (required)
     * @return ApiResponse&lt;ConversationPbxTimeRangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeRangeResponse> insertPbxTimeRangeWithHttpInfo(ConversationPbxTimeRange pbxTimeRange) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxTimeRangeValidateBeforeCall(pbxTimeRange, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx timeRange (asynchronously)
     * Insert a pbx timeRange 
     * @param pbxTimeRange Pbx TimeRange (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxTimeRangeAsync(ConversationPbxTimeRange pbxTimeRange, final ApiCallback<ConversationPbxTimeRangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxTimeRangeValidateBeforeCall(pbxTimeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertPbxVoicemailMailbox
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertPbxVoicemailMailboxCall(ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxVoicemailMailbox;

        // create path and map variables
        String localVarPath = "/conversation/pbx/voicemail_mailbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertPbxVoicemailMailboxValidateBeforeCall(ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pbxVoicemailMailbox' is set
        if (pbxVoicemailMailbox == null) {
            throw new ApiException("Missing the required parameter 'pbxVoicemailMailbox' when calling insertPbxVoicemailMailbox(Async)");
        }
        

        com.squareup.okhttp.Call call = insertPbxVoicemailMailboxCall(pbxVoicemailMailbox, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert pbx voicemailMailbox
     * Insert a pbx voicemailMailbox 
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @return ConversationPbxVoicemailMailboxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMailboxResponse insertPbxVoicemailMailbox(ConversationPbxVoicemailMailbox pbxVoicemailMailbox) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMailboxResponse> resp = insertPbxVoicemailMailboxWithHttpInfo(pbxVoicemailMailbox);
        return resp.getData();
    }

    /**
     * Insert pbx voicemailMailbox
     * Insert a pbx voicemailMailbox 
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMailboxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMailboxResponse> insertPbxVoicemailMailboxWithHttpInfo(ConversationPbxVoicemailMailbox pbxVoicemailMailbox) throws ApiException {
        com.squareup.okhttp.Call call = insertPbxVoicemailMailboxValidateBeforeCall(pbxVoicemailMailbox, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert pbx voicemailMailbox (asynchronously)
     * Insert a pbx voicemailMailbox 
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertPbxVoicemailMailboxAsync(ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ApiCallback<ConversationPbxVoicemailMailboxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertPbxVoicemailMailboxValidateBeforeCall(pbxVoicemailMailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for joinConversation
     * @param conversationUuid  (required)
     * @param joinRequest Join request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call joinConversationCall(String conversationUuid, ConversationJoinRequest joinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = joinRequest;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/join"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call joinConversationValidateBeforeCall(String conversationUuid, ConversationJoinRequest joinRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling joinConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = joinConversationCall(conversationUuid, joinRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Join a conversation
     * Join a conversation 
     * @param conversationUuid  (required)
     * @param joinRequest Join request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void joinConversation(String conversationUuid, ConversationJoinRequest joinRequest) throws ApiException {
        joinConversationWithHttpInfo(conversationUuid, joinRequest);
    }

    /**
     * Join a conversation
     * Join a conversation 
     * @param conversationUuid  (required)
     * @param joinRequest Join request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> joinConversationWithHttpInfo(String conversationUuid, ConversationJoinRequest joinRequest) throws ApiException {
        com.squareup.okhttp.Call call = joinConversationValidateBeforeCall(conversationUuid, joinRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Join a conversation (asynchronously)
     * Join a conversation 
     * @param conversationUuid  (required)
     * @param joinRequest Join request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call joinConversationAsync(String conversationUuid, ConversationJoinRequest joinRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = joinConversationValidateBeforeCall(conversationUuid, joinRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for leaveConversation
     * @param conversationUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call leaveConversationCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/leave"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call leaveConversationValidateBeforeCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling leaveConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = leaveConversationCall(conversationUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Leave a conversation
     * Leave a conversation 
     * @param conversationUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void leaveConversation(String conversationUuid) throws ApiException {
        leaveConversationWithHttpInfo(conversationUuid);
    }

    /**
     * Leave a conversation
     * Leave a conversation 
     * @param conversationUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> leaveConversationWithHttpInfo(String conversationUuid) throws ApiException {
        com.squareup.okhttp.Call call = leaveConversationValidateBeforeCall(conversationUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Leave a conversation (asynchronously)
     * Leave a conversation 
     * @param conversationUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call leaveConversationAsync(String conversationUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = leaveConversationValidateBeforeCall(conversationUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listenedPbxAgentVoicemail
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenedPbxAgentVoicemailCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}/listened"
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenedPbxAgentVoicemailValidateBeforeCall(String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling listenedPbxAgentVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = listenedPbxAgentVoicemailCall(recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Listened Agent Voicemail
     * Listened pbx agent Voicemail 
     * @param recordingSid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listenedPbxAgentVoicemail(String recordingSid) throws ApiException {
        listenedPbxAgentVoicemailWithHttpInfo(recordingSid);
    }

    /**
     * Listened Agent Voicemail
     * Listened pbx agent Voicemail 
     * @param recordingSid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listenedPbxAgentVoicemailWithHttpInfo(String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = listenedPbxAgentVoicemailValidateBeforeCall(recordingSid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Listened Agent Voicemail (asynchronously)
     * Listened pbx agent Voicemail 
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenedPbxAgentVoicemailAsync(String recordingSid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenedPbxAgentVoicemailValidateBeforeCall(recordingSid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listenedPbxQueueVoicemail
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listenedPbxQueueVoicemailCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}/listened"
            .replaceAll("\\{" + "queue_uuid" + "\\}", apiClient.escapeString(queueUuid.toString()))
            .replaceAll("\\{" + "recording_sid" + "\\}", apiClient.escapeString(recordingSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listenedPbxQueueVoicemailValidateBeforeCall(String queueUuid, String recordingSid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueUuid' is set
        if (queueUuid == null) {
            throw new ApiException("Missing the required parameter 'queueUuid' when calling listenedPbxQueueVoicemail(Async)");
        }
        
        // verify the required parameter 'recordingSid' is set
        if (recordingSid == null) {
            throw new ApiException("Missing the required parameter 'recordingSid' when calling listenedPbxQueueVoicemail(Async)");
        }
        

        com.squareup.okhttp.Call call = listenedPbxQueueVoicemailCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Listened Queue Voicemail
     * Listened pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listenedPbxQueueVoicemail(String queueUuid, String recordingSid) throws ApiException {
        listenedPbxQueueVoicemailWithHttpInfo(queueUuid, recordingSid);
    }

    /**
     * Listened Queue Voicemail
     * Listened pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listenedPbxQueueVoicemailWithHttpInfo(String queueUuid, String recordingSid) throws ApiException {
        com.squareup.okhttp.Call call = listenedPbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Listened Queue Voicemail (asynchronously)
     * Listened pbx queue Voicemail 
     * @param queueUuid  (required)
     * @param recordingSid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listenedPbxQueueVoicemailAsync(String queueUuid, String recordingSid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listenedPbxQueueVoicemailValidateBeforeCall(queueUuid, recordingSid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for markReadConversation
     * @param conversationUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call markReadConversationCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/markread"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call markReadConversationValidateBeforeCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling markReadConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = markReadConversationCall(conversationUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mark a conversation as read
     * Mark a conversation as read 
     * @param conversationUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void markReadConversation(String conversationUuid) throws ApiException {
        markReadConversationWithHttpInfo(conversationUuid);
    }

    /**
     * Mark a conversation as read
     * Mark a conversation as read 
     * @param conversationUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> markReadConversationWithHttpInfo(String conversationUuid) throws ApiException {
        com.squareup.okhttp.Call call = markReadConversationValidateBeforeCall(conversationUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Mark a conversation as read (asynchronously)
     * Mark a conversation as read 
     * @param conversationUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markReadConversationAsync(String conversationUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markReadConversationValidateBeforeCall(conversationUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resetConversationPbxQueueStatistics
     * @param queueUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetConversationPbxQueueStatisticsCall(String queueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queues/{queue_uuid}/reset_statistics"
            .replaceAll("\\{" + "queue_uuid" + "\\}", apiClient.escapeString(queueUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetConversationPbxQueueStatisticsValidateBeforeCall(String queueUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueUuid' is set
        if (queueUuid == null) {
            throw new ApiException("Missing the required parameter 'queueUuid' when calling resetConversationPbxQueueStatistics(Async)");
        }
        

        com.squareup.okhttp.Call call = resetConversationPbxQueueStatisticsCall(queueUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * reset statistics within the queue
     * reset statistics within the queue 
     * @param queueUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetConversationPbxQueueStatistics(String queueUuid) throws ApiException {
        resetConversationPbxQueueStatisticsWithHttpInfo(queueUuid);
    }

    /**
     * reset statistics within the queue
     * reset statistics within the queue 
     * @param queueUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetConversationPbxQueueStatisticsWithHttpInfo(String queueUuid) throws ApiException {
        com.squareup.okhttp.Call call = resetConversationPbxQueueStatisticsValidateBeforeCall(queueUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * reset statistics within the queue (asynchronously)
     * reset statistics within the queue 
     * @param queueUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetConversationPbxQueueStatisticsAsync(String queueUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetConversationPbxQueueStatisticsValidateBeforeCall(queueUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for searchConversationCannedMessages
     * @param searchRequest Search request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchConversationCannedMessagesCall(ConversationCannedMessagesSearch searchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = searchRequest;

        // create path and map variables
        String localVarPath = "/conversation/canned_messages/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchConversationCannedMessagesValidateBeforeCall(ConversationCannedMessagesSearch searchRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'searchRequest' is set
        if (searchRequest == null) {
            throw new ApiException("Missing the required parameter 'searchRequest' when calling searchConversationCannedMessages(Async)");
        }
        

        com.squareup.okhttp.Call call = searchConversationCannedMessagesCall(searchRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for canned messages by short_code
     * Search for canned messages by short_code 
     * @param searchRequest Search request (required)
     * @return ConversationCannedMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationCannedMessagesResponse searchConversationCannedMessages(ConversationCannedMessagesSearch searchRequest) throws ApiException {
        ApiResponse<ConversationCannedMessagesResponse> resp = searchConversationCannedMessagesWithHttpInfo(searchRequest);
        return resp.getData();
    }

    /**
     * Search for canned messages by short_code
     * Search for canned messages by short_code 
     * @param searchRequest Search request (required)
     * @return ApiResponse&lt;ConversationCannedMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationCannedMessagesResponse> searchConversationCannedMessagesWithHttpInfo(ConversationCannedMessagesSearch searchRequest) throws ApiException {
        com.squareup.okhttp.Call call = searchConversationCannedMessagesValidateBeforeCall(searchRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationCannedMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for canned messages by short_code (asynchronously)
     * Search for canned messages by short_code 
     * @param searchRequest Search request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchConversationCannedMessagesAsync(ConversationCannedMessagesSearch searchRequest, final ApiCallback<ConversationCannedMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchConversationCannedMessagesValidateBeforeCall(searchRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationCannedMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for smsUnsubscribeConversation
     * @param conversationUuid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call smsUnsubscribeConversationCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversation/conversations/{conversation_uuid}/sms_unsubscribe"
            .replaceAll("\\{" + "conversation_uuid" + "\\}", apiClient.escapeString(conversationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call smsUnsubscribeConversationValidateBeforeCall(String conversationUuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationUuid' is set
        if (conversationUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationUuid' when calling smsUnsubscribeConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = smsUnsubscribeConversationCall(conversationUuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unsubscribe any SMS participants in this conversation
     * Unsubscribe any SMS participants in this conversation 
     * @param conversationUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void smsUnsubscribeConversation(String conversationUuid) throws ApiException {
        smsUnsubscribeConversationWithHttpInfo(conversationUuid);
    }

    /**
     * Unsubscribe any SMS participants in this conversation
     * Unsubscribe any SMS participants in this conversation 
     * @param conversationUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> smsUnsubscribeConversationWithHttpInfo(String conversationUuid) throws ApiException {
        com.squareup.okhttp.Call call = smsUnsubscribeConversationValidateBeforeCall(conversationUuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unsubscribe any SMS participants in this conversation (asynchronously)
     * Unsubscribe any SMS participants in this conversation 
     * @param conversationUuid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call smsUnsubscribeConversationAsync(String conversationUuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = smsUnsubscribeConversationValidateBeforeCall(conversationUuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for startConversation
     * @param startRequest Start request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startConversationCall(ConversationStartRequest startRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = startRequest;

        // create path and map variables
        String localVarPath = "/conversation/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startConversationValidateBeforeCall(ConversationStartRequest startRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startRequest' is set
        if (startRequest == null) {
            throw new ApiException("Missing the required parameter 'startRequest' when calling startConversation(Async)");
        }
        

        com.squareup.okhttp.Call call = startConversationCall(startRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a conversation
     * Start a new conversation 
     * @param startRequest Start request (required)
     * @return ConversationStartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationStartResponse startConversation(ConversationStartRequest startRequest) throws ApiException {
        ApiResponse<ConversationStartResponse> resp = startConversationWithHttpInfo(startRequest);
        return resp.getData();
    }

    /**
     * Start a conversation
     * Start a new conversation 
     * @param startRequest Start request (required)
     * @return ApiResponse&lt;ConversationStartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationStartResponse> startConversationWithHttpInfo(ConversationStartRequest startRequest) throws ApiException {
        com.squareup.okhttp.Call call = startConversationValidateBeforeCall(startRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationStartResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start a conversation (asynchronously)
     * Start a new conversation 
     * @param startRequest Start request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startConversationAsync(ConversationStartRequest startRequest, final ApiCallback<ConversationStartResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startConversationValidateBeforeCall(startRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationStartResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAgentProfile
     * @param profileRequest Profile request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAgentProfileCall(ConversationAgentProfile profileRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = profileRequest;

        // create path and map variables
        String localVarPath = "/conversation/agent/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAgentProfileValidateBeforeCall(ConversationAgentProfile profileRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileRequest' is set
        if (profileRequest == null) {
            throw new ApiException("Missing the required parameter 'profileRequest' when calling updateAgentProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAgentProfileCall(profileRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update agent profile
     * Update agent profile 
     * @param profileRequest Profile request (required)
     * @return ConversationAgentProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationAgentProfileResponse updateAgentProfile(ConversationAgentProfile profileRequest) throws ApiException {
        ApiResponse<ConversationAgentProfileResponse> resp = updateAgentProfileWithHttpInfo(profileRequest);
        return resp.getData();
    }

    /**
     * Update agent profile
     * Update agent profile 
     * @param profileRequest Profile request (required)
     * @return ApiResponse&lt;ConversationAgentProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationAgentProfileResponse> updateAgentProfileWithHttpInfo(ConversationAgentProfile profileRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateAgentProfileValidateBeforeCall(profileRequest, null, null);
        Type localVarReturnType = new TypeToken<ConversationAgentProfileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update agent profile (asynchronously)
     * Update agent profile 
     * @param profileRequest Profile request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAgentProfileAsync(ConversationAgentProfile profileRequest, final ApiCallback<ConversationAgentProfileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAgentProfileValidateBeforeCall(profileRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationAgentProfileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConversationCannedMessage
     * @param conversationCannedMessageOid  (required)
     * @param cannedMessage Canned message (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConversationCannedMessageCall(Integer conversationCannedMessageOid, ConversationCannedMessage cannedMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cannedMessage;

        // create path and map variables
        String localVarPath = "/conversation/canned_messages/{conversation_canned_message_oid}"
            .replaceAll("\\{" + "conversation_canned_message_oid" + "\\}", apiClient.escapeString(conversationCannedMessageOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConversationCannedMessageValidateBeforeCall(Integer conversationCannedMessageOid, ConversationCannedMessage cannedMessage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationCannedMessageOid' is set
        if (conversationCannedMessageOid == null) {
            throw new ApiException("Missing the required parameter 'conversationCannedMessageOid' when calling updateConversationCannedMessage(Async)");
        }
        
        // verify the required parameter 'cannedMessage' is set
        if (cannedMessage == null) {
            throw new ApiException("Missing the required parameter 'cannedMessage' when calling updateConversationCannedMessage(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConversationCannedMessageCall(conversationCannedMessageOid, cannedMessage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a canned message
     * Update a canned message 
     * @param conversationCannedMessageOid  (required)
     * @param cannedMessage Canned message (required)
     * @return ConversationCannedMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationCannedMessageResponse updateConversationCannedMessage(Integer conversationCannedMessageOid, ConversationCannedMessage cannedMessage) throws ApiException {
        ApiResponse<ConversationCannedMessageResponse> resp = updateConversationCannedMessageWithHttpInfo(conversationCannedMessageOid, cannedMessage);
        return resp.getData();
    }

    /**
     * Update a canned message
     * Update a canned message 
     * @param conversationCannedMessageOid  (required)
     * @param cannedMessage Canned message (required)
     * @return ApiResponse&lt;ConversationCannedMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationCannedMessageResponse> updateConversationCannedMessageWithHttpInfo(Integer conversationCannedMessageOid, ConversationCannedMessage cannedMessage) throws ApiException {
        com.squareup.okhttp.Call call = updateConversationCannedMessageValidateBeforeCall(conversationCannedMessageOid, cannedMessage, null, null);
        Type localVarReturnType = new TypeToken<ConversationCannedMessageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a canned message (asynchronously)
     * Update a canned message 
     * @param conversationCannedMessageOid  (required)
     * @param cannedMessage Canned message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConversationCannedMessageAsync(Integer conversationCannedMessageOid, ConversationCannedMessage cannedMessage, final ApiCallback<ConversationCannedMessageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConversationCannedMessageValidateBeforeCall(conversationCannedMessageOid, cannedMessage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationCannedMessageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConversationDepartment
     * @param conversationDepartmentOid  (required)
     * @param department Department (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConversationDepartmentCall(Integer conversationDepartmentOid, ConversationDepartment department, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = department;

        // create path and map variables
        String localVarPath = "/conversation/departments/{conversation_department_oid}"
            .replaceAll("\\{" + "conversation_department_oid" + "\\}", apiClient.escapeString(conversationDepartmentOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConversationDepartmentValidateBeforeCall(Integer conversationDepartmentOid, ConversationDepartment department, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationDepartmentOid' is set
        if (conversationDepartmentOid == null) {
            throw new ApiException("Missing the required parameter 'conversationDepartmentOid' when calling updateConversationDepartment(Async)");
        }
        
        // verify the required parameter 'department' is set
        if (department == null) {
            throw new ApiException("Missing the required parameter 'department' when calling updateConversationDepartment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConversationDepartmentCall(conversationDepartmentOid, department, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a department
     * Update a department 
     * @param conversationDepartmentOid  (required)
     * @param department Department (required)
     * @return ConversationDepartmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationDepartmentResponse updateConversationDepartment(Integer conversationDepartmentOid, ConversationDepartment department) throws ApiException {
        ApiResponse<ConversationDepartmentResponse> resp = updateConversationDepartmentWithHttpInfo(conversationDepartmentOid, department);
        return resp.getData();
    }

    /**
     * Update a department
     * Update a department 
     * @param conversationDepartmentOid  (required)
     * @param department Department (required)
     * @return ApiResponse&lt;ConversationDepartmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationDepartmentResponse> updateConversationDepartmentWithHttpInfo(Integer conversationDepartmentOid, ConversationDepartment department) throws ApiException {
        com.squareup.okhttp.Call call = updateConversationDepartmentValidateBeforeCall(conversationDepartmentOid, department, null, null);
        Type localVarReturnType = new TypeToken<ConversationDepartmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a department (asynchronously)
     * Update a department 
     * @param conversationDepartmentOid  (required)
     * @param department Department (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConversationDepartmentAsync(Integer conversationDepartmentOid, ConversationDepartment department, final ApiCallback<ConversationDepartmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConversationDepartmentValidateBeforeCall(conversationDepartmentOid, department, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationDepartmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConversationEngagement
     * @param conversationEngagementOid  (required)
     * @param engagement Engagement (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConversationEngagementCall(Integer conversationEngagementOid, ConversationEngagement engagement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = engagement;

        // create path and map variables
        String localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
            .replaceAll("\\{" + "conversation_engagement_oid" + "\\}", apiClient.escapeString(conversationEngagementOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConversationEngagementValidateBeforeCall(Integer conversationEngagementOid, ConversationEngagement engagement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationEngagementOid' is set
        if (conversationEngagementOid == null) {
            throw new ApiException("Missing the required parameter 'conversationEngagementOid' when calling updateConversationEngagement(Async)");
        }
        
        // verify the required parameter 'engagement' is set
        if (engagement == null) {
            throw new ApiException("Missing the required parameter 'engagement' when calling updateConversationEngagement(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConversationEngagementCall(conversationEngagementOid, engagement, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a engagement
     * Update a engagement 
     * @param conversationEngagementOid  (required)
     * @param engagement Engagement (required)
     * @return ConversationEngagementResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationEngagementResponse updateConversationEngagement(Integer conversationEngagementOid, ConversationEngagement engagement) throws ApiException {
        ApiResponse<ConversationEngagementResponse> resp = updateConversationEngagementWithHttpInfo(conversationEngagementOid, engagement);
        return resp.getData();
    }

    /**
     * Update a engagement
     * Update a engagement 
     * @param conversationEngagementOid  (required)
     * @param engagement Engagement (required)
     * @return ApiResponse&lt;ConversationEngagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationEngagementResponse> updateConversationEngagementWithHttpInfo(Integer conversationEngagementOid, ConversationEngagement engagement) throws ApiException {
        com.squareup.okhttp.Call call = updateConversationEngagementValidateBeforeCall(conversationEngagementOid, engagement, null, null);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a engagement (asynchronously)
     * Update a engagement 
     * @param conversationEngagementOid  (required)
     * @param engagement Engagement (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConversationEngagementAsync(Integer conversationEngagementOid, ConversationEngagement engagement, final ApiCallback<ConversationEngagementResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConversationEngagementValidateBeforeCall(conversationEngagementOid, engagement, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationEngagementResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConversationWebchatQueueStatus
     * @param queueName  (required)
     * @param statusRequest Status request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateConversationWebchatQueueStatusCall(String queueName, ConversationWebchatQueueStatusUpdateRequest statusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = statusRequest;

        // create path and map variables
        String localVarPath = "/conversation/conversations/queues/{queue_name}/status"
            .replaceAll("\\{" + "queue_name" + "\\}", apiClient.escapeString(queueName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConversationWebchatQueueStatusValidateBeforeCall(String queueName, ConversationWebchatQueueStatusUpdateRequest statusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'queueName' is set
        if (queueName == null) {
            throw new ApiException("Missing the required parameter 'queueName' when calling updateConversationWebchatQueueStatus(Async)");
        }
        
        // verify the required parameter 'statusRequest' is set
        if (statusRequest == null) {
            throw new ApiException("Missing the required parameter 'statusRequest' when calling updateConversationWebchatQueueStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConversationWebchatQueueStatusCall(queueName, statusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update status within the queue
     * Update status within the queue 
     * @param queueName  (required)
     * @param statusRequest Status request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateConversationWebchatQueueStatus(String queueName, ConversationWebchatQueueStatusUpdateRequest statusRequest) throws ApiException {
        updateConversationWebchatQueueStatusWithHttpInfo(queueName, statusRequest);
    }

    /**
     * Update status within the queue
     * Update status within the queue 
     * @param queueName  (required)
     * @param statusRequest Status request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateConversationWebchatQueueStatusWithHttpInfo(String queueName, ConversationWebchatQueueStatusUpdateRequest statusRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateConversationWebchatQueueStatusValidateBeforeCall(queueName, statusRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update status within the queue (asynchronously)
     * Update status within the queue 
     * @param queueName  (required)
     * @param statusRequest Status request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateConversationWebchatQueueStatusAsync(String queueName, ConversationWebchatQueueStatusUpdateRequest statusRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConversationWebchatQueueStatusValidateBeforeCall(queueName, statusRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePbxAgent
     * @param conversationPbxAgentUuid  (required)
     * @param pbxAgent Pbx Agent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxAgentCall(String conversationPbxAgentUuid, ConversationPbxAgent pbxAgent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxAgent;

        // create path and map variables
        String localVarPath = "/conversation/pbx/agent/{conversationPbxAgentUuid}"
            .replaceAll("\\{" + "conversationPbxAgentUuid" + "\\}", apiClient.escapeString(conversationPbxAgentUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxAgentValidateBeforeCall(String conversationPbxAgentUuid, ConversationPbxAgent pbxAgent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAgentUuid' is set
        if (conversationPbxAgentUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAgentUuid' when calling updatePbxAgent(Async)");
        }
        
        // verify the required parameter 'pbxAgent' is set
        if (pbxAgent == null) {
            throw new ApiException("Missing the required parameter 'pbxAgent' when calling updatePbxAgent(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxAgentCall(conversationPbxAgentUuid, pbxAgent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx agent
     * Update a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @param pbxAgent Pbx Agent (required)
     * @return ConversationPbxAgentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAgentResponse updatePbxAgent(String conversationPbxAgentUuid, ConversationPbxAgent pbxAgent) throws ApiException {
        ApiResponse<ConversationPbxAgentResponse> resp = updatePbxAgentWithHttpInfo(conversationPbxAgentUuid, pbxAgent);
        return resp.getData();
    }

    /**
     * Update pbx agent
     * Update a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @param pbxAgent Pbx Agent (required)
     * @return ApiResponse&lt;ConversationPbxAgentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAgentResponse> updatePbxAgentWithHttpInfo(String conversationPbxAgentUuid, ConversationPbxAgent pbxAgent) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxAgentValidateBeforeCall(conversationPbxAgentUuid, pbxAgent, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx agent (asynchronously)
     * Update a pbx agent 
     * @param conversationPbxAgentUuid  (required)
     * @param pbxAgent Pbx Agent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxAgentAsync(String conversationPbxAgentUuid, ConversationPbxAgent pbxAgent, final ApiCallback<ConversationPbxAgentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxAgentValidateBeforeCall(conversationPbxAgentUuid, pbxAgent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAgentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxAudio
     * @param conversationPbxAudioUuid  (required)
     * @param pbxAudio Pbx Audio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxAudioCall(String conversationPbxAudioUuid, ConversationPbxAudio pbxAudio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxAudio;

        // create path and map variables
        String localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
            .replaceAll("\\{" + "conversationPbxAudioUuid" + "\\}", apiClient.escapeString(conversationPbxAudioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxAudioValidateBeforeCall(String conversationPbxAudioUuid, ConversationPbxAudio pbxAudio, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxAudioUuid' is set
        if (conversationPbxAudioUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxAudioUuid' when calling updatePbxAudio(Async)");
        }
        
        // verify the required parameter 'pbxAudio' is set
        if (pbxAudio == null) {
            throw new ApiException("Missing the required parameter 'pbxAudio' when calling updatePbxAudio(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxAudioCall(conversationPbxAudioUuid, pbxAudio, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx audio
     * Update a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @param pbxAudio Pbx Audio (required)
     * @return ConversationPbxAudioResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxAudioResponse updatePbxAudio(String conversationPbxAudioUuid, ConversationPbxAudio pbxAudio) throws ApiException {
        ApiResponse<ConversationPbxAudioResponse> resp = updatePbxAudioWithHttpInfo(conversationPbxAudioUuid, pbxAudio);
        return resp.getData();
    }

    /**
     * Update pbx audio
     * Update a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @param pbxAudio Pbx Audio (required)
     * @return ApiResponse&lt;ConversationPbxAudioResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxAudioResponse> updatePbxAudioWithHttpInfo(String conversationPbxAudioUuid, ConversationPbxAudio pbxAudio) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxAudioValidateBeforeCall(conversationPbxAudioUuid, pbxAudio, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx audio (asynchronously)
     * Update a pbx audio 
     * @param conversationPbxAudioUuid  (required)
     * @param pbxAudio Pbx Audio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxAudioAsync(String conversationPbxAudioUuid, ConversationPbxAudio pbxAudio, final ApiCallback<ConversationPbxAudioResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxAudioValidateBeforeCall(conversationPbxAudioUuid, pbxAudio, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxAudioResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxMenu
     * @param conversationPbxMenuUuid  (required)
     * @param pbxMenu Pbx Menu (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxMenuCall(String conversationPbxMenuUuid, ConversationPbxMenu pbxMenu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxMenu;

        // create path and map variables
        String localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
            .replaceAll("\\{" + "conversationPbxMenuUuid" + "\\}", apiClient.escapeString(conversationPbxMenuUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxMenuValidateBeforeCall(String conversationPbxMenuUuid, ConversationPbxMenu pbxMenu, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxMenuUuid' is set
        if (conversationPbxMenuUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxMenuUuid' when calling updatePbxMenu(Async)");
        }
        
        // verify the required parameter 'pbxMenu' is set
        if (pbxMenu == null) {
            throw new ApiException("Missing the required parameter 'pbxMenu' when calling updatePbxMenu(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxMenuCall(conversationPbxMenuUuid, pbxMenu, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx menu
     * Update a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @param pbxMenu Pbx Menu (required)
     * @return ConversationPbxMenuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxMenuResponse updatePbxMenu(String conversationPbxMenuUuid, ConversationPbxMenu pbxMenu) throws ApiException {
        ApiResponse<ConversationPbxMenuResponse> resp = updatePbxMenuWithHttpInfo(conversationPbxMenuUuid, pbxMenu);
        return resp.getData();
    }

    /**
     * Update pbx menu
     * Update a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @param pbxMenu Pbx Menu (required)
     * @return ApiResponse&lt;ConversationPbxMenuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxMenuResponse> updatePbxMenuWithHttpInfo(String conversationPbxMenuUuid, ConversationPbxMenu pbxMenu) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxMenuValidateBeforeCall(conversationPbxMenuUuid, pbxMenu, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx menu (asynchronously)
     * Update a pbx menu 
     * @param conversationPbxMenuUuid  (required)
     * @param pbxMenu Pbx Menu (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxMenuAsync(String conversationPbxMenuUuid, ConversationPbxMenu pbxMenu, final ApiCallback<ConversationPbxMenuResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxMenuValidateBeforeCall(conversationPbxMenuUuid, pbxMenu, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxMenuResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxPhoneNumber
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param pbxPhoneNumber Pbx PhoneNumber (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxPhoneNumberCall(String conversationPbxPhoneNumberUuid, ConversationPbxPhoneNumber pbxPhoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxPhoneNumber;

        // create path and map variables
        String localVarPath = "/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}"
            .replaceAll("\\{" + "conversationPbxPhoneNumberUuid" + "\\}", apiClient.escapeString(conversationPbxPhoneNumberUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxPhoneNumberValidateBeforeCall(String conversationPbxPhoneNumberUuid, ConversationPbxPhoneNumber pbxPhoneNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
        if (conversationPbxPhoneNumberUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling updatePbxPhoneNumber(Async)");
        }
        
        // verify the required parameter 'pbxPhoneNumber' is set
        if (pbxPhoneNumber == null) {
            throw new ApiException("Missing the required parameter 'pbxPhoneNumber' when calling updatePbxPhoneNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxPhoneNumberCall(conversationPbxPhoneNumberUuid, pbxPhoneNumber, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx phoneNumber
     * Update a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param pbxPhoneNumber Pbx PhoneNumber (required)
     * @return ConversationPbxPhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxPhoneNumberResponse updatePbxPhoneNumber(String conversationPbxPhoneNumberUuid, ConversationPbxPhoneNumber pbxPhoneNumber) throws ApiException {
        ApiResponse<ConversationPbxPhoneNumberResponse> resp = updatePbxPhoneNumberWithHttpInfo(conversationPbxPhoneNumberUuid, pbxPhoneNumber);
        return resp.getData();
    }

    /**
     * Update pbx phoneNumber
     * Update a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param pbxPhoneNumber Pbx PhoneNumber (required)
     * @return ApiResponse&lt;ConversationPbxPhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxPhoneNumberResponse> updatePbxPhoneNumberWithHttpInfo(String conversationPbxPhoneNumberUuid, ConversationPbxPhoneNumber pbxPhoneNumber) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxPhoneNumberValidateBeforeCall(conversationPbxPhoneNumberUuid, pbxPhoneNumber, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumberResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx phoneNumber (asynchronously)
     * Update a pbx phoneNumber 
     * @param conversationPbxPhoneNumberUuid  (required)
     * @param pbxPhoneNumber Pbx PhoneNumber (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxPhoneNumberAsync(String conversationPbxPhoneNumberUuid, ConversationPbxPhoneNumber pbxPhoneNumber, final ApiCallback<ConversationPbxPhoneNumberResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxPhoneNumberValidateBeforeCall(conversationPbxPhoneNumberUuid, pbxPhoneNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxPhoneNumberResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxQueue
     * @param conversationPbxQueueUuid  (required)
     * @param pbxQueue Pbx Queue (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxQueueCall(String conversationPbxQueueUuid, ConversationPbxQueue pbxQueue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxQueue;

        // create path and map variables
        String localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
            .replaceAll("\\{" + "conversationPbxQueueUuid" + "\\}", apiClient.escapeString(conversationPbxQueueUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxQueueValidateBeforeCall(String conversationPbxQueueUuid, ConversationPbxQueue pbxQueue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxQueueUuid' is set
        if (conversationPbxQueueUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxQueueUuid' when calling updatePbxQueue(Async)");
        }
        
        // verify the required parameter 'pbxQueue' is set
        if (pbxQueue == null) {
            throw new ApiException("Missing the required parameter 'pbxQueue' when calling updatePbxQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxQueueCall(conversationPbxQueueUuid, pbxQueue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx queue
     * Update a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @param pbxQueue Pbx Queue (required)
     * @return ConversationPbxQueueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxQueueResponse updatePbxQueue(String conversationPbxQueueUuid, ConversationPbxQueue pbxQueue) throws ApiException {
        ApiResponse<ConversationPbxQueueResponse> resp = updatePbxQueueWithHttpInfo(conversationPbxQueueUuid, pbxQueue);
        return resp.getData();
    }

    /**
     * Update pbx queue
     * Update a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @param pbxQueue Pbx Queue (required)
     * @return ApiResponse&lt;ConversationPbxQueueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxQueueResponse> updatePbxQueueWithHttpInfo(String conversationPbxQueueUuid, ConversationPbxQueue pbxQueue) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxQueueValidateBeforeCall(conversationPbxQueueUuid, pbxQueue, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx queue (asynchronously)
     * Update a pbx queue 
     * @param conversationPbxQueueUuid  (required)
     * @param pbxQueue Pbx Queue (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxQueueAsync(String conversationPbxQueueUuid, ConversationPbxQueue pbxQueue, final ApiCallback<ConversationPbxQueueResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxQueueValidateBeforeCall(conversationPbxQueueUuid, pbxQueue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxQueueResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxTimeBased
     * @param conversationPbxTimeBasedUuid  (required)
     * @param pbxTimeBased Pbx TimeBased (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxTimeBasedCall(String conversationPbxTimeBasedUuid, ConversationPbxTimeBased pbxTimeBased, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxTimeBased;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
            .replaceAll("\\{" + "conversationPbxTimeBasedUuid" + "\\}", apiClient.escapeString(conversationPbxTimeBasedUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxTimeBasedValidateBeforeCall(String conversationPbxTimeBasedUuid, ConversationPbxTimeBased pbxTimeBased, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeBasedUuid' is set
        if (conversationPbxTimeBasedUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling updatePbxTimeBased(Async)");
        }
        
        // verify the required parameter 'pbxTimeBased' is set
        if (pbxTimeBased == null) {
            throw new ApiException("Missing the required parameter 'pbxTimeBased' when calling updatePbxTimeBased(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxTimeBasedCall(conversationPbxTimeBasedUuid, pbxTimeBased, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx timeBased
     * Update a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @param pbxTimeBased Pbx TimeBased (required)
     * @return ConversationPbxTimeBasedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeBasedResponse updatePbxTimeBased(String conversationPbxTimeBasedUuid, ConversationPbxTimeBased pbxTimeBased) throws ApiException {
        ApiResponse<ConversationPbxTimeBasedResponse> resp = updatePbxTimeBasedWithHttpInfo(conversationPbxTimeBasedUuid, pbxTimeBased);
        return resp.getData();
    }

    /**
     * Update pbx timeBased
     * Update a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @param pbxTimeBased Pbx TimeBased (required)
     * @return ApiResponse&lt;ConversationPbxTimeBasedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeBasedResponse> updatePbxTimeBasedWithHttpInfo(String conversationPbxTimeBasedUuid, ConversationPbxTimeBased pbxTimeBased) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, pbxTimeBased, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx timeBased (asynchronously)
     * Update a pbx timeBased 
     * @param conversationPbxTimeBasedUuid  (required)
     * @param pbxTimeBased Pbx TimeBased (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxTimeBasedAsync(String conversationPbxTimeBasedUuid, ConversationPbxTimeBased pbxTimeBased, final ApiCallback<ConversationPbxTimeBasedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxTimeBasedValidateBeforeCall(conversationPbxTimeBasedUuid, pbxTimeBased, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeBasedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxTimeRange
     * @param conversationPbxTimeRangeUuid  (required)
     * @param pbxTimeRange Pbx TimeRange (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxTimeRangeCall(String conversationPbxTimeRangeUuid, ConversationPbxTimeRange pbxTimeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxTimeRange;

        // create path and map variables
        String localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
            .replaceAll("\\{" + "conversationPbxTimeRangeUuid" + "\\}", apiClient.escapeString(conversationPbxTimeRangeUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxTimeRangeValidateBeforeCall(String conversationPbxTimeRangeUuid, ConversationPbxTimeRange pbxTimeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxTimeRangeUuid' is set
        if (conversationPbxTimeRangeUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling updatePbxTimeRange(Async)");
        }
        
        // verify the required parameter 'pbxTimeRange' is set
        if (pbxTimeRange == null) {
            throw new ApiException("Missing the required parameter 'pbxTimeRange' when calling updatePbxTimeRange(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxTimeRangeCall(conversationPbxTimeRangeUuid, pbxTimeRange, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx timeRange
     * Update a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @param pbxTimeRange Pbx TimeRange (required)
     * @return ConversationPbxTimeRangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxTimeRangeResponse updatePbxTimeRange(String conversationPbxTimeRangeUuid, ConversationPbxTimeRange pbxTimeRange) throws ApiException {
        ApiResponse<ConversationPbxTimeRangeResponse> resp = updatePbxTimeRangeWithHttpInfo(conversationPbxTimeRangeUuid, pbxTimeRange);
        return resp.getData();
    }

    /**
     * Update pbx timeRange
     * Update a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @param pbxTimeRange Pbx TimeRange (required)
     * @return ApiResponse&lt;ConversationPbxTimeRangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxTimeRangeResponse> updatePbxTimeRangeWithHttpInfo(String conversationPbxTimeRangeUuid, ConversationPbxTimeRange pbxTimeRange) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, pbxTimeRange, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx timeRange (asynchronously)
     * Update a pbx timeRange 
     * @param conversationPbxTimeRangeUuid  (required)
     * @param pbxTimeRange Pbx TimeRange (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxTimeRangeAsync(String conversationPbxTimeRangeUuid, ConversationPbxTimeRange pbxTimeRange, final ApiCallback<ConversationPbxTimeRangeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxTimeRangeValidateBeforeCall(conversationPbxTimeRangeUuid, pbxTimeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxTimeRangeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePbxVoicemailMailbox
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePbxVoicemailMailboxCall(String conversationPbxVoicemailMailboxUuid, ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pbxVoicemailMailbox;

        // create path and map variables
        String localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
            .replaceAll("\\{" + "conversationPbxVoicemailMailboxUuid" + "\\}", apiClient.escapeString(conversationPbxVoicemailMailboxUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePbxVoicemailMailboxValidateBeforeCall(String conversationPbxVoicemailMailboxUuid, ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
        if (conversationPbxVoicemailMailboxUuid == null) {
            throw new ApiException("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling updatePbxVoicemailMailbox(Async)");
        }
        
        // verify the required parameter 'pbxVoicemailMailbox' is set
        if (pbxVoicemailMailbox == null) {
            throw new ApiException("Missing the required parameter 'pbxVoicemailMailbox' when calling updatePbxVoicemailMailbox(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePbxVoicemailMailboxCall(conversationPbxVoicemailMailboxUuid, pbxVoicemailMailbox, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update pbx voicemailMailbox
     * Update a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @return ConversationPbxVoicemailMailboxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationPbxVoicemailMailboxResponse updatePbxVoicemailMailbox(String conversationPbxVoicemailMailboxUuid, ConversationPbxVoicemailMailbox pbxVoicemailMailbox) throws ApiException {
        ApiResponse<ConversationPbxVoicemailMailboxResponse> resp = updatePbxVoicemailMailboxWithHttpInfo(conversationPbxVoicemailMailboxUuid, pbxVoicemailMailbox);
        return resp.getData();
    }

    /**
     * Update pbx voicemailMailbox
     * Update a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @return ApiResponse&lt;ConversationPbxVoicemailMailboxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationPbxVoicemailMailboxResponse> updatePbxVoicemailMailboxWithHttpInfo(String conversationPbxVoicemailMailboxUuid, ConversationPbxVoicemailMailbox pbxVoicemailMailbox) throws ApiException {
        com.squareup.okhttp.Call call = updatePbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, pbxVoicemailMailbox, null, null);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update pbx voicemailMailbox (asynchronously)
     * Update a pbx voicemailMailbox 
     * @param conversationPbxVoicemailMailboxUuid  (required)
     * @param pbxVoicemailMailbox Pbx VoicemailMailbox (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePbxVoicemailMailboxAsync(String conversationPbxVoicemailMailboxUuid, ConversationPbxVoicemailMailbox pbxVoicemailMailbox, final ApiCallback<ConversationPbxVoicemailMailboxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePbxVoicemailMailboxValidateBeforeCall(conversationPbxVoicemailMailboxUuid, pbxVoicemailMailbox, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationPbxVoicemailMailboxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVirtualAgentBudget
     * @param virtualAgentBudget Virtual Agent Budget (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVirtualAgentBudgetCall(ConversationVirtualAgentBudget virtualAgentBudget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = virtualAgentBudget;

        // create path and map variables
        String localVarPath = "/conversation/virtualagent/budget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVirtualAgentBudgetValidateBeforeCall(ConversationVirtualAgentBudget virtualAgentBudget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'virtualAgentBudget' is set
        if (virtualAgentBudget == null) {
            throw new ApiException("Missing the required parameter 'virtualAgentBudget' when calling updateVirtualAgentBudget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVirtualAgentBudgetCall(virtualAgentBudget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update virtual agent budget
     * Update virtual agent budget 
     * @param virtualAgentBudget Virtual Agent Budget (required)
     * @return ConversationVirtualAgentBudgetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationVirtualAgentBudgetResponse updateVirtualAgentBudget(ConversationVirtualAgentBudget virtualAgentBudget) throws ApiException {
        ApiResponse<ConversationVirtualAgentBudgetResponse> resp = updateVirtualAgentBudgetWithHttpInfo(virtualAgentBudget);
        return resp.getData();
    }

    /**
     * Update virtual agent budget
     * Update virtual agent budget 
     * @param virtualAgentBudget Virtual Agent Budget (required)
     * @return ApiResponse&lt;ConversationVirtualAgentBudgetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationVirtualAgentBudgetResponse> updateVirtualAgentBudgetWithHttpInfo(ConversationVirtualAgentBudget virtualAgentBudget) throws ApiException {
        com.squareup.okhttp.Call call = updateVirtualAgentBudgetValidateBeforeCall(virtualAgentBudget, null, null);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentBudgetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update virtual agent budget (asynchronously)
     * Update virtual agent budget 
     * @param virtualAgentBudget Virtual Agent Budget (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVirtualAgentBudgetAsync(ConversationVirtualAgentBudget virtualAgentBudget, final ApiCallback<ConversationVirtualAgentBudgetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVirtualAgentBudgetValidateBeforeCall(virtualAgentBudget, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentBudgetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVirtualAgentCapabilities
     * @param virtualAgentCapabilities Virtual Agent Capabilities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVirtualAgentCapabilitiesCall(ConversationVirtualAgentCapabilities virtualAgentCapabilities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = virtualAgentCapabilities;

        // create path and map variables
        String localVarPath = "/conversation/virtualagent/capabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVirtualAgentCapabilitiesValidateBeforeCall(ConversationVirtualAgentCapabilities virtualAgentCapabilities, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'virtualAgentCapabilities' is set
        if (virtualAgentCapabilities == null) {
            throw new ApiException("Missing the required parameter 'virtualAgentCapabilities' when calling updateVirtualAgentCapabilities(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVirtualAgentCapabilitiesCall(virtualAgentCapabilities, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update virtual agent capabilities
     * Update virtual agent capabilities 
     * @param virtualAgentCapabilities Virtual Agent Capabilities (required)
     * @return ConversationVirtualAgentCapabilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConversationVirtualAgentCapabilitiesResponse updateVirtualAgentCapabilities(ConversationVirtualAgentCapabilities virtualAgentCapabilities) throws ApiException {
        ApiResponse<ConversationVirtualAgentCapabilitiesResponse> resp = updateVirtualAgentCapabilitiesWithHttpInfo(virtualAgentCapabilities);
        return resp.getData();
    }

    /**
     * Update virtual agent capabilities
     * Update virtual agent capabilities 
     * @param virtualAgentCapabilities Virtual Agent Capabilities (required)
     * @return ApiResponse&lt;ConversationVirtualAgentCapabilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConversationVirtualAgentCapabilitiesResponse> updateVirtualAgentCapabilitiesWithHttpInfo(ConversationVirtualAgentCapabilities virtualAgentCapabilities) throws ApiException {
        com.squareup.okhttp.Call call = updateVirtualAgentCapabilitiesValidateBeforeCall(virtualAgentCapabilities, null, null);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentCapabilitiesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update virtual agent capabilities (asynchronously)
     * Update virtual agent capabilities 
     * @param virtualAgentCapabilities Virtual Agent Capabilities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVirtualAgentCapabilitiesAsync(ConversationVirtualAgentCapabilities virtualAgentCapabilities, final ApiCallback<ConversationVirtualAgentCapabilitiesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVirtualAgentCapabilitiesValidateBeforeCall(virtualAgentCapabilities, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConversationVirtualAgentCapabilitiesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

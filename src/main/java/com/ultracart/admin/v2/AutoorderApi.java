/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.AutoOrderResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.AutoOrder;
import com.ultracart.admin.v2.models.AutoOrdersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutoorderApi {
    private ApiClient apiClient;

    public AutoorderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutoorderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for autoOrderAutoOrdersAutoOrderOidGet */
    private com.squareup.okhttp.Call autoOrderAutoOrdersAutoOrderOidGetCall(Integer autoOrderOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'autoOrderOid' is set
        if (autoOrderOid == null) {
            throw new ApiException("Missing the required parameter 'autoOrderOid' when calling autoOrderAutoOrdersAutoOrderOidGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/{auto_order_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "auto_order_oid" + "\\}", apiClient.escapeString(autoOrderOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve an auto order
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse autoOrderAutoOrdersAutoOrderOidGet(Integer autoOrderOid, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = autoOrderAutoOrdersAutoOrderOidGetWithHttpInfo(autoOrderOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve an auto order
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> autoOrderAutoOrdersAutoOrderOidGetWithHttpInfo(Integer autoOrderOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = autoOrderAutoOrdersAutoOrderOidGetCall(autoOrderOid, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an auto order (asynchronously)
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoOrderAutoOrdersAutoOrderOidGetAsync(Integer autoOrderOid, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoOrderAutoOrdersAutoOrderOidGetCall(autoOrderOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for autoOrderAutoOrdersAutoOrderOidPut */
    private com.squareup.okhttp.Call autoOrderAutoOrdersAutoOrderOidPutCall(AutoOrder autoOrder, Integer autoOrderOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoOrder;
        
        // verify the required parameter 'autoOrder' is set
        if (autoOrder == null) {
            throw new ApiException("Missing the required parameter 'autoOrder' when calling autoOrderAutoOrdersAutoOrderOidPut(Async)");
        }
        
        // verify the required parameter 'autoOrderOid' is set
        if (autoOrderOid == null) {
            throw new ApiException("Missing the required parameter 'autoOrderOid' when calling autoOrderAutoOrdersAutoOrderOidPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/{auto_order_oid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "auto_order_oid" + "\\}", apiClient.escapeString(autoOrderOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an auto order
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse autoOrderAutoOrdersAutoOrderOidPut(AutoOrder autoOrder, Integer autoOrderOid) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = autoOrderAutoOrdersAutoOrderOidPutWithHttpInfo(autoOrder, autoOrderOid);
        return resp.getData();
    }

    /**
     * Update an auto order
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> autoOrderAutoOrdersAutoOrderOidPutWithHttpInfo(AutoOrder autoOrder, Integer autoOrderOid) throws ApiException {
        com.squareup.okhttp.Call call = autoOrderAutoOrdersAutoOrderOidPutCall(autoOrder, autoOrderOid, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an auto order (asynchronously)
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoOrderAutoOrdersAutoOrderOidPutAsync(AutoOrder autoOrder, Integer autoOrderOid, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoOrderAutoOrdersAutoOrderOidPutCall(autoOrder, autoOrderOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for autoOrderAutoOrdersGet */
    private com.squareup.okhttp.Call autoOrderAutoOrdersGetCall(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (autoOrderCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "auto_order_code", autoOrderCode));
        if (originalOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_order_id", originalOrderId));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "first_name", firstName));
        if (lastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_name", lastName));
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "company", company));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "city", city));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (postalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "postal_code", postalCode));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country_code", countryCode));
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phone", phone));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "email", email));
        if (originalOrderDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_order_date_begin", originalOrderDateBegin));
        if (originalOrderDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "original_order_date_end", originalOrderDateEnd));
        if (nextShipmentDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "next_shipment_date_begin", nextShipmentDateBegin));
        if (nextShipmentDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "next_shipment_date_end", nextShipmentDateEnd));
        if (cardType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "card_type", cardType));
        if (itemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_id", itemId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve auto orders
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrdersResponse autoOrderAutoOrdersGet(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<AutoOrdersResponse> resp = autoOrderAutoOrdersGetWithHttpInfo(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve auto orders
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrdersResponse> autoOrderAutoOrdersGetWithHttpInfo(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = autoOrderAutoOrdersGetCall(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve auto orders (asynchronously)
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call autoOrderAutoOrdersGetAsync(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<AutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = autoOrderAutoOrdersGetCall(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

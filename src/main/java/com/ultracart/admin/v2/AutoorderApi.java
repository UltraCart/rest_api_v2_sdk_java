/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.AutoOrder;
import com.ultracart.admin.v2.models.AutoOrderQuery;
import com.ultracart.admin.v2.models.AutoOrderQueryBatch;
import com.ultracart.admin.v2.models.AutoOrderResponse;
import com.ultracart.admin.v2.models.AutoOrdersRequest;
import com.ultracart.admin.v2.models.AutoOrdersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutoOrderApi {
    private ApiClient apiClient;

    public AutoOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutoOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public AutoOrderApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public AutoOrderApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for establishAutoOrderByReferenceOrderId
     * @param referenceOrderId The order id to attach this auto order to (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call establishAutoOrderByReferenceOrderIdCall(String referenceOrderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}"
            .replaceAll("\\{" + "reference_order_id" + "\\}", apiClient.escapeString(referenceOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call establishAutoOrderByReferenceOrderIdValidateBeforeCall(String referenceOrderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'referenceOrderId' is set
        if (referenceOrderId == null) {
            throw new ApiException("Missing the required parameter 'referenceOrderId' when calling establishAutoOrderByReferenceOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = establishAutoOrderByReferenceOrderIdCall(referenceOrderId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Establish an auto order by referencing a regular order id
     * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
     * @param referenceOrderId The order id to attach this auto order to (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse establishAutoOrderByReferenceOrderId(String referenceOrderId, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = establishAutoOrderByReferenceOrderIdWithHttpInfo(referenceOrderId, expand);
        return resp.getData();
    }

    /**
     * Establish an auto order by referencing a regular order id
     * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
     * @param referenceOrderId The order id to attach this auto order to (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> establishAutoOrderByReferenceOrderIdWithHttpInfo(String referenceOrderId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = establishAutoOrderByReferenceOrderIdValidateBeforeCall(referenceOrderId, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Establish an auto order by referencing a regular order id (asynchronously)
     * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment. 
     * @param referenceOrderId The order id to attach this auto order to (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call establishAutoOrderByReferenceOrderIdAsync(String referenceOrderId, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = establishAutoOrderByReferenceOrderIdValidateBeforeCall(referenceOrderId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrder
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderCall(Integer autoOrderOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
            .replaceAll("\\{" + "auto_order_oid" + "\\}", apiClient.escapeString(autoOrderOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrderValidateBeforeCall(Integer autoOrderOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrderOid' is set
        if (autoOrderOid == null) {
            throw new ApiException("Missing the required parameter 'autoOrderOid' when calling getAutoOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = getAutoOrderCall(autoOrderOid, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an auto order by oid
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse getAutoOrder(Integer autoOrderOid, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = getAutoOrderWithHttpInfo(autoOrderOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve an auto order by oid
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> getAutoOrderWithHttpInfo(Integer autoOrderOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrderValidateBeforeCall(autoOrderOid, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an auto order by oid (asynchronously)
     * Retrieves a single auto order using the specified auto order oid. 
     * @param autoOrderOid The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderAsync(Integer autoOrderOid, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrderValidateBeforeCall(autoOrderOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrderByCode
     * @param autoOrderCode The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderByCodeCall(String autoOrderCode, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/code/{auto_order_code}"
            .replaceAll("\\{" + "auto_order_code" + "\\}", apiClient.escapeString(autoOrderCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrderByCodeValidateBeforeCall(String autoOrderCode, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrderCode' is set
        if (autoOrderCode == null) {
            throw new ApiException("Missing the required parameter 'autoOrderCode' when calling getAutoOrderByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getAutoOrderByCodeCall(autoOrderCode, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an auto order by code
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param autoOrderCode The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse getAutoOrderByCode(String autoOrderCode, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = getAutoOrderByCodeWithHttpInfo(autoOrderCode, expand);
        return resp.getData();
    }

    /**
     * Retrieve an auto order by code
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param autoOrderCode The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> getAutoOrderByCodeWithHttpInfo(String autoOrderCode, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrderByCodeValidateBeforeCall(autoOrderCode, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an auto order by code (asynchronously)
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param autoOrderCode The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderByCodeAsync(String autoOrderCode, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrderByCodeValidateBeforeCall(autoOrderCode, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrderByReferenceOrderId
     * @param referenceOrderId The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderByReferenceOrderIdCall(String referenceOrderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}"
            .replaceAll("\\{" + "reference_order_id" + "\\}", apiClient.escapeString(referenceOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrderByReferenceOrderIdValidateBeforeCall(String referenceOrderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'referenceOrderId' is set
        if (referenceOrderId == null) {
            throw new ApiException("Missing the required parameter 'referenceOrderId' when calling getAutoOrderByReferenceOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = getAutoOrderByReferenceOrderIdCall(referenceOrderId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an auto order by order id
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param referenceOrderId The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse getAutoOrderByReferenceOrderId(String referenceOrderId, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = getAutoOrderByReferenceOrderIdWithHttpInfo(referenceOrderId, expand);
        return resp.getData();
    }

    /**
     * Retrieve an auto order by order id
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param referenceOrderId The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> getAutoOrderByReferenceOrderIdWithHttpInfo(String referenceOrderId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrderByReferenceOrderIdValidateBeforeCall(referenceOrderId, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an auto order by order id (asynchronously)
     * Retrieves a single auto order using the specified reference (original) order id. 
     * @param referenceOrderId The auto order oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrderByReferenceOrderIdAsync(String referenceOrderId, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrderByReferenceOrderIdValidateBeforeCall(referenceOrderId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrders
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersCall(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (autoOrderCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auto_order_code", autoOrderCode));
        if (originalOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("original_order_id", originalOrderId));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("first_name", firstName));
        if (lastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_name", lastName));
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("company", company));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("city", city));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (postalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("postal_code", postalCode));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country_code", countryCode));
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phone", phone));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
        if (originalOrderDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("original_order_date_begin", originalOrderDateBegin));
        if (originalOrderDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("original_order_date_end", originalOrderDateEnd));
        if (nextShipmentDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("next_shipment_date_begin", nextShipmentDateBegin));
        if (nextShipmentDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("next_shipment_date_end", nextShipmentDateEnd));
        if (cardType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("card_type", cardType));
        if (itemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("item_id", itemId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrdersValidateBeforeCall(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAutoOrdersCall(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve auto orders
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrdersResponse getAutoOrders(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        ApiResponse<AutoOrdersResponse> resp = getAutoOrdersWithHttpInfo(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve auto orders
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrdersResponse> getAutoOrdersWithHttpInfo(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrdersValidateBeforeCall(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve auto orders (asynchronously)
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderCode Auto order code (optional)
     * @param originalOrderId Original order id (optional)
     * @param firstName First name (optional)
     * @param lastName Last name (optional)
     * @param company Company (optional)
     * @param city City (optional)
     * @param state State (optional)
     * @param postalCode Postal code (optional)
     * @param countryCode Country code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param originalOrderDateBegin Original order date begin (optional)
     * @param originalOrderDateEnd Original order date end (optional)
     * @param nextShipmentDateBegin Next shipment date begin (optional)
     * @param nextShipmentDateEnd Next shipment date end (optional)
     * @param cardType Card type (optional)
     * @param itemId Item ID (optional)
     * @param status Status (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch auto orders that have been created/modified since this date/time. (optional)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersAsync(String autoOrderCode, String originalOrderId, String firstName, String lastName, String company, String city, String state, String postalCode, String countryCode, String phone, String email, String originalOrderDateBegin, String originalOrderDateEnd, String nextShipmentDateBegin, String nextShipmentDateEnd, String cardType, String itemId, String status, Integer limit, Integer offset, String since, String sort, String expand, final ApiCallback<AutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrdersValidateBeforeCall(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrdersBatch
     * @param autoOrderBatch Auto order batch (required)
     * @param expand The object expansion to perform on the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersBatchCall(AutoOrderQueryBatch autoOrderBatch, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoOrderBatch;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrdersBatchValidateBeforeCall(AutoOrderQueryBatch autoOrderBatch, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrderBatch' is set
        if (autoOrderBatch == null) {
            throw new ApiException("Missing the required parameter 'autoOrderBatch' when calling getAutoOrdersBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getAutoOrdersBatchCall(autoOrderBatch, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve auto order batch
     * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
     * @param autoOrderBatch Auto order batch (required)
     * @param expand The object expansion to perform on the result. (optional)
     * @return AutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrdersResponse getAutoOrdersBatch(AutoOrderQueryBatch autoOrderBatch, String expand) throws ApiException {
        ApiResponse<AutoOrdersResponse> resp = getAutoOrdersBatchWithHttpInfo(autoOrderBatch, expand);
        return resp.getData();
    }

    /**
     * Retrieve auto order batch
     * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
     * @param autoOrderBatch Auto order batch (required)
     * @param expand The object expansion to perform on the result. (optional)
     * @return ApiResponse&lt;AutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrdersResponse> getAutoOrdersBatchWithHttpInfo(AutoOrderQueryBatch autoOrderBatch, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrdersBatchValidateBeforeCall(autoOrderBatch, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve auto order batch (asynchronously)
     * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error. 
     * @param autoOrderBatch Auto order batch (required)
     * @param expand The object expansion to perform on the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersBatchAsync(AutoOrderQueryBatch autoOrderBatch, String expand, final ApiCallback<AutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrdersBatchValidateBeforeCall(autoOrderBatch, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoOrdersByQuery
     * @param autoOrderQuery Auto order query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersByQueryCall(AutoOrderQuery autoOrderQuery, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoOrderQuery;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoOrdersByQueryValidateBeforeCall(AutoOrderQuery autoOrderQuery, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrderQuery' is set
        if (autoOrderQuery == null) {
            throw new ApiException("Missing the required parameter 'autoOrderQuery' when calling getAutoOrdersByQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getAutoOrdersByQueryCall(autoOrderQuery, limit, offset, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve auto orders by query
     * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderQuery Auto order query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @return AutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrdersResponse getAutoOrdersByQuery(AutoOrderQuery autoOrderQuery, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        ApiResponse<AutoOrdersResponse> resp = getAutoOrdersByQueryWithHttpInfo(autoOrderQuery, limit, offset, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve auto orders by query
     * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderQuery Auto order query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @return ApiResponse&lt;AutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrdersResponse> getAutoOrdersByQueryWithHttpInfo(AutoOrderQuery autoOrderQuery, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getAutoOrdersByQueryValidateBeforeCall(autoOrderQuery, limit, offset, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve auto orders by query (asynchronously)
     * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param autoOrderQuery Auto order query (required)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoOrdersByQueryAsync(AutoOrderQuery autoOrderQuery, Integer limit, Integer offset, String sort, String expand, final ApiCallback<AutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoOrdersByQueryValidateBeforeCall(autoOrderQuery, limit, offset, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAutoOrder
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @param validateOriginalOrder Validate original order before updating (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAutoOrderCall(AutoOrder autoOrder, Integer autoOrderOid, String validateOriginalOrder, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoOrder;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
            .replaceAll("\\{" + "auto_order_oid" + "\\}", apiClient.escapeString(autoOrderOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (validateOriginalOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("validate_original_order", validateOriginalOrder));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAutoOrderValidateBeforeCall(AutoOrder autoOrder, Integer autoOrderOid, String validateOriginalOrder, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrder' is set
        if (autoOrder == null) {
            throw new ApiException("Missing the required parameter 'autoOrder' when calling updateAutoOrder(Async)");
        }
        
        // verify the required parameter 'autoOrderOid' is set
        if (autoOrderOid == null) {
            throw new ApiException("Missing the required parameter 'autoOrderOid' when calling updateAutoOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAutoOrderCall(autoOrder, autoOrderOid, validateOriginalOrder, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an auto order
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @param validateOriginalOrder Validate original order before updating (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return AutoOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrderResponse updateAutoOrder(AutoOrder autoOrder, Integer autoOrderOid, String validateOriginalOrder, String expand) throws ApiException {
        ApiResponse<AutoOrderResponse> resp = updateAutoOrderWithHttpInfo(autoOrder, autoOrderOid, validateOriginalOrder, expand);
        return resp.getData();
    }

    /**
     * Update an auto order
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @param validateOriginalOrder Validate original order before updating (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;AutoOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrderResponse> updateAutoOrderWithHttpInfo(AutoOrder autoOrder, Integer autoOrderOid, String validateOriginalOrder, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateAutoOrderValidateBeforeCall(autoOrder, autoOrderOid, validateOriginalOrder, expand, null, null);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an auto order (asynchronously)
     * Update an auto order on the UltraCart account. 
     * @param autoOrder Auto order to update (required)
     * @param autoOrderOid The auto order oid to update. (required)
     * @param validateOriginalOrder Validate original order before updating (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAutoOrderAsync(AutoOrder autoOrder, Integer autoOrderOid, String validateOriginalOrder, String expand, final ApiCallback<AutoOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAutoOrderValidateBeforeCall(autoOrder, autoOrderOid, validateOriginalOrder, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAutoOrdersBatch
     * @param autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAutoOrdersBatchCall(AutoOrdersRequest autoOrdersRequest, String expand, Boolean placeholders, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = autoOrdersRequest;

        // create path and map variables
        String localVarPath = "/auto_order/auto_orders/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));
        if (async != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_async", async));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAutoOrdersBatchValidateBeforeCall(AutoOrdersRequest autoOrdersRequest, String expand, Boolean placeholders, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'autoOrdersRequest' is set
        if (autoOrdersRequest == null) {
            throw new ApiException("Missing the required parameter 'autoOrdersRequest' when calling updateAutoOrdersBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAutoOrdersBatchCall(autoOrdersRequest, expand, placeholders, async, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update multiple auto orders
     * Update multiple auto orders on the UltraCart account. 
     * @param autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @return AutoOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutoOrdersResponse updateAutoOrdersBatch(AutoOrdersRequest autoOrdersRequest, String expand, Boolean placeholders, Boolean async) throws ApiException {
        ApiResponse<AutoOrdersResponse> resp = updateAutoOrdersBatchWithHttpInfo(autoOrdersRequest, expand, placeholders, async);
        return resp.getData();
    }

    /**
     * Update multiple auto orders
     * Update multiple auto orders on the UltraCart account. 
     * @param autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @return ApiResponse&lt;AutoOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutoOrdersResponse> updateAutoOrdersBatchWithHttpInfo(AutoOrdersRequest autoOrdersRequest, String expand, Boolean placeholders, Boolean async) throws ApiException {
        com.squareup.okhttp.Call call = updateAutoOrdersBatchValidateBeforeCall(autoOrdersRequest, expand, placeholders, async, null, null);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update multiple auto orders (asynchronously)
     * Update multiple auto orders on the UltraCart account. 
     * @param autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAutoOrdersBatchAsync(AutoOrdersRequest autoOrdersRequest, String expand, Boolean placeholders, Boolean async, final ApiCallback<AutoOrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAutoOrdersBatchValidateBeforeCall(autoOrdersRequest, expand, placeholders, async, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutoOrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.Coupon;
import com.ultracart.admin.v2.models.CouponAutoApplyConditions;
import com.ultracart.admin.v2.models.CouponCodesRequest;
import com.ultracart.admin.v2.models.CouponCodesResponse;
import com.ultracart.admin.v2.models.CouponDeletesRequest;
import com.ultracart.admin.v2.models.CouponEditorValues;
import com.ultracart.admin.v2.models.CouponExistsResponse;
import com.ultracart.admin.v2.models.CouponItemSearchResultsResponse;
import com.ultracart.admin.v2.models.CouponQuery;
import com.ultracart.admin.v2.models.CouponResponse;
import com.ultracart.admin.v2.models.CouponsRequest;
import com.ultracart.admin.v2.models.CouponsResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.UploadCouponCodesRequest;
import com.ultracart.admin.v2.models.UploadCouponCodesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CouponApi {
    private ApiClient apiClient;

    public CouponApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CouponApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public CouponApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public CouponApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCoupon
     * @param couponOid The coupon_oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCouponCall(Integer couponOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/coupons/{coupon_oid}"
            .replaceAll("\\{" + "coupon_oid" + "\\}", apiClient.escapeString(couponOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCouponValidateBeforeCall(Integer couponOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponOid' is set
        if (couponOid == null) {
            throw new ApiException("Missing the required parameter 'couponOid' when calling deleteCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCouponCall(couponOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a coupon
     * Delete a coupon on the UltraCart account. 
     * @param couponOid The coupon_oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCoupon(Integer couponOid) throws ApiException {
        deleteCouponWithHttpInfo(couponOid);
    }

    /**
     * Delete a coupon
     * Delete a coupon on the UltraCart account. 
     * @param couponOid The coupon_oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCouponWithHttpInfo(Integer couponOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteCouponValidateBeforeCall(couponOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a coupon (asynchronously)
     * Delete a coupon on the UltraCart account. 
     * @param couponOid The coupon_oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCouponAsync(Integer couponOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCouponValidateBeforeCall(couponOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCouponsByCode
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsByCodeCall(CouponDeletesRequest couponDeleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponDeleteRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/by_code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCouponsByCodeValidateBeforeCall(CouponDeletesRequest couponDeleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponDeleteRequest' is set
        if (couponDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'couponDeleteRequest' when calling deleteCouponsByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCouponsByCodeCall(couponDeleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes multiple coupons
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCouponsByCode(CouponDeletesRequest couponDeleteRequest) throws ApiException {
        deleteCouponsByCodeWithHttpInfo(couponDeleteRequest);
    }

    /**
     * Deletes multiple coupons
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCouponsByCodeWithHttpInfo(CouponDeletesRequest couponDeleteRequest) throws ApiException {
        com.squareup.okhttp.Call call = deleteCouponsByCodeValidateBeforeCall(couponDeleteRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes multiple coupons (asynchronously)
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsByCodeAsync(CouponDeletesRequest couponDeleteRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCouponsByCodeValidateBeforeCall(couponDeleteRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCouponsByOid
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsByOidCall(CouponDeletesRequest couponDeleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponDeleteRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/by_oid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCouponsByOidValidateBeforeCall(CouponDeletesRequest couponDeleteRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponDeleteRequest' is set
        if (couponDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'couponDeleteRequest' when calling deleteCouponsByOid(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCouponsByOidCall(couponDeleteRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes multiple coupons
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCouponsByOid(CouponDeletesRequest couponDeleteRequest) throws ApiException {
        deleteCouponsByOidWithHttpInfo(couponDeleteRequest);
    }

    /**
     * Deletes multiple coupons
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCouponsByOidWithHttpInfo(CouponDeletesRequest couponDeleteRequest) throws ApiException {
        com.squareup.okhttp.Call call = deleteCouponsByOidValidateBeforeCall(couponDeleteRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes multiple coupons (asynchronously)
     * Delete coupons on the UltraCart account. 
     * @param couponDeleteRequest Coupon oids to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCouponsByOidAsync(CouponDeletesRequest couponDeleteRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCouponsByOidValidateBeforeCall(couponDeleteRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for doesCouponCodeExist
     * @param merchantCode The coupon merchant code to examine. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doesCouponCodeExistCall(String merchantCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/exists"
            .replaceAll("\\{" + "merchant_code" + "\\}", apiClient.escapeString(merchantCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doesCouponCodeExistValidateBeforeCall(String merchantCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantCode' is set
        if (merchantCode == null) {
            throw new ApiException("Missing the required parameter 'merchantCode' when calling doesCouponCodeExist(Async)");
        }
        

        com.squareup.okhttp.Call call = doesCouponCodeExistCall(merchantCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Determines if a coupon merchant code already exists
     * Determines if a coupon merchant code already exists. 
     * @param merchantCode The coupon merchant code to examine. (required)
     * @return CouponExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponExistsResponse doesCouponCodeExist(String merchantCode) throws ApiException {
        ApiResponse<CouponExistsResponse> resp = doesCouponCodeExistWithHttpInfo(merchantCode);
        return resp.getData();
    }

    /**
     * Determines if a coupon merchant code already exists
     * Determines if a coupon merchant code already exists. 
     * @param merchantCode The coupon merchant code to examine. (required)
     * @return ApiResponse&lt;CouponExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponExistsResponse> doesCouponCodeExistWithHttpInfo(String merchantCode) throws ApiException {
        com.squareup.okhttp.Call call = doesCouponCodeExistValidateBeforeCall(merchantCode, null, null);
        Type localVarReturnType = new TypeToken<CouponExistsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determines if a coupon merchant code already exists (asynchronously)
     * Determines if a coupon merchant code already exists. 
     * @param merchantCode The coupon merchant code to examine. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doesCouponCodeExistAsync(String merchantCode, final ApiCallback<CouponExistsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doesCouponCodeExistValidateBeforeCall(merchantCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponExistsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateCouponCodes
     * @param couponOid The coupon oid to generate codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateCouponCodesCall(Integer couponOid, CouponCodesRequest couponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponCodesRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/{coupon_oid}/generate_codes"
            .replaceAll("\\{" + "coupon_oid" + "\\}", apiClient.escapeString(couponOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateCouponCodesValidateBeforeCall(Integer couponOid, CouponCodesRequest couponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponOid' is set
        if (couponOid == null) {
            throw new ApiException("Missing the required parameter 'couponOid' when calling generateCouponCodes(Async)");
        }
        
        // verify the required parameter 'couponCodesRequest' is set
        if (couponCodesRequest == null) {
            throw new ApiException("Missing the required parameter 'couponCodesRequest' when calling generateCouponCodes(Async)");
        }
        

        com.squareup.okhttp.Call call = generateCouponCodesCall(couponOid, couponCodesRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generates one time codes for a coupon
     * Generate one time codes for a coupon 
     * @param couponOid The coupon oid to generate codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @return CouponCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponCodesResponse generateCouponCodes(Integer couponOid, CouponCodesRequest couponCodesRequest) throws ApiException {
        ApiResponse<CouponCodesResponse> resp = generateCouponCodesWithHttpInfo(couponOid, couponCodesRequest);
        return resp.getData();
    }

    /**
     * Generates one time codes for a coupon
     * Generate one time codes for a coupon 
     * @param couponOid The coupon oid to generate codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @return ApiResponse&lt;CouponCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponCodesResponse> generateCouponCodesWithHttpInfo(Integer couponOid, CouponCodesRequest couponCodesRequest) throws ApiException {
        com.squareup.okhttp.Call call = generateCouponCodesValidateBeforeCall(couponOid, couponCodesRequest, null, null);
        Type localVarReturnType = new TypeToken<CouponCodesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates one time codes for a coupon (asynchronously)
     * Generate one time codes for a coupon 
     * @param couponOid The coupon oid to generate codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateCouponCodesAsync(Integer couponOid, CouponCodesRequest couponCodesRequest, final ApiCallback<CouponCodesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateCouponCodesValidateBeforeCall(couponOid, couponCodesRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponCodesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generateOneTimeCodesByMerchantCode
     * @param merchantCode The merchant code to generate one time codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generateOneTimeCodesByMerchantCodeCall(String merchantCode, CouponCodesRequest couponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponCodesRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/generate_codes"
            .replaceAll("\\{" + "merchant_code" + "\\}", apiClient.escapeString(merchantCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generateOneTimeCodesByMerchantCodeValidateBeforeCall(String merchantCode, CouponCodesRequest couponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantCode' is set
        if (merchantCode == null) {
            throw new ApiException("Missing the required parameter 'merchantCode' when calling generateOneTimeCodesByMerchantCode(Async)");
        }
        
        // verify the required parameter 'couponCodesRequest' is set
        if (couponCodesRequest == null) {
            throw new ApiException("Missing the required parameter 'couponCodesRequest' when calling generateOneTimeCodesByMerchantCode(Async)");
        }
        

        com.squareup.okhttp.Call call = generateOneTimeCodesByMerchantCodeCall(merchantCode, couponCodesRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generates one time codes by merchant code
     * Generate one time codes by merchant code 
     * @param merchantCode The merchant code to generate one time codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @return CouponCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponCodesResponse generateOneTimeCodesByMerchantCode(String merchantCode, CouponCodesRequest couponCodesRequest) throws ApiException {
        ApiResponse<CouponCodesResponse> resp = generateOneTimeCodesByMerchantCodeWithHttpInfo(merchantCode, couponCodesRequest);
        return resp.getData();
    }

    /**
     * Generates one time codes by merchant code
     * Generate one time codes by merchant code 
     * @param merchantCode The merchant code to generate one time codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @return ApiResponse&lt;CouponCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponCodesResponse> generateOneTimeCodesByMerchantCodeWithHttpInfo(String merchantCode, CouponCodesRequest couponCodesRequest) throws ApiException {
        com.squareup.okhttp.Call call = generateOneTimeCodesByMerchantCodeValidateBeforeCall(merchantCode, couponCodesRequest, null, null);
        Type localVarReturnType = new TypeToken<CouponCodesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates one time codes by merchant code (asynchronously)
     * Generate one time codes by merchant code 
     * @param merchantCode The merchant code to generate one time codes. (required)
     * @param couponCodesRequest Coupon code generation parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generateOneTimeCodesByMerchantCodeAsync(String merchantCode, CouponCodesRequest couponCodesRequest, final ApiCallback<CouponCodesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generateOneTimeCodesByMerchantCodeValidateBeforeCall(merchantCode, couponCodesRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponCodesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAutoApply
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAutoApplyCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/auto_apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAutoApplyValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAutoApplyCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve auto apply rules and conditions
     * Retrieve auto apply rules and conditions 
     * @return CouponAutoApplyConditions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponAutoApplyConditions getAutoApply() throws ApiException {
        ApiResponse<CouponAutoApplyConditions> resp = getAutoApplyWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve auto apply rules and conditions
     * Retrieve auto apply rules and conditions 
     * @return ApiResponse&lt;CouponAutoApplyConditions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponAutoApplyConditions> getAutoApplyWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAutoApplyValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CouponAutoApplyConditions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve auto apply rules and conditions (asynchronously)
     * Retrieve auto apply rules and conditions 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAutoApplyAsync(final ApiCallback<CouponAutoApplyConditions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAutoApplyValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponAutoApplyConditions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoupon
     * @param couponOid The coupon oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponCall(Integer couponOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/coupons/{coupon_oid}"
            .replaceAll("\\{" + "coupon_oid" + "\\}", apiClient.escapeString(couponOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponValidateBeforeCall(Integer couponOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponOid' is set
        if (couponOid == null) {
            throw new ApiException("Missing the required parameter 'couponOid' when calling getCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponCall(couponOid, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a coupon
     * Retrieves a single coupon using the specified coupon profile oid. 
     * @param couponOid The coupon oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponResponse getCoupon(Integer couponOid, String expand) throws ApiException {
        ApiResponse<CouponResponse> resp = getCouponWithHttpInfo(couponOid, expand);
        return resp.getData();
    }

    /**
     * Retrieve a coupon
     * Retrieves a single coupon using the specified coupon profile oid. 
     * @param couponOid The coupon oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponResponse> getCouponWithHttpInfo(Integer couponOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCouponValidateBeforeCall(couponOid, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a coupon (asynchronously)
     * Retrieves a single coupon using the specified coupon profile oid. 
     * @param couponOid The coupon oid to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponAsync(Integer couponOid, String expand, final ApiCallback<CouponResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponValidateBeforeCall(couponOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCouponByMerchantCode
     * @param merchantCode The coupon merchant code to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponByMerchantCodeCall(String merchantCode, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/coupons/merchant_code/{merchant_code}"
            .replaceAll("\\{" + "merchant_code" + "\\}", apiClient.escapeString(merchantCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponByMerchantCodeValidateBeforeCall(String merchantCode, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'merchantCode' is set
        if (merchantCode == null) {
            throw new ApiException("Missing the required parameter 'merchantCode' when calling getCouponByMerchantCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponByMerchantCodeCall(merchantCode, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a coupon by merchant code
     * Retrieves a single coupon using the specified merchant code. 
     * @param merchantCode The coupon merchant code to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponResponse getCouponByMerchantCode(String merchantCode, String expand) throws ApiException {
        ApiResponse<CouponResponse> resp = getCouponByMerchantCodeWithHttpInfo(merchantCode, expand);
        return resp.getData();
    }

    /**
     * Retrieve a coupon by merchant code
     * Retrieves a single coupon using the specified merchant code. 
     * @param merchantCode The coupon merchant code to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponResponse> getCouponByMerchantCodeWithHttpInfo(String merchantCode, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCouponByMerchantCodeValidateBeforeCall(merchantCode, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a coupon by merchant code (asynchronously)
     * Retrieves a single coupon using the specified merchant code. 
     * @param merchantCode The coupon merchant code to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponByMerchantCodeAsync(String merchantCode, String expand, final ApiCallback<CouponResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponByMerchantCodeValidateBeforeCall(merchantCode, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCoupons
     * @param merchantCode Merchant code (optional)
     * @param description Description (optional)
     * @param couponType Coupon type (optional)
     * @param startDateBegin Start date begin (optional)
     * @param startDateEnd Start date end (optional)
     * @param expirationDateBegin Expiration date begin (optional)
     * @param expirationDateEnd Expiration date end (optional)
     * @param affiliateOid Affiliate oid (optional)
     * @param excludeExpired Exclude expired (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsCall(String merchantCode, String description, String couponType, String startDateBegin, String startDateEnd, String expirationDateBegin, String expirationDateEnd, Integer affiliateOid, Boolean excludeExpired, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/coupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (merchantCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("merchant_code", merchantCode));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (couponType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("coupon_type", couponType));
        if (startDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date_begin", startDateBegin));
        if (startDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date_end", startDateEnd));
        if (expirationDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiration_date_begin", expirationDateBegin));
        if (expirationDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiration_date_end", expirationDateEnd));
        if (affiliateOid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("affiliate_oid", affiliateOid));
        if (excludeExpired != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_expired", excludeExpired));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsValidateBeforeCall(String merchantCode, String description, String couponType, String startDateBegin, String startDateEnd, String expirationDateBegin, String expirationDateEnd, Integer affiliateOid, Boolean excludeExpired, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCouponsCall(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve coupons
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param merchantCode Merchant code (optional)
     * @param description Description (optional)
     * @param couponType Coupon type (optional)
     * @param startDateBegin Start date begin (optional)
     * @param startDateEnd Start date end (optional)
     * @param expirationDateBegin Expiration date begin (optional)
     * @param expirationDateEnd Expiration date end (optional)
     * @param affiliateOid Affiliate oid (optional)
     * @param excludeExpired Exclude expired (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponsResponse getCoupons(String merchantCode, String description, String couponType, String startDateBegin, String startDateEnd, String expirationDateBegin, String expirationDateEnd, Integer affiliateOid, Boolean excludeExpired, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        ApiResponse<CouponsResponse> resp = getCouponsWithHttpInfo(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve coupons
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param merchantCode Merchant code (optional)
     * @param description Description (optional)
     * @param couponType Coupon type (optional)
     * @param startDateBegin Start date begin (optional)
     * @param startDateEnd Start date end (optional)
     * @param expirationDateBegin Expiration date begin (optional)
     * @param expirationDateEnd Expiration date end (optional)
     * @param affiliateOid Affiliate oid (optional)
     * @param excludeExpired Exclude expired (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponsResponse> getCouponsWithHttpInfo(String merchantCode, String description, String couponType, String startDateBegin, String startDateEnd, String expirationDateBegin, String expirationDateEnd, Integer affiliateOid, Boolean excludeExpired, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsValidateBeforeCall(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve coupons (asynchronously)
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param merchantCode Merchant code (optional)
     * @param description Description (optional)
     * @param couponType Coupon type (optional)
     * @param startDateBegin Start date begin (optional)
     * @param startDateEnd Start date end (optional)
     * @param expirationDateBegin Expiration date begin (optional)
     * @param expirationDateEnd Expiration date end (optional)
     * @param affiliateOid Affiliate oid (optional)
     * @param excludeExpired Exclude expired (optional)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsAsync(String merchantCode, String description, String couponType, String startDateBegin, String startDateEnd, String expirationDateBegin, String expirationDateEnd, Integer affiliateOid, Boolean excludeExpired, Integer limit, Integer offset, String sort, String expand, final ApiCallback<CouponsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsValidateBeforeCall(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCouponsByQuery
     * @param couponQuery Coupon query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCouponsByQueryCall(CouponQuery couponQuery, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponQuery;

        // create path and map variables
        String localVarPath = "/coupon/coupons/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCouponsByQueryValidateBeforeCall(CouponQuery couponQuery, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponQuery' is set
        if (couponQuery == null) {
            throw new ApiException("Missing the required parameter 'couponQuery' when calling getCouponsByQuery(Async)");
        }
        

        com.squareup.okhttp.Call call = getCouponsByQueryCall(couponQuery, limit, offset, sort, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve coupons by query
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param couponQuery Coupon query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponsResponse getCouponsByQuery(CouponQuery couponQuery, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        ApiResponse<CouponsResponse> resp = getCouponsByQueryWithHttpInfo(couponQuery, limit, offset, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve coupons by query
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param couponQuery Coupon query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponsResponse> getCouponsByQueryWithHttpInfo(CouponQuery couponQuery, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getCouponsByQueryValidateBeforeCall(couponQuery, limit, offset, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve coupons by query (asynchronously)
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param couponQuery Coupon query (required)
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCouponsByQueryAsync(CouponQuery couponQuery, Integer limit, Integer offset, String sort, String expand, final ApiCallback<CouponsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCouponsByQueryValidateBeforeCall(couponQuery, limit, offset, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEditorValues
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEditorValuesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/editor_values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEditorValuesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEditorValuesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve values needed for a coupon editor
     * Retrieve values needed for a coupon editor 
     * @return CouponEditorValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponEditorValues getEditorValues() throws ApiException {
        ApiResponse<CouponEditorValues> resp = getEditorValuesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve values needed for a coupon editor
     * Retrieve values needed for a coupon editor 
     * @return ApiResponse&lt;CouponEditorValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponEditorValues> getEditorValuesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEditorValuesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CouponEditorValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve values needed for a coupon editor (asynchronously)
     * Retrieve values needed for a coupon editor 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEditorValuesAsync(final ApiCallback<CouponEditorValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEditorValuesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponEditorValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCoupon
     * @param coupon Coupon to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCouponCall(Coupon coupon, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = coupon;

        // create path and map variables
        String localVarPath = "/coupon/coupons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCouponValidateBeforeCall(Coupon coupon, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'coupon' is set
        if (coupon == null) {
            throw new ApiException("Missing the required parameter 'coupon' when calling insertCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCouponCall(coupon, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a coupon
     * Insert a coupon on the UltraCart account. 
     * @param coupon Coupon to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponResponse insertCoupon(Coupon coupon, String expand) throws ApiException {
        ApiResponse<CouponResponse> resp = insertCouponWithHttpInfo(coupon, expand);
        return resp.getData();
    }

    /**
     * Insert a coupon
     * Insert a coupon on the UltraCart account. 
     * @param coupon Coupon to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponResponse> insertCouponWithHttpInfo(Coupon coupon, String expand) throws ApiException {
        com.squareup.okhttp.Call call = insertCouponValidateBeforeCall(coupon, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a coupon (asynchronously)
     * Insert a coupon on the UltraCart account. 
     * @param coupon Coupon to insert (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCouponAsync(Coupon coupon, String expand, final ApiCallback<CouponResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCouponValidateBeforeCall(coupon, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertCoupons
     * @param couponsRequest Coupons to insert (maximum 20) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertCouponsCall(CouponsRequest couponsRequest, String expand, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponsRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertCouponsValidateBeforeCall(CouponsRequest couponsRequest, String expand, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponsRequest' is set
        if (couponsRequest == null) {
            throw new ApiException("Missing the required parameter 'couponsRequest' when calling insertCoupons(Async)");
        }
        

        com.squareup.okhttp.Call call = insertCouponsCall(couponsRequest, expand, placeholders, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert multiple coupons
     * Insert multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to insert (maximum 20) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return CouponsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponsResponse insertCoupons(CouponsRequest couponsRequest, String expand, Boolean placeholders) throws ApiException {
        ApiResponse<CouponsResponse> resp = insertCouponsWithHttpInfo(couponsRequest, expand, placeholders);
        return resp.getData();
    }

    /**
     * Insert multiple coupons
     * Insert multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to insert (maximum 20) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;CouponsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponsResponse> insertCouponsWithHttpInfo(CouponsRequest couponsRequest, String expand, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = insertCouponsValidateBeforeCall(couponsRequest, expand, placeholders, null, null);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert multiple coupons (asynchronously)
     * Insert multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to insert (maximum 20) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertCouponsAsync(CouponsRequest couponsRequest, String expand, Boolean placeholders, final ApiCallback<CouponsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertCouponsValidateBeforeCall(couponsRequest, expand, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchItems
     * @param s  (optional)
     * @param m  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchItemsCall(String s, Integer m, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coupon/searchItems";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (s != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("s", s));
        if (m != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("m", m));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchItemsValidateBeforeCall(String s, Integer m, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchItemsCall(s, m, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Searches for items to display within a coupon editor and assign to coupons
     * Searches for items to display within a coupon editor and assign to coupons 
     * @param s  (optional)
     * @param m  (optional)
     * @return CouponItemSearchResultsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponItemSearchResultsResponse searchItems(String s, Integer m) throws ApiException {
        ApiResponse<CouponItemSearchResultsResponse> resp = searchItemsWithHttpInfo(s, m);
        return resp.getData();
    }

    /**
     * Searches for items to display within a coupon editor and assign to coupons
     * Searches for items to display within a coupon editor and assign to coupons 
     * @param s  (optional)
     * @param m  (optional)
     * @return ApiResponse&lt;CouponItemSearchResultsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponItemSearchResultsResponse> searchItemsWithHttpInfo(String s, Integer m) throws ApiException {
        com.squareup.okhttp.Call call = searchItemsValidateBeforeCall(s, m, null, null);
        Type localVarReturnType = new TypeToken<CouponItemSearchResultsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Searches for items to display within a coupon editor and assign to coupons (asynchronously)
     * Searches for items to display within a coupon editor and assign to coupons 
     * @param s  (optional)
     * @param m  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchItemsAsync(String s, Integer m, final ApiCallback<CouponItemSearchResultsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchItemsValidateBeforeCall(s, m, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponItemSearchResultsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAutoApply
     * @param conditions Conditions (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAutoApplyCall(CouponAutoApplyConditions conditions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = conditions;

        // create path and map variables
        String localVarPath = "/coupon/auto_apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAutoApplyValidateBeforeCall(CouponAutoApplyConditions conditions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'conditions' is set
        if (conditions == null) {
            throw new ApiException("Missing the required parameter 'conditions' when calling updateAutoApply(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAutoApplyCall(conditions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update auto apply rules and conditions
     * Update auto apply rules and conditions 
     * @param conditions Conditions (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAutoApply(CouponAutoApplyConditions conditions) throws ApiException {
        updateAutoApplyWithHttpInfo(conditions);
    }

    /**
     * Update auto apply rules and conditions
     * Update auto apply rules and conditions 
     * @param conditions Conditions (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAutoApplyWithHttpInfo(CouponAutoApplyConditions conditions) throws ApiException {
        com.squareup.okhttp.Call call = updateAutoApplyValidateBeforeCall(conditions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update auto apply rules and conditions (asynchronously)
     * Update auto apply rules and conditions 
     * @param conditions Conditions (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAutoApplyAsync(CouponAutoApplyConditions conditions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAutoApplyValidateBeforeCall(conditions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateCoupon
     * @param coupon Coupon to update (required)
     * @param couponOid The coupon_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCouponCall(Coupon coupon, Integer couponOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = coupon;

        // create path and map variables
        String localVarPath = "/coupon/coupons/{coupon_oid}"
            .replaceAll("\\{" + "coupon_oid" + "\\}", apiClient.escapeString(couponOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCouponValidateBeforeCall(Coupon coupon, Integer couponOid, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'coupon' is set
        if (coupon == null) {
            throw new ApiException("Missing the required parameter 'coupon' when calling updateCoupon(Async)");
        }
        
        // verify the required parameter 'couponOid' is set
        if (couponOid == null) {
            throw new ApiException("Missing the required parameter 'couponOid' when calling updateCoupon(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCouponCall(coupon, couponOid, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a coupon
     * Update a coupon on the UltraCart account. 
     * @param coupon Coupon to update (required)
     * @param couponOid The coupon_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return CouponResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponResponse updateCoupon(Coupon coupon, Integer couponOid, String expand) throws ApiException {
        ApiResponse<CouponResponse> resp = updateCouponWithHttpInfo(coupon, couponOid, expand);
        return resp.getData();
    }

    /**
     * Update a coupon
     * Update a coupon on the UltraCart account. 
     * @param coupon Coupon to update (required)
     * @param couponOid The coupon_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;CouponResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponResponse> updateCouponWithHttpInfo(Coupon coupon, Integer couponOid, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateCouponValidateBeforeCall(coupon, couponOid, expand, null, null);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a coupon (asynchronously)
     * Update a coupon on the UltraCart account. 
     * @param coupon Coupon to update (required)
     * @param couponOid The coupon_oid to update. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCouponAsync(Coupon coupon, Integer couponOid, String expand, final ApiCallback<CouponResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCouponValidateBeforeCall(coupon, couponOid, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCoupons
     * @param couponsRequest Coupons to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCouponsCall(CouponsRequest couponsRequest, String expand, Boolean placeholders, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = couponsRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));
        if (async != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_async", async));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCouponsValidateBeforeCall(CouponsRequest couponsRequest, String expand, Boolean placeholders, Boolean async, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponsRequest' is set
        if (couponsRequest == null) {
            throw new ApiException("Missing the required parameter 'couponsRequest' when calling updateCoupons(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCouponsCall(couponsRequest, expand, placeholders, async, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update multiple coupons
     * Update multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @return CouponsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CouponsResponse updateCoupons(CouponsRequest couponsRequest, String expand, Boolean placeholders, Boolean async) throws ApiException {
        ApiResponse<CouponsResponse> resp = updateCouponsWithHttpInfo(couponsRequest, expand, placeholders, async);
        return resp.getData();
    }

    /**
     * Update multiple coupons
     * Update multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @return ApiResponse&lt;CouponsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CouponsResponse> updateCouponsWithHttpInfo(CouponsRequest couponsRequest, String expand, Boolean placeholders, Boolean async) throws ApiException {
        com.squareup.okhttp.Call call = updateCouponsValidateBeforeCall(couponsRequest, expand, placeholders, async, null, null);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update multiple coupons (asynchronously)
     * Update multiple coupon on the UltraCart account. 
     * @param couponsRequest Coupons to update (synchronous maximum 20 / asynchronous maximum 100) (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param async True if the operation should be run async.  No result returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCouponsAsync(CouponsRequest couponsRequest, String expand, Boolean placeholders, Boolean async, final ApiCallback<CouponsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCouponsValidateBeforeCall(couponsRequest, expand, placeholders, async, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CouponsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadCouponCodes
     * @param couponOid The coupon oid to associate with the provided one-time codes. (required)
     * @param uploadCouponCodesRequest One-time coupon codes (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadCouponCodesCall(Integer couponOid, UploadCouponCodesRequest uploadCouponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uploadCouponCodesRequest;

        // create path and map variables
        String localVarPath = "/coupon/coupons/{coupon_oid}/upload_codes"
            .replaceAll("\\{" + "coupon_oid" + "\\}", apiClient.escapeString(couponOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadCouponCodesValidateBeforeCall(Integer couponOid, UploadCouponCodesRequest uploadCouponCodesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'couponOid' is set
        if (couponOid == null) {
            throw new ApiException("Missing the required parameter 'couponOid' when calling uploadCouponCodes(Async)");
        }
        
        // verify the required parameter 'uploadCouponCodesRequest' is set
        if (uploadCouponCodesRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadCouponCodesRequest' when calling uploadCouponCodes(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadCouponCodesCall(couponOid, uploadCouponCodesRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload one-time codes for a coupon
     * Upload one-time codes for a coupon 
     * @param couponOid The coupon oid to associate with the provided one-time codes. (required)
     * @param uploadCouponCodesRequest One-time coupon codes (required)
     * @return UploadCouponCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadCouponCodesResponse uploadCouponCodes(Integer couponOid, UploadCouponCodesRequest uploadCouponCodesRequest) throws ApiException {
        ApiResponse<UploadCouponCodesResponse> resp = uploadCouponCodesWithHttpInfo(couponOid, uploadCouponCodesRequest);
        return resp.getData();
    }

    /**
     * Upload one-time codes for a coupon
     * Upload one-time codes for a coupon 
     * @param couponOid The coupon oid to associate with the provided one-time codes. (required)
     * @param uploadCouponCodesRequest One-time coupon codes (required)
     * @return ApiResponse&lt;UploadCouponCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadCouponCodesResponse> uploadCouponCodesWithHttpInfo(Integer couponOid, UploadCouponCodesRequest uploadCouponCodesRequest) throws ApiException {
        com.squareup.okhttp.Call call = uploadCouponCodesValidateBeforeCall(couponOid, uploadCouponCodesRequest, null, null);
        Type localVarReturnType = new TypeToken<UploadCouponCodesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload one-time codes for a coupon (asynchronously)
     * Upload one-time codes for a coupon 
     * @param couponOid The coupon oid to associate with the provided one-time codes. (required)
     * @param uploadCouponCodesRequest One-time coupon codes (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadCouponCodesAsync(Integer couponOid, UploadCouponCodesRequest uploadCouponCodesRequest, final ApiCallback<UploadCouponCodesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadCouponCodesValidateBeforeCall(couponOid, uploadCouponCodesRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadCouponCodesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

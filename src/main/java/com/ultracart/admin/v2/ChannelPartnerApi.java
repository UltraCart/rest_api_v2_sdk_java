/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ChannelPartnerCancelResponse;
import com.ultracart.admin.v2.models.ChannelPartnerEstimateShippingResponse;
import com.ultracart.admin.v2.models.ChannelPartnerEstimateTaxResponse;
import com.ultracart.admin.v2.models.ChannelPartnerImportResponse;
import com.ultracart.admin.v2.models.ChannelPartnerOrder;
import com.ultracart.admin.v2.models.ChannelPartnerShipToPreference;
import com.ultracart.admin.v2.models.ChannelPartnerShipToPreferenceResponse;
import com.ultracart.admin.v2.models.ChannelPartnerShipToPreferencesResponse;
import com.ultracart.admin.v2.models.ChannelPartnersResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Order;
import com.ultracart.admin.v2.models.OrderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChannelPartnerApi {
    private ApiClient apiClient;

    public ChannelPartnerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelPartnerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public ChannelPartnerApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public ChannelPartnerApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelOrderByChannelPartnerOrderId
     * @param orderId The channel partner order id to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelOrderByChannelPartnerOrderIdCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/cancel/by_channel_partner_order_id/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelOrderByChannelPartnerOrderIdValidateBeforeCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrderByChannelPartnerOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelOrderByChannelPartnerOrderIdCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel channel partner order by channel partner order id
     * Cancel channel partner order by channel partner order id 
     * @param orderId The channel partner order id to delete. (required)
     * @return ChannelPartnerCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerCancelResponse cancelOrderByChannelPartnerOrderId(String orderId) throws ApiException {
        ApiResponse<ChannelPartnerCancelResponse> resp = cancelOrderByChannelPartnerOrderIdWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Cancel channel partner order by channel partner order id
     * Cancel channel partner order by channel partner order id 
     * @param orderId The channel partner order id to delete. (required)
     * @return ApiResponse&lt;ChannelPartnerCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerCancelResponse> cancelOrderByChannelPartnerOrderIdWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelOrderByChannelPartnerOrderIdValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerCancelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel channel partner order by channel partner order id (asynchronously)
     * Cancel channel partner order by channel partner order id 
     * @param orderId The channel partner order id to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelOrderByChannelPartnerOrderIdAsync(String orderId, final ApiCallback<ChannelPartnerCancelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelOrderByChannelPartnerOrderIdValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerCancelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelOrderByUltraCartOrderId
     * @param orderId The UltraCart order id to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelOrderByUltraCartOrderIdCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/cancel/by_ultracart_order_id/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelOrderByUltraCartOrderIdValidateBeforeCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrderByUltraCartOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelOrderByUltraCartOrderIdCall(orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel channel partner order by UltraCart order id
     * Cancel channel partner order by UltraCart order id 
     * @param orderId The UltraCart order id to delete. (required)
     * @return ChannelPartnerCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerCancelResponse cancelOrderByUltraCartOrderId(String orderId) throws ApiException {
        ApiResponse<ChannelPartnerCancelResponse> resp = cancelOrderByUltraCartOrderIdWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Cancel channel partner order by UltraCart order id
     * Cancel channel partner order by UltraCart order id 
     * @param orderId The UltraCart order id to delete. (required)
     * @return ApiResponse&lt;ChannelPartnerCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerCancelResponse> cancelOrderByUltraCartOrderIdWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelOrderByUltraCartOrderIdValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerCancelResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel channel partner order by UltraCart order id (asynchronously)
     * Cancel channel partner order by UltraCart order id 
     * @param orderId The UltraCart order id to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelOrderByUltraCartOrderIdAsync(String orderId, final ApiCallback<ChannelPartnerCancelResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelOrderByUltraCartOrderIdValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerCancelResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteChannelPartnerShipToPreference
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChannelPartnerShipToPreferenceCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
            .replaceAll("\\{" + "channel_partner_oid" + "\\}", apiClient.escapeString(channelPartnerOid.toString()))
            .replaceAll("\\{" + "channel_partner_ship_to_preference_oid" + "\\}", apiClient.escapeString(channelPartnerShipToPreferenceOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChannelPartnerShipToPreferenceValidateBeforeCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOid' is set
        if (channelPartnerOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOid' when calling deleteChannelPartnerShipToPreference(Async)");
        }
        
        // verify the required parameter 'channelPartnerShipToPreferenceOid' is set
        if (channelPartnerShipToPreferenceOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerShipToPreferenceOid' when calling deleteChannelPartnerShipToPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteChannelPartnerShipToPreferenceCall(channelPartnerOid, channelPartnerShipToPreferenceOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a ship to preference record for the channel partner.
     * Delete a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChannelPartnerShipToPreference(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid) throws ApiException {
        deleteChannelPartnerShipToPreferenceWithHttpInfo(channelPartnerOid, channelPartnerShipToPreferenceOid);
    }

    /**
     * Delete a ship to preference record for the channel partner.
     * Delete a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChannelPartnerShipToPreferenceWithHttpInfo(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a ship to preference record for the channel partner. (asynchronously)
     * Delete a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChannelPartnerShipToPreferenceAsync(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for estimateShippingForChannelPartnerOrder
     * @param channelPartnerOrder Order needing shipping estimate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call estimateShippingForChannelPartnerOrderCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = channelPartnerOrder;

        // create path and map variables
        String localVarPath = "/channel_partner/estimate_shipping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call estimateShippingForChannelPartnerOrderValidateBeforeCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOrder' is set
        if (channelPartnerOrder == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOrder' when calling estimateShippingForChannelPartnerOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = estimateShippingForChannelPartnerOrderCall(channelPartnerOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Estimate shipping for channel partner order
     * Estimate shipping for order from a channel partner. 
     * @param channelPartnerOrder Order needing shipping estimate (required)
     * @return ChannelPartnerEstimateShippingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerEstimateShippingResponse estimateShippingForChannelPartnerOrder(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        ApiResponse<ChannelPartnerEstimateShippingResponse> resp = estimateShippingForChannelPartnerOrderWithHttpInfo(channelPartnerOrder);
        return resp.getData();
    }

    /**
     * Estimate shipping for channel partner order
     * Estimate shipping for order from a channel partner. 
     * @param channelPartnerOrder Order needing shipping estimate (required)
     * @return ApiResponse&lt;ChannelPartnerEstimateShippingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerEstimateShippingResponse> estimateShippingForChannelPartnerOrderWithHttpInfo(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        com.squareup.okhttp.Call call = estimateShippingForChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerEstimateShippingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Estimate shipping for channel partner order (asynchronously)
     * Estimate shipping for order from a channel partner. 
     * @param channelPartnerOrder Order needing shipping estimate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call estimateShippingForChannelPartnerOrderAsync(ChannelPartnerOrder channelPartnerOrder, final ApiCallback<ChannelPartnerEstimateShippingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = estimateShippingForChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerEstimateShippingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for estimateTaxForChannelPartnerOrder
     * @param channelPartnerOrder Order needing tax estimate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call estimateTaxForChannelPartnerOrderCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = channelPartnerOrder;

        // create path and map variables
        String localVarPath = "/channel_partner/estimate_tax";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call estimateTaxForChannelPartnerOrderValidateBeforeCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOrder' is set
        if (channelPartnerOrder == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOrder' when calling estimateTaxForChannelPartnerOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = estimateTaxForChannelPartnerOrderCall(channelPartnerOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Estimate tax for channel partner order
     * Estimate tax for order from a channel partner. 
     * @param channelPartnerOrder Order needing tax estimate (required)
     * @return ChannelPartnerEstimateTaxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerEstimateTaxResponse estimateTaxForChannelPartnerOrder(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        ApiResponse<ChannelPartnerEstimateTaxResponse> resp = estimateTaxForChannelPartnerOrderWithHttpInfo(channelPartnerOrder);
        return resp.getData();
    }

    /**
     * Estimate tax for channel partner order
     * Estimate tax for order from a channel partner. 
     * @param channelPartnerOrder Order needing tax estimate (required)
     * @return ApiResponse&lt;ChannelPartnerEstimateTaxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerEstimateTaxResponse> estimateTaxForChannelPartnerOrderWithHttpInfo(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        com.squareup.okhttp.Call call = estimateTaxForChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerEstimateTaxResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Estimate tax for channel partner order (asynchronously)
     * Estimate tax for order from a channel partner. 
     * @param channelPartnerOrder Order needing tax estimate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call estimateTaxForChannelPartnerOrderAsync(ChannelPartnerOrder channelPartnerOrder, final ApiCallback<ChannelPartnerEstimateTaxResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = estimateTaxForChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerEstimateTaxResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelPartnerOrder
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerOrderCall(String orderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/orders/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelPartnerOrderValidateBeforeCall(String orderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getChannelPartnerOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelPartnerOrderCall(orderId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a channel partner order
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse getChannelPartnerOrder(String orderId, String expand) throws ApiException {
        ApiResponse<OrderResponse> resp = getChannelPartnerOrderWithHttpInfo(orderId, expand);
        return resp.getData();
    }

    /**
     * Retrieve a channel partner order
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> getChannelPartnerOrderWithHttpInfo(String orderId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getChannelPartnerOrderValidateBeforeCall(orderId, expand, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a channel partner order (asynchronously)
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerOrderAsync(String orderId, String expand, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelPartnerOrderValidateBeforeCall(orderId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelPartnerOrderByChannelPartnerOrderId
     * @param orderId The channel partner order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerOrderByChannelPartnerOrderIdCall(String orderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/orders/by_channel_partner_order_id/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelPartnerOrderByChannelPartnerOrderIdValidateBeforeCall(String orderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getChannelPartnerOrderByChannelPartnerOrderId(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelPartnerOrderByChannelPartnerOrderIdCall(orderId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a channel partner order by the channel partner order id
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The channel partner order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse getChannelPartnerOrderByChannelPartnerOrderId(String orderId, String expand) throws ApiException {
        ApiResponse<OrderResponse> resp = getChannelPartnerOrderByChannelPartnerOrderIdWithHttpInfo(orderId, expand);
        return resp.getData();
    }

    /**
     * Retrieve a channel partner order by the channel partner order id
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The channel partner order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> getChannelPartnerOrderByChannelPartnerOrderIdWithHttpInfo(String orderId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getChannelPartnerOrderByChannelPartnerOrderIdValidateBeforeCall(orderId, expand, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a channel partner order by the channel partner order id (asynchronously)
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * @param orderId The channel partner order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerOrderByChannelPartnerOrderIdAsync(String orderId, String expand, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelPartnerOrderByChannelPartnerOrderIdValidateBeforeCall(orderId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelPartnerShipToPreference
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerShipToPreferenceCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
            .replaceAll("\\{" + "channel_partner_oid" + "\\}", apiClient.escapeString(channelPartnerOid.toString()))
            .replaceAll("\\{" + "channel_partner_ship_to_preference_oid" + "\\}", apiClient.escapeString(channelPartnerShipToPreferenceOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelPartnerShipToPreferenceValidateBeforeCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOid' is set
        if (channelPartnerOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOid' when calling getChannelPartnerShipToPreference(Async)");
        }
        
        // verify the required parameter 'channelPartnerShipToPreferenceOid' is set
        if (channelPartnerShipToPreferenceOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerShipToPreferenceOid' when calling getChannelPartnerShipToPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferenceCall(channelPartnerOid, channelPartnerShipToPreferenceOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @return ChannelPartnerShipToPreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerShipToPreferenceResponse getChannelPartnerShipToPreference(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid) throws ApiException {
        ApiResponse<ChannelPartnerShipToPreferenceResponse> resp = getChannelPartnerShipToPreferenceWithHttpInfo(channelPartnerOid, channelPartnerShipToPreferenceOid);
        return resp.getData();
    }

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @return ApiResponse&lt;ChannelPartnerShipToPreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerShipToPreferenceResponse> getChannelPartnerShipToPreferenceWithHttpInfo(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid) throws ApiException {
        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id. (asynchronously)
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerShipToPreferenceAsync(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, final ApiCallback<ChannelPartnerShipToPreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelPartnerShipToPreferences
     * @param channelPartnerOid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerShipToPreferencesCall(Integer channelPartnerOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences"
            .replaceAll("\\{" + "channel_partner_oid" + "\\}", apiClient.escapeString(channelPartnerOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelPartnerShipToPreferencesValidateBeforeCall(Integer channelPartnerOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOid' is set
        if (channelPartnerOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOid' when calling getChannelPartnerShipToPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferencesCall(channelPartnerOid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the ship to preferences associated with the channel partner.
     * Retrieve the ship to preferences associated with the channel partner. 
     * @param channelPartnerOid  (required)
     * @return ChannelPartnerShipToPreferencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerShipToPreferencesResponse getChannelPartnerShipToPreferences(Integer channelPartnerOid) throws ApiException {
        ApiResponse<ChannelPartnerShipToPreferencesResponse> resp = getChannelPartnerShipToPreferencesWithHttpInfo(channelPartnerOid);
        return resp.getData();
    }

    /**
     * Retrieve the ship to preferences associated with the channel partner.
     * Retrieve the ship to preferences associated with the channel partner. 
     * @param channelPartnerOid  (required)
     * @return ApiResponse&lt;ChannelPartnerShipToPreferencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerShipToPreferencesResponse> getChannelPartnerShipToPreferencesWithHttpInfo(Integer channelPartnerOid) throws ApiException {
        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferencesValidateBeforeCall(channelPartnerOid, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the ship to preferences associated with the channel partner. (asynchronously)
     * Retrieve the ship to preferences associated with the channel partner. 
     * @param channelPartnerOid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnerShipToPreferencesAsync(Integer channelPartnerOid, final ApiCallback<ChannelPartnerShipToPreferencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelPartnerShipToPreferencesValidateBeforeCall(channelPartnerOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelPartners
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelPartnersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getChannelPartnersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the channel partners configured on the account.
     * Retrieve the channel partners configured on the account. 
     * @return ChannelPartnersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnersResponse getChannelPartners() throws ApiException {
        ApiResponse<ChannelPartnersResponse> resp = getChannelPartnersWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the channel partners configured on the account.
     * Retrieve the channel partners configured on the account. 
     * @return ApiResponse&lt;ChannelPartnersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnersResponse> getChannelPartnersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getChannelPartnersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the channel partners configured on the account. (asynchronously)
     * Retrieve the channel partners configured on the account. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelPartnersAsync(final ApiCallback<ChannelPartnersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelPartnersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importChannelPartnerOrder
     * @param channelPartnerOrder Order to insert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importChannelPartnerOrderCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = channelPartnerOrder;

        // create path and map variables
        String localVarPath = "/channel_partner/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importChannelPartnerOrderValidateBeforeCall(ChannelPartnerOrder channelPartnerOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOrder' is set
        if (channelPartnerOrder == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOrder' when calling importChannelPartnerOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = importChannelPartnerOrderCall(channelPartnerOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert channel partner order
     * Insert order from a channel partner. 
     * @param channelPartnerOrder Order to insert (required)
     * @return ChannelPartnerImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerImportResponse importChannelPartnerOrder(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        ApiResponse<ChannelPartnerImportResponse> resp = importChannelPartnerOrderWithHttpInfo(channelPartnerOrder);
        return resp.getData();
    }

    /**
     * Insert channel partner order
     * Insert order from a channel partner. 
     * @param channelPartnerOrder Order to insert (required)
     * @return ApiResponse&lt;ChannelPartnerImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerImportResponse> importChannelPartnerOrderWithHttpInfo(ChannelPartnerOrder channelPartnerOrder) throws ApiException {
        com.squareup.okhttp.Call call = importChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerImportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert channel partner order (asynchronously)
     * Insert order from a channel partner. 
     * @param channelPartnerOrder Order to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importChannelPartnerOrderAsync(ChannelPartnerOrder channelPartnerOrder, final ApiCallback<ChannelPartnerImportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importChannelPartnerOrderValidateBeforeCall(channelPartnerOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerImportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertChannelPartnerShipToPreference
     * @param channelPartnerOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertChannelPartnerShipToPreferenceCall(Integer channelPartnerOid, ChannelPartnerShipToPreference shipToPreference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = shipToPreference;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences"
            .replaceAll("\\{" + "channel_partner_oid" + "\\}", apiClient.escapeString(channelPartnerOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertChannelPartnerShipToPreferenceValidateBeforeCall(Integer channelPartnerOid, ChannelPartnerShipToPreference shipToPreference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOid' is set
        if (channelPartnerOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOid' when calling insertChannelPartnerShipToPreference(Async)");
        }
        
        // verify the required parameter 'shipToPreference' is set
        if (shipToPreference == null) {
            throw new ApiException("Missing the required parameter 'shipToPreference' when calling insertChannelPartnerShipToPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = insertChannelPartnerShipToPreferenceCall(channelPartnerOid, shipToPreference, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insert a ship to preference record for the channel partner.
     * Insert a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @return ChannelPartnerShipToPreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerShipToPreferenceResponse insertChannelPartnerShipToPreference(Integer channelPartnerOid, ChannelPartnerShipToPreference shipToPreference) throws ApiException {
        ApiResponse<ChannelPartnerShipToPreferenceResponse> resp = insertChannelPartnerShipToPreferenceWithHttpInfo(channelPartnerOid, shipToPreference);
        return resp.getData();
    }

    /**
     * Insert a ship to preference record for the channel partner.
     * Insert a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @return ApiResponse&lt;ChannelPartnerShipToPreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerShipToPreferenceResponse> insertChannelPartnerShipToPreferenceWithHttpInfo(Integer channelPartnerOid, ChannelPartnerShipToPreference shipToPreference) throws ApiException {
        com.squareup.okhttp.Call call = insertChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, shipToPreference, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insert a ship to preference record for the channel partner. (asynchronously)
     * Insert a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertChannelPartnerShipToPreferenceAsync(Integer channelPartnerOid, ChannelPartnerShipToPreference shipToPreference, final ApiCallback<ChannelPartnerShipToPreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, shipToPreference, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for refundChannelPartnerOrder
     * @param order Order to refund (required)
     * @param orderId The order id to refund. (required)
     * @param rejectAfterRefund Reject order after refund (optional, default to false)
     * @param skipCustomerNotification Skip customer email notification (optional, default to false)
     * @param autoOrderCancel Cancel associated auto orders (optional, default to false)
     * @param manualRefund Consider a manual refund done externally (optional, default to false)
     * @param reverseAffiliateTransactions Reverse affiliate transactions (optional, default to true)
     * @param issueStoreCredit Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account (optional, default to false)
     * @param autoOrderCancelReason Reason for auto orders cancellation (optional)
     * @param expand The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call refundChannelPartnerOrderCall(Order order, String orderId, Boolean rejectAfterRefund, Boolean skipCustomerNotification, Boolean autoOrderCancel, Boolean manualRefund, Boolean reverseAffiliateTransactions, Boolean issueStoreCredit, String autoOrderCancelReason, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/channel_partner/orders/{order_id}/refund"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rejectAfterRefund != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reject_after_refund", rejectAfterRefund));
        if (skipCustomerNotification != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip_customer_notification", skipCustomerNotification));
        if (autoOrderCancel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auto_order_cancel", autoOrderCancel));
        if (manualRefund != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("manual_refund", manualRefund));
        if (reverseAffiliateTransactions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reverse_affiliate_transactions", reverseAffiliateTransactions));
        if (issueStoreCredit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("issue_store_credit", issueStoreCredit));
        if (autoOrderCancelReason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auto_order_cancel_reason", autoOrderCancelReason));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call refundChannelPartnerOrderValidateBeforeCall(Order order, String orderId, Boolean rejectAfterRefund, Boolean skipCustomerNotification, Boolean autoOrderCancel, Boolean manualRefund, Boolean reverseAffiliateTransactions, Boolean issueStoreCredit, String autoOrderCancelReason, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling refundChannelPartnerOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling refundChannelPartnerOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = refundChannelPartnerOrderCall(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, issueStoreCredit, autoOrderCancelReason, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Refund a channel partner order
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * @param order Order to refund (required)
     * @param orderId The order id to refund. (required)
     * @param rejectAfterRefund Reject order after refund (optional, default to false)
     * @param skipCustomerNotification Skip customer email notification (optional, default to false)
     * @param autoOrderCancel Cancel associated auto orders (optional, default to false)
     * @param manualRefund Consider a manual refund done externally (optional, default to false)
     * @param reverseAffiliateTransactions Reverse affiliate transactions (optional, default to true)
     * @param issueStoreCredit Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account (optional, default to false)
     * @param autoOrderCancelReason Reason for auto orders cancellation (optional)
     * @param expand The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse refundChannelPartnerOrder(Order order, String orderId, Boolean rejectAfterRefund, Boolean skipCustomerNotification, Boolean autoOrderCancel, Boolean manualRefund, Boolean reverseAffiliateTransactions, Boolean issueStoreCredit, String autoOrderCancelReason, String expand) throws ApiException {
        ApiResponse<OrderResponse> resp = refundChannelPartnerOrderWithHttpInfo(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, issueStoreCredit, autoOrderCancelReason, expand);
        return resp.getData();
    }

    /**
     * Refund a channel partner order
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * @param order Order to refund (required)
     * @param orderId The order id to refund. (required)
     * @param rejectAfterRefund Reject order after refund (optional, default to false)
     * @param skipCustomerNotification Skip customer email notification (optional, default to false)
     * @param autoOrderCancel Cancel associated auto orders (optional, default to false)
     * @param manualRefund Consider a manual refund done externally (optional, default to false)
     * @param reverseAffiliateTransactions Reverse affiliate transactions (optional, default to true)
     * @param issueStoreCredit Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account (optional, default to false)
     * @param autoOrderCancelReason Reason for auto orders cancellation (optional)
     * @param expand The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> refundChannelPartnerOrderWithHttpInfo(Order order, String orderId, Boolean rejectAfterRefund, Boolean skipCustomerNotification, Boolean autoOrderCancel, Boolean manualRefund, Boolean reverseAffiliateTransactions, Boolean issueStoreCredit, String autoOrderCancelReason, String expand) throws ApiException {
        com.squareup.okhttp.Call call = refundChannelPartnerOrderValidateBeforeCall(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, issueStoreCredit, autoOrderCancelReason, expand, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refund a channel partner order (asynchronously)
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * @param order Order to refund (required)
     * @param orderId The order id to refund. (required)
     * @param rejectAfterRefund Reject order after refund (optional, default to false)
     * @param skipCustomerNotification Skip customer email notification (optional, default to false)
     * @param autoOrderCancel Cancel associated auto orders (optional, default to false)
     * @param manualRefund Consider a manual refund done externally (optional, default to false)
     * @param reverseAffiliateTransactions Reverse affiliate transactions (optional, default to true)
     * @param issueStoreCredit Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account (optional, default to false)
     * @param autoOrderCancelReason Reason for auto orders cancellation (optional)
     * @param expand The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call refundChannelPartnerOrderAsync(Order order, String orderId, Boolean rejectAfterRefund, Boolean skipCustomerNotification, Boolean autoOrderCancel, Boolean manualRefund, Boolean reverseAffiliateTransactions, Boolean issueStoreCredit, String autoOrderCancelReason, String expand, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = refundChannelPartnerOrderValidateBeforeCall(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, issueStoreCredit, autoOrderCancelReason, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateChannelPartnerShipToPreference
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChannelPartnerShipToPreferenceCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, ChannelPartnerShipToPreference shipToPreference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = shipToPreference;

        // create path and map variables
        String localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
            .replaceAll("\\{" + "channel_partner_oid" + "\\}", apiClient.escapeString(channelPartnerOid.toString()))
            .replaceAll("\\{" + "channel_partner_ship_to_preference_oid" + "\\}", apiClient.escapeString(channelPartnerShipToPreferenceOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateChannelPartnerShipToPreferenceValidateBeforeCall(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, ChannelPartnerShipToPreference shipToPreference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelPartnerOid' is set
        if (channelPartnerOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerOid' when calling updateChannelPartnerShipToPreference(Async)");
        }
        
        // verify the required parameter 'channelPartnerShipToPreferenceOid' is set
        if (channelPartnerShipToPreferenceOid == null) {
            throw new ApiException("Missing the required parameter 'channelPartnerShipToPreferenceOid' when calling updateChannelPartnerShipToPreference(Async)");
        }
        
        // verify the required parameter 'shipToPreference' is set
        if (shipToPreference == null) {
            throw new ApiException("Missing the required parameter 'shipToPreference' when calling updateChannelPartnerShipToPreference(Async)");
        }
        

        com.squareup.okhttp.Call call = updateChannelPartnerShipToPreferenceCall(channelPartnerOid, channelPartnerShipToPreferenceOid, shipToPreference, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a ship to preference record for the channel partner.
     * Update a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @return ChannelPartnerShipToPreferenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChannelPartnerShipToPreferenceResponse updateChannelPartnerShipToPreference(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, ChannelPartnerShipToPreference shipToPreference) throws ApiException {
        ApiResponse<ChannelPartnerShipToPreferenceResponse> resp = updateChannelPartnerShipToPreferenceWithHttpInfo(channelPartnerOid, channelPartnerShipToPreferenceOid, shipToPreference);
        return resp.getData();
    }

    /**
     * Update a ship to preference record for the channel partner.
     * Update a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @return ApiResponse&lt;ChannelPartnerShipToPreferenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChannelPartnerShipToPreferenceResponse> updateChannelPartnerShipToPreferenceWithHttpInfo(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, ChannelPartnerShipToPreference shipToPreference) throws ApiException {
        com.squareup.okhttp.Call call = updateChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, shipToPreference, null, null);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a ship to preference record for the channel partner. (asynchronously)
     * Update a ship to preference record for the channel partner. 
     * @param channelPartnerOid  (required)
     * @param channelPartnerShipToPreferenceOid  (required)
     * @param shipToPreference Ship to preference to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChannelPartnerShipToPreferenceAsync(Integer channelPartnerOid, Integer channelPartnerShipToPreferenceOid, ChannelPartnerShipToPreference shipToPreference, final ApiCallback<ChannelPartnerShipToPreferenceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChannelPartnerShipToPreferenceValidateBeforeCall(channelPartnerOid, channelPartnerShipToPreferenceOid, shipToPreference, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChannelPartnerShipToPreferenceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

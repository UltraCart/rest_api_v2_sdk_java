/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.OrdersResponse;
import java.math.BigDecimal;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.BaseResponse;
import com.ultracart.admin.v2.models.OrderResponse;
import com.ultracart.admin.v2.models.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for orderOrdersGet */
    private com.squareup.okhttp.Call orderOrdersGetCall(String orderId, String paymentMethod, String company, String firstName, String lastName, String city, String stateRegion, String postalCode, String countryCode, String phone, String email, String ccEmail, BigDecimal total, String screenBrandingThemeCode, String storefrontHostName, String creationDateBegin, String creationDateEnd, String paymentDateBegin, String paymentDateEnd, String shipmentDateBegin, String shipmentDateEnd, String rma, String purchaseOrderNumber, String itemId, String currentStage, String channelPartnerCode, String channelPartnerOrderId, Integer limit, Integer offset, String sort, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/order/orders".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (orderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order_id", orderId));
        if (paymentMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "payment_method", paymentMethod));
        if (company != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "company", company));
        if (firstName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "first_name", firstName));
        if (lastName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "last_name", lastName));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "city", city));
        if (stateRegion != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state_region", stateRegion));
        if (postalCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "postal_code", postalCode));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country_code", countryCode));
        if (phone != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "phone", phone));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "email", email));
        if (ccEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cc_email", ccEmail));
        if (total != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "total", total));
        if (screenBrandingThemeCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "screen_branding_theme_code", screenBrandingThemeCode));
        if (storefrontHostName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "storefront_host_name", storefrontHostName));
        if (creationDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "creation_date_begin", creationDateBegin));
        if (creationDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "creation_date_end", creationDateEnd));
        if (paymentDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "payment_date_begin", paymentDateBegin));
        if (paymentDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "payment_date_end", paymentDateEnd));
        if (shipmentDateBegin != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipment_date_begin", shipmentDateBegin));
        if (shipmentDateEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "shipment_date_end", shipmentDateEnd));
        if (rma != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rma", rma));
        if (purchaseOrderNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "purchase_order_number", purchaseOrderNumber));
        if (itemId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "item_id", itemId));
        if (currentStage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "current_stage", currentStage));
        if (channelPartnerCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "channel_partner_code", channelPartnerCode));
        if (channelPartnerOrderId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "channel_partner_order_id", channelPartnerOrderId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_sort", sort));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve orders
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param paymentMethod Payment Method (optional)
     * @param company Company (optional)
     * @param firstName First Name (optional)
     * @param lastName Last Name (optional)
     * @param city City (optional)
     * @param stateRegion State/Region (optional)
     * @param postalCode Postal Code (optional)
     * @param countryCode Country Code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param ccEmail CC Email (optional)
     * @param total Total (optional)
     * @param screenBrandingThemeCode Screen Branding Theme Code (optional)
     * @param storefrontHostName StoreFront Host Name (optional)
     * @param creationDateBegin Creation Date Begin (optional)
     * @param creationDateEnd Creation Date End (optional)
     * @param paymentDateBegin Payment Date Begin (optional)
     * @param paymentDateEnd Payment Date End (optional)
     * @param shipmentDateBegin Shipment Date Begin (optional)
     * @param shipmentDateEnd Shipment Date End (optional)
     * @param rma RMA (optional)
     * @param purchaseOrderNumber Purchase Order Number (optional)
     * @param itemId Item Id (optional)
     * @param currentStage Current Stage (optional)
     * @param channelPartnerCode Channel Partner Code (optional)
     * @param channelPartnerOrderId Channel Partner Order ID (optional)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @return OrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrdersResponse orderOrdersGet(String orderId, String paymentMethod, String company, String firstName, String lastName, String city, String stateRegion, String postalCode, String countryCode, String phone, String email, String ccEmail, BigDecimal total, String screenBrandingThemeCode, String storefrontHostName, String creationDateBegin, String creationDateEnd, String paymentDateBegin, String paymentDateEnd, String shipmentDateBegin, String shipmentDateEnd, String rma, String purchaseOrderNumber, String itemId, String currentStage, String channelPartnerCode, String channelPartnerOrderId, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        ApiResponse<OrdersResponse> resp = orderOrdersGetWithHttpInfo(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand);
        return resp.getData();
    }

    /**
     * Retrieve orders
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param paymentMethod Payment Method (optional)
     * @param company Company (optional)
     * @param firstName First Name (optional)
     * @param lastName Last Name (optional)
     * @param city City (optional)
     * @param stateRegion State/Region (optional)
     * @param postalCode Postal Code (optional)
     * @param countryCode Country Code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param ccEmail CC Email (optional)
     * @param total Total (optional)
     * @param screenBrandingThemeCode Screen Branding Theme Code (optional)
     * @param storefrontHostName StoreFront Host Name (optional)
     * @param creationDateBegin Creation Date Begin (optional)
     * @param creationDateEnd Creation Date End (optional)
     * @param paymentDateBegin Payment Date Begin (optional)
     * @param paymentDateEnd Payment Date End (optional)
     * @param shipmentDateBegin Shipment Date Begin (optional)
     * @param shipmentDateEnd Shipment Date End (optional)
     * @param rma RMA (optional)
     * @param purchaseOrderNumber Purchase Order Number (optional)
     * @param itemId Item Id (optional)
     * @param currentStage Current Stage (optional)
     * @param channelPartnerCode Channel Partner Code (optional)
     * @param channelPartnerOrderId Channel Partner Order ID (optional)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @return ApiResponse&lt;OrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrdersResponse> orderOrdersGetWithHttpInfo(String orderId, String paymentMethod, String company, String firstName, String lastName, String city, String stateRegion, String postalCode, String countryCode, String phone, String email, String ccEmail, BigDecimal total, String screenBrandingThemeCode, String storefrontHostName, String creationDateBegin, String creationDateEnd, String paymentDateBegin, String paymentDateEnd, String shipmentDateBegin, String shipmentDateEnd, String rma, String purchaseOrderNumber, String itemId, String currentStage, String channelPartnerCode, String channelPartnerOrderId, Integer limit, Integer offset, String sort, String expand) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersGetCall(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand, null, null);
        Type localVarReturnType = new TypeToken<OrdersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve orders (asynchronously)
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param orderId Order Id (optional)
     * @param paymentMethod Payment Method (optional)
     * @param company Company (optional)
     * @param firstName First Name (optional)
     * @param lastName Last Name (optional)
     * @param city City (optional)
     * @param stateRegion State/Region (optional)
     * @param postalCode Postal Code (optional)
     * @param countryCode Country Code (ISO-3166 two letter) (optional)
     * @param phone Phone (optional)
     * @param email Email (optional)
     * @param ccEmail CC Email (optional)
     * @param total Total (optional)
     * @param screenBrandingThemeCode Screen Branding Theme Code (optional)
     * @param storefrontHostName StoreFront Host Name (optional)
     * @param creationDateBegin Creation Date Begin (optional)
     * @param creationDateEnd Creation Date End (optional)
     * @param paymentDateBegin Payment Date Begin (optional)
     * @param paymentDateEnd Payment Date End (optional)
     * @param shipmentDateBegin Shipment Date Begin (optional)
     * @param shipmentDateEnd Shipment Date End (optional)
     * @param rma RMA (optional)
     * @param purchaseOrderNumber Purchase Order Number (optional)
     * @param itemId Item Id (optional)
     * @param currentStage Current Stage (optional)
     * @param channelPartnerCode Channel Partner Code (optional)
     * @param channelPartnerOrderId Channel Partner Order ID (optional)
     * @param limit The maximum number of records to return on this one API call. (Maximum 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending. (optional)
     * @param expand The object expansion to perform on the result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersGetAsync(String orderId, String paymentMethod, String company, String firstName, String lastName, String city, String stateRegion, String postalCode, String countryCode, String phone, String email, String ccEmail, BigDecimal total, String screenBrandingThemeCode, String storefrontHostName, String creationDateBegin, String creationDateEnd, String paymentDateBegin, String paymentDateEnd, String shipmentDateBegin, String shipmentDateEnd, String rma, String purchaseOrderNumber, String itemId, String currentStage, String channelPartnerCode, String channelPartnerOrderId, Integer limit, Integer offset, String sort, String expand, final ApiCallback<OrdersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersGetCall(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, limit, offset, sort, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrdersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdCancelPost */
    private com.squareup.okhttp.Call orderOrdersOrderIdCancelPostCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdCancelPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}/cancel".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel an order
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * @param orderId The order id to cancel. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse orderOrdersOrderIdCancelPost(String orderId) throws ApiException {
        ApiResponse<BaseResponse> resp = orderOrdersOrderIdCancelPostWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Cancel an order
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * @param orderId The order id to cancel. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> orderOrdersOrderIdCancelPostWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdCancelPostCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel an order (asynchronously)
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * @param orderId The order id to cancel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdCancelPostAsync(String orderId, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdCancelPostCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdDelete */
    private com.squareup.okhttp.Call orderOrdersOrderIdDeleteCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an order
     * Delete an order on the UltraCart account. 
     * @param orderId The order id to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void orderOrdersOrderIdDelete(String orderId) throws ApiException {
        orderOrdersOrderIdDeleteWithHttpInfo(orderId);
    }

    /**
     * Delete an order
     * Delete an order on the UltraCart account. 
     * @param orderId The order id to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> orderOrdersOrderIdDeleteWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdDeleteCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an order (asynchronously)
     * Delete an order on the UltraCart account. 
     * @param orderId The order id to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdDeleteAsync(String orderId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdDeleteCall(orderId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdGet */
    private com.squareup.okhttp.Call orderOrdersOrderIdGetCall(String orderId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve an order
     * Retrieves a single order using the specified order id. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse orderOrdersOrderIdGet(String orderId, String expand) throws ApiException {
        ApiResponse<OrderResponse> resp = orderOrdersOrderIdGetWithHttpInfo(orderId, expand);
        return resp.getData();
    }

    /**
     * Retrieve an order
     * Retrieves a single order using the specified order id. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> orderOrdersOrderIdGetWithHttpInfo(String orderId, String expand) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdGetCall(orderId, expand, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an order (asynchronously)
     * Retrieves a single order using the specified order id. 
     * @param orderId The order id to retrieve. (required)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdGetAsync(String orderId, String expand, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdGetCall(orderId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdPut */
    private com.squareup.okhttp.Call orderOrdersOrderIdPutCall(Order order, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = order;
        
        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling orderOrdersOrderIdPut(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an order
     * Update a new order on the UltraCart account. 
     * @param order Order to update (required)
     * @param orderId The order id to update. (required)
     * @return OrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderResponse orderOrdersOrderIdPut(Order order, String orderId) throws ApiException {
        ApiResponse<OrderResponse> resp = orderOrdersOrderIdPutWithHttpInfo(order, orderId);
        return resp.getData();
    }

    /**
     * Update an order
     * Update a new order on the UltraCart account. 
     * @param order Order to update (required)
     * @param orderId The order id to update. (required)
     * @return ApiResponse&lt;OrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderResponse> orderOrdersOrderIdPutWithHttpInfo(Order order, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdPutCall(order, orderId, null, null);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an order (asynchronously)
     * Update a new order on the UltraCart account. 
     * @param order Order to update (required)
     * @param orderId The order id to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdPutAsync(Order order, String orderId, final ApiCallback<OrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdPutCall(order, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdResendReceiptPost */
    private com.squareup.okhttp.Call orderOrdersOrderIdResendReceiptPostCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdResendReceiptPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}/resend_receipt".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Resend receipt
     * Resend the receipt for an order on the UltraCart account. 
     * @param orderId The order id to resend the receipt for. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse orderOrdersOrderIdResendReceiptPost(String orderId) throws ApiException {
        ApiResponse<BaseResponse> resp = orderOrdersOrderIdResendReceiptPostWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Resend receipt
     * Resend the receipt for an order on the UltraCart account. 
     * @param orderId The order id to resend the receipt for. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> orderOrdersOrderIdResendReceiptPostWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdResendReceiptPostCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend receipt (asynchronously)
     * Resend the receipt for an order on the UltraCart account. 
     * @param orderId The order id to resend the receipt for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdResendReceiptPostAsync(String orderId, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdResendReceiptPostCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for orderOrdersOrderIdResendShipmentConfirmationPost */
    private com.squareup.okhttp.Call orderOrdersOrderIdResendShipmentConfirmationPostCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderOrdersOrderIdResendShipmentConfirmationPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/order/orders/{order_id}/resend_shipment_confirmation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Resend shipment confirmation
     * Resend shipment confirmation for an order on the UltraCart account. 
     * @param orderId The order id to resend the shipment notification for. (required)
     * @return BaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponse orderOrdersOrderIdResendShipmentConfirmationPost(String orderId) throws ApiException {
        ApiResponse<BaseResponse> resp = orderOrdersOrderIdResendShipmentConfirmationPostWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Resend shipment confirmation
     * Resend shipment confirmation for an order on the UltraCart account. 
     * @param orderId The order id to resend the shipment notification for. (required)
     * @return ApiResponse&lt;BaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponse> orderOrdersOrderIdResendShipmentConfirmationPostWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = orderOrdersOrderIdResendShipmentConfirmationPostCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend shipment confirmation (asynchronously)
     * Resend shipment confirmation for an order on the UltraCart account. 
     * @param orderId The order id to resend the shipment notification for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderOrdersOrderIdResendShipmentConfirmationPostAsync(String orderId, final ApiCallback<BaseResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderOrdersOrderIdResendShipmentConfirmationPostCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.ultracart.admin.v2.models.WebhooksResponse;
import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Webhook;
import com.ultracart.admin.v2.models.WebhookLogSummariesResponse;
import com.ultracart.admin.v2.models.WebhookLogResponse;
import com.ultracart.admin.v2.models.WebhookSampleRequestResponse;
import com.ultracart.admin.v2.models.WebhookSampleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
    private ApiClient apiClient;

    public WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for webhookWebhooksGet */
    private com.squareup.okhttp.Call webhookWebhooksGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve webhooks
     * Retrieves the webhooks associated with this application. 
     * @return WebhooksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksResponse webhookWebhooksGet() throws ApiException {
        ApiResponse<WebhooksResponse> resp = webhookWebhooksGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve webhooks
     * Retrieves the webhooks associated with this application. 
     * @return ApiResponse&lt;WebhooksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksResponse> webhookWebhooksGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksGetCall(null, null);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve webhooks (asynchronously)
     * Retrieves the webhooks associated with this application. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksGetAsync(final ApiCallback<WebhooksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksGetCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksPost */
    private com.squareup.okhttp.Call webhookWebhooksPostCall(Webhook webhook, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhook;
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling webhookWebhooksPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add a webhook
     * Adds a new webhook on the account 
     * @param webhook Webhook to create (required)
     * @return WebhooksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksResponse webhookWebhooksPost(Webhook webhook) throws ApiException {
        ApiResponse<WebhooksResponse> resp = webhookWebhooksPostWithHttpInfo(webhook);
        return resp.getData();
    }

    /**
     * Add a webhook
     * Adds a new webhook on the account 
     * @param webhook Webhook to create (required)
     * @return ApiResponse&lt;WebhooksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksResponse> webhookWebhooksPostWithHttpInfo(Webhook webhook) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksPostCall(webhook, null, null);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a webhook (asynchronously)
     * Adds a new webhook on the account 
     * @param webhook Webhook to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksPostAsync(Webhook webhook, final ApiCallback<WebhooksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksPostCall(webhook, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidDelete */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidDeleteCall(Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a webhook
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void webhookWebhooksWebhookOidDelete(Integer webhookOid) throws ApiException {
        webhookWebhooksWebhookOidDeleteWithHttpInfo(webhookOid);
    }

    /**
     * Delete a webhook
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> webhookWebhooksWebhookOidDeleteWithHttpInfo(Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidDeleteCall(webhookOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a webhook (asynchronously)
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidDeleteAsync(Integer webhookOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidDeleteCall(webhookOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidLogsGet */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidLogsGetCall(Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidLogsGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/logs".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve the log summaries
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @return WebhookLogSummariesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookLogSummariesResponse webhookWebhooksWebhookOidLogsGet(Integer webhookOid) throws ApiException {
        ApiResponse<WebhookLogSummariesResponse> resp = webhookWebhooksWebhookOidLogsGetWithHttpInfo(webhookOid);
        return resp.getData();
    }

    /**
     * Retrieve the log summaries
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @return ApiResponse&lt;WebhookLogSummariesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookLogSummariesResponse> webhookWebhooksWebhookOidLogsGetWithHttpInfo(Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidLogsGetCall(webhookOid, null, null);
        Type localVarReturnType = new TypeToken<WebhookLogSummariesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the log summaries (asynchronously)
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidLogsGetAsync(Integer webhookOid, final ApiCallback<WebhookLogSummariesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidLogsGetCall(webhookOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookLogSummariesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidLogsRequestIdGet */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidLogsRequestIdGetCall(Integer webhookOid, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidLogsRequestIdGet(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling webhookWebhooksWebhookOidLogsRequestIdGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()))
        .replaceAll("\\{" + "requestId" + "\\}", apiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve an individual log
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @return WebhookLogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookLogResponse webhookWebhooksWebhookOidLogsRequestIdGet(Integer webhookOid, String requestId) throws ApiException {
        ApiResponse<WebhookLogResponse> resp = webhookWebhooksWebhookOidLogsRequestIdGetWithHttpInfo(webhookOid, requestId);
        return resp.getData();
    }

    /**
     * Retrieve an individual log
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @return ApiResponse&lt;WebhookLogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookLogResponse> webhookWebhooksWebhookOidLogsRequestIdGetWithHttpInfo(Integer webhookOid, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidLogsRequestIdGetCall(webhookOid, requestId, null, null);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an individual log (asynchronously)
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidLogsRequestIdGetAsync(Integer webhookOid, String requestId, final ApiCallback<WebhookLogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidLogsRequestIdGetCall(webhookOid, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidPut */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidPutCall(Webhook webhook, Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhook;
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling webhookWebhooksWebhookOidPut(Async)");
        }
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidPut(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a webhook
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @return WebhooksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksResponse webhookWebhooksWebhookOidPut(Webhook webhook, Integer webhookOid) throws ApiException {
        ApiResponse<WebhooksResponse> resp = webhookWebhooksWebhookOidPutWithHttpInfo(webhook, webhookOid);
        return resp.getData();
    }

    /**
     * Update a webhook
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @return ApiResponse&lt;WebhooksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksResponse> webhookWebhooksWebhookOidPutWithHttpInfo(Webhook webhook, Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidPutCall(webhook, webhookOid, null, null);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a webhook (asynchronously)
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidPutAsync(Webhook webhook, Integer webhookOid, final ApiCallback<WebhooksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidPutCall(webhook, webhookOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidReflowEventNamePost */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidReflowEventNamePostCall(Integer webhookOid, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidReflowEventNamePost(Async)");
        }
        
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling webhookWebhooksWebhookOidReflowEventNamePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()))
        .replaceAll("\\{" + "eventName" + "\\}", apiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Resend events to the webhook endpoint.
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @return WebhookSampleRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookSampleRequestResponse webhookWebhooksWebhookOidReflowEventNamePost(Integer webhookOid, String eventName) throws ApiException {
        ApiResponse<WebhookSampleRequestResponse> resp = webhookWebhooksWebhookOidReflowEventNamePostWithHttpInfo(webhookOid, eventName);
        return resp.getData();
    }

    /**
     * Resend events to the webhook endpoint.
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @return ApiResponse&lt;WebhookSampleRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookSampleRequestResponse> webhookWebhooksWebhookOidReflowEventNamePostWithHttpInfo(Integer webhookOid, String eventName) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidReflowEventNamePostCall(webhookOid, eventName, null, null);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend events to the webhook endpoint. (asynchronously)
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidReflowEventNamePostAsync(Integer webhookOid, String eventName, final ApiCallback<WebhookSampleRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidReflowEventNamePostCall(webhookOid, eventName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidSamplesGet */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidSamplesGetCall(Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidSamplesGet(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/samples".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a sample notification.
     * Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 
     * @param webhookOid The webhook oid to retrieve samples for. (required)
     * @return WebhookSampleRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookSampleRequestResponse webhookWebhooksWebhookOidSamplesGet(Integer webhookOid) throws ApiException {
        ApiResponse<WebhookSampleRequestResponse> resp = webhookWebhooksWebhookOidSamplesGetWithHttpInfo(webhookOid);
        return resp.getData();
    }

    /**
     * Retrieve a sample notification.
     * Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 
     * @param webhookOid The webhook oid to retrieve samples for. (required)
     * @return ApiResponse&lt;WebhookSampleRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookSampleRequestResponse> webhookWebhooksWebhookOidSamplesGetWithHttpInfo(Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidSamplesGetCall(webhookOid, null, null);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a sample notification. (asynchronously)
     * Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 
     * @param webhookOid The webhook oid to retrieve samples for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidSamplesGetAsync(Integer webhookOid, final ApiCallback<WebhookSampleRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidSamplesGetCall(webhookOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for webhookWebhooksWebhookOidValidatePost */
    private com.squareup.okhttp.Call webhookWebhooksWebhookOidValidatePostCall(WebhookSampleRequest samples, Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = samples;
        
        // verify the required parameter 'samples' is set
        if (samples == null) {
            throw new ApiException("Missing the required parameter 'samples' when calling webhookWebhooksWebhookOidValidatePost(Async)");
        }
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidValidatePost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/validate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Send test message to an endpoint.
     * Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 
     * @param samples Samples to send in the test (required)
     * @param webhookOid The webhook oid that is being tested. (required)
     * @return WebhookLogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookLogResponse webhookWebhooksWebhookOidValidatePost(WebhookSampleRequest samples, Integer webhookOid) throws ApiException {
        ApiResponse<WebhookLogResponse> resp = webhookWebhooksWebhookOidValidatePostWithHttpInfo(samples, webhookOid);
        return resp.getData();
    }

    /**
     * Send test message to an endpoint.
     * Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 
     * @param samples Samples to send in the test (required)
     * @param webhookOid The webhook oid that is being tested. (required)
     * @return ApiResponse&lt;WebhookLogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookLogResponse> webhookWebhooksWebhookOidValidatePostWithHttpInfo(WebhookSampleRequest samples, Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidValidatePostCall(samples, webhookOid, null, null);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Send test message to an endpoint. (asynchronously)
     * Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 
     * @param samples Samples to send in the test (required)
     * @param webhookOid The webhook oid that is being tested. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webhookWebhooksWebhookOidValidatePostAsync(WebhookSampleRequest samples, Integer webhookOid, final ApiCallback<WebhookLogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webhookWebhooksWebhookOidValidatePostCall(samples, webhookOid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

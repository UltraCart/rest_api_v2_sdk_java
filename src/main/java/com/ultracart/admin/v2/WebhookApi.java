/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.Webhook;
import com.ultracart.admin.v2.models.WebhookLogResponse;
import com.ultracart.admin.v2.models.WebhookLogSummariesResponse;
import com.ultracart.admin.v2.models.WebhookResponse;
import com.ultracart.admin.v2.models.WebhookSampleRequestResponse;
import com.ultracart.admin.v2.models.WebhooksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
    private ApiClient apiClient;

    public WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteWebhook
     * @param webhookOid The webhook oid to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookCall(Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}"
            .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebhookValidateBeforeCall(Integer webhookOid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling deleteWebhook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWebhookCall(webhookOid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a webhook
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWebhook(Integer webhookOid) throws ApiException {
        deleteWebhookWithHttpInfo(webhookOid);
    }

    /**
     * Delete a webhook
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWebhookWithHttpInfo(Integer webhookOid) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(webhookOid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a webhook (asynchronously)
     * Delete a webhook on the UltraCart account. 
     * @param webhookOid The webhook oid to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookAsync(Integer webhookOid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(webhookOid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWebhookByUrl
     * @param webhook Webhook to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookByUrlCall(Webhook webhook, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhook;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWebhookByUrlValidateBeforeCall(Webhook webhook, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling deleteWebhookByUrl(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWebhookByUrlCall(webhook, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a webhook by URL
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * @param webhook Webhook to delete (required)
     * @return WebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookResponse deleteWebhookByUrl(Webhook webhook) throws ApiException {
        ApiResponse<WebhookResponse> resp = deleteWebhookByUrlWithHttpInfo(webhook);
        return resp.getData();
    }

    /**
     * Delete a webhook by URL
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * @param webhook Webhook to delete (required)
     * @return ApiResponse&lt;WebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookResponse> deleteWebhookByUrlWithHttpInfo(Webhook webhook) throws ApiException {
        com.squareup.okhttp.Call call = deleteWebhookByUrlValidateBeforeCall(webhook, null, null);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a webhook by URL (asynchronously)
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * @param webhook Webhook to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWebhookByUrlAsync(Webhook webhook, final ApiCallback<WebhookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWebhookByUrlValidateBeforeCall(webhook, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookLog
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogCall(Integer webhookOid, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}"
            .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()))
            .replaceAll("\\{" + "requestId" + "\\}", apiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookLogValidateBeforeCall(Integer webhookOid, String requestId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling getWebhookLog(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getWebhookLog(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWebhookLogCall(webhookOid, requestId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an individual log
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @return WebhookLogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookLogResponse getWebhookLog(Integer webhookOid, String requestId) throws ApiException {
        ApiResponse<WebhookLogResponse> resp = getWebhookLogWithHttpInfo(webhookOid, requestId);
        return resp.getData();
    }

    /**
     * Retrieve an individual log
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @return ApiResponse&lt;WebhookLogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookLogResponse> getWebhookLogWithHttpInfo(Integer webhookOid, String requestId) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookLogValidateBeforeCall(webhookOid, requestId, null, null);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an individual log (asynchronously)
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param webhookOid The webhook oid that owns the log. (required)
     * @param requestId The request id associated with the log to view. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogAsync(Integer webhookOid, String requestId, final ApiCallback<WebhookLogResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookLogValidateBeforeCall(webhookOid, requestId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookLogResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhookLogSummaries
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch log summaries that have been delivered since this date/time. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogSummariesCall(Integer webhookOid, Integer limit, Integer offset, String since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/logs"
            .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_since", since));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhookLogSummariesValidateBeforeCall(Integer webhookOid, Integer limit, Integer offset, String since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling getWebhookLogSummaries(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWebhookLogSummariesCall(webhookOid, limit, offset, since, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the log summaries
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch log summaries that have been delivered since this date/time. (optional)
     * @return WebhookLogSummariesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookLogSummariesResponse getWebhookLogSummaries(Integer webhookOid, Integer limit, Integer offset, String since) throws ApiException {
        ApiResponse<WebhookLogSummariesResponse> resp = getWebhookLogSummariesWithHttpInfo(webhookOid, limit, offset, since);
        return resp.getData();
    }

    /**
     * Retrieve the log summaries
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch log summaries that have been delivered since this date/time. (optional)
     * @return ApiResponse&lt;WebhookLogSummariesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookLogSummariesResponse> getWebhookLogSummariesWithHttpInfo(Integer webhookOid, Integer limit, Integer offset, String since) throws ApiException {
        com.squareup.okhttp.Call call = getWebhookLogSummariesValidateBeforeCall(webhookOid, limit, offset, since, null, null);
        Type localVarReturnType = new TypeToken<WebhookLogSummariesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the log summaries (asynchronously)
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param webhookOid The webhook oid to retrieve log summaries for. (required)
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param since Fetch log summaries that have been delivered since this date/time. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhookLogSummariesAsync(Integer webhookOid, Integer limit, Integer offset, String since, final ApiCallback<WebhookLogSummariesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhookLogSummariesValidateBeforeCall(webhookOid, limit, offset, since, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookLogSummariesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWebhooks
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the webhooks.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWebhooksCall(Integer limit, Integer offset, String sort, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_sort", sort));
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWebhooksValidateBeforeCall(Integer limit, Integer offset, String sort, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWebhooksCall(limit, offset, sort, placeholders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve webhooks
     * Retrieves the webhooks associated with this application. 
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the webhooks.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return WebhooksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhooksResponse getWebhooks(Integer limit, Integer offset, String sort, Boolean placeholders) throws ApiException {
        ApiResponse<WebhooksResponse> resp = getWebhooksWithHttpInfo(limit, offset, sort, placeholders);
        return resp.getData();
    }

    /**
     * Retrieve webhooks
     * Retrieves the webhooks associated with this application. 
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the webhooks.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;WebhooksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhooksResponse> getWebhooksWithHttpInfo(Integer limit, Integer offset, String sort, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = getWebhooksValidateBeforeCall(limit, offset, sort, placeholders, null, null);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve webhooks (asynchronously)
     * Retrieves the webhooks associated with this application. 
     * @param limit The maximum number of records to return on this one API call. (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param sort The sort order of the webhooks.  See documentation for examples (optional)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWebhooksAsync(Integer limit, Integer offset, String sort, Boolean placeholders, final ApiCallback<WebhooksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWebhooksValidateBeforeCall(limit, offset, sort, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhooksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertWebhook
     * @param webhook Webhook to create (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertWebhookCall(Webhook webhook, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhook;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertWebhookValidateBeforeCall(Webhook webhook, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling insertWebhook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertWebhookCall(webhook, placeholders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a webhook
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * @param webhook Webhook to create (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return WebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookResponse insertWebhook(Webhook webhook, Boolean placeholders) throws ApiException {
        ApiResponse<WebhookResponse> resp = insertWebhookWithHttpInfo(webhook, placeholders);
        return resp.getData();
    }

    /**
     * Add a webhook
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * @param webhook Webhook to create (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;WebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookResponse> insertWebhookWithHttpInfo(Webhook webhook, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = insertWebhookValidateBeforeCall(webhook, placeholders, null, null);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a webhook (asynchronously)
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * @param webhook Webhook to create (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertWebhookAsync(Webhook webhook, Boolean placeholders, final ApiCallback<WebhookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertWebhookValidateBeforeCall(webhook, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resendEvent
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resendEventCall(Integer webhookOid, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}"
            .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()))
            .replaceAll("\\{" + "eventName" + "\\}", apiClient.escapeString(eventName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resendEventValidateBeforeCall(Integer webhookOid, String eventName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling resendEvent(Async)");
        }
        
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling resendEvent(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resendEventCall(webhookOid, eventName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resend events to the webhook endpoint.
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @return WebhookSampleRequestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookSampleRequestResponse resendEvent(Integer webhookOid, String eventName) throws ApiException {
        ApiResponse<WebhookSampleRequestResponse> resp = resendEventWithHttpInfo(webhookOid, eventName);
        return resp.getData();
    }

    /**
     * Resend events to the webhook endpoint.
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @return ApiResponse&lt;WebhookSampleRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookSampleRequestResponse> resendEventWithHttpInfo(Integer webhookOid, String eventName) throws ApiException {
        com.squareup.okhttp.Call call = resendEventValidateBeforeCall(webhookOid, eventName, null, null);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend events to the webhook endpoint. (asynchronously)
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param webhookOid The webhook oid that is receiving the reflowed events. (required)
     * @param eventName The event to reflow. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resendEventAsync(Integer webhookOid, String eventName, final ApiCallback<WebhookSampleRequestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resendEventValidateBeforeCall(webhookOid, eventName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookSampleRequestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWebhook
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWebhookCall(Webhook webhook, Integer webhookOid, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webhook;
        
        // create path and map variables
        String localVarPath = "/webhook/webhooks/{webhookOid}"
            .replaceAll("\\{" + "webhookOid" + "\\}", apiClient.escapeString(webhookOid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeholders != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_placeholders", placeholders));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json; charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWebhookValidateBeforeCall(Webhook webhook, Integer webhookOid, Boolean placeholders, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webhook' is set
        if (webhook == null) {
            throw new ApiException("Missing the required parameter 'webhook' when calling updateWebhook(Async)");
        }
        
        // verify the required parameter 'webhookOid' is set
        if (webhookOid == null) {
            throw new ApiException("Missing the required parameter 'webhookOid' when calling updateWebhook(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateWebhookCall(webhook, webhookOid, placeholders, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a webhook
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return WebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebhookResponse updateWebhook(Webhook webhook, Integer webhookOid, Boolean placeholders) throws ApiException {
        ApiResponse<WebhookResponse> resp = updateWebhookWithHttpInfo(webhook, webhookOid, placeholders);
        return resp.getData();
    }

    /**
     * Update a webhook
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @return ApiResponse&lt;WebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebhookResponse> updateWebhookWithHttpInfo(Webhook webhook, Integer webhookOid, Boolean placeholders) throws ApiException {
        com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(webhook, webhookOid, placeholders, null, null);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a webhook (asynchronously)
     * Update a webhook on the account 
     * @param webhook Webhook to update (required)
     * @param webhookOid The webhook oid to update. (required)
     * @param placeholders Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWebhookAsync(Webhook webhook, Integer webhookOid, Boolean placeholders, final ApiCallback<WebhookResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(webhook, webhookOid, placeholders, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebhookResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

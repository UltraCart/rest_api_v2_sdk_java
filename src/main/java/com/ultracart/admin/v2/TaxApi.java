/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ultracart.admin.v2;

import com.ultracart.admin.v2.swagger.ApiCallback;
import com.ultracart.admin.v2.swagger.ApiClient;
import com.ultracart.admin.v2.swagger.ApiException;
import com.ultracart.admin.v2.swagger.ApiResponse;
import com.ultracart.admin.v2.swagger.Configuration;
import com.ultracart.admin.v2.swagger.Pair;
import com.ultracart.admin.v2.swagger.ProgressRequestBody;
import com.ultracart.admin.v2.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ultracart.admin.v2.models.ErrorResponse;
import com.ultracart.admin.v2.models.TaxCity;
import com.ultracart.admin.v2.models.TaxCountry;
import com.ultracart.admin.v2.models.TaxCounty;
import com.ultracart.admin.v2.models.TaxPostalCode;
import com.ultracart.admin.v2.models.TaxProviderActivateResult;
import com.ultracart.admin.v2.models.TaxProviderAvalara;
import com.ultracart.admin.v2.models.TaxProviderAvalaraCompaniesResult;
import com.ultracart.admin.v2.models.TaxProviderSelf;
import com.ultracart.admin.v2.models.TaxProviderSelfCountriesResponse;
import com.ultracart.admin.v2.models.TaxProviderSelfRegionsResponse;
import com.ultracart.admin.v2.models.TaxProviderSovos;
import com.ultracart.admin.v2.models.TaxProviderTaxJar;
import com.ultracart.admin.v2.models.TaxProviderTestResult;
import com.ultracart.admin.v2.models.TaxProviderUltraCart;
import com.ultracart.admin.v2.models.TaxProvidersResponse;
import com.ultracart.admin.v2.models.TaxState;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxApi {
    private ApiClient apiClient;

    public TaxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

  public TaxApi(String apiKey){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");
      this.apiClient = client;
  }


  public TaxApi(String apiKey, boolean verifySsl, boolean debugging){
      ApiClient client = new ApiClient();

      com.ultracart.admin.v2.swagger.auth.ApiKeyAuth ultraCartSimpleApiKey = (com.ultracart.admin.v2.swagger.auth.ApiKeyAuth) client.getAuthentication("ultraCartSimpleApiKey");
      ultraCartSimpleApiKey.setApiKey(apiKey);

      client.addDefaultHeader("X-UltraCart-Api-Version", "2017-03-01");

      client.setDebugging(debugging);
      client.setVerifyingSsl(verifySsl);
      this.apiClient = client;
  }


    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTaxProviderSelfCity
     * @param city The city being deleted. (required)
     * @param taxCity tax city to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCityCall(String city, TaxCity taxCity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCity;

        // create path and map variables
        String localVarPath = "/tax/providers/self/city/{city}"
            .replaceAll("\\{" + "city" + "\\}", apiClient.escapeString(city.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaxProviderSelfCityValidateBeforeCall(String city, TaxCity taxCity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling deleteTaxProviderSelfCity(Async)");
        }
        
        // verify the required parameter 'taxCity' is set
        if (taxCity == null) {
            throw new ApiException("Missing the required parameter 'taxCity' when calling deleteTaxProviderSelfCity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCityCall(city, taxCity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Self tax provider city
     * Deletes a Self tax provider city. 
     * @param city The city being deleted. (required)
     * @param taxCity tax city to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxProviderSelfCity(String city, TaxCity taxCity) throws ApiException {
        deleteTaxProviderSelfCityWithHttpInfo(city, taxCity);
    }

    /**
     * Deletes a Self tax provider city
     * Deletes a Self tax provider city. 
     * @param city The city being deleted. (required)
     * @param taxCity tax city to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxProviderSelfCityWithHttpInfo(String city, TaxCity taxCity) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxProviderSelfCityValidateBeforeCall(city, taxCity, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Self tax provider city (asynchronously)
     * Deletes a Self tax provider city. 
     * @param city The city being deleted. (required)
     * @param taxCity tax city to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCityAsync(String city, TaxCity taxCity, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCityValidateBeforeCall(city, taxCity, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTaxProviderSelfCountry
     * @param countryCode The country code being deleted. (required)
     * @param taxCountry tax country to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCountryCall(String countryCode, TaxCountry taxCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCountry;

        // create path and map variables
        String localVarPath = "/tax/providers/self/country/{countryCode}"
            .replaceAll("\\{" + "countryCode" + "\\}", apiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaxProviderSelfCountryValidateBeforeCall(String countryCode, TaxCountry taxCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling deleteTaxProviderSelfCountry(Async)");
        }
        
        // verify the required parameter 'taxCountry' is set
        if (taxCountry == null) {
            throw new ApiException("Missing the required parameter 'taxCountry' when calling deleteTaxProviderSelfCountry(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountryCall(countryCode, taxCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Self tax provider country
     * Deletes a Self tax provider country. 
     * @param countryCode The country code being deleted. (required)
     * @param taxCountry tax country to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxProviderSelfCountry(String countryCode, TaxCountry taxCountry) throws ApiException {
        deleteTaxProviderSelfCountryWithHttpInfo(countryCode, taxCountry);
    }

    /**
     * Deletes a Self tax provider country
     * Deletes a Self tax provider country. 
     * @param countryCode The country code being deleted. (required)
     * @param taxCountry tax country to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxProviderSelfCountryWithHttpInfo(String countryCode, TaxCountry taxCountry) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountryValidateBeforeCall(countryCode, taxCountry, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Self tax provider country (asynchronously)
     * Deletes a Self tax provider country. 
     * @param countryCode The country code being deleted. (required)
     * @param taxCountry tax country to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCountryAsync(String countryCode, TaxCountry taxCountry, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountryValidateBeforeCall(countryCode, taxCountry, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTaxProviderSelfCounty
     * @param county The county being deleted. (required)
     * @param taxCounty tax county to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCountyCall(String county, TaxCounty taxCounty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCounty;

        // create path and map variables
        String localVarPath = "/tax/providers/self/county/{county}"
            .replaceAll("\\{" + "county" + "\\}", apiClient.escapeString(county.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaxProviderSelfCountyValidateBeforeCall(String county, TaxCounty taxCounty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'county' is set
        if (county == null) {
            throw new ApiException("Missing the required parameter 'county' when calling deleteTaxProviderSelfCounty(Async)");
        }
        
        // verify the required parameter 'taxCounty' is set
        if (taxCounty == null) {
            throw new ApiException("Missing the required parameter 'taxCounty' when calling deleteTaxProviderSelfCounty(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountyCall(county, taxCounty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Self tax provider county
     * Deletes a Self tax provider county. 
     * @param county The county being deleted. (required)
     * @param taxCounty tax county to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxProviderSelfCounty(String county, TaxCounty taxCounty) throws ApiException {
        deleteTaxProviderSelfCountyWithHttpInfo(county, taxCounty);
    }

    /**
     * Deletes a Self tax provider county
     * Deletes a Self tax provider county. 
     * @param county The county being deleted. (required)
     * @param taxCounty tax county to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxProviderSelfCountyWithHttpInfo(String county, TaxCounty taxCounty) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountyValidateBeforeCall(county, taxCounty, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Self tax provider county (asynchronously)
     * Deletes a Self tax provider county. 
     * @param county The county being deleted. (required)
     * @param taxCounty tax county to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfCountyAsync(String county, TaxCounty taxCounty, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxProviderSelfCountyValidateBeforeCall(county, taxCounty, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTaxProviderSelfPostalCode
     * @param postalCode The postal code being deleted. (required)
     * @param taxPostalCode tax postal code to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfPostalCodeCall(String postalCode, TaxPostalCode taxPostalCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxPostalCode;

        // create path and map variables
        String localVarPath = "/tax/providers/self/postalCode/{postal_code}"
            .replaceAll("\\{" + "postal_code" + "\\}", apiClient.escapeString(postalCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaxProviderSelfPostalCodeValidateBeforeCall(String postalCode, TaxPostalCode taxPostalCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'postalCode' is set
        if (postalCode == null) {
            throw new ApiException("Missing the required parameter 'postalCode' when calling deleteTaxProviderSelfPostalCode(Async)");
        }
        
        // verify the required parameter 'taxPostalCode' is set
        if (taxPostalCode == null) {
            throw new ApiException("Missing the required parameter 'taxPostalCode' when calling deleteTaxProviderSelfPostalCode(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaxProviderSelfPostalCodeCall(postalCode, taxPostalCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Self tax provider postalCode
     * Deletes a Self tax provider postalCode. 
     * @param postalCode The postal code being deleted. (required)
     * @param taxPostalCode tax postal code to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxProviderSelfPostalCode(String postalCode, TaxPostalCode taxPostalCode) throws ApiException {
        deleteTaxProviderSelfPostalCodeWithHttpInfo(postalCode, taxPostalCode);
    }

    /**
     * Deletes a Self tax provider postalCode
     * Deletes a Self tax provider postalCode. 
     * @param postalCode The postal code being deleted. (required)
     * @param taxPostalCode tax postal code to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxProviderSelfPostalCodeWithHttpInfo(String postalCode, TaxPostalCode taxPostalCode) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxProviderSelfPostalCodeValidateBeforeCall(postalCode, taxPostalCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Self tax provider postalCode (asynchronously)
     * Deletes a Self tax provider postalCode. 
     * @param postalCode The postal code being deleted. (required)
     * @param taxPostalCode tax postal code to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfPostalCodeAsync(String postalCode, TaxPostalCode taxPostalCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxProviderSelfPostalCodeValidateBeforeCall(postalCode, taxPostalCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTaxProviderSelfState
     * @param stateCode The state code being deleted. (required)
     * @param taxState tax state to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfStateCall(String stateCode, TaxState taxState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxState;

        // create path and map variables
        String localVarPath = "/tax/providers/self/state/{stateCode}"
            .replaceAll("\\{" + "stateCode" + "\\}", apiClient.escapeString(stateCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTaxProviderSelfStateValidateBeforeCall(String stateCode, TaxState taxState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stateCode' is set
        if (stateCode == null) {
            throw new ApiException("Missing the required parameter 'stateCode' when calling deleteTaxProviderSelfState(Async)");
        }
        
        // verify the required parameter 'taxState' is set
        if (taxState == null) {
            throw new ApiException("Missing the required parameter 'taxState' when calling deleteTaxProviderSelfState(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTaxProviderSelfStateCall(stateCode, taxState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Self tax provider state
     * Deletes a Self tax provider state. 
     * @param stateCode The state code being deleted. (required)
     * @param taxState tax state to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxProviderSelfState(String stateCode, TaxState taxState) throws ApiException {
        deleteTaxProviderSelfStateWithHttpInfo(stateCode, taxState);
    }

    /**
     * Deletes a Self tax provider state
     * Deletes a Self tax provider state. 
     * @param stateCode The state code being deleted. (required)
     * @param taxState tax state to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxProviderSelfStateWithHttpInfo(String stateCode, TaxState taxState) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxProviderSelfStateValidateBeforeCall(stateCode, taxState, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a Self tax provider state (asynchronously)
     * Deletes a Self tax provider state. 
     * @param stateCode The state code being deleted. (required)
     * @param taxState tax state to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxProviderSelfStateAsync(String stateCode, TaxState taxState, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxProviderSelfStateValidateBeforeCall(stateCode, taxState, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderAvalara
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/avalara";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderAvalaraValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderAvalaraCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the Avalara tax provider
     * Retrieves the Avalara tax provider. 
     * @return TaxProviderAvalara
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderAvalara getTaxProviderAvalara() throws ApiException {
        ApiResponse<TaxProviderAvalara> resp = getTaxProviderAvalaraWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the Avalara tax provider
     * Retrieves the Avalara tax provider. 
     * @return ApiResponse&lt;TaxProviderAvalara&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderAvalara> getTaxProviderAvalaraWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderAvalaraValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderAvalara>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the Avalara tax provider (asynchronously)
     * Retrieves the Avalara tax provider. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraAsync(final ApiCallback<TaxProviderAvalara> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderAvalaraValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderAvalara>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderAvalaraCompanies
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraCompaniesCall(TaxProviderAvalara taxProviderAvalara, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderAvalara;

        // create path and map variables
        String localVarPath = "/tax/providers/avalara/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderAvalaraCompaniesValidateBeforeCall(TaxProviderAvalara taxProviderAvalara, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderAvalara' is set
        if (taxProviderAvalara == null) {
            throw new ApiException("Missing the required parameter 'taxProviderAvalara' when calling getTaxProviderAvalaraCompanies(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaxProviderAvalaraCompaniesCall(taxProviderAvalara, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns Avalara Tax companies configured by the merchant
     * Returns Avalara Tax companies configured by the merchant 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @return TaxProviderAvalaraCompaniesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderAvalaraCompaniesResult getTaxProviderAvalaraCompanies(TaxProviderAvalara taxProviderAvalara) throws ApiException {
        ApiResponse<TaxProviderAvalaraCompaniesResult> resp = getTaxProviderAvalaraCompaniesWithHttpInfo(taxProviderAvalara);
        return resp.getData();
    }

    /**
     * Returns Avalara Tax companies configured by the merchant
     * Returns Avalara Tax companies configured by the merchant 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @return ApiResponse&lt;TaxProviderAvalaraCompaniesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderAvalaraCompaniesResult> getTaxProviderAvalaraCompaniesWithHttpInfo(TaxProviderAvalara taxProviderAvalara) throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderAvalaraCompaniesValidateBeforeCall(taxProviderAvalara, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderAvalaraCompaniesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns Avalara Tax companies configured by the merchant (asynchronously)
     * Returns Avalara Tax companies configured by the merchant 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraCompaniesAsync(TaxProviderAvalara taxProviderAvalara, final ApiCallback<TaxProviderAvalaraCompaniesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderAvalaraCompaniesValidateBeforeCall(taxProviderAvalara, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderAvalaraCompaniesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderAvalaraTest
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraTestCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/avalara/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderAvalaraTestValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderAvalaraTestCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attempts to connect to Avalara and returns back the response
     * Attempts to connect to Avalara and returns back the response. 
     * @return TaxProviderTestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderTestResult getTaxProviderAvalaraTest() throws ApiException {
        ApiResponse<TaxProviderTestResult> resp = getTaxProviderAvalaraTestWithHttpInfo();
        return resp.getData();
    }

    /**
     * Attempts to connect to Avalara and returns back the response
     * Attempts to connect to Avalara and returns back the response. 
     * @return ApiResponse&lt;TaxProviderTestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderTestResult> getTaxProviderAvalaraTestWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderAvalaraTestValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attempts to connect to Avalara and returns back the response (asynchronously)
     * Attempts to connect to Avalara and returns back the response. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderAvalaraTestAsync(final ApiCallback<TaxProviderTestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderAvalaraTestValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderSelf
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderSelfValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderSelfCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the Self tax provider
     * Retrieves the Self tax provider. 
     * @return TaxProviderSelf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSelf getTaxProviderSelf() throws ApiException {
        ApiResponse<TaxProviderSelf> resp = getTaxProviderSelfWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the Self tax provider
     * Retrieves the Self tax provider. 
     * @return ApiResponse&lt;TaxProviderSelf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSelf> getTaxProviderSelfWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderSelfValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSelf>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the Self tax provider (asynchronously)
     * Retrieves the Self tax provider. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfAsync(final ApiCallback<TaxProviderSelf> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderSelfValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSelf>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderSelfCountries
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfCountriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/self/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderSelfCountriesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderSelfCountriesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the Self tax provider countries
     * Retrieves the Self tax provider countries. 
     * @return TaxProviderSelfCountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSelfCountriesResponse getTaxProviderSelfCountries() throws ApiException {
        ApiResponse<TaxProviderSelfCountriesResponse> resp = getTaxProviderSelfCountriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the Self tax provider countries
     * Retrieves the Self tax provider countries. 
     * @return ApiResponse&lt;TaxProviderSelfCountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSelfCountriesResponse> getTaxProviderSelfCountriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderSelfCountriesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSelfCountriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the Self tax provider countries (asynchronously)
     * Retrieves the Self tax provider countries. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfCountriesAsync(final ApiCallback<TaxProviderSelfCountriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderSelfCountriesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSelfCountriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderSelfRegionsByCountryCode
     * @param countryCode The country code regions desired. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfRegionsByCountryCodeCall(String countryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/self/regions/{countryCode}"
            .replaceAll("\\{" + "countryCode" + "\\}", apiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderSelfRegionsByCountryCodeValidateBeforeCall(String countryCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getTaxProviderSelfRegionsByCountryCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getTaxProviderSelfRegionsByCountryCodeCall(countryCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the Self tax provider regions for a given country code
     * Retrieves the Self tax provider regions for a given country code. 
     * @param countryCode The country code regions desired. (required)
     * @return TaxProviderSelfRegionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSelfRegionsResponse getTaxProviderSelfRegionsByCountryCode(String countryCode) throws ApiException {
        ApiResponse<TaxProviderSelfRegionsResponse> resp = getTaxProviderSelfRegionsByCountryCodeWithHttpInfo(countryCode);
        return resp.getData();
    }

    /**
     * Retrieve the Self tax provider regions for a given country code
     * Retrieves the Self tax provider regions for a given country code. 
     * @param countryCode The country code regions desired. (required)
     * @return ApiResponse&lt;TaxProviderSelfRegionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSelfRegionsResponse> getTaxProviderSelfRegionsByCountryCodeWithHttpInfo(String countryCode) throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderSelfRegionsByCountryCodeValidateBeforeCall(countryCode, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSelfRegionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the Self tax provider regions for a given country code (asynchronously)
     * Retrieves the Self tax provider regions for a given country code. 
     * @param countryCode The country code regions desired. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSelfRegionsByCountryCodeAsync(String countryCode, final ApiCallback<TaxProviderSelfRegionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderSelfRegionsByCountryCodeValidateBeforeCall(countryCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSelfRegionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderSovos
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSovosCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/sovos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderSovosValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderSovosCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the Sovos tax provider
     * Retrieves the Sovos tax provider. 
     * @return TaxProviderSovos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSovos getTaxProviderSovos() throws ApiException {
        ApiResponse<TaxProviderSovos> resp = getTaxProviderSovosWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the Sovos tax provider
     * Retrieves the Sovos tax provider. 
     * @return ApiResponse&lt;TaxProviderSovos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSovos> getTaxProviderSovosWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderSovosValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSovos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the Sovos tax provider (asynchronously)
     * Retrieves the Sovos tax provider. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSovosAsync(final ApiCallback<TaxProviderSovos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderSovosValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSovos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderSovosTest
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSovosTestCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/sovos/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderSovosTestValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderSovosTestCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attempts to connect to Sovos and returns back the response
     * Attempts to connect to Sovos and returns back the response. 
     * @return TaxProviderTestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderTestResult getTaxProviderSovosTest() throws ApiException {
        ApiResponse<TaxProviderTestResult> resp = getTaxProviderSovosTestWithHttpInfo();
        return resp.getData();
    }

    /**
     * Attempts to connect to Sovos and returns back the response
     * Attempts to connect to Sovos and returns back the response. 
     * @return ApiResponse&lt;TaxProviderTestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderTestResult> getTaxProviderSovosTestWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderSovosTestValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attempts to connect to Sovos and returns back the response (asynchronously)
     * Attempts to connect to Sovos and returns back the response. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderSovosTestAsync(final ApiCallback<TaxProviderTestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderSovosTestValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderTaxJar
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderTaxJarCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/taxjar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderTaxJarValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderTaxJarCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the TaxJar tax provider
     * Retrieves the TaxJar tax provider. 
     * @return TaxProviderTaxJar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderTaxJar getTaxProviderTaxJar() throws ApiException {
        ApiResponse<TaxProviderTaxJar> resp = getTaxProviderTaxJarWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the TaxJar tax provider
     * Retrieves the TaxJar tax provider. 
     * @return ApiResponse&lt;TaxProviderTaxJar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderTaxJar> getTaxProviderTaxJarWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderTaxJarValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderTaxJar>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the TaxJar tax provider (asynchronously)
     * Retrieves the TaxJar tax provider. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderTaxJarAsync(final ApiCallback<TaxProviderTaxJar> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderTaxJarValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderTaxJar>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderTaxJarTest
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderTaxJarTestCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/taxjar/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderTaxJarTestValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderTaxJarTestCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Attempts to connect to TaxJar and returns back the response
     * Attempts to connect to TaxJar and returns back the response. 
     * @return TaxProviderTestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderTestResult getTaxProviderTaxJarTest() throws ApiException {
        ApiResponse<TaxProviderTestResult> resp = getTaxProviderTaxJarTestWithHttpInfo();
        return resp.getData();
    }

    /**
     * Attempts to connect to TaxJar and returns back the response
     * Attempts to connect to TaxJar and returns back the response. 
     * @return ApiResponse&lt;TaxProviderTestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderTestResult> getTaxProviderTaxJarTestWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderTaxJarTestValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Attempts to connect to TaxJar and returns back the response (asynchronously)
     * Attempts to connect to TaxJar and returns back the response. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderTaxJarTestAsync(final ApiCallback<TaxProviderTestResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderTaxJarTestValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderTestResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviderUltraCart
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderUltraCartCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/ultracart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProviderUltraCartValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProviderUltraCartCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve the UltraCart tax provider
     * Retrieves the UltraCart tax provider. 
     * @return TaxProviderUltraCart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderUltraCart getTaxProviderUltraCart() throws ApiException {
        ApiResponse<TaxProviderUltraCart> resp = getTaxProviderUltraCartWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve the UltraCart tax provider
     * Retrieves the UltraCart tax provider. 
     * @return ApiResponse&lt;TaxProviderUltraCart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderUltraCart> getTaxProviderUltraCartWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTaxProviderUltraCartValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaxProviderUltraCart>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the UltraCart tax provider (asynchronously)
     * Retrieves the UltraCart tax provider. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProviderUltraCartAsync(final ApiCallback<TaxProviderUltraCart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProviderUltraCartValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderUltraCart>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTaxProviders
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTaxProvidersCall(Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_offset", offset));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("_expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTaxProvidersValidateBeforeCall(Integer limit, Integer offset, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTaxProvidersCall(limit, offset, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve tax methods
     * Retrieves tax methods for this account. 
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return TaxProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProvidersResponse getTaxProviders(Integer limit, Integer offset, String expand) throws ApiException {
        ApiResponse<TaxProvidersResponse> resp = getTaxProvidersWithHttpInfo(limit, offset, expand);
        return resp.getData();
    }

    /**
     * Retrieve tax methods
     * Retrieves tax methods for this account. 
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @return ApiResponse&lt;TaxProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProvidersResponse> getTaxProvidersWithHttpInfo(Integer limit, Integer offset, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getTaxProvidersValidateBeforeCall(limit, offset, expand, null, null);
        Type localVarReturnType = new TypeToken<TaxProvidersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve tax methods (asynchronously)
     * Retrieves tax methods for this account. 
     * @param limit The maximum number of records to return on this one API call. (Max 200) (optional, default to 100)
     * @param offset Pagination of the record set.  Offset is a zero based index. (optional, default to 0)
     * @param expand The object expansion to perform on the result.  See documentation for examples (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxProvidersAsync(Integer limit, Integer offset, String expand, final ApiCallback<TaxProvidersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxProvidersValidateBeforeCall(limit, offset, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProvidersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setActiveTaxProvider
     * @param providerName The tax provider to set active. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setActiveTaxProviderCall(String providerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tax/providers/setActive/{providerName}"
            .replaceAll("\\{" + "providerName" + "\\}", apiClient.escapeString(providerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setActiveTaxProviderValidateBeforeCall(String providerName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providerName' is set
        if (providerName == null) {
            throw new ApiException("Missing the required parameter 'providerName' when calling setActiveTaxProvider(Async)");
        }
        

        com.squareup.okhttp.Call call = setActiveTaxProviderCall(providerName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Toggle a tax provider to active
     * Toggle a tax provider to active. 
     * @param providerName The tax provider to set active. (required)
     * @return TaxProviderActivateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderActivateResult setActiveTaxProvider(String providerName) throws ApiException {
        ApiResponse<TaxProviderActivateResult> resp = setActiveTaxProviderWithHttpInfo(providerName);
        return resp.getData();
    }

    /**
     * Toggle a tax provider to active
     * Toggle a tax provider to active. 
     * @param providerName The tax provider to set active. (required)
     * @return ApiResponse&lt;TaxProviderActivateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderActivateResult> setActiveTaxProviderWithHttpInfo(String providerName) throws ApiException {
        com.squareup.okhttp.Call call = setActiveTaxProviderValidateBeforeCall(providerName, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderActivateResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Toggle a tax provider to active (asynchronously)
     * Toggle a tax provider to active. 
     * @param providerName The tax provider to set active. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setActiveTaxProviderAsync(String providerName, final ApiCallback<TaxProviderActivateResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setActiveTaxProviderValidateBeforeCall(providerName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderActivateResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderAvalara
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderAvalaraCall(TaxProviderAvalara taxProviderAvalara, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderAvalara;

        // create path and map variables
        String localVarPath = "/tax/providers/avalara";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderAvalaraValidateBeforeCall(TaxProviderAvalara taxProviderAvalara, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderAvalara' is set
        if (taxProviderAvalara == null) {
            throw new ApiException("Missing the required parameter 'taxProviderAvalara' when calling updateTaxProviderAvalara(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderAvalaraCall(taxProviderAvalara, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the Avalara tax provider
     * Update the Avalara tax provider. 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @return TaxProviderAvalara
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderAvalara updateTaxProviderAvalara(TaxProviderAvalara taxProviderAvalara) throws ApiException {
        ApiResponse<TaxProviderAvalara> resp = updateTaxProviderAvalaraWithHttpInfo(taxProviderAvalara);
        return resp.getData();
    }

    /**
     * Update the Avalara tax provider
     * Update the Avalara tax provider. 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @return ApiResponse&lt;TaxProviderAvalara&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderAvalara> updateTaxProviderAvalaraWithHttpInfo(TaxProviderAvalara taxProviderAvalara) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderAvalaraValidateBeforeCall(taxProviderAvalara, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderAvalara>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Avalara tax provider (asynchronously)
     * Update the Avalara tax provider. 
     * @param taxProviderAvalara TaxProviderAvalara object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderAvalaraAsync(TaxProviderAvalara taxProviderAvalara, final ApiCallback<TaxProviderAvalara> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderAvalaraValidateBeforeCall(taxProviderAvalara, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderAvalara>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelf
     * @param taxProviderSelf TaxProviderSelf object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCall(TaxProviderSelf taxProviderSelf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderSelf;

        // create path and map variables
        String localVarPath = "/tax/providers/self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfValidateBeforeCall(TaxProviderSelf taxProviderSelf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderSelf' is set
        if (taxProviderSelf == null) {
            throw new ApiException("Missing the required parameter 'taxProviderSelf' when calling updateTaxProviderSelf(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfCall(taxProviderSelf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the Self tax provider
     * Update the Self tax provider. 
     * @param taxProviderSelf TaxProviderSelf object (required)
     * @return TaxProviderSelf
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSelf updateTaxProviderSelf(TaxProviderSelf taxProviderSelf) throws ApiException {
        ApiResponse<TaxProviderSelf> resp = updateTaxProviderSelfWithHttpInfo(taxProviderSelf);
        return resp.getData();
    }

    /**
     * Update the Self tax provider
     * Update the Self tax provider. 
     * @param taxProviderSelf TaxProviderSelf object (required)
     * @return ApiResponse&lt;TaxProviderSelf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSelf> updateTaxProviderSelfWithHttpInfo(TaxProviderSelf taxProviderSelf) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfValidateBeforeCall(taxProviderSelf, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSelf>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Self tax provider (asynchronously)
     * Update the Self tax provider. 
     * @param taxProviderSelf TaxProviderSelf object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfAsync(TaxProviderSelf taxProviderSelf, final ApiCallback<TaxProviderSelf> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfValidateBeforeCall(taxProviderSelf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSelf>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelfCity
     * @param city The city being updated. (required)
     * @param taxCity tax city to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCityCall(String city, TaxCity taxCity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCity;

        // create path and map variables
        String localVarPath = "/tax/providers/self/city/{city}"
            .replaceAll("\\{" + "city" + "\\}", apiClient.escapeString(city.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfCityValidateBeforeCall(String city, TaxCity taxCity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'city' is set
        if (city == null) {
            throw new ApiException("Missing the required parameter 'city' when calling updateTaxProviderSelfCity(Async)");
        }
        
        // verify the required parameter 'taxCity' is set
        if (taxCity == null) {
            throw new ApiException("Missing the required parameter 'taxCity' when calling updateTaxProviderSelfCity(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfCityCall(city, taxCity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Self tax provider city
     * Updates a Self tax provider city. 
     * @param city The city being updated. (required)
     * @param taxCity tax city to be updated (required)
     * @return TaxCity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxCity updateTaxProviderSelfCity(String city, TaxCity taxCity) throws ApiException {
        ApiResponse<TaxCity> resp = updateTaxProviderSelfCityWithHttpInfo(city, taxCity);
        return resp.getData();
    }

    /**
     * Updates a Self tax provider city
     * Updates a Self tax provider city. 
     * @param city The city being updated. (required)
     * @param taxCity tax city to be updated (required)
     * @return ApiResponse&lt;TaxCity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxCity> updateTaxProviderSelfCityWithHttpInfo(String city, TaxCity taxCity) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfCityValidateBeforeCall(city, taxCity, null, null);
        Type localVarReturnType = new TypeToken<TaxCity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Self tax provider city (asynchronously)
     * Updates a Self tax provider city. 
     * @param city The city being updated. (required)
     * @param taxCity tax city to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCityAsync(String city, TaxCity taxCity, final ApiCallback<TaxCity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfCityValidateBeforeCall(city, taxCity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxCity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelfCountry
     * @param countryCode The country code being updated. (required)
     * @param taxCountry tax country to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCountryCall(String countryCode, TaxCountry taxCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCountry;

        // create path and map variables
        String localVarPath = "/tax/providers/self/country/{countryCode}"
            .replaceAll("\\{" + "countryCode" + "\\}", apiClient.escapeString(countryCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfCountryValidateBeforeCall(String countryCode, TaxCountry taxCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling updateTaxProviderSelfCountry(Async)");
        }
        
        // verify the required parameter 'taxCountry' is set
        if (taxCountry == null) {
            throw new ApiException("Missing the required parameter 'taxCountry' when calling updateTaxProviderSelfCountry(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfCountryCall(countryCode, taxCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Self tax provider country
     * Updates a Self tax provider country. 
     * @param countryCode The country code being updated. (required)
     * @param taxCountry tax country to be updated (required)
     * @return TaxCountry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxCountry updateTaxProviderSelfCountry(String countryCode, TaxCountry taxCountry) throws ApiException {
        ApiResponse<TaxCountry> resp = updateTaxProviderSelfCountryWithHttpInfo(countryCode, taxCountry);
        return resp.getData();
    }

    /**
     * Updates a Self tax provider country
     * Updates a Self tax provider country. 
     * @param countryCode The country code being updated. (required)
     * @param taxCountry tax country to be updated (required)
     * @return ApiResponse&lt;TaxCountry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxCountry> updateTaxProviderSelfCountryWithHttpInfo(String countryCode, TaxCountry taxCountry) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfCountryValidateBeforeCall(countryCode, taxCountry, null, null);
        Type localVarReturnType = new TypeToken<TaxCountry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Self tax provider country (asynchronously)
     * Updates a Self tax provider country. 
     * @param countryCode The country code being updated. (required)
     * @param taxCountry tax country to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCountryAsync(String countryCode, TaxCountry taxCountry, final ApiCallback<TaxCountry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfCountryValidateBeforeCall(countryCode, taxCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxCountry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelfCounty
     * @param county The county being updated. (required)
     * @param taxCounty tax county to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCountyCall(String county, TaxCounty taxCounty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxCounty;

        // create path and map variables
        String localVarPath = "/tax/providers/self/county/{county}"
            .replaceAll("\\{" + "county" + "\\}", apiClient.escapeString(county.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfCountyValidateBeforeCall(String county, TaxCounty taxCounty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'county' is set
        if (county == null) {
            throw new ApiException("Missing the required parameter 'county' when calling updateTaxProviderSelfCounty(Async)");
        }
        
        // verify the required parameter 'taxCounty' is set
        if (taxCounty == null) {
            throw new ApiException("Missing the required parameter 'taxCounty' when calling updateTaxProviderSelfCounty(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfCountyCall(county, taxCounty, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Self tax provider county
     * Updates a Self tax provider county. 
     * @param county The county being updated. (required)
     * @param taxCounty tax county to be updated (required)
     * @return TaxCounty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxCounty updateTaxProviderSelfCounty(String county, TaxCounty taxCounty) throws ApiException {
        ApiResponse<TaxCounty> resp = updateTaxProviderSelfCountyWithHttpInfo(county, taxCounty);
        return resp.getData();
    }

    /**
     * Updates a Self tax provider county
     * Updates a Self tax provider county. 
     * @param county The county being updated. (required)
     * @param taxCounty tax county to be updated (required)
     * @return ApiResponse&lt;TaxCounty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxCounty> updateTaxProviderSelfCountyWithHttpInfo(String county, TaxCounty taxCounty) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfCountyValidateBeforeCall(county, taxCounty, null, null);
        Type localVarReturnType = new TypeToken<TaxCounty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Self tax provider county (asynchronously)
     * Updates a Self tax provider county. 
     * @param county The county being updated. (required)
     * @param taxCounty tax county to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfCountyAsync(String county, TaxCounty taxCounty, final ApiCallback<TaxCounty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfCountyValidateBeforeCall(county, taxCounty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxCounty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelfPostalCode
     * @param postalCode The postal code being updated. (required)
     * @param taxPostalCode tax postal code to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfPostalCodeCall(String postalCode, TaxPostalCode taxPostalCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxPostalCode;

        // create path and map variables
        String localVarPath = "/tax/providers/self/postalCode/{postal_code}"
            .replaceAll("\\{" + "postal_code" + "\\}", apiClient.escapeString(postalCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfPostalCodeValidateBeforeCall(String postalCode, TaxPostalCode taxPostalCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'postalCode' is set
        if (postalCode == null) {
            throw new ApiException("Missing the required parameter 'postalCode' when calling updateTaxProviderSelfPostalCode(Async)");
        }
        
        // verify the required parameter 'taxPostalCode' is set
        if (taxPostalCode == null) {
            throw new ApiException("Missing the required parameter 'taxPostalCode' when calling updateTaxProviderSelfPostalCode(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfPostalCodeCall(postalCode, taxPostalCode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Self tax provider postalCode
     * Updates a Self tax provider postalCode. 
     * @param postalCode The postal code being updated. (required)
     * @param taxPostalCode tax postal code to be updated (required)
     * @return TaxPostalCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxPostalCode updateTaxProviderSelfPostalCode(String postalCode, TaxPostalCode taxPostalCode) throws ApiException {
        ApiResponse<TaxPostalCode> resp = updateTaxProviderSelfPostalCodeWithHttpInfo(postalCode, taxPostalCode);
        return resp.getData();
    }

    /**
     * Updates a Self tax provider postalCode
     * Updates a Self tax provider postalCode. 
     * @param postalCode The postal code being updated. (required)
     * @param taxPostalCode tax postal code to be updated (required)
     * @return ApiResponse&lt;TaxPostalCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxPostalCode> updateTaxProviderSelfPostalCodeWithHttpInfo(String postalCode, TaxPostalCode taxPostalCode) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfPostalCodeValidateBeforeCall(postalCode, taxPostalCode, null, null);
        Type localVarReturnType = new TypeToken<TaxPostalCode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Self tax provider postalCode (asynchronously)
     * Updates a Self tax provider postalCode. 
     * @param postalCode The postal code being updated. (required)
     * @param taxPostalCode tax postal code to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfPostalCodeAsync(String postalCode, TaxPostalCode taxPostalCode, final ApiCallback<TaxPostalCode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfPostalCodeValidateBeforeCall(postalCode, taxPostalCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxPostalCode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSelfState
     * @param stateCode The state code being updated. (required)
     * @param taxState tax state to be updated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfStateCall(String stateCode, TaxState taxState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxState;

        // create path and map variables
        String localVarPath = "/tax/providers/self/state/{stateCode}"
            .replaceAll("\\{" + "stateCode" + "\\}", apiClient.escapeString(stateCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSelfStateValidateBeforeCall(String stateCode, TaxState taxState, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stateCode' is set
        if (stateCode == null) {
            throw new ApiException("Missing the required parameter 'stateCode' when calling updateTaxProviderSelfState(Async)");
        }
        
        // verify the required parameter 'taxState' is set
        if (taxState == null) {
            throw new ApiException("Missing the required parameter 'taxState' when calling updateTaxProviderSelfState(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSelfStateCall(stateCode, taxState, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Self tax provider state
     * Updates a Self tax provider state. 
     * @param stateCode The state code being updated. (required)
     * @param taxState tax state to be updated (required)
     * @return TaxState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxState updateTaxProviderSelfState(String stateCode, TaxState taxState) throws ApiException {
        ApiResponse<TaxState> resp = updateTaxProviderSelfStateWithHttpInfo(stateCode, taxState);
        return resp.getData();
    }

    /**
     * Updates a Self tax provider state
     * Updates a Self tax provider state. 
     * @param stateCode The state code being updated. (required)
     * @param taxState tax state to be updated (required)
     * @return ApiResponse&lt;TaxState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxState> updateTaxProviderSelfStateWithHttpInfo(String stateCode, TaxState taxState) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSelfStateValidateBeforeCall(stateCode, taxState, null, null);
        Type localVarReturnType = new TypeToken<TaxState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Self tax provider state (asynchronously)
     * Updates a Self tax provider state. 
     * @param stateCode The state code being updated. (required)
     * @param taxState tax state to be updated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSelfStateAsync(String stateCode, TaxState taxState, final ApiCallback<TaxState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSelfStateValidateBeforeCall(stateCode, taxState, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderSovos
     * @param taxProviderSovos TaxProviderSovos object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSovosCall(TaxProviderSovos taxProviderSovos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderSovos;

        // create path and map variables
        String localVarPath = "/tax/providers/sovos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderSovosValidateBeforeCall(TaxProviderSovos taxProviderSovos, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderSovos' is set
        if (taxProviderSovos == null) {
            throw new ApiException("Missing the required parameter 'taxProviderSovos' when calling updateTaxProviderSovos(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderSovosCall(taxProviderSovos, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the Sovos tax provider
     * Update the Sovos tax provider. 
     * @param taxProviderSovos TaxProviderSovos object (required)
     * @return TaxProviderSovos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderSovos updateTaxProviderSovos(TaxProviderSovos taxProviderSovos) throws ApiException {
        ApiResponse<TaxProviderSovos> resp = updateTaxProviderSovosWithHttpInfo(taxProviderSovos);
        return resp.getData();
    }

    /**
     * Update the Sovos tax provider
     * Update the Sovos tax provider. 
     * @param taxProviderSovos TaxProviderSovos object (required)
     * @return ApiResponse&lt;TaxProviderSovos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderSovos> updateTaxProviderSovosWithHttpInfo(TaxProviderSovos taxProviderSovos) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderSovosValidateBeforeCall(taxProviderSovos, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderSovos>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the Sovos tax provider (asynchronously)
     * Update the Sovos tax provider. 
     * @param taxProviderSovos TaxProviderSovos object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderSovosAsync(TaxProviderSovos taxProviderSovos, final ApiCallback<TaxProviderSovos> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderSovosValidateBeforeCall(taxProviderSovos, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderSovos>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderTaxJar
     * @param taxProviderTaxJar TaxProviderTaxJar object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderTaxJarCall(TaxProviderTaxJar taxProviderTaxJar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderTaxJar;

        // create path and map variables
        String localVarPath = "/tax/providers/taxjar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderTaxJarValidateBeforeCall(TaxProviderTaxJar taxProviderTaxJar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderTaxJar' is set
        if (taxProviderTaxJar == null) {
            throw new ApiException("Missing the required parameter 'taxProviderTaxJar' when calling updateTaxProviderTaxJar(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderTaxJarCall(taxProviderTaxJar, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the TaxJar tax provider
     * Update the TaxJar tax provider. 
     * @param taxProviderTaxJar TaxProviderTaxJar object (required)
     * @return TaxProviderTaxJar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderTaxJar updateTaxProviderTaxJar(TaxProviderTaxJar taxProviderTaxJar) throws ApiException {
        ApiResponse<TaxProviderTaxJar> resp = updateTaxProviderTaxJarWithHttpInfo(taxProviderTaxJar);
        return resp.getData();
    }

    /**
     * Update the TaxJar tax provider
     * Update the TaxJar tax provider. 
     * @param taxProviderTaxJar TaxProviderTaxJar object (required)
     * @return ApiResponse&lt;TaxProviderTaxJar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderTaxJar> updateTaxProviderTaxJarWithHttpInfo(TaxProviderTaxJar taxProviderTaxJar) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderTaxJarValidateBeforeCall(taxProviderTaxJar, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderTaxJar>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the TaxJar tax provider (asynchronously)
     * Update the TaxJar tax provider. 
     * @param taxProviderTaxJar TaxProviderTaxJar object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderTaxJarAsync(TaxProviderTaxJar taxProviderTaxJar, final ApiCallback<TaxProviderTaxJar> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderTaxJarValidateBeforeCall(taxProviderTaxJar, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderTaxJar>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTaxProviderUltraCart
     * @param taxProviderUltracart TaxProviderUltraCart object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderUltraCartCall(TaxProviderUltraCart taxProviderUltracart, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxProviderUltracart;

        // create path and map variables
        String localVarPath = "/tax/providers/ultracart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ultraCartOauth", "ultraCartSimpleApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTaxProviderUltraCartValidateBeforeCall(TaxProviderUltraCart taxProviderUltracart, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'taxProviderUltracart' is set
        if (taxProviderUltracart == null) {
            throw new ApiException("Missing the required parameter 'taxProviderUltracart' when calling updateTaxProviderUltraCart(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTaxProviderUltraCartCall(taxProviderUltracart, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update the UltraCart tax provider
     * Update the UltraCart tax provider. 
     * @param taxProviderUltracart TaxProviderUltraCart object (required)
     * @return TaxProviderUltraCart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaxProviderUltraCart updateTaxProviderUltraCart(TaxProviderUltraCart taxProviderUltracart) throws ApiException {
        ApiResponse<TaxProviderUltraCart> resp = updateTaxProviderUltraCartWithHttpInfo(taxProviderUltracart);
        return resp.getData();
    }

    /**
     * Update the UltraCart tax provider
     * Update the UltraCart tax provider. 
     * @param taxProviderUltracart TaxProviderUltraCart object (required)
     * @return ApiResponse&lt;TaxProviderUltraCart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaxProviderUltraCart> updateTaxProviderUltraCartWithHttpInfo(TaxProviderUltraCart taxProviderUltracart) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxProviderUltraCartValidateBeforeCall(taxProviderUltracart, null, null);
        Type localVarReturnType = new TypeToken<TaxProviderUltraCart>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the UltraCart tax provider (asynchronously)
     * Update the UltraCart tax provider. 
     * @param taxProviderUltracart TaxProviderUltraCart object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxProviderUltraCartAsync(TaxProviderUltraCart taxProviderUltracart, final ApiCallback<TaxProviderUltraCart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxProviderUltraCartValidateBeforeCall(taxProviderUltracart, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaxProviderUltraCart>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
